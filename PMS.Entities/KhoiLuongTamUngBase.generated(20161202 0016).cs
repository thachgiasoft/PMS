
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file KhoiLuongTamUng.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'KhoiLuongTamUng' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class KhoiLuongTamUngBase : EntityBase, IKhoiLuongTamUng, IEntityId<KhoiLuongTamUngKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private KhoiLuongTamUngEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private KhoiLuongTamUngEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private KhoiLuongTamUngEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<KhoiLuongTamUng> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KhoiLuongTamUngEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KhoiLuongTamUngEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="KhoiLuongTamUngBase"/> instance.
		///</summary>
		public KhoiLuongTamUngBase()
		{
			this.entityData = new KhoiLuongTamUngEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="KhoiLuongTamUngBase"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maQuanLyGv"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_nhom"></param>
		///<param name="_soTinChi"></param>
		///<param name="_soLuong"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_tinhTrang"></param>
		///<param name="_ngayDay"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maKhoa"></param>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_maPhongHoc"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_loaiHocKy"></param>
		///<param name="_namThu"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maChucVu"></param>
		///<param name="_maHinhThucDaoTao"></param>
		///<param name="_ghiChu"></param>
		///<param name="_lopHocPhanChuyenNganh"></param>
		///<param name="_dotImport"></param>
		///<param name="_daoTaoTinChi"></param>
		///<param name="_ngonNguGiangDay"></param>
		public KhoiLuongTamUngBase(System.Int32? _maLichHoc, System.String _maQuanLyGv, 
			System.String _maLopHocPhan, System.String _namHoc, System.String _hocKy, System.String _maMonHoc, 
			System.String _tenMonHoc, System.String _nhom, System.Decimal? _soTinChi, System.Int32? _soLuong, 
			System.Byte? _maLoaiHocPhan, System.String _loaiHocPhan, System.Int32? _maBuoiHoc, 
			System.String _maLop, System.Int32? _tietBatDau, System.Decimal? _soTiet, System.Int32? _tinhTrang, 
			System.DateTime? _ngayDay, System.String _maBacDaoTao, System.String _maKhoa, 
			System.String _maNhomMonHoc, System.String _maPhongHoc, System.String _maKhoaHoc, 
			System.Byte? _loaiHocKy, System.String _namThu, System.Int32? _maHocHam, System.Int32? _maHocVi, 
			System.Int32? _maLoaiGiangVien, System.Int32? _maChucVu, System.String _maHinhThucDaoTao, 
			System.String _ghiChu, System.Boolean? _lopHocPhanChuyenNganh, System.String _dotImport, 
			System.Boolean? _daoTaoTinChi, System.String _ngonNguGiangDay)
		{
			this.entityData = new KhoiLuongTamUngEntityData();
			this.backupData = null;

			this.MaLichHoc = _maLichHoc;
			this.MaQuanLyGv = _maQuanLyGv;
			this.MaLopHocPhan = _maLopHocPhan;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaMonHoc = _maMonHoc;
			this.TenMonHoc = _tenMonHoc;
			this.Nhom = _nhom;
			this.SoTinChi = _soTinChi;
			this.SoLuong = _soLuong;
			this.MaLoaiHocPhan = _maLoaiHocPhan;
			this.LoaiHocPhan = _loaiHocPhan;
			this.MaBuoiHoc = _maBuoiHoc;
			this.MaLop = _maLop;
			this.TietBatDau = _tietBatDau;
			this.SoTiet = _soTiet;
			this.TinhTrang = _tinhTrang;
			this.NgayDay = _ngayDay;
			this.MaBacDaoTao = _maBacDaoTao;
			this.MaKhoa = _maKhoa;
			this.MaNhomMonHoc = _maNhomMonHoc;
			this.MaPhongHoc = _maPhongHoc;
			this.MaKhoaHoc = _maKhoaHoc;
			this.LoaiHocKy = _loaiHocKy;
			this.NamThu = _namThu;
			this.MaHocHam = _maHocHam;
			this.MaHocVi = _maHocVi;
			this.MaLoaiGiangVien = _maLoaiGiangVien;
			this.MaChucVu = _maChucVu;
			this.MaHinhThucDaoTao = _maHinhThucDaoTao;
			this.GhiChu = _ghiChu;
			this.LopHocPhanChuyenNganh = _lopHocPhanChuyenNganh;
			this.DotImport = _dotImport;
			this.DaoTaoTinChi = _daoTaoTinChi;
			this.NgonNguGiangDay = _ngonNguGiangDay;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="KhoiLuongTamUng"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maQuanLyGv"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_nhom"></param>
		///<param name="_soTinChi"></param>
		///<param name="_soLuong"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_tinhTrang"></param>
		///<param name="_ngayDay"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maKhoa"></param>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_maPhongHoc"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_loaiHocKy"></param>
		///<param name="_namThu"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maChucVu"></param>
		///<param name="_maHinhThucDaoTao"></param>
		///<param name="_ghiChu"></param>
		///<param name="_lopHocPhanChuyenNganh"></param>
		///<param name="_dotImport"></param>
		///<param name="_daoTaoTinChi"></param>
		///<param name="_ngonNguGiangDay"></param>
		public static KhoiLuongTamUng CreateKhoiLuongTamUng(System.Int32? _maLichHoc, System.String _maQuanLyGv, 
			System.String _maLopHocPhan, System.String _namHoc, System.String _hocKy, System.String _maMonHoc, 
			System.String _tenMonHoc, System.String _nhom, System.Decimal? _soTinChi, System.Int32? _soLuong, 
			System.Byte? _maLoaiHocPhan, System.String _loaiHocPhan, System.Int32? _maBuoiHoc, 
			System.String _maLop, System.Int32? _tietBatDau, System.Decimal? _soTiet, System.Int32? _tinhTrang, 
			System.DateTime? _ngayDay, System.String _maBacDaoTao, System.String _maKhoa, 
			System.String _maNhomMonHoc, System.String _maPhongHoc, System.String _maKhoaHoc, 
			System.Byte? _loaiHocKy, System.String _namThu, System.Int32? _maHocHam, System.Int32? _maHocVi, 
			System.Int32? _maLoaiGiangVien, System.Int32? _maChucVu, System.String _maHinhThucDaoTao, 
			System.String _ghiChu, System.Boolean? _lopHocPhanChuyenNganh, System.String _dotImport, 
			System.Boolean? _daoTaoTinChi, System.String _ngonNguGiangDay)
		{
			KhoiLuongTamUng newKhoiLuongTamUng = new KhoiLuongTamUng();
			newKhoiLuongTamUng.MaLichHoc = _maLichHoc;
			newKhoiLuongTamUng.MaQuanLyGv = _maQuanLyGv;
			newKhoiLuongTamUng.MaLopHocPhan = _maLopHocPhan;
			newKhoiLuongTamUng.NamHoc = _namHoc;
			newKhoiLuongTamUng.HocKy = _hocKy;
			newKhoiLuongTamUng.MaMonHoc = _maMonHoc;
			newKhoiLuongTamUng.TenMonHoc = _tenMonHoc;
			newKhoiLuongTamUng.Nhom = _nhom;
			newKhoiLuongTamUng.SoTinChi = _soTinChi;
			newKhoiLuongTamUng.SoLuong = _soLuong;
			newKhoiLuongTamUng.MaLoaiHocPhan = _maLoaiHocPhan;
			newKhoiLuongTamUng.LoaiHocPhan = _loaiHocPhan;
			newKhoiLuongTamUng.MaBuoiHoc = _maBuoiHoc;
			newKhoiLuongTamUng.MaLop = _maLop;
			newKhoiLuongTamUng.TietBatDau = _tietBatDau;
			newKhoiLuongTamUng.SoTiet = _soTiet;
			newKhoiLuongTamUng.TinhTrang = _tinhTrang;
			newKhoiLuongTamUng.NgayDay = _ngayDay;
			newKhoiLuongTamUng.MaBacDaoTao = _maBacDaoTao;
			newKhoiLuongTamUng.MaKhoa = _maKhoa;
			newKhoiLuongTamUng.MaNhomMonHoc = _maNhomMonHoc;
			newKhoiLuongTamUng.MaPhongHoc = _maPhongHoc;
			newKhoiLuongTamUng.MaKhoaHoc = _maKhoaHoc;
			newKhoiLuongTamUng.LoaiHocKy = _loaiHocKy;
			newKhoiLuongTamUng.NamThu = _namThu;
			newKhoiLuongTamUng.MaHocHam = _maHocHam;
			newKhoiLuongTamUng.MaHocVi = _maHocVi;
			newKhoiLuongTamUng.MaLoaiGiangVien = _maLoaiGiangVien;
			newKhoiLuongTamUng.MaChucVu = _maChucVu;
			newKhoiLuongTamUng.MaHinhThucDaoTao = _maHinhThucDaoTao;
			newKhoiLuongTamUng.GhiChu = _ghiChu;
			newKhoiLuongTamUng.LopHocPhanChuyenNganh = _lopHocPhanChuyenNganh;
			newKhoiLuongTamUng.DotImport = _dotImport;
			newKhoiLuongTamUng.DaoTaoTinChi = _daoTaoTinChi;
			newKhoiLuongTamUng.NgonNguGiangDay = _ngonNguGiangDay;
			return newKhoiLuongTamUng;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaKhoiLuong property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaKhoiLuong
		{
			get
			{
				return this.entityData.MaKhoiLuong; 
			}
			
			set
			{
				if (this.entityData.MaKhoiLuong == value)
					return;
				
                OnPropertyChanging("MaKhoiLuong");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaKhoiLuong, this.entityData.MaKhoiLuong);
				this.entityData.MaKhoiLuong = value;
				this.EntityId.MaKhoiLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaKhoiLuong, this.entityData.MaKhoiLuong);
				OnPropertyChanged("MaKhoiLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLichHoc property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLichHoc
		{
			get
			{
				return this.entityData.MaLichHoc; 
			}
			
			set
			{
				if (this.entityData.MaLichHoc == value)
					return;
				
                OnPropertyChanging("MaLichHoc");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaLichHoc, this.entityData.MaLichHoc);
				this.entityData.MaLichHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaLichHoc, this.entityData.MaLichHoc);
				OnPropertyChanged("MaLichHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaQuanLyGv property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaQuanLyGv
		{
			get
			{
				return this.entityData.MaQuanLyGv; 
			}
			
			set
			{
				if (this.entityData.MaQuanLyGv == value)
					return;
				
                OnPropertyChanging("MaQuanLyGv");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaQuanLyGv, this.entityData.MaQuanLyGv);
				this.entityData.MaQuanLyGv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaQuanLyGv, this.entityData.MaQuanLyGv);
				OnPropertyChanged("MaQuanLyGv");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(KhoiLuongTamUngColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(KhoiLuongTamUngColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this.entityData.TenMonHoc; 
			}
			
			set
			{
				if (this.entityData.TenMonHoc == value)
					return;
				
                OnPropertyChanging("TenMonHoc");                    
				OnColumnChanging(KhoiLuongTamUngColumn.TenMonHoc, this.entityData.TenMonHoc);
				this.entityData.TenMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.TenMonHoc, this.entityData.TenMonHoc);
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nhom property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Nhom
		{
			get
			{
				return this.entityData.Nhom; 
			}
			
			set
			{
				if (this.entityData.Nhom == value)
					return;
				
                OnPropertyChanging("Nhom");                    
				OnColumnChanging(KhoiLuongTamUngColumn.Nhom, this.entityData.Nhom);
				this.entityData.Nhom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.Nhom, this.entityData.Nhom);
				OnPropertyChanged("Nhom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTinChi
		{
			get
			{
				return this.entityData.SoTinChi; 
			}
			
			set
			{
				if (this.entityData.SoTinChi == value)
					return;
				
                OnPropertyChanging("SoTinChi");                    
				OnColumnChanging(KhoiLuongTamUngColumn.SoTinChi, this.entityData.SoTinChi);
				this.entityData.SoTinChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.SoTinChi, this.entityData.SoTinChi);
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoLuong property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoLuong
		{
			get
			{
				return this.entityData.SoLuong; 
			}
			
			set
			{
				if (this.entityData.SoLuong == value)
					return;
				
                OnPropertyChanging("SoLuong");                    
				OnColumnChanging(KhoiLuongTamUngColumn.SoLuong, this.entityData.SoLuong);
				this.entityData.SoLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.SoLuong, this.entityData.SoLuong);
				OnPropertyChanged("SoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? MaLoaiHocPhan
		{
			get
			{
				return this.entityData.MaLoaiHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLoaiHocPhan == value)
					return;
				
                OnPropertyChanging("MaLoaiHocPhan");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaLoaiHocPhan, this.entityData.MaLoaiHocPhan);
				this.entityData.MaLoaiHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaLoaiHocPhan, this.entityData.MaLoaiHocPhan);
				OnPropertyChanged("MaLoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String LoaiHocPhan
		{
			get
			{
				return this.entityData.LoaiHocPhan; 
			}
			
			set
			{
				if (this.entityData.LoaiHocPhan == value)
					return;
				
                OnPropertyChanging("LoaiHocPhan");                    
				OnColumnChanging(KhoiLuongTamUngColumn.LoaiHocPhan, this.entityData.LoaiHocPhan);
				this.entityData.LoaiHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.LoaiHocPhan, this.entityData.LoaiHocPhan);
				OnPropertyChanged("LoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaBuoiHoc property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaBuoiHoc
		{
			get
			{
				return this.entityData.MaBuoiHoc; 
			}
			
			set
			{
				if (this.entityData.MaBuoiHoc == value)
					return;
				
                OnPropertyChanging("MaBuoiHoc");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaBuoiHoc, this.entityData.MaBuoiHoc);
				this.entityData.MaBuoiHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaBuoiHoc, this.entityData.MaBuoiHoc);
				OnPropertyChanged("MaBuoiHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
				
                OnPropertyChanging("MaLop");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietBatDau property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietBatDau
		{
			get
			{
				return this.entityData.TietBatDau; 
			}
			
			set
			{
				if (this.entityData.TietBatDau == value)
					return;
				
                OnPropertyChanging("TietBatDau");                    
				OnColumnChanging(KhoiLuongTamUngColumn.TietBatDau, this.entityData.TietBatDau);
				this.entityData.TietBatDau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.TietBatDau, this.entityData.TietBatDau);
				OnPropertyChanged("TietBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTiet
		{
			get
			{
				return this.entityData.SoTiet; 
			}
			
			set
			{
				if (this.entityData.SoTiet == value)
					return;
				
                OnPropertyChanging("SoTiet");                    
				OnColumnChanging(KhoiLuongTamUngColumn.SoTiet, this.entityData.SoTiet);
				this.entityData.SoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.SoTiet, this.entityData.SoTiet);
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TinhTrang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TinhTrang
		{
			get
			{
				return this.entityData.TinhTrang; 
			}
			
			set
			{
				if (this.entityData.TinhTrang == value)
					return;
				
                OnPropertyChanging("TinhTrang");                    
				OnColumnChanging(KhoiLuongTamUngColumn.TinhTrang, this.entityData.TinhTrang);
				this.entityData.TinhTrang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.TinhTrang, this.entityData.TinhTrang);
				OnPropertyChanged("TinhTrang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayDay property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayDay
		{
			get
			{
				return this.entityData.NgayDay; 
			}
			
			set
			{
				if (this.entityData.NgayDay == value)
					return;
				
                OnPropertyChanging("NgayDay");                    
				OnColumnChanging(KhoiLuongTamUngColumn.NgayDay, this.entityData.NgayDay);
				this.entityData.NgayDay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.NgayDay, this.entityData.NgayDay);
				OnPropertyChanged("NgayDay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaBacDaoTao
		{
			get
			{
				return this.entityData.MaBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaBacDaoTao == value)
					return;
				
                OnPropertyChanging("MaBacDaoTao");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				this.entityData.MaBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				OnPropertyChanged("MaBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaKhoa property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String MaKhoa
		{
			get
			{
				return this.entityData.MaKhoa; 
			}
			
			set
			{
				if (this.entityData.MaKhoa == value)
					return;
				
                OnPropertyChanging("MaKhoa");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaKhoa, this.entityData.MaKhoa);
				this.entityData.MaKhoa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaKhoa, this.entityData.MaKhoa);
				OnPropertyChanged("MaKhoa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaNhomMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaNhomMonHoc
		{
			get
			{
				return this.entityData.MaNhomMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaNhomMonHoc == value)
					return;
				
                OnPropertyChanging("MaNhomMonHoc");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaNhomMonHoc, this.entityData.MaNhomMonHoc);
				this.entityData.MaNhomMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaNhomMonHoc, this.entityData.MaNhomMonHoc);
				OnPropertyChanged("MaNhomMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaPhongHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaPhongHoc
		{
			get
			{
				return this.entityData.MaPhongHoc; 
			}
			
			set
			{
				if (this.entityData.MaPhongHoc == value)
					return;
				
                OnPropertyChanging("MaPhongHoc");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaPhongHoc, this.entityData.MaPhongHoc);
				this.entityData.MaPhongHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaPhongHoc, this.entityData.MaPhongHoc);
				OnPropertyChanged("MaPhongHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaKhoaHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaKhoaHoc
		{
			get
			{
				return this.entityData.MaKhoaHoc; 
			}
			
			set
			{
				if (this.entityData.MaKhoaHoc == value)
					return;
				
                OnPropertyChanging("MaKhoaHoc");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaKhoaHoc, this.entityData.MaKhoaHoc);
				this.entityData.MaKhoaHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaKhoaHoc, this.entityData.MaKhoaHoc);
				OnPropertyChanged("MaKhoaHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiHocKy property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? LoaiHocKy
		{
			get
			{
				return this.entityData.LoaiHocKy; 
			}
			
			set
			{
				if (this.entityData.LoaiHocKy == value)
					return;
				
                OnPropertyChanging("LoaiHocKy");                    
				OnColumnChanging(KhoiLuongTamUngColumn.LoaiHocKy, this.entityData.LoaiHocKy);
				this.entityData.LoaiHocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.LoaiHocKy, this.entityData.LoaiHocKy);
				OnPropertyChanged("LoaiHocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamThu property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamThu
		{
			get
			{
				return this.entityData.NamThu; 
			}
			
			set
			{
				if (this.entityData.NamThu == value)
					return;
				
                OnPropertyChanging("NamThu");                    
				OnColumnChanging(KhoiLuongTamUngColumn.NamThu, this.entityData.NamThu);
				this.entityData.NamThu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.NamThu, this.entityData.NamThu);
				OnPropertyChanged("NamThu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this.entityData.MaHocVi; 
			}
			
			set
			{
				if (this.entityData.MaHocVi == value)
					return;
				
                OnPropertyChanging("MaHocVi");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaHocVi, this.entityData.MaHocVi);
				this.entityData.MaHocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaHocVi, this.entityData.MaHocVi);
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this.entityData.MaLoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaLoaiGiangVien == value)
					return;
				
                OnPropertyChanging("MaLoaiGiangVien");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				this.entityData.MaLoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaChucVu property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaChucVu
		{
			get
			{
				return this.entityData.MaChucVu; 
			}
			
			set
			{
				if (this.entityData.MaChucVu == value)
					return;
				
                OnPropertyChanging("MaChucVu");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaChucVu, this.entityData.MaChucVu);
				this.entityData.MaChucVu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaChucVu, this.entityData.MaChucVu);
				OnPropertyChanged("MaChucVu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHinhThucDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaHinhThucDaoTao
		{
			get
			{
				return this.entityData.MaHinhThucDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaHinhThucDaoTao == value)
					return;
				
                OnPropertyChanging("MaHinhThucDaoTao");                    
				OnColumnChanging(KhoiLuongTamUngColumn.MaHinhThucDaoTao, this.entityData.MaHinhThucDaoTao);
				this.entityData.MaHinhThucDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.MaHinhThucDaoTao, this.entityData.MaHinhThucDaoTao);
				OnPropertyChanged("MaHinhThucDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(KhoiLuongTamUngColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LopHocPhanChuyenNganh property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? LopHocPhanChuyenNganh
		{
			get
			{
				return this.entityData.LopHocPhanChuyenNganh; 
			}
			
			set
			{
				if (this.entityData.LopHocPhanChuyenNganh == value)
					return;
				
                OnPropertyChanging("LopHocPhanChuyenNganh");                    
				OnColumnChanging(KhoiLuongTamUngColumn.LopHocPhanChuyenNganh, this.entityData.LopHocPhanChuyenNganh);
				this.entityData.LopHocPhanChuyenNganh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.LopHocPhanChuyenNganh, this.entityData.LopHocPhanChuyenNganh);
				OnPropertyChanged("LopHocPhanChuyenNganh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotImport property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String DotImport
		{
			get
			{
				return this.entityData.DotImport; 
			}
			
			set
			{
				if (this.entityData.DotImport == value)
					return;
				
                OnPropertyChanging("DotImport");                    
				OnColumnChanging(KhoiLuongTamUngColumn.DotImport, this.entityData.DotImport);
				this.entityData.DotImport = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.DotImport, this.entityData.DotImport);
				OnPropertyChanged("DotImport");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaoTaoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DaoTaoTinChi
		{
			get
			{
				return this.entityData.DaoTaoTinChi; 
			}
			
			set
			{
				if (this.entityData.DaoTaoTinChi == value)
					return;
				
                OnPropertyChanging("DaoTaoTinChi");                    
				OnColumnChanging(KhoiLuongTamUngColumn.DaoTaoTinChi, this.entityData.DaoTaoTinChi);
				this.entityData.DaoTaoTinChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.DaoTaoTinChi, this.entityData.DaoTaoTinChi);
				OnPropertyChanged("DaoTaoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgonNguGiangDay property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgonNguGiangDay
		{
			get
			{
				return this.entityData.NgonNguGiangDay; 
			}
			
			set
			{
				if (this.entityData.NgonNguGiangDay == value)
					return;
				
                OnPropertyChanging("NgonNguGiangDay");                    
				OnColumnChanging(KhoiLuongTamUngColumn.NgonNguGiangDay, this.entityData.NgonNguGiangDay);
				this.entityData.NgonNguGiangDay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongTamUngColumn.NgonNguGiangDay, this.entityData.NgonNguGiangDay);
				OnPropertyChanged("NgonNguGiangDay");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of QuyDoiKhoiLuongTamUng objects
		///	which are related to this object through the relation FK_QuyDoiKhoiLuongTamUng_KhoiLuongTamUng
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<QuyDoiKhoiLuongTamUng> QuyDoiKhoiLuongTamUngCollection
		{
			get { return entityData.QuyDoiKhoiLuongTamUngCollection; }
			set { entityData.QuyDoiKhoiLuongTamUngCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaQuanLyGv", "Ma Quan Ly Gv", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenMonHoc", "Ten Mon Hoc", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Nhom", "Nhom", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LoaiHocPhan", "Loai Hoc Phan", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaBacDaoTao", "Ma Bac Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaKhoa", "Ma Khoa", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaNhomMonHoc", "Ma Nhom Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaPhongHoc", "Ma Phong Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaKhoaHoc", "Ma Khoa Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamThu", "Nam Thu", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaHinhThucDaoTao", "Ma Hinh Thuc Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GhiChu", "Ghi Chu", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DotImport", "Dot Import", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgonNguGiangDay", "Ngon Ngu Giang Day", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "KhoiLuongTamUng"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaKhoiLuong", "MaLichHoc", "MaQuanLyGv", "MaLopHocPhan", "NamHoc", "HocKy", "MaMonHoc", "TenMonHoc", "Nhom", "SoTinChi", "SoLuong", "MaLoaiHocPhan", "LoaiHocPhan", "MaBuoiHoc", "MaLop", "TietBatDau", "SoTiet", "TinhTrang", "NgayDay", "MaBacDaoTao", "MaKhoa", "MaNhomMonHoc", "MaPhongHoc", "MaKhoaHoc", "LoaiHocKy", "NamThu", "MaHocHam", "MaHocVi", "MaLoaiGiangVien", "MaChucVu", "MaHinhThucDaoTao", "GhiChu", "LopHocPhanChuyenNganh", "DotImport", "DaoTaoTinChi", "NgonNguGiangDay"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as KhoiLuongTamUngEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (KhoiLuongTamUng) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<KhoiLuongTamUng>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as KhoiLuongTamUng);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed KhoiLuongTamUng Entity 
		///</summary>
		protected virtual KhoiLuongTamUng Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			KhoiLuongTamUng copy = new KhoiLuongTamUng();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaKhoiLuong = this.MaKhoiLuong;
				copy.MaLichHoc = this.MaLichHoc;
				copy.MaQuanLyGv = this.MaQuanLyGv;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.Nhom = this.Nhom;
				copy.SoTinChi = this.SoTinChi;
				copy.SoLuong = this.SoLuong;
				copy.MaLoaiHocPhan = this.MaLoaiHocPhan;
				copy.LoaiHocPhan = this.LoaiHocPhan;
				copy.MaBuoiHoc = this.MaBuoiHoc;
				copy.MaLop = this.MaLop;
				copy.TietBatDau = this.TietBatDau;
				copy.SoTiet = this.SoTiet;
				copy.TinhTrang = this.TinhTrang;
				copy.NgayDay = this.NgayDay;
				copy.MaBacDaoTao = this.MaBacDaoTao;
				copy.MaKhoa = this.MaKhoa;
				copy.MaNhomMonHoc = this.MaNhomMonHoc;
				copy.MaPhongHoc = this.MaPhongHoc;
				copy.MaKhoaHoc = this.MaKhoaHoc;
				copy.LoaiHocKy = this.LoaiHocKy;
				copy.NamThu = this.NamThu;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.MaChucVu = this.MaChucVu;
				copy.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
				copy.GhiChu = this.GhiChu;
				copy.LopHocPhanChuyenNganh = this.LopHocPhanChuyenNganh;
				copy.DotImport = this.DotImport;
				copy.DaoTaoTinChi = this.DaoTaoTinChi;
				copy.NgonNguGiangDay = this.NgonNguGiangDay;
			
		
			//deep copy nested objects
			copy.QuyDoiKhoiLuongTamUngCollection = (TList<QuyDoiKhoiLuongTamUng>) MakeCopyOf(this.QuyDoiKhoiLuongTamUngCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed KhoiLuongTamUng Entity 
		///</summary>
		public virtual KhoiLuongTamUng Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed KhoiLuongTamUng Entity which is a deep copy of the current entity.
		///</summary>
		public virtual KhoiLuongTamUng DeepCopy()
		{
			return EntityHelper.Clone<KhoiLuongTamUng>(this as KhoiLuongTamUng);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as KhoiLuongTamUngEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new KhoiLuongTamUngEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as KhoiLuongTamUngEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(KhoiLuongTamUngColumn column)
		{
			switch(column)
			{
					case KhoiLuongTamUngColumn.MaKhoiLuong:
					return entityData.MaKhoiLuong != _originalData.MaKhoiLuong;
					case KhoiLuongTamUngColumn.MaLichHoc:
					return entityData.MaLichHoc != _originalData.MaLichHoc;
					case KhoiLuongTamUngColumn.MaQuanLyGv:
					return entityData.MaQuanLyGv != _originalData.MaQuanLyGv;
					case KhoiLuongTamUngColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case KhoiLuongTamUngColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case KhoiLuongTamUngColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case KhoiLuongTamUngColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case KhoiLuongTamUngColumn.TenMonHoc:
					return entityData.TenMonHoc != _originalData.TenMonHoc;
					case KhoiLuongTamUngColumn.Nhom:
					return entityData.Nhom != _originalData.Nhom;
					case KhoiLuongTamUngColumn.SoTinChi:
					return entityData.SoTinChi != _originalData.SoTinChi;
					case KhoiLuongTamUngColumn.SoLuong:
					return entityData.SoLuong != _originalData.SoLuong;
					case KhoiLuongTamUngColumn.MaLoaiHocPhan:
					return entityData.MaLoaiHocPhan != _originalData.MaLoaiHocPhan;
					case KhoiLuongTamUngColumn.LoaiHocPhan:
					return entityData.LoaiHocPhan != _originalData.LoaiHocPhan;
					case KhoiLuongTamUngColumn.MaBuoiHoc:
					return entityData.MaBuoiHoc != _originalData.MaBuoiHoc;
					case KhoiLuongTamUngColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
					case KhoiLuongTamUngColumn.TietBatDau:
					return entityData.TietBatDau != _originalData.TietBatDau;
					case KhoiLuongTamUngColumn.SoTiet:
					return entityData.SoTiet != _originalData.SoTiet;
					case KhoiLuongTamUngColumn.TinhTrang:
					return entityData.TinhTrang != _originalData.TinhTrang;
					case KhoiLuongTamUngColumn.NgayDay:
					return entityData.NgayDay != _originalData.NgayDay;
					case KhoiLuongTamUngColumn.MaBacDaoTao:
					return entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
					case KhoiLuongTamUngColumn.MaKhoa:
					return entityData.MaKhoa != _originalData.MaKhoa;
					case KhoiLuongTamUngColumn.MaNhomMonHoc:
					return entityData.MaNhomMonHoc != _originalData.MaNhomMonHoc;
					case KhoiLuongTamUngColumn.MaPhongHoc:
					return entityData.MaPhongHoc != _originalData.MaPhongHoc;
					case KhoiLuongTamUngColumn.MaKhoaHoc:
					return entityData.MaKhoaHoc != _originalData.MaKhoaHoc;
					case KhoiLuongTamUngColumn.LoaiHocKy:
					return entityData.LoaiHocKy != _originalData.LoaiHocKy;
					case KhoiLuongTamUngColumn.NamThu:
					return entityData.NamThu != _originalData.NamThu;
					case KhoiLuongTamUngColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case KhoiLuongTamUngColumn.MaHocVi:
					return entityData.MaHocVi != _originalData.MaHocVi;
					case KhoiLuongTamUngColumn.MaLoaiGiangVien:
					return entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
					case KhoiLuongTamUngColumn.MaChucVu:
					return entityData.MaChucVu != _originalData.MaChucVu;
					case KhoiLuongTamUngColumn.MaHinhThucDaoTao:
					return entityData.MaHinhThucDaoTao != _originalData.MaHinhThucDaoTao;
					case KhoiLuongTamUngColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case KhoiLuongTamUngColumn.LopHocPhanChuyenNganh:
					return entityData.LopHocPhanChuyenNganh != _originalData.LopHocPhanChuyenNganh;
					case KhoiLuongTamUngColumn.DotImport:
					return entityData.DotImport != _originalData.DotImport;
					case KhoiLuongTamUngColumn.DaoTaoTinChi:
					return entityData.DaoTaoTinChi != _originalData.DaoTaoTinChi;
					case KhoiLuongTamUngColumn.NgonNguGiangDay:
					return entityData.NgonNguGiangDay != _originalData.NgonNguGiangDay;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< KhoiLuongTamUngColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaKhoiLuong != _originalData.MaKhoiLuong;
			result = result || entityData.MaLichHoc != _originalData.MaLichHoc;
			result = result || entityData.MaQuanLyGv != _originalData.MaQuanLyGv;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.TenMonHoc != _originalData.TenMonHoc;
			result = result || entityData.Nhom != _originalData.Nhom;
			result = result || entityData.SoTinChi != _originalData.SoTinChi;
			result = result || entityData.SoLuong != _originalData.SoLuong;
			result = result || entityData.MaLoaiHocPhan != _originalData.MaLoaiHocPhan;
			result = result || entityData.LoaiHocPhan != _originalData.LoaiHocPhan;
			result = result || entityData.MaBuoiHoc != _originalData.MaBuoiHoc;
			result = result || entityData.MaLop != _originalData.MaLop;
			result = result || entityData.TietBatDau != _originalData.TietBatDau;
			result = result || entityData.SoTiet != _originalData.SoTiet;
			result = result || entityData.TinhTrang != _originalData.TinhTrang;
			result = result || entityData.NgayDay != _originalData.NgayDay;
			result = result || entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
			result = result || entityData.MaKhoa != _originalData.MaKhoa;
			result = result || entityData.MaNhomMonHoc != _originalData.MaNhomMonHoc;
			result = result || entityData.MaPhongHoc != _originalData.MaPhongHoc;
			result = result || entityData.MaKhoaHoc != _originalData.MaKhoaHoc;
			result = result || entityData.LoaiHocKy != _originalData.LoaiHocKy;
			result = result || entityData.NamThu != _originalData.NamThu;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.MaHocVi != _originalData.MaHocVi;
			result = result || entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
			result = result || entityData.MaChucVu != _originalData.MaChucVu;
			result = result || entityData.MaHinhThucDaoTao != _originalData.MaHinhThucDaoTao;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.LopHocPhanChuyenNganh != _originalData.LopHocPhanChuyenNganh;
			result = result || entityData.DotImport != _originalData.DotImport;
			result = result || entityData.DaoTaoTinChi != _originalData.DaoTaoTinChi;
			result = result || entityData.NgonNguGiangDay != _originalData.NgonNguGiangDay;
			return result;
		}	
		
		///<summary>
		///  Returns a KhoiLuongTamUng Entity with the original data.
		///</summary>
		public KhoiLuongTamUng GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateKhoiLuongTamUng(
				_originalData.MaLichHoc,
				_originalData.MaQuanLyGv,
				_originalData.MaLopHocPhan,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaMonHoc,
				_originalData.TenMonHoc,
				_originalData.Nhom,
				_originalData.SoTinChi,
				_originalData.SoLuong,
				_originalData.MaLoaiHocPhan,
				_originalData.LoaiHocPhan,
				_originalData.MaBuoiHoc,
				_originalData.MaLop,
				_originalData.TietBatDau,
				_originalData.SoTiet,
				_originalData.TinhTrang,
				_originalData.NgayDay,
				_originalData.MaBacDaoTao,
				_originalData.MaKhoa,
				_originalData.MaNhomMonHoc,
				_originalData.MaPhongHoc,
				_originalData.MaKhoaHoc,
				_originalData.LoaiHocKy,
				_originalData.NamThu,
				_originalData.MaHocHam,
				_originalData.MaHocVi,
				_originalData.MaLoaiGiangVien,
				_originalData.MaChucVu,
				_originalData.MaHinhThucDaoTao,
				_originalData.GhiChu,
				_originalData.LopHocPhanChuyenNganh,
				_originalData.DotImport,
				_originalData.DaoTaoTinChi,
				_originalData.NgonNguGiangDay
				);
				
			return (KhoiLuongTamUng)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="KhoiLuongTamUngBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is KhoiLuongTamUngBase)
				return ValueEquals(this, (KhoiLuongTamUngBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="KhoiLuongTamUngBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaKhoiLuong.GetHashCode() ^ 
					((this.MaLichHoc == null) ? string.Empty : this.MaLichHoc.ToString()).GetHashCode() ^ 
					((this.MaQuanLyGv == null) ? string.Empty : this.MaQuanLyGv.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString()).GetHashCode() ^ 
					((this.Nhom == null) ? string.Empty : this.Nhom.ToString()).GetHashCode() ^ 
					((this.SoTinChi == null) ? string.Empty : this.SoTinChi.ToString()).GetHashCode() ^ 
					((this.SoLuong == null) ? string.Empty : this.SoLuong.ToString()).GetHashCode() ^ 
					((this.MaLoaiHocPhan == null) ? string.Empty : this.MaLoaiHocPhan.ToString()).GetHashCode() ^ 
					((this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString()).GetHashCode() ^ 
					((this.MaBuoiHoc == null) ? string.Empty : this.MaBuoiHoc.ToString()).GetHashCode() ^ 
					((this.MaLop == null) ? string.Empty : this.MaLop.ToString()).GetHashCode() ^ 
					((this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString()).GetHashCode() ^ 
					((this.SoTiet == null) ? string.Empty : this.SoTiet.ToString()).GetHashCode() ^ 
					((this.TinhTrang == null) ? string.Empty : this.TinhTrang.ToString()).GetHashCode() ^ 
					((this.NgayDay == null) ? string.Empty : this.NgayDay.ToString()).GetHashCode() ^ 
					((this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString()).GetHashCode() ^ 
					((this.MaKhoa == null) ? string.Empty : this.MaKhoa.ToString()).GetHashCode() ^ 
					((this.MaNhomMonHoc == null) ? string.Empty : this.MaNhomMonHoc.ToString()).GetHashCode() ^ 
					((this.MaPhongHoc == null) ? string.Empty : this.MaPhongHoc.ToString()).GetHashCode() ^ 
					((this.MaKhoaHoc == null) ? string.Empty : this.MaKhoaHoc.ToString()).GetHashCode() ^ 
					((this.LoaiHocKy == null) ? string.Empty : this.LoaiHocKy.ToString()).GetHashCode() ^ 
					((this.NamThu == null) ? string.Empty : this.NamThu.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString()).GetHashCode() ^ 
					((this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString()).GetHashCode() ^ 
					((this.MaChucVu == null) ? string.Empty : this.MaChucVu.ToString()).GetHashCode() ^ 
					((this.MaHinhThucDaoTao == null) ? string.Empty : this.MaHinhThucDaoTao.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.LopHocPhanChuyenNganh == null) ? string.Empty : this.LopHocPhanChuyenNganh.ToString()).GetHashCode() ^ 
					((this.DotImport == null) ? string.Empty : this.DotImport.ToString()).GetHashCode() ^ 
					((this.DaoTaoTinChi == null) ? string.Empty : this.DaoTaoTinChi.ToString()).GetHashCode() ^ 
					((this.NgonNguGiangDay == null) ? string.Empty : this.NgonNguGiangDay.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="KhoiLuongTamUngBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(KhoiLuongTamUngBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="KhoiLuongTamUngBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="KhoiLuongTamUngBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="KhoiLuongTamUngBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(KhoiLuongTamUngBase Object1, KhoiLuongTamUngBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaKhoiLuong != Object2.MaKhoiLuong)
				equal = false;
			if ( Object1.MaLichHoc != null && Object2.MaLichHoc != null )
			{
				if (Object1.MaLichHoc != Object2.MaLichHoc)
					equal = false;
			}
			else if (Object1.MaLichHoc == null ^ Object2.MaLichHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaQuanLyGv != null && Object2.MaQuanLyGv != null )
			{
				if (Object1.MaQuanLyGv != Object2.MaQuanLyGv)
					equal = false;
			}
			else if (Object1.MaQuanLyGv == null ^ Object2.MaQuanLyGv == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.TenMonHoc != null && Object2.TenMonHoc != null )
			{
				if (Object1.TenMonHoc != Object2.TenMonHoc)
					equal = false;
			}
			else if (Object1.TenMonHoc == null ^ Object2.TenMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.Nhom != null && Object2.Nhom != null )
			{
				if (Object1.Nhom != Object2.Nhom)
					equal = false;
			}
			else if (Object1.Nhom == null ^ Object2.Nhom == null )
			{
				equal = false;
			}
			if ( Object1.SoTinChi != null && Object2.SoTinChi != null )
			{
				if (Object1.SoTinChi != Object2.SoTinChi)
					equal = false;
			}
			else if (Object1.SoTinChi == null ^ Object2.SoTinChi == null )
			{
				equal = false;
			}
			if ( Object1.SoLuong != null && Object2.SoLuong != null )
			{
				if (Object1.SoLuong != Object2.SoLuong)
					equal = false;
			}
			else if (Object1.SoLuong == null ^ Object2.SoLuong == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiHocPhan != null && Object2.MaLoaiHocPhan != null )
			{
				if (Object1.MaLoaiHocPhan != Object2.MaLoaiHocPhan)
					equal = false;
			}
			else if (Object1.MaLoaiHocPhan == null ^ Object2.MaLoaiHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.LoaiHocPhan != null && Object2.LoaiHocPhan != null )
			{
				if (Object1.LoaiHocPhan != Object2.LoaiHocPhan)
					equal = false;
			}
			else if (Object1.LoaiHocPhan == null ^ Object2.LoaiHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaBuoiHoc != null && Object2.MaBuoiHoc != null )
			{
				if (Object1.MaBuoiHoc != Object2.MaBuoiHoc)
					equal = false;
			}
			else if (Object1.MaBuoiHoc == null ^ Object2.MaBuoiHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object2.MaLop == null )
			{
				equal = false;
			}
			if ( Object1.TietBatDau != null && Object2.TietBatDau != null )
			{
				if (Object1.TietBatDau != Object2.TietBatDau)
					equal = false;
			}
			else if (Object1.TietBatDau == null ^ Object2.TietBatDau == null )
			{
				equal = false;
			}
			if ( Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object2.SoTiet == null )
			{
				equal = false;
			}
			if ( Object1.TinhTrang != null && Object2.TinhTrang != null )
			{
				if (Object1.TinhTrang != Object2.TinhTrang)
					equal = false;
			}
			else if (Object1.TinhTrang == null ^ Object2.TinhTrang == null )
			{
				equal = false;
			}
			if ( Object1.NgayDay != null && Object2.NgayDay != null )
			{
				if (Object1.NgayDay != Object2.NgayDay)
					equal = false;
			}
			else if (Object1.NgayDay == null ^ Object2.NgayDay == null )
			{
				equal = false;
			}
			if ( Object1.MaBacDaoTao != null && Object2.MaBacDaoTao != null )
			{
				if (Object1.MaBacDaoTao != Object2.MaBacDaoTao)
					equal = false;
			}
			else if (Object1.MaBacDaoTao == null ^ Object2.MaBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.MaKhoa != null && Object2.MaKhoa != null )
			{
				if (Object1.MaKhoa != Object2.MaKhoa)
					equal = false;
			}
			else if (Object1.MaKhoa == null ^ Object2.MaKhoa == null )
			{
				equal = false;
			}
			if ( Object1.MaNhomMonHoc != null && Object2.MaNhomMonHoc != null )
			{
				if (Object1.MaNhomMonHoc != Object2.MaNhomMonHoc)
					equal = false;
			}
			else if (Object1.MaNhomMonHoc == null ^ Object2.MaNhomMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaPhongHoc != null && Object2.MaPhongHoc != null )
			{
				if (Object1.MaPhongHoc != Object2.MaPhongHoc)
					equal = false;
			}
			else if (Object1.MaPhongHoc == null ^ Object2.MaPhongHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaKhoaHoc != null && Object2.MaKhoaHoc != null )
			{
				if (Object1.MaKhoaHoc != Object2.MaKhoaHoc)
					equal = false;
			}
			else if (Object1.MaKhoaHoc == null ^ Object2.MaKhoaHoc == null )
			{
				equal = false;
			}
			if ( Object1.LoaiHocKy != null && Object2.LoaiHocKy != null )
			{
				if (Object1.LoaiHocKy != Object2.LoaiHocKy)
					equal = false;
			}
			else if (Object1.LoaiHocKy == null ^ Object2.LoaiHocKy == null )
			{
				equal = false;
			}
			if ( Object1.NamThu != null && Object2.NamThu != null )
			{
				if (Object1.NamThu != Object2.NamThu)
					equal = false;
			}
			else if (Object1.NamThu == null ^ Object2.NamThu == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object2.MaHocVi == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object2.MaLoaiGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.MaChucVu != null && Object2.MaChucVu != null )
			{
				if (Object1.MaChucVu != Object2.MaChucVu)
					equal = false;
			}
			else if (Object1.MaChucVu == null ^ Object2.MaChucVu == null )
			{
				equal = false;
			}
			if ( Object1.MaHinhThucDaoTao != null && Object2.MaHinhThucDaoTao != null )
			{
				if (Object1.MaHinhThucDaoTao != Object2.MaHinhThucDaoTao)
					equal = false;
			}
			else if (Object1.MaHinhThucDaoTao == null ^ Object2.MaHinhThucDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.LopHocPhanChuyenNganh != null && Object2.LopHocPhanChuyenNganh != null )
			{
				if (Object1.LopHocPhanChuyenNganh != Object2.LopHocPhanChuyenNganh)
					equal = false;
			}
			else if (Object1.LopHocPhanChuyenNganh == null ^ Object2.LopHocPhanChuyenNganh == null )
			{
				equal = false;
			}
			if ( Object1.DotImport != null && Object2.DotImport != null )
			{
				if (Object1.DotImport != Object2.DotImport)
					equal = false;
			}
			else if (Object1.DotImport == null ^ Object2.DotImport == null )
			{
				equal = false;
			}
			if ( Object1.DaoTaoTinChi != null && Object2.DaoTaoTinChi != null )
			{
				if (Object1.DaoTaoTinChi != Object2.DaoTaoTinChi)
					equal = false;
			}
			else if (Object1.DaoTaoTinChi == null ^ Object2.DaoTaoTinChi == null )
			{
				equal = false;
			}
			if ( Object1.NgonNguGiangDay != null && Object2.NgonNguGiangDay != null )
			{
				if (Object1.NgonNguGiangDay != Object2.NgonNguGiangDay)
					equal = false;
			}
			else if (Object1.NgonNguGiangDay == null ^ Object2.NgonNguGiangDay == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((KhoiLuongTamUngBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static KhoiLuongTamUngComparer GetComparer()
        {
            return new KhoiLuongTamUngComparer();
        }
        */

        // Comparer delegates back to KhoiLuongTamUng
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(KhoiLuongTamUng rhs, KhoiLuongTamUngColumn which)
        {
            switch (which)
            {
            	
            	
            	case KhoiLuongTamUngColumn.MaKhoiLuong:
            		return this.MaKhoiLuong.CompareTo(rhs.MaKhoiLuong);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaLichHoc:
            		return this.MaLichHoc.Value.CompareTo(rhs.MaLichHoc.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaQuanLyGv:
            		return this.MaQuanLyGv.CompareTo(rhs.MaQuanLyGv);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.TenMonHoc:
            		return this.TenMonHoc.CompareTo(rhs.TenMonHoc);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.Nhom:
            		return this.Nhom.CompareTo(rhs.Nhom);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.SoTinChi:
            		return this.SoTinChi.Value.CompareTo(rhs.SoTinChi.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.SoLuong:
            		return this.SoLuong.Value.CompareTo(rhs.SoLuong.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaLoaiHocPhan:
            		return this.MaLoaiHocPhan.Value.CompareTo(rhs.MaLoaiHocPhan.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.LoaiHocPhan:
            		return this.LoaiHocPhan.CompareTo(rhs.LoaiHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaBuoiHoc:
            		return this.MaBuoiHoc.Value.CompareTo(rhs.MaBuoiHoc.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.TietBatDau:
            		return this.TietBatDau.Value.CompareTo(rhs.TietBatDau.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.SoTiet:
            		return this.SoTiet.Value.CompareTo(rhs.SoTiet.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.TinhTrang:
            		return this.TinhTrang.Value.CompareTo(rhs.TinhTrang.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.NgayDay:
            		return this.NgayDay.Value.CompareTo(rhs.NgayDay.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaBacDaoTao:
            		return this.MaBacDaoTao.CompareTo(rhs.MaBacDaoTao);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaKhoa:
            		return this.MaKhoa.CompareTo(rhs.MaKhoa);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaNhomMonHoc:
            		return this.MaNhomMonHoc.CompareTo(rhs.MaNhomMonHoc);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaPhongHoc:
            		return this.MaPhongHoc.CompareTo(rhs.MaPhongHoc);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaKhoaHoc:
            		return this.MaKhoaHoc.CompareTo(rhs.MaKhoaHoc);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.LoaiHocKy:
            		return this.LoaiHocKy.Value.CompareTo(rhs.LoaiHocKy.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.NamThu:
            		return this.NamThu.CompareTo(rhs.NamThu);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaHocVi:
            		return this.MaHocVi.Value.CompareTo(rhs.MaHocVi.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaLoaiGiangVien:
            		return this.MaLoaiGiangVien.Value.CompareTo(rhs.MaLoaiGiangVien.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaChucVu:
            		return this.MaChucVu.Value.CompareTo(rhs.MaChucVu.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.MaHinhThucDaoTao:
            		return this.MaHinhThucDaoTao.CompareTo(rhs.MaHinhThucDaoTao);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.LopHocPhanChuyenNganh:
            		return this.LopHocPhanChuyenNganh.Value.CompareTo(rhs.LopHocPhanChuyenNganh.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.DotImport:
            		return this.DotImport.CompareTo(rhs.DotImport);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.DaoTaoTinChi:
            		return this.DaoTaoTinChi.Value.CompareTo(rhs.DaoTaoTinChi.Value);
            		
            		                 
            	
            	
            	case KhoiLuongTamUngColumn.NgonNguGiangDay:
            		return this.NgonNguGiangDay.CompareTo(rhs.NgonNguGiangDay);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<KhoiLuongTamUngKey> Members
		
		// member variable for the EntityId property
		private KhoiLuongTamUngKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual KhoiLuongTamUngKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new KhoiLuongTamUngKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("KhoiLuongTamUng")
					.Append("|").Append( this.MaKhoiLuong.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{37}{36}- MaKhoiLuong: {0}{36}- MaLichHoc: {1}{36}- MaQuanLyGv: {2}{36}- MaLopHocPhan: {3}{36}- NamHoc: {4}{36}- HocKy: {5}{36}- MaMonHoc: {6}{36}- TenMonHoc: {7}{36}- Nhom: {8}{36}- SoTinChi: {9}{36}- SoLuong: {10}{36}- MaLoaiHocPhan: {11}{36}- LoaiHocPhan: {12}{36}- MaBuoiHoc: {13}{36}- MaLop: {14}{36}- TietBatDau: {15}{36}- SoTiet: {16}{36}- TinhTrang: {17}{36}- NgayDay: {18}{36}- MaBacDaoTao: {19}{36}- MaKhoa: {20}{36}- MaNhomMonHoc: {21}{36}- MaPhongHoc: {22}{36}- MaKhoaHoc: {23}{36}- LoaiHocKy: {24}{36}- NamThu: {25}{36}- MaHocHam: {26}{36}- MaHocVi: {27}{36}- MaLoaiGiangVien: {28}{36}- MaChucVu: {29}{36}- MaHinhThucDaoTao: {30}{36}- GhiChu: {31}{36}- LopHocPhanChuyenNganh: {32}{36}- DotImport: {33}{36}- DaoTaoTinChi: {34}{36}- NgonNguGiangDay: {35}{36}{38}", 
				this.MaKhoiLuong,
				(this.MaLichHoc == null) ? string.Empty : this.MaLichHoc.ToString(),
				(this.MaQuanLyGv == null) ? string.Empty : this.MaQuanLyGv.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString(),
				(this.Nhom == null) ? string.Empty : this.Nhom.ToString(),
				(this.SoTinChi == null) ? string.Empty : this.SoTinChi.ToString(),
				(this.SoLuong == null) ? string.Empty : this.SoLuong.ToString(),
				(this.MaLoaiHocPhan == null) ? string.Empty : this.MaLoaiHocPhan.ToString(),
				(this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString(),
				(this.MaBuoiHoc == null) ? string.Empty : this.MaBuoiHoc.ToString(),
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
				(this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString(),
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
				(this.TinhTrang == null) ? string.Empty : this.TinhTrang.ToString(),
				(this.NgayDay == null) ? string.Empty : this.NgayDay.ToString(),
				(this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString(),
				(this.MaKhoa == null) ? string.Empty : this.MaKhoa.ToString(),
				(this.MaNhomMonHoc == null) ? string.Empty : this.MaNhomMonHoc.ToString(),
				(this.MaPhongHoc == null) ? string.Empty : this.MaPhongHoc.ToString(),
				(this.MaKhoaHoc == null) ? string.Empty : this.MaKhoaHoc.ToString(),
				(this.LoaiHocKy == null) ? string.Empty : this.LoaiHocKy.ToString(),
				(this.NamThu == null) ? string.Empty : this.NamThu.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
				(this.MaChucVu == null) ? string.Empty : this.MaChucVu.ToString(),
				(this.MaHinhThucDaoTao == null) ? string.Empty : this.MaHinhThucDaoTao.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.LopHocPhanChuyenNganh == null) ? string.Empty : this.LopHocPhanChuyenNganh.ToString(),
				(this.DotImport == null) ? string.Empty : this.DotImport.ToString(),
				(this.DaoTaoTinChi == null) ? string.Empty : this.DaoTaoTinChi.ToString(),
				(this.NgonNguGiangDay == null) ? string.Empty : this.NgonNguGiangDay.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'KhoiLuongTamUng' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class KhoiLuongTamUngEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaKhoiLuong : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "KhoiLuongTamUng"</remarks>
		public System.Int32 MaKhoiLuong;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		public System.Int32? MaLichHoc = null;
		
		/// <summary>
		/// MaQuanLyGv : 
		/// </summary>
		public System.String MaQuanLyGv = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		public System.String TenMonHoc = null;
		
		/// <summary>
		/// Nhom : 
		/// </summary>
		public System.String Nhom = null;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		public System.Decimal? SoTinChi = null;
		
		/// <summary>
		/// SoLuong : 
		/// </summary>
		public System.Int32? SoLuong = null;
		
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		public System.Byte? MaLoaiHocPhan = null;
		
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		public System.String LoaiHocPhan = null;
		
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		public System.Int32? MaBuoiHoc = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String MaLop = null;
		
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		public System.Int32? TietBatDau = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		public System.Decimal? SoTiet = null;
		
		/// <summary>
		/// TinhTrang : 
		/// </summary>
		public System.Int32? TinhTrang = null;
		
		/// <summary>
		/// NgayDay : 
		/// </summary>
		public System.DateTime? NgayDay = null;
		
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		public System.String MaBacDaoTao = null;
		
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		public System.String MaKhoa = null;
		
		/// <summary>
		/// MaNhomMonHoc : 
		/// </summary>
		public System.String MaNhomMonHoc = null;
		
		/// <summary>
		/// MaPhongHoc : 
		/// </summary>
		public System.String MaPhongHoc = null;
		
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		public System.String MaKhoaHoc = null;
		
		/// <summary>
		/// LoaiHocKy : 
		/// </summary>
		public System.Byte? LoaiHocKy = null;
		
		/// <summary>
		/// NamThu : 
		/// </summary>
		public System.String NamThu = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		public System.Int32? MaHocVi = null;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		public System.Int32? MaLoaiGiangVien = null;
		
		/// <summary>
		/// MaChucVu : 
		/// </summary>
		public System.Int32? MaChucVu = null;
		
		/// <summary>
		/// MaHinhThucDaoTao : 
		/// </summary>
		public System.String MaHinhThucDaoTao = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// LopHocPhanChuyenNganh : 
		/// </summary>
		public System.Boolean? LopHocPhanChuyenNganh = null;
		
		/// <summary>
		/// DotImport : 
		/// </summary>
		public System.String DotImport = null;
		
		/// <summary>
		/// DaoTaoTinChi : 
		/// </summary>
		public System.Boolean? DaoTaoTinChi = null;
		
		/// <summary>
		/// NgonNguGiangDay : 
		/// </summary>
		public System.String NgonNguGiangDay = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region QuyDoiKhoiLuongTamUngCollection
		
		private TList<QuyDoiKhoiLuongTamUng> _quyDoiKhoiLuongTamUngMaKhoiLuongTamUng;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _quyDoiKhoiLuongTamUngMaKhoiLuongTamUng
		/// </summary>
		
		public TList<QuyDoiKhoiLuongTamUng> QuyDoiKhoiLuongTamUngCollection
		{
			get
			{
				if (_quyDoiKhoiLuongTamUngMaKhoiLuongTamUng == null)
				{
				_quyDoiKhoiLuongTamUngMaKhoiLuongTamUng = new TList<QuyDoiKhoiLuongTamUng>();
				}
	
				return _quyDoiKhoiLuongTamUngMaKhoiLuongTamUng;
			}
			set { _quyDoiKhoiLuongTamUngMaKhoiLuongTamUng = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			KhoiLuongTamUngEntityData _tmp = new KhoiLuongTamUngEntityData();
						
			_tmp.MaKhoiLuong = this.MaKhoiLuong;
			
			_tmp.MaLichHoc = this.MaLichHoc;
			_tmp.MaQuanLyGv = this.MaQuanLyGv;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.Nhom = this.Nhom;
			_tmp.SoTinChi = this.SoTinChi;
			_tmp.SoLuong = this.SoLuong;
			_tmp.MaLoaiHocPhan = this.MaLoaiHocPhan;
			_tmp.LoaiHocPhan = this.LoaiHocPhan;
			_tmp.MaBuoiHoc = this.MaBuoiHoc;
			_tmp.MaLop = this.MaLop;
			_tmp.TietBatDau = this.TietBatDau;
			_tmp.SoTiet = this.SoTiet;
			_tmp.TinhTrang = this.TinhTrang;
			_tmp.NgayDay = this.NgayDay;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaKhoa = this.MaKhoa;
			_tmp.MaNhomMonHoc = this.MaNhomMonHoc;
			_tmp.MaPhongHoc = this.MaPhongHoc;
			_tmp.MaKhoaHoc = this.MaKhoaHoc;
			_tmp.LoaiHocKy = this.LoaiHocKy;
			_tmp.NamThu = this.NamThu;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.MaChucVu = this.MaChucVu;
			_tmp.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
			_tmp.GhiChu = this.GhiChu;
			_tmp.LopHocPhanChuyenNganh = this.LopHocPhanChuyenNganh;
			_tmp.DotImport = this.DotImport;
			_tmp.DaoTaoTinChi = this.DaoTaoTinChi;
			_tmp.NgonNguGiangDay = this.NgonNguGiangDay;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._quyDoiKhoiLuongTamUngMaKhoiLuongTamUng != null)
				_tmp.QuyDoiKhoiLuongTamUngCollection = (TList<QuyDoiKhoiLuongTamUng>) MakeCopyOf(this.QuyDoiKhoiLuongTamUngCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			KhoiLuongTamUngEntityData _tmp = new KhoiLuongTamUngEntityData();
						
			_tmp.MaKhoiLuong = this.MaKhoiLuong;
			
			_tmp.MaLichHoc = this.MaLichHoc;
			_tmp.MaQuanLyGv = this.MaQuanLyGv;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.Nhom = this.Nhom;
			_tmp.SoTinChi = this.SoTinChi;
			_tmp.SoLuong = this.SoLuong;
			_tmp.MaLoaiHocPhan = this.MaLoaiHocPhan;
			_tmp.LoaiHocPhan = this.LoaiHocPhan;
			_tmp.MaBuoiHoc = this.MaBuoiHoc;
			_tmp.MaLop = this.MaLop;
			_tmp.TietBatDau = this.TietBatDau;
			_tmp.SoTiet = this.SoTiet;
			_tmp.TinhTrang = this.TinhTrang;
			_tmp.NgayDay = this.NgayDay;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaKhoa = this.MaKhoa;
			_tmp.MaNhomMonHoc = this.MaNhomMonHoc;
			_tmp.MaPhongHoc = this.MaPhongHoc;
			_tmp.MaKhoaHoc = this.MaKhoaHoc;
			_tmp.LoaiHocKy = this.LoaiHocKy;
			_tmp.NamThu = this.NamThu;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.MaChucVu = this.MaChucVu;
			_tmp.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
			_tmp.GhiChu = this.GhiChu;
			_tmp.LopHocPhanChuyenNganh = this.LopHocPhanChuyenNganh;
			_tmp.DotImport = this.DotImport;
			_tmp.DaoTaoTinChi = this.DaoTaoTinChi;
			_tmp.NgonNguGiangDay = this.NgonNguGiangDay;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.QuyDoiKhoiLuongTamUngCollection = (TList<QuyDoiKhoiLuongTamUng>) MakeCopyOf(this.QuyDoiKhoiLuongTamUngCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongTamUngColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(KhoiLuongTamUngColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongTamUngColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(KhoiLuongTamUngColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongTamUngColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(KhoiLuongTamUngColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				KhoiLuongTamUngEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new KhoiLuongTamUngEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongTamUngColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(KhoiLuongTamUngColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				KhoiLuongTamUngEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new KhoiLuongTamUngEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region KhoiLuongTamUngEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="KhoiLuongTamUng"/> object.
	/// </remarks>
	public class KhoiLuongTamUngEventArgs : System.EventArgs
	{
		private KhoiLuongTamUngColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the KhoiLuongTamUngEventArgs class.
		///</summary>
		public KhoiLuongTamUngEventArgs(KhoiLuongTamUngColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the KhoiLuongTamUngEventArgs class.
		///</summary>
		public KhoiLuongTamUngEventArgs(KhoiLuongTamUngColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The KhoiLuongTamUngColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="KhoiLuongTamUngColumn" />
		public KhoiLuongTamUngColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all KhoiLuongTamUng related events.
	///</summary>
	public delegate void KhoiLuongTamUngEventHandler(object sender, KhoiLuongTamUngEventArgs e);
	
	#region KhoiLuongTamUngComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class KhoiLuongTamUngComparer : System.Collections.Generic.IComparer<KhoiLuongTamUng>
	{
		KhoiLuongTamUngColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:KhoiLuongTamUngComparer"/> class.
        /// </summary>
		public KhoiLuongTamUngComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:KhoiLuongTamUngComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public KhoiLuongTamUngComparer(KhoiLuongTamUngColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="KhoiLuongTamUng"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="KhoiLuongTamUng"/> to compare.</param>
        /// <param name="b">The second <c>KhoiLuongTamUng</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(KhoiLuongTamUng a, KhoiLuongTamUng b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(KhoiLuongTamUng entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(KhoiLuongTamUng a, KhoiLuongTamUng b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public KhoiLuongTamUngColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region KhoiLuongTamUngKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="KhoiLuongTamUng"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class KhoiLuongTamUngKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngKey class.
		/// </summary>
		public KhoiLuongTamUngKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngKey class.
		/// </summary>
		public KhoiLuongTamUngKey(KhoiLuongTamUngBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaKhoiLuong = entity.MaKhoiLuong;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngKey class.
		/// </summary>
		public KhoiLuongTamUngKey(System.Int32 _maKhoiLuong)
		{
			#region Init Properties

			this.MaKhoiLuong = _maKhoiLuong;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private KhoiLuongTamUngBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public KhoiLuongTamUngBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaKhoiLuong property
		private System.Int32 _maKhoiLuong;
		
		/// <summary>
		/// Gets or sets the MaKhoiLuong property.
		/// </summary>
		public System.Int32 MaKhoiLuong
		{
			get { return _maKhoiLuong; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaKhoiLuong = value;
				
				_maKhoiLuong = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaKhoiLuong = ( values["MaKhoiLuong"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaKhoiLuong"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaKhoiLuong", MaKhoiLuong);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaKhoiLuong: {0}{1}",
								MaKhoiLuong,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region KhoiLuongTamUngColumn Enum
	
	/// <summary>
	/// Enumerate the KhoiLuongTamUng columns.
	/// </summary>
	[Serializable]
	public enum KhoiLuongTamUngColumn : int
	{
		/// <summary>
		/// MaKhoiLuong : 
		/// </summary>
		[EnumTextValue("Ma Khoi Luong")]
		[ColumnEnum("MaKhoiLuong", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaKhoiLuong = 1,
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		[EnumTextValue("Ma Lich Hoc")]
		[ColumnEnum("MaLichHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLichHoc = 2,
		/// <summary>
		/// MaQuanLyGv : 
		/// </summary>
		[EnumTextValue("Ma Quan Ly Gv")]
		[ColumnEnum("MaQuanLyGv", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaQuanLyGv = 3,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaLopHocPhan = 4,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 5,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 6,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 7,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("Ten Mon Hoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenMonHoc = 8,
		/// <summary>
		/// Nhom : 
		/// </summary>
		[EnumTextValue("Nhom")]
		[ColumnEnum("Nhom", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Nhom = 9,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("So Tin Chi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTinChi = 10,
		/// <summary>
		/// SoLuong : 
		/// </summary>
		[EnumTextValue("So Luong")]
		[ColumnEnum("SoLuong", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuong = 11,
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Loai Hoc Phan")]
		[ColumnEnum("MaLoaiHocPhan", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		MaLoaiHocPhan = 12,
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		[EnumTextValue("Loai Hoc Phan")]
		[ColumnEnum("LoaiHocPhan", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		LoaiHocPhan = 13,
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		[EnumTextValue("Ma Buoi Hoc")]
		[ColumnEnum("MaBuoiHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaBuoiHoc = 14,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("Ma Lop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		MaLop = 15,
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		[EnumTextValue("Tiet Bat Dau")]
		[ColumnEnum("TietBatDau", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietBatDau = 16,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("So Tiet")]
		[ColumnEnum("SoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet = 17,
		/// <summary>
		/// TinhTrang : 
		/// </summary>
		[EnumTextValue("Tinh Trang")]
		[ColumnEnum("TinhTrang", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TinhTrang = 18,
		/// <summary>
		/// NgayDay : 
		/// </summary>
		[EnumTextValue("Ngay Day")]
		[ColumnEnum("NgayDay", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayDay = 19,
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Bac Dao Tao")]
		[ColumnEnum("MaBacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaBacDaoTao = 20,
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		[EnumTextValue("Ma Khoa")]
		[ColumnEnum("MaKhoa", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		MaKhoa = 21,
		/// <summary>
		/// MaNhomMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Nhom Mon Hoc")]
		[ColumnEnum("MaNhomMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaNhomMonHoc = 22,
		/// <summary>
		/// MaPhongHoc : 
		/// </summary>
		[EnumTextValue("Ma Phong Hoc")]
		[ColumnEnum("MaPhongHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaPhongHoc = 23,
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		[EnumTextValue("Ma Khoa Hoc")]
		[ColumnEnum("MaKhoaHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaKhoaHoc = 24,
		/// <summary>
		/// LoaiHocKy : 
		/// </summary>
		[EnumTextValue("Loai Hoc Ky")]
		[ColumnEnum("LoaiHocKy", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		LoaiHocKy = 25,
		/// <summary>
		/// NamThu : 
		/// </summary>
		[EnumTextValue("Nam Thu")]
		[ColumnEnum("NamThu", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamThu = 26,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 27,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("Ma Hoc Vi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi = 28,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Loai Giang Vien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien = 29,
		/// <summary>
		/// MaChucVu : 
		/// </summary>
		[EnumTextValue("Ma Chuc Vu")]
		[ColumnEnum("MaChucVu", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaChucVu = 30,
		/// <summary>
		/// MaHinhThucDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Hinh Thuc Dao Tao")]
		[ColumnEnum("MaHinhThucDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHinhThucDaoTao = 31,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		GhiChu = 32,
		/// <summary>
		/// LopHocPhanChuyenNganh : 
		/// </summary>
		[EnumTextValue("Lop Hoc Phan Chuyen Nganh")]
		[ColumnEnum("LopHocPhanChuyenNganh", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		LopHocPhanChuyenNganh = 33,
		/// <summary>
		/// DotImport : 
		/// </summary>
		[EnumTextValue("Dot Import")]
		[ColumnEnum("DotImport", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		DotImport = 34,
		/// <summary>
		/// DaoTaoTinChi : 
		/// </summary>
		[EnumTextValue("Dao Tao Tin Chi")]
		[ColumnEnum("DaoTaoTinChi", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DaoTaoTinChi = 35,
		/// <summary>
		/// NgonNguGiangDay : 
		/// </summary>
		[EnumTextValue("Ngon Ngu Giang Day")]
		[ColumnEnum("NgonNguGiangDay", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgonNguGiangDay = 36
	}//End enum

	#endregion KhoiLuongTamUngColumn Enum

} // end namespace
