
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThanhTraCoiThi.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThanhTraCoiThi' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThanhTraCoiThiBase : EntityBase, IThanhTraCoiThi, IEntityId<ThanhTraCoiThiKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThanhTraCoiThiEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThanhTraCoiThiEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThanhTraCoiThiEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThanhTraCoiThi> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThanhTraCoiThiEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThanhTraCoiThiEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThanhTraCoiThiBase"/> instance.
		///</summary>
		public ThanhTraCoiThiBase()
		{
			this.entityData = new ThanhTraCoiThiEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThanhTraCoiThiBase"/> instance.
		///</summary>
		///<param name="_examination"></param>
		///<param name="_maCanBoCoiThi"></param>
		///<param name="_ngayThi"></param>
		///<param name="_thoiGianBatDau"></param>
		///<param name="_maPhong"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_thoiGianLamBai"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_maLopSinhVien"></param>
		///<param name="_soLuongSinhVien"></param>
		///<param name="_maViPham"></param>
		///<param name="_maHinhThucViPhamHrm"></param>
		///<param name="_siSoThanhTra"></param>
		///<param name="_thoiDiemGhiNhan"></param>
		///<param name="_lyDo"></param>
		///<param name="_ghiChu"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_xacNhan"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_soTiet"></param>
		public ThanhTraCoiThiBase(System.Int32 _examination, System.String _maCanBoCoiThi, 
			System.String _ngayThi, System.String _thoiGianBatDau, System.String _maPhong, 
			System.String _maLopHocPhan, System.String _maMonHoc, System.String _tenMonHoc, 
			System.String _thoiGianLamBai, System.Int32? _tietBatDau, System.String _maLopSinhVien, 
			System.Int32? _soLuongSinhVien, System.String _maViPham, System.Guid? _maHinhThucViPhamHrm, 
			System.Int32? _siSoThanhTra, System.String _thoiDiemGhiNhan, System.String _lyDo, 
			System.String _ghiChu, System.String _ngayCapNhat, System.String _nguoiCapNhat, 
			System.Boolean? _xacNhan, System.Int32? _maLoaiHocPhan, System.Int32? _soTiet)
		{
			this.entityData = new ThanhTraCoiThiEntityData();
			this.backupData = null;

			this.Examination = _examination;
			this.MaCanBoCoiThi = _maCanBoCoiThi;
			this.NgayThi = _ngayThi;
			this.ThoiGianBatDau = _thoiGianBatDau;
			this.MaPhong = _maPhong;
			this.MaLopHocPhan = _maLopHocPhan;
			this.MaMonHoc = _maMonHoc;
			this.TenMonHoc = _tenMonHoc;
			this.ThoiGianLamBai = _thoiGianLamBai;
			this.TietBatDau = _tietBatDau;
			this.MaLopSinhVien = _maLopSinhVien;
			this.SoLuongSinhVien = _soLuongSinhVien;
			this.MaViPham = _maViPham;
			this.MaHinhThucViPhamHrm = _maHinhThucViPhamHrm;
			this.SiSoThanhTra = _siSoThanhTra;
			this.ThoiDiemGhiNhan = _thoiDiemGhiNhan;
			this.LyDo = _lyDo;
			this.GhiChu = _ghiChu;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.XacNhan = _xacNhan;
			this.MaLoaiHocPhan = _maLoaiHocPhan;
			this.SoTiet = _soTiet;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThanhTraCoiThi"/> instance.
		///</summary>
		///<param name="_examination"></param>
		///<param name="_maCanBoCoiThi"></param>
		///<param name="_ngayThi"></param>
		///<param name="_thoiGianBatDau"></param>
		///<param name="_maPhong"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_thoiGianLamBai"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_maLopSinhVien"></param>
		///<param name="_soLuongSinhVien"></param>
		///<param name="_maViPham"></param>
		///<param name="_maHinhThucViPhamHrm"></param>
		///<param name="_siSoThanhTra"></param>
		///<param name="_thoiDiemGhiNhan"></param>
		///<param name="_lyDo"></param>
		///<param name="_ghiChu"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_xacNhan"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_soTiet"></param>
		public static ThanhTraCoiThi CreateThanhTraCoiThi(System.Int32 _examination, System.String _maCanBoCoiThi, 
			System.String _ngayThi, System.String _thoiGianBatDau, System.String _maPhong, 
			System.String _maLopHocPhan, System.String _maMonHoc, System.String _tenMonHoc, 
			System.String _thoiGianLamBai, System.Int32? _tietBatDau, System.String _maLopSinhVien, 
			System.Int32? _soLuongSinhVien, System.String _maViPham, System.Guid? _maHinhThucViPhamHrm, 
			System.Int32? _siSoThanhTra, System.String _thoiDiemGhiNhan, System.String _lyDo, 
			System.String _ghiChu, System.String _ngayCapNhat, System.String _nguoiCapNhat, 
			System.Boolean? _xacNhan, System.Int32? _maLoaiHocPhan, System.Int32? _soTiet)
		{
			ThanhTraCoiThi newThanhTraCoiThi = new ThanhTraCoiThi();
			newThanhTraCoiThi.Examination = _examination;
			newThanhTraCoiThi.MaCanBoCoiThi = _maCanBoCoiThi;
			newThanhTraCoiThi.NgayThi = _ngayThi;
			newThanhTraCoiThi.ThoiGianBatDau = _thoiGianBatDau;
			newThanhTraCoiThi.MaPhong = _maPhong;
			newThanhTraCoiThi.MaLopHocPhan = _maLopHocPhan;
			newThanhTraCoiThi.MaMonHoc = _maMonHoc;
			newThanhTraCoiThi.TenMonHoc = _tenMonHoc;
			newThanhTraCoiThi.ThoiGianLamBai = _thoiGianLamBai;
			newThanhTraCoiThi.TietBatDau = _tietBatDau;
			newThanhTraCoiThi.MaLopSinhVien = _maLopSinhVien;
			newThanhTraCoiThi.SoLuongSinhVien = _soLuongSinhVien;
			newThanhTraCoiThi.MaViPham = _maViPham;
			newThanhTraCoiThi.MaHinhThucViPhamHrm = _maHinhThucViPhamHrm;
			newThanhTraCoiThi.SiSoThanhTra = _siSoThanhTra;
			newThanhTraCoiThi.ThoiDiemGhiNhan = _thoiDiemGhiNhan;
			newThanhTraCoiThi.LyDo = _lyDo;
			newThanhTraCoiThi.GhiChu = _ghiChu;
			newThanhTraCoiThi.NgayCapNhat = _ngayCapNhat;
			newThanhTraCoiThi.NguoiCapNhat = _nguoiCapNhat;
			newThanhTraCoiThi.XacNhan = _xacNhan;
			newThanhTraCoiThi.MaLoaiHocPhan = _maLoaiHocPhan;
			newThanhTraCoiThi.SoTiet = _soTiet;
			return newThanhTraCoiThi;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Examination property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 Examination
		{
			get
			{
				return this.entityData.Examination; 
			}
			
			set
			{
				if (this.entityData.Examination == value)
					return;
				
                OnPropertyChanging("Examination");                    
				OnColumnChanging(ThanhTraCoiThiColumn.Examination, this.entityData.Examination);
				this.entityData.Examination = value;
				this.EntityId.Examination = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.Examination, this.entityData.Examination);
				OnPropertyChanged("Examination");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the Examination property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the Examination property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalExamination
		{
			get { return this.entityData.OriginalExamination; }
			set { this.entityData.OriginalExamination = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the MaCanBoCoiThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String MaCanBoCoiThi
		{
			get
			{
				return this.entityData.MaCanBoCoiThi; 
			}
			
			set
			{
				if (this.entityData.MaCanBoCoiThi == value)
					return;
				
                OnPropertyChanging("MaCanBoCoiThi");                    
				OnColumnChanging(ThanhTraCoiThiColumn.MaCanBoCoiThi, this.entityData.MaCanBoCoiThi);
				this.entityData.MaCanBoCoiThi = value;
				this.EntityId.MaCanBoCoiThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.MaCanBoCoiThi, this.entityData.MaCanBoCoiThi);
				OnPropertyChanged("MaCanBoCoiThi");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaCanBoCoiThi property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaCanBoCoiThi property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMaCanBoCoiThi
		{
			get { return this.entityData.OriginalMaCanBoCoiThi; }
			set { this.entityData.OriginalMaCanBoCoiThi = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the NgayThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String NgayThi
		{
			get
			{
				return this.entityData.NgayThi; 
			}
			
			set
			{
				if (this.entityData.NgayThi == value)
					return;
				
                OnPropertyChanging("NgayThi");                    
				OnColumnChanging(ThanhTraCoiThiColumn.NgayThi, this.entityData.NgayThi);
				this.entityData.NgayThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.NgayThi, this.entityData.NgayThi);
				OnPropertyChanged("NgayThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThoiGianBatDau property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ThoiGianBatDau
		{
			get
			{
				return this.entityData.ThoiGianBatDau; 
			}
			
			set
			{
				if (this.entityData.ThoiGianBatDau == value)
					return;
				
                OnPropertyChanging("ThoiGianBatDau");                    
				OnColumnChanging(ThanhTraCoiThiColumn.ThoiGianBatDau, this.entityData.ThoiGianBatDau);
				this.entityData.ThoiGianBatDau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.ThoiGianBatDau, this.entityData.ThoiGianBatDau);
				OnPropertyChanged("ThoiGianBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaPhong property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaPhong
		{
			get
			{
				return this.entityData.MaPhong; 
			}
			
			set
			{
				if (this.entityData.MaPhong == value)
					return;
				
                OnPropertyChanging("MaPhong");                    
				OnColumnChanging(ThanhTraCoiThiColumn.MaPhong, this.entityData.MaPhong);
				this.entityData.MaPhong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.MaPhong, this.entityData.MaPhong);
				OnPropertyChanged("MaPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(ThanhTraCoiThiColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(ThanhTraCoiThiColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this.entityData.TenMonHoc; 
			}
			
			set
			{
				if (this.entityData.TenMonHoc == value)
					return;
				
                OnPropertyChanging("TenMonHoc");                    
				OnColumnChanging(ThanhTraCoiThiColumn.TenMonHoc, this.entityData.TenMonHoc);
				this.entityData.TenMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.TenMonHoc, this.entityData.TenMonHoc);
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThoiGianLamBai property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String ThoiGianLamBai
		{
			get
			{
				return this.entityData.ThoiGianLamBai; 
			}
			
			set
			{
				if (this.entityData.ThoiGianLamBai == value)
					return;
				
                OnPropertyChanging("ThoiGianLamBai");                    
				OnColumnChanging(ThanhTraCoiThiColumn.ThoiGianLamBai, this.entityData.ThoiGianLamBai);
				this.entityData.ThoiGianLamBai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.ThoiGianLamBai, this.entityData.ThoiGianLamBai);
				OnPropertyChanged("ThoiGianLamBai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietBatDau property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietBatDau
		{
			get
			{
				return this.entityData.TietBatDau; 
			}
			
			set
			{
				if (this.entityData.TietBatDau == value)
					return;
				
                OnPropertyChanging("TietBatDau");                    
				OnColumnChanging(ThanhTraCoiThiColumn.TietBatDau, this.entityData.TietBatDau);
				this.entityData.TietBatDau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.TietBatDau, this.entityData.TietBatDau);
				OnPropertyChanged("TietBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopSinhVien property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String MaLopSinhVien
		{
			get
			{
				return this.entityData.MaLopSinhVien; 
			}
			
			set
			{
				if (this.entityData.MaLopSinhVien == value)
					return;
				
                OnPropertyChanging("MaLopSinhVien");                    
				OnColumnChanging(ThanhTraCoiThiColumn.MaLopSinhVien, this.entityData.MaLopSinhVien);
				this.entityData.MaLopSinhVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.MaLopSinhVien, this.entityData.MaLopSinhVien);
				OnPropertyChanged("MaLopSinhVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoLuongSinhVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoLuongSinhVien
		{
			get
			{
				return this.entityData.SoLuongSinhVien; 
			}
			
			set
			{
				if (this.entityData.SoLuongSinhVien == value)
					return;
				
                OnPropertyChanging("SoLuongSinhVien");                    
				OnColumnChanging(ThanhTraCoiThiColumn.SoLuongSinhVien, this.entityData.SoLuongSinhVien);
				this.entityData.SoLuongSinhVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.SoLuongSinhVien, this.entityData.SoLuongSinhVien);
				OnPropertyChanged("SoLuongSinhVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaViPham property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaViPham
		{
			get
			{
				return this.entityData.MaViPham; 
			}
			
			set
			{
				if (this.entityData.MaViPham == value)
					return;
				
                OnPropertyChanging("MaViPham");                    
				OnColumnChanging(ThanhTraCoiThiColumn.MaViPham, this.entityData.MaViPham);
				this.entityData.MaViPham = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.MaViPham, this.entityData.MaViPham);
				OnPropertyChanged("MaViPham");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHinhThucViPhamHrm property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? MaHinhThucViPhamHrm
		{
			get
			{
				return this.entityData.MaHinhThucViPhamHrm; 
			}
			
			set
			{
				if (this.entityData.MaHinhThucViPhamHrm == value)
					return;
				
                OnPropertyChanging("MaHinhThucViPhamHrm");                    
				OnColumnChanging(ThanhTraCoiThiColumn.MaHinhThucViPhamHrm, this.entityData.MaHinhThucViPhamHrm);
				this.entityData.MaHinhThucViPhamHrm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.MaHinhThucViPhamHrm, this.entityData.MaHinhThucViPhamHrm);
				OnPropertyChanged("MaHinhThucViPhamHrm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiSoThanhTra property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiSoThanhTra
		{
			get
			{
				return this.entityData.SiSoThanhTra; 
			}
			
			set
			{
				if (this.entityData.SiSoThanhTra == value)
					return;
				
                OnPropertyChanging("SiSoThanhTra");                    
				OnColumnChanging(ThanhTraCoiThiColumn.SiSoThanhTra, this.entityData.SiSoThanhTra);
				this.entityData.SiSoThanhTra = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.SiSoThanhTra, this.entityData.SiSoThanhTra);
				OnPropertyChanged("SiSoThanhTra");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThoiDiemGhiNhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ThoiDiemGhiNhan
		{
			get
			{
				return this.entityData.ThoiDiemGhiNhan; 
			}
			
			set
			{
				if (this.entityData.ThoiDiemGhiNhan == value)
					return;
				
                OnPropertyChanging("ThoiDiemGhiNhan");                    
				OnColumnChanging(ThanhTraCoiThiColumn.ThoiDiemGhiNhan, this.entityData.ThoiDiemGhiNhan);
				this.entityData.ThoiDiemGhiNhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.ThoiDiemGhiNhan, this.entityData.ThoiDiemGhiNhan);
				OnPropertyChanged("ThoiDiemGhiNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LyDo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2000)]
		public virtual System.String LyDo
		{
			get
			{
				return this.entityData.LyDo; 
			}
			
			set
			{
				if (this.entityData.LyDo == value)
					return;
				
                OnPropertyChanging("LyDo");                    
				OnColumnChanging(ThanhTraCoiThiColumn.LyDo, this.entityData.LyDo);
				this.entityData.LyDo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.LyDo, this.entityData.LyDo);
				OnPropertyChanged("LyDo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2000)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(ThanhTraCoiThiColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(ThanhTraCoiThiColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(ThanhTraCoiThiColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the XacNhan property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? XacNhan
		{
			get
			{
				return this.entityData.XacNhan; 
			}
			
			set
			{
				if (this.entityData.XacNhan == value)
					return;
				
                OnPropertyChanging("XacNhan");                    
				OnColumnChanging(ThanhTraCoiThiColumn.XacNhan, this.entityData.XacNhan);
				this.entityData.XacNhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.XacNhan, this.entityData.XacNhan);
				OnPropertyChanged("XacNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLoaiHocPhan
		{
			get
			{
				return this.entityData.MaLoaiHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLoaiHocPhan == value)
					return;
				
                OnPropertyChanging("MaLoaiHocPhan");                    
				OnColumnChanging(ThanhTraCoiThiColumn.MaLoaiHocPhan, this.entityData.MaLoaiHocPhan);
				this.entityData.MaLoaiHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.MaLoaiHocPhan, this.entityData.MaLoaiHocPhan);
				OnPropertyChanged("MaLoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this.entityData.SoTiet; 
			}
			
			set
			{
				if (this.entityData.SoTiet == value)
					return;
				
                OnPropertyChanging("SoTiet");                    
				OnColumnChanging(ThanhTraCoiThiColumn.SoTiet, this.entityData.SoTiet);
				this.entityData.SoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraCoiThiColumn.SoTiet, this.entityData.SoTiet);
				OnPropertyChanged("SoTiet");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaCanBoCoiThi", "Ma Can Bo Coi Thi"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaCanBoCoiThi", "Ma Can Bo Coi Thi", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayThi", "Ngay Thi", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThoiGianBatDau", "Thoi Gian Bat Dau", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaPhong", "Ma Phong", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenMonHoc", "Ten Mon Hoc", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThoiGianLamBai", "Thoi Gian Lam Bai", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopSinhVien", "Ma Lop Sinh Vien", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaViPham", "Ma Vi Pham", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThoiDiemGhiNhan", "Thoi Diem Ghi Nhan", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LyDo", "Ly Do", 2000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GhiChu", "Ghi Chu", 2000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayCapNhat", "Ngay Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThanhTraCoiThi"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Examination", "MaCanBoCoiThi", "NgayThi", "ThoiGianBatDau", "MaPhong", "MaLopHocPhan", "MaMonHoc", "TenMonHoc", "ThoiGianLamBai", "TietBatDau", "MaLopSinhVien", "SoLuongSinhVien", "MaViPham", "MaHinhThucViPhamHrm", "SiSoThanhTra", "ThoiDiemGhiNhan", "LyDo", "GhiChu", "NgayCapNhat", "NguoiCapNhat", "XacNhan", "MaLoaiHocPhan", "SoTiet"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThanhTraCoiThiEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThanhTraCoiThi) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThanhTraCoiThi>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThanhTraCoiThi);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThanhTraCoiThi Entity 
		///</summary>
		protected virtual ThanhTraCoiThi Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThanhTraCoiThi copy = new ThanhTraCoiThi();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Examination = this.Examination;
					copy.OriginalExamination = this.OriginalExamination;
				copy.MaCanBoCoiThi = this.MaCanBoCoiThi;
					copy.OriginalMaCanBoCoiThi = this.OriginalMaCanBoCoiThi;
				copy.NgayThi = this.NgayThi;
				copy.ThoiGianBatDau = this.ThoiGianBatDau;
				copy.MaPhong = this.MaPhong;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.ThoiGianLamBai = this.ThoiGianLamBai;
				copy.TietBatDau = this.TietBatDau;
				copy.MaLopSinhVien = this.MaLopSinhVien;
				copy.SoLuongSinhVien = this.SoLuongSinhVien;
				copy.MaViPham = this.MaViPham;
				copy.MaHinhThucViPhamHrm = this.MaHinhThucViPhamHrm;
				copy.SiSoThanhTra = this.SiSoThanhTra;
				copy.ThoiDiemGhiNhan = this.ThoiDiemGhiNhan;
				copy.LyDo = this.LyDo;
				copy.GhiChu = this.GhiChu;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.XacNhan = this.XacNhan;
				copy.MaLoaiHocPhan = this.MaLoaiHocPhan;
				copy.SoTiet = this.SoTiet;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThanhTraCoiThi Entity 
		///</summary>
		public virtual ThanhTraCoiThi Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThanhTraCoiThi Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThanhTraCoiThi DeepCopy()
		{
			return EntityHelper.Clone<ThanhTraCoiThi>(this as ThanhTraCoiThi);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThanhTraCoiThiEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThanhTraCoiThiEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThanhTraCoiThiEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThanhTraCoiThiColumn column)
		{
			switch(column)
			{
					case ThanhTraCoiThiColumn.Examination:
					return entityData.Examination != _originalData.Examination;
					case ThanhTraCoiThiColumn.MaCanBoCoiThi:
					return entityData.MaCanBoCoiThi != _originalData.MaCanBoCoiThi;
					case ThanhTraCoiThiColumn.NgayThi:
					return entityData.NgayThi != _originalData.NgayThi;
					case ThanhTraCoiThiColumn.ThoiGianBatDau:
					return entityData.ThoiGianBatDau != _originalData.ThoiGianBatDau;
					case ThanhTraCoiThiColumn.MaPhong:
					return entityData.MaPhong != _originalData.MaPhong;
					case ThanhTraCoiThiColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case ThanhTraCoiThiColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case ThanhTraCoiThiColumn.TenMonHoc:
					return entityData.TenMonHoc != _originalData.TenMonHoc;
					case ThanhTraCoiThiColumn.ThoiGianLamBai:
					return entityData.ThoiGianLamBai != _originalData.ThoiGianLamBai;
					case ThanhTraCoiThiColumn.TietBatDau:
					return entityData.TietBatDau != _originalData.TietBatDau;
					case ThanhTraCoiThiColumn.MaLopSinhVien:
					return entityData.MaLopSinhVien != _originalData.MaLopSinhVien;
					case ThanhTraCoiThiColumn.SoLuongSinhVien:
					return entityData.SoLuongSinhVien != _originalData.SoLuongSinhVien;
					case ThanhTraCoiThiColumn.MaViPham:
					return entityData.MaViPham != _originalData.MaViPham;
					case ThanhTraCoiThiColumn.MaHinhThucViPhamHrm:
					return entityData.MaHinhThucViPhamHrm != _originalData.MaHinhThucViPhamHrm;
					case ThanhTraCoiThiColumn.SiSoThanhTra:
					return entityData.SiSoThanhTra != _originalData.SiSoThanhTra;
					case ThanhTraCoiThiColumn.ThoiDiemGhiNhan:
					return entityData.ThoiDiemGhiNhan != _originalData.ThoiDiemGhiNhan;
					case ThanhTraCoiThiColumn.LyDo:
					return entityData.LyDo != _originalData.LyDo;
					case ThanhTraCoiThiColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case ThanhTraCoiThiColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case ThanhTraCoiThiColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case ThanhTraCoiThiColumn.XacNhan:
					return entityData.XacNhan != _originalData.XacNhan;
					case ThanhTraCoiThiColumn.MaLoaiHocPhan:
					return entityData.MaLoaiHocPhan != _originalData.MaLoaiHocPhan;
					case ThanhTraCoiThiColumn.SoTiet:
					return entityData.SoTiet != _originalData.SoTiet;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThanhTraCoiThiColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Examination != _originalData.Examination;
			result = result || entityData.MaCanBoCoiThi != _originalData.MaCanBoCoiThi;
			result = result || entityData.NgayThi != _originalData.NgayThi;
			result = result || entityData.ThoiGianBatDau != _originalData.ThoiGianBatDau;
			result = result || entityData.MaPhong != _originalData.MaPhong;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.TenMonHoc != _originalData.TenMonHoc;
			result = result || entityData.ThoiGianLamBai != _originalData.ThoiGianLamBai;
			result = result || entityData.TietBatDau != _originalData.TietBatDau;
			result = result || entityData.MaLopSinhVien != _originalData.MaLopSinhVien;
			result = result || entityData.SoLuongSinhVien != _originalData.SoLuongSinhVien;
			result = result || entityData.MaViPham != _originalData.MaViPham;
			result = result || entityData.MaHinhThucViPhamHrm != _originalData.MaHinhThucViPhamHrm;
			result = result || entityData.SiSoThanhTra != _originalData.SiSoThanhTra;
			result = result || entityData.ThoiDiemGhiNhan != _originalData.ThoiDiemGhiNhan;
			result = result || entityData.LyDo != _originalData.LyDo;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.XacNhan != _originalData.XacNhan;
			result = result || entityData.MaLoaiHocPhan != _originalData.MaLoaiHocPhan;
			result = result || entityData.SoTiet != _originalData.SoTiet;
			return result;
		}	
		
		///<summary>
		///  Returns a ThanhTraCoiThi Entity with the original data.
		///</summary>
		public ThanhTraCoiThi GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThanhTraCoiThi(
				_originalData.Examination,
				_originalData.MaCanBoCoiThi,
				_originalData.NgayThi,
				_originalData.ThoiGianBatDau,
				_originalData.MaPhong,
				_originalData.MaLopHocPhan,
				_originalData.MaMonHoc,
				_originalData.TenMonHoc,
				_originalData.ThoiGianLamBai,
				_originalData.TietBatDau,
				_originalData.MaLopSinhVien,
				_originalData.SoLuongSinhVien,
				_originalData.MaViPham,
				_originalData.MaHinhThucViPhamHrm,
				_originalData.SiSoThanhTra,
				_originalData.ThoiDiemGhiNhan,
				_originalData.LyDo,
				_originalData.GhiChu,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.XacNhan,
				_originalData.MaLoaiHocPhan,
				_originalData.SoTiet
				);
				
			return (ThanhTraCoiThi)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThanhTraCoiThiBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThanhTraCoiThiBase)
				return ValueEquals(this, (ThanhTraCoiThiBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThanhTraCoiThiBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Examination.GetHashCode() ^ 
					this.MaCanBoCoiThi.GetHashCode() ^ 
					((this.NgayThi == null) ? string.Empty : this.NgayThi.ToString()).GetHashCode() ^ 
					((this.ThoiGianBatDau == null) ? string.Empty : this.ThoiGianBatDau.ToString()).GetHashCode() ^ 
					((this.MaPhong == null) ? string.Empty : this.MaPhong.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString()).GetHashCode() ^ 
					((this.ThoiGianLamBai == null) ? string.Empty : this.ThoiGianLamBai.ToString()).GetHashCode() ^ 
					((this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString()).GetHashCode() ^ 
					((this.MaLopSinhVien == null) ? string.Empty : this.MaLopSinhVien.ToString()).GetHashCode() ^ 
					((this.SoLuongSinhVien == null) ? string.Empty : this.SoLuongSinhVien.ToString()).GetHashCode() ^ 
					((this.MaViPham == null) ? string.Empty : this.MaViPham.ToString()).GetHashCode() ^ 
					((this.MaHinhThucViPhamHrm == null) ? string.Empty : this.MaHinhThucViPhamHrm.ToString()).GetHashCode() ^ 
					((this.SiSoThanhTra == null) ? string.Empty : this.SiSoThanhTra.ToString()).GetHashCode() ^ 
					((this.ThoiDiemGhiNhan == null) ? string.Empty : this.ThoiDiemGhiNhan.ToString()).GetHashCode() ^ 
					((this.LyDo == null) ? string.Empty : this.LyDo.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.XacNhan == null) ? string.Empty : this.XacNhan.ToString()).GetHashCode() ^ 
					((this.MaLoaiHocPhan == null) ? string.Empty : this.MaLoaiHocPhan.ToString()).GetHashCode() ^ 
					((this.SoTiet == null) ? string.Empty : this.SoTiet.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThanhTraCoiThiBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThanhTraCoiThiBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThanhTraCoiThiBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThanhTraCoiThiBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThanhTraCoiThiBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThanhTraCoiThiBase Object1, ThanhTraCoiThiBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Examination != Object2.Examination)
				equal = false;
			if (Object1.MaCanBoCoiThi != Object2.MaCanBoCoiThi)
				equal = false;
			if ( Object1.NgayThi != null && Object2.NgayThi != null )
			{
				if (Object1.NgayThi != Object2.NgayThi)
					equal = false;
			}
			else if (Object1.NgayThi == null ^ Object2.NgayThi == null )
			{
				equal = false;
			}
			if ( Object1.ThoiGianBatDau != null && Object2.ThoiGianBatDau != null )
			{
				if (Object1.ThoiGianBatDau != Object2.ThoiGianBatDau)
					equal = false;
			}
			else if (Object1.ThoiGianBatDau == null ^ Object2.ThoiGianBatDau == null )
			{
				equal = false;
			}
			if ( Object1.MaPhong != null && Object2.MaPhong != null )
			{
				if (Object1.MaPhong != Object2.MaPhong)
					equal = false;
			}
			else if (Object1.MaPhong == null ^ Object2.MaPhong == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.TenMonHoc != null && Object2.TenMonHoc != null )
			{
				if (Object1.TenMonHoc != Object2.TenMonHoc)
					equal = false;
			}
			else if (Object1.TenMonHoc == null ^ Object2.TenMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.ThoiGianLamBai != null && Object2.ThoiGianLamBai != null )
			{
				if (Object1.ThoiGianLamBai != Object2.ThoiGianLamBai)
					equal = false;
			}
			else if (Object1.ThoiGianLamBai == null ^ Object2.ThoiGianLamBai == null )
			{
				equal = false;
			}
			if ( Object1.TietBatDau != null && Object2.TietBatDau != null )
			{
				if (Object1.TietBatDau != Object2.TietBatDau)
					equal = false;
			}
			else if (Object1.TietBatDau == null ^ Object2.TietBatDau == null )
			{
				equal = false;
			}
			if ( Object1.MaLopSinhVien != null && Object2.MaLopSinhVien != null )
			{
				if (Object1.MaLopSinhVien != Object2.MaLopSinhVien)
					equal = false;
			}
			else if (Object1.MaLopSinhVien == null ^ Object2.MaLopSinhVien == null )
			{
				equal = false;
			}
			if ( Object1.SoLuongSinhVien != null && Object2.SoLuongSinhVien != null )
			{
				if (Object1.SoLuongSinhVien != Object2.SoLuongSinhVien)
					equal = false;
			}
			else if (Object1.SoLuongSinhVien == null ^ Object2.SoLuongSinhVien == null )
			{
				equal = false;
			}
			if ( Object1.MaViPham != null && Object2.MaViPham != null )
			{
				if (Object1.MaViPham != Object2.MaViPham)
					equal = false;
			}
			else if (Object1.MaViPham == null ^ Object2.MaViPham == null )
			{
				equal = false;
			}
			if ( Object1.MaHinhThucViPhamHrm != null && Object2.MaHinhThucViPhamHrm != null )
			{
				if (Object1.MaHinhThucViPhamHrm != Object2.MaHinhThucViPhamHrm)
					equal = false;
			}
			else if (Object1.MaHinhThucViPhamHrm == null ^ Object2.MaHinhThucViPhamHrm == null )
			{
				equal = false;
			}
			if ( Object1.SiSoThanhTra != null && Object2.SiSoThanhTra != null )
			{
				if (Object1.SiSoThanhTra != Object2.SiSoThanhTra)
					equal = false;
			}
			else if (Object1.SiSoThanhTra == null ^ Object2.SiSoThanhTra == null )
			{
				equal = false;
			}
			if ( Object1.ThoiDiemGhiNhan != null && Object2.ThoiDiemGhiNhan != null )
			{
				if (Object1.ThoiDiemGhiNhan != Object2.ThoiDiemGhiNhan)
					equal = false;
			}
			else if (Object1.ThoiDiemGhiNhan == null ^ Object2.ThoiDiemGhiNhan == null )
			{
				equal = false;
			}
			if ( Object1.LyDo != null && Object2.LyDo != null )
			{
				if (Object1.LyDo != Object2.LyDo)
					equal = false;
			}
			else if (Object1.LyDo == null ^ Object2.LyDo == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.XacNhan != null && Object2.XacNhan != null )
			{
				if (Object1.XacNhan != Object2.XacNhan)
					equal = false;
			}
			else if (Object1.XacNhan == null ^ Object2.XacNhan == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiHocPhan != null && Object2.MaLoaiHocPhan != null )
			{
				if (Object1.MaLoaiHocPhan != Object2.MaLoaiHocPhan)
					equal = false;
			}
			else if (Object1.MaLoaiHocPhan == null ^ Object2.MaLoaiHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object2.SoTiet == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThanhTraCoiThiBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThanhTraCoiThiComparer GetComparer()
        {
            return new ThanhTraCoiThiComparer();
        }
        */

        // Comparer delegates back to ThanhTraCoiThi
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThanhTraCoiThi rhs, ThanhTraCoiThiColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThanhTraCoiThiColumn.Examination:
            		return this.Examination.CompareTo(rhs.Examination);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.MaCanBoCoiThi:
            		return this.MaCanBoCoiThi.CompareTo(rhs.MaCanBoCoiThi);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.NgayThi:
            		return this.NgayThi.CompareTo(rhs.NgayThi);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.ThoiGianBatDau:
            		return this.ThoiGianBatDau.CompareTo(rhs.ThoiGianBatDau);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.MaPhong:
            		return this.MaPhong.CompareTo(rhs.MaPhong);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.TenMonHoc:
            		return this.TenMonHoc.CompareTo(rhs.TenMonHoc);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.ThoiGianLamBai:
            		return this.ThoiGianLamBai.CompareTo(rhs.ThoiGianLamBai);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.TietBatDau:
            		return this.TietBatDau.Value.CompareTo(rhs.TietBatDau.Value);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.MaLopSinhVien:
            		return this.MaLopSinhVien.CompareTo(rhs.MaLopSinhVien);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.SoLuongSinhVien:
            		return this.SoLuongSinhVien.Value.CompareTo(rhs.SoLuongSinhVien.Value);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.MaViPham:
            		return this.MaViPham.CompareTo(rhs.MaViPham);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.MaHinhThucViPhamHrm:
            		return this.MaHinhThucViPhamHrm.Value.CompareTo(rhs.MaHinhThucViPhamHrm.Value);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.SiSoThanhTra:
            		return this.SiSoThanhTra.Value.CompareTo(rhs.SiSoThanhTra.Value);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.ThoiDiemGhiNhan:
            		return this.ThoiDiemGhiNhan.CompareTo(rhs.ThoiDiemGhiNhan);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.LyDo:
            		return this.LyDo.CompareTo(rhs.LyDo);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.NgayCapNhat:
            		return this.NgayCapNhat.CompareTo(rhs.NgayCapNhat);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.XacNhan:
            		return this.XacNhan.Value.CompareTo(rhs.XacNhan.Value);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.MaLoaiHocPhan:
            		return this.MaLoaiHocPhan.Value.CompareTo(rhs.MaLoaiHocPhan.Value);
            		
            		                 
            	
            	
            	case ThanhTraCoiThiColumn.SoTiet:
            		return this.SoTiet.Value.CompareTo(rhs.SoTiet.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThanhTraCoiThiKey> Members
		
		// member variable for the EntityId property
		private ThanhTraCoiThiKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThanhTraCoiThiKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThanhTraCoiThiKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThanhTraCoiThi")
					.Append("|").Append( this.Examination.ToString())
					.Append("|").Append( this.MaCanBoCoiThi.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- Examination: {0}{23}- MaCanBoCoiThi: {1}{23}- NgayThi: {2}{23}- ThoiGianBatDau: {3}{23}- MaPhong: {4}{23}- MaLopHocPhan: {5}{23}- MaMonHoc: {6}{23}- TenMonHoc: {7}{23}- ThoiGianLamBai: {8}{23}- TietBatDau: {9}{23}- MaLopSinhVien: {10}{23}- SoLuongSinhVien: {11}{23}- MaViPham: {12}{23}- MaHinhThucViPhamHrm: {13}{23}- SiSoThanhTra: {14}{23}- ThoiDiemGhiNhan: {15}{23}- LyDo: {16}{23}- GhiChu: {17}{23}- NgayCapNhat: {18}{23}- NguoiCapNhat: {19}{23}- XacNhan: {20}{23}- MaLoaiHocPhan: {21}{23}- SoTiet: {22}{23}{25}", 
				this.Examination,
				this.MaCanBoCoiThi,
				(this.NgayThi == null) ? string.Empty : this.NgayThi.ToString(),
				(this.ThoiGianBatDau == null) ? string.Empty : this.ThoiGianBatDau.ToString(),
				(this.MaPhong == null) ? string.Empty : this.MaPhong.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString(),
				(this.ThoiGianLamBai == null) ? string.Empty : this.ThoiGianLamBai.ToString(),
				(this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString(),
				(this.MaLopSinhVien == null) ? string.Empty : this.MaLopSinhVien.ToString(),
				(this.SoLuongSinhVien == null) ? string.Empty : this.SoLuongSinhVien.ToString(),
				(this.MaViPham == null) ? string.Empty : this.MaViPham.ToString(),
				(this.MaHinhThucViPhamHrm == null) ? string.Empty : this.MaHinhThucViPhamHrm.ToString(),
				(this.SiSoThanhTra == null) ? string.Empty : this.SiSoThanhTra.ToString(),
				(this.ThoiDiemGhiNhan == null) ? string.Empty : this.ThoiDiemGhiNhan.ToString(),
				(this.LyDo == null) ? string.Empty : this.LyDo.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.XacNhan == null) ? string.Empty : this.XacNhan.ToString(),
				(this.MaLoaiHocPhan == null) ? string.Empty : this.MaLoaiHocPhan.ToString(),
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThanhTraCoiThi' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThanhTraCoiThiEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Examination : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThanhTraCoiThi"</remarks>
		public System.Int32 Examination;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalExamination;
		
		/// <summary>			
		/// MaCanBoCoiThi : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThanhTraCoiThi"</remarks>
		public System.String MaCanBoCoiThi;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalMaCanBoCoiThi;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NgayThi : 
		/// </summary>
		public System.String NgayThi = null;
		
		/// <summary>
		/// ThoiGianBatDau : 
		/// </summary>
		public System.String ThoiGianBatDau = null;
		
		/// <summary>
		/// MaPhong : 
		/// </summary>
		public System.String MaPhong = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		public System.String TenMonHoc = null;
		
		/// <summary>
		/// ThoiGianLamBai : 
		/// </summary>
		public System.String ThoiGianLamBai = null;
		
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		public System.Int32? TietBatDau = null;
		
		/// <summary>
		/// MaLopSinhVien : 
		/// </summary>
		public System.String MaLopSinhVien = null;
		
		/// <summary>
		/// SoLuongSinhVien : 
		/// </summary>
		public System.Int32? SoLuongSinhVien = null;
		
		/// <summary>
		/// MaViPham : 
		/// </summary>
		public System.String MaViPham = null;
		
		/// <summary>
		/// MaHinhThucViPhamHrm : 
		/// </summary>
		public System.Guid? MaHinhThucViPhamHrm = null;
		
		/// <summary>
		/// SiSoThanhTra : 
		/// </summary>
		public System.Int32? SiSoThanhTra = null;
		
		/// <summary>
		/// ThoiDiemGhiNhan : 
		/// </summary>
		public System.String ThoiDiemGhiNhan = null;
		
		/// <summary>
		/// LyDo : 
		/// </summary>
		public System.String LyDo = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.String NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// XacNhan : 
		/// </summary>
		public System.Boolean? XacNhan = null;
		
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		public System.Int32? MaLoaiHocPhan = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		public System.Int32? SoTiet = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThanhTraCoiThiEntityData _tmp = new ThanhTraCoiThiEntityData();
						
			_tmp.Examination = this.Examination;
			_tmp.OriginalExamination = this.OriginalExamination;
			_tmp.MaCanBoCoiThi = this.MaCanBoCoiThi;
			_tmp.OriginalMaCanBoCoiThi = this.OriginalMaCanBoCoiThi;
			
			_tmp.NgayThi = this.NgayThi;
			_tmp.ThoiGianBatDau = this.ThoiGianBatDau;
			_tmp.MaPhong = this.MaPhong;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.ThoiGianLamBai = this.ThoiGianLamBai;
			_tmp.TietBatDau = this.TietBatDau;
			_tmp.MaLopSinhVien = this.MaLopSinhVien;
			_tmp.SoLuongSinhVien = this.SoLuongSinhVien;
			_tmp.MaViPham = this.MaViPham;
			_tmp.MaHinhThucViPhamHrm = this.MaHinhThucViPhamHrm;
			_tmp.SiSoThanhTra = this.SiSoThanhTra;
			_tmp.ThoiDiemGhiNhan = this.ThoiDiemGhiNhan;
			_tmp.LyDo = this.LyDo;
			_tmp.GhiChu = this.GhiChu;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.XacNhan = this.XacNhan;
			_tmp.MaLoaiHocPhan = this.MaLoaiHocPhan;
			_tmp.SoTiet = this.SoTiet;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThanhTraCoiThiEntityData _tmp = new ThanhTraCoiThiEntityData();
						
			_tmp.Examination = this.Examination;
			_tmp.OriginalExamination = this.OriginalExamination;
			_tmp.MaCanBoCoiThi = this.MaCanBoCoiThi;
			_tmp.OriginalMaCanBoCoiThi = this.OriginalMaCanBoCoiThi;
			
			_tmp.NgayThi = this.NgayThi;
			_tmp.ThoiGianBatDau = this.ThoiGianBatDau;
			_tmp.MaPhong = this.MaPhong;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.ThoiGianLamBai = this.ThoiGianLamBai;
			_tmp.TietBatDau = this.TietBatDau;
			_tmp.MaLopSinhVien = this.MaLopSinhVien;
			_tmp.SoLuongSinhVien = this.SoLuongSinhVien;
			_tmp.MaViPham = this.MaViPham;
			_tmp.MaHinhThucViPhamHrm = this.MaHinhThucViPhamHrm;
			_tmp.SiSoThanhTra = this.SiSoThanhTra;
			_tmp.ThoiDiemGhiNhan = this.ThoiDiemGhiNhan;
			_tmp.LyDo = this.LyDo;
			_tmp.GhiChu = this.GhiChu;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.XacNhan = this.XacNhan;
			_tmp.MaLoaiHocPhan = this.MaLoaiHocPhan;
			_tmp.SoTiet = this.SoTiet;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhTraCoiThiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThanhTraCoiThiColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhTraCoiThiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThanhTraCoiThiColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhTraCoiThiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThanhTraCoiThiColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThanhTraCoiThiEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThanhTraCoiThiEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhTraCoiThiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThanhTraCoiThiColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThanhTraCoiThiEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThanhTraCoiThiEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThanhTraCoiThiEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThanhTraCoiThi"/> object.
	/// </remarks>
	public class ThanhTraCoiThiEventArgs : System.EventArgs
	{
		private ThanhTraCoiThiColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThanhTraCoiThiEventArgs class.
		///</summary>
		public ThanhTraCoiThiEventArgs(ThanhTraCoiThiColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThanhTraCoiThiEventArgs class.
		///</summary>
		public ThanhTraCoiThiEventArgs(ThanhTraCoiThiColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThanhTraCoiThiColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThanhTraCoiThiColumn" />
		public ThanhTraCoiThiColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThanhTraCoiThi related events.
	///</summary>
	public delegate void ThanhTraCoiThiEventHandler(object sender, ThanhTraCoiThiEventArgs e);
	
	#region ThanhTraCoiThiComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThanhTraCoiThiComparer : System.Collections.Generic.IComparer<ThanhTraCoiThi>
	{
		ThanhTraCoiThiColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThanhTraCoiThiComparer"/> class.
        /// </summary>
		public ThanhTraCoiThiComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThanhTraCoiThiComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThanhTraCoiThiComparer(ThanhTraCoiThiColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThanhTraCoiThi"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThanhTraCoiThi"/> to compare.</param>
        /// <param name="b">The second <c>ThanhTraCoiThi</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThanhTraCoiThi a, ThanhTraCoiThi b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThanhTraCoiThi entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThanhTraCoiThi a, ThanhTraCoiThi b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThanhTraCoiThiColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThanhTraCoiThiKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThanhTraCoiThi"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThanhTraCoiThiKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiKey class.
		/// </summary>
		public ThanhTraCoiThiKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiKey class.
		/// </summary>
		public ThanhTraCoiThiKey(ThanhTraCoiThiBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Examination = entity.Examination;
				this.MaCanBoCoiThi = entity.MaCanBoCoiThi;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiKey class.
		/// </summary>
		public ThanhTraCoiThiKey(System.Int32 _examination, System.String _maCanBoCoiThi)
		{
			#region Init Properties

			this.Examination = _examination;
			this.MaCanBoCoiThi = _maCanBoCoiThi;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThanhTraCoiThiBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThanhTraCoiThiBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Examination property
		private System.Int32 _examination;
		
		/// <summary>
		/// Gets or sets the Examination property.
		/// </summary>
		public System.Int32 Examination
		{
			get { return _examination; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Examination = value;
				
				_examination = value;
			}
		}
		
		// member variable for the MaCanBoCoiThi property
		private System.String _maCanBoCoiThi;
		
		/// <summary>
		/// Gets or sets the MaCanBoCoiThi property.
		/// </summary>
		public System.String MaCanBoCoiThi
		{
			get { return _maCanBoCoiThi; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaCanBoCoiThi = value;
				
				_maCanBoCoiThi = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Examination = ( values["Examination"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Examination"], typeof(System.Int32)) : (int)0;
				MaCanBoCoiThi = ( values["MaCanBoCoiThi"] != null ) ? (System.String) EntityUtil.ChangeType(values["MaCanBoCoiThi"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Examination", Examination);
			values.Add("MaCanBoCoiThi", MaCanBoCoiThi);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Examination: {0}{2}MaCanBoCoiThi: {1}{2}",
								Examination,
								MaCanBoCoiThi,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThanhTraCoiThiColumn Enum
	
	/// <summary>
	/// Enumerate the ThanhTraCoiThi columns.
	/// </summary>
	[Serializable]
	public enum ThanhTraCoiThiColumn : int
	{
		/// <summary>
		/// Examination : 
		/// </summary>
		[EnumTextValue("Examination")]
		[ColumnEnum("Examination", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		Examination = 1,
		/// <summary>
		/// MaCanBoCoiThi : 
		/// </summary>
		[EnumTextValue("Ma Can Bo Coi Thi")]
		[ColumnEnum("MaCanBoCoiThi", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 20)]
		MaCanBoCoiThi = 2,
		/// <summary>
		/// NgayThi : 
		/// </summary>
		[EnumTextValue("Ngay Thi")]
		[ColumnEnum("NgayThi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		NgayThi = 3,
		/// <summary>
		/// ThoiGianBatDau : 
		/// </summary>
		[EnumTextValue("Thoi Gian Bat Dau")]
		[ColumnEnum("ThoiGianBatDau", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ThoiGianBatDau = 4,
		/// <summary>
		/// MaPhong : 
		/// </summary>
		[EnumTextValue("Ma Phong")]
		[ColumnEnum("MaPhong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaPhong = 5,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaLopHocPhan = 6,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 7,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("Ten Mon Hoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TenMonHoc = 8,
		/// <summary>
		/// ThoiGianLamBai : 
		/// </summary>
		[EnumTextValue("Thoi Gian Lam Bai")]
		[ColumnEnum("ThoiGianLamBai", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		ThoiGianLamBai = 9,
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		[EnumTextValue("Tiet Bat Dau")]
		[ColumnEnum("TietBatDau", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietBatDau = 10,
		/// <summary>
		/// MaLopSinhVien : 
		/// </summary>
		[EnumTextValue("Ma Lop Sinh Vien")]
		[ColumnEnum("MaLopSinhVien", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		MaLopSinhVien = 11,
		/// <summary>
		/// SoLuongSinhVien : 
		/// </summary>
		[EnumTextValue("So Luong Sinh Vien")]
		[ColumnEnum("SoLuongSinhVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuongSinhVien = 12,
		/// <summary>
		/// MaViPham : 
		/// </summary>
		[EnumTextValue("Ma Vi Pham")]
		[ColumnEnum("MaViPham", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaViPham = 13,
		/// <summary>
		/// MaHinhThucViPhamHrm : 
		/// </summary>
		[EnumTextValue("Ma Hinh Thuc Vi Pham Hrm")]
		[ColumnEnum("MaHinhThucViPhamHrm", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		MaHinhThucViPhamHrm = 14,
		/// <summary>
		/// SiSoThanhTra : 
		/// </summary>
		[EnumTextValue("Si So Thanh Tra")]
		[ColumnEnum("SiSoThanhTra", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSoThanhTra = 15,
		/// <summary>
		/// ThoiDiemGhiNhan : 
		/// </summary>
		[EnumTextValue("Thoi Diem Ghi Nhan")]
		[ColumnEnum("ThoiDiemGhiNhan", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ThoiDiemGhiNhan = 16,
		/// <summary>
		/// LyDo : 
		/// </summary>
		[EnumTextValue("Ly Do")]
		[ColumnEnum("LyDo", typeof(System.String), System.Data.DbType.String, false, false, true, 2000)]
		LyDo = 17,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 2000)]
		GhiChu = 18,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgayCapNhat = 19,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 20,
		/// <summary>
		/// XacNhan : 
		/// </summary>
		[EnumTextValue("Xac Nhan")]
		[ColumnEnum("XacNhan", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		XacNhan = 21,
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Loai Hoc Phan")]
		[ColumnEnum("MaLoaiHocPhan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiHocPhan = 22,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("So Tiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet = 23
	}//End enum

	#endregion ThanhTraCoiThiColumn Enum

} // end namespace
