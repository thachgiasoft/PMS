
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file KhoiLuongGiangDayChiTiet.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'KhoiLuongGiangDayChiTiet' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class KhoiLuongGiangDayChiTietBase : EntityBase, IKhoiLuongGiangDayChiTiet, IEntityId<KhoiLuongGiangDayChiTietKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private KhoiLuongGiangDayChiTietEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private KhoiLuongGiangDayChiTietEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private KhoiLuongGiangDayChiTietEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<KhoiLuongGiangDayChiTiet> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KhoiLuongGiangDayChiTietEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KhoiLuongGiangDayChiTietEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="KhoiLuongGiangDayChiTietBase"/> instance.
		///</summary>
		public KhoiLuongGiangDayChiTietBase()
		{
			this.entityData = new KhoiLuongGiangDayChiTietEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="KhoiLuongGiangDayChiTietBase"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_nhom"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_baiTap"></param>
		///<param name="_baiTapLon"></param>
		///<param name="_doAn"></param>
		///<param name="_luanAn"></param>
		///<param name="_tieuLuan"></param>
		///<param name="_thucTap"></param>
		///<param name="_soLuong"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_phanLoai"></param>
		///<param name="_heSoThanhPhan"></param>
		///<param name="_nam"></param>
		///<param name="_tuan"></param>
		///<param name="_donViTinh"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_tinhTrang"></param>
		///<param name="_ngayDay"></param>
		///<param name="_compensate"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maKhoa"></param>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_maPhongHoc"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_loaiHocKy"></param>
		///<param name="_heSoHocKy"></param>
		///<param name="_namThu"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maChucVu"></param>
		///<param name="_maHinhThucDaoTao"></param>
		///<param name="_ghiChu"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_lopHocPhanChuyenNganh"></param>
		///<param name="_dotImport"></param>
		///<param name="_daoTaoTinChi"></param>
		///<param name="_maCauHinhChotGio"></param>
		public KhoiLuongGiangDayChiTietBase(System.Int32 _maLichHoc, System.String _maGiangVien, 
			System.String _maLopHocPhan, System.String _namHoc, System.String _hocKy, 
			System.String _maMonHoc, System.String _tenMonHoc, System.String _nhom, 
			System.Decimal _soTinChi, System.Decimal _lyThuyet, System.Decimal _thucHanh, 
			System.Decimal _baiTap, System.Decimal _baiTapLon, System.Decimal _doAn, 
			System.Decimal _luanAn, System.Decimal _tieuLuan, System.Decimal _thucTap, 
			System.Int32? _soLuong, System.Byte _maLoaiHocPhan, System.String _loaiHocPhan, 
			System.String _phanLoai, System.Decimal? _heSoThanhPhan, System.Int32? _nam, 
			System.Int32? _tuan, System.String _donViTinh, System.Int32? _maBuoiHoc, 
			System.String _maLop, System.Int32? _tietBatDau, System.Decimal? _soTiet, 
			System.Int32 _tinhTrang, System.DateTime? _ngayDay, System.Byte? _compensate, 
			System.String _maBacDaoTao, System.String _maKhoa, System.String _maNhomMonHoc, 
			System.String _maPhongHoc, System.String _maKhoaHoc, System.Byte? _loaiHocKy, 
			System.Decimal? _heSoHocKy, System.String _namThu, System.Int32? _maHocHam, 
			System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien, System.Int32? _maChucVu, 
			System.String _maHinhThucDaoTao, System.String _ghiChu, System.String _ngayCapNhat, 
			System.Boolean? _lopHocPhanChuyenNganh, System.String _dotImport, System.Boolean? _daoTaoTinChi, 
			System.Int32? _maCauHinhChotGio)
		{
			this.entityData = new KhoiLuongGiangDayChiTietEntityData();
			this.backupData = null;

			this.MaLichHoc = _maLichHoc;
			this.MaGiangVien = _maGiangVien;
			this.MaLopHocPhan = _maLopHocPhan;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaMonHoc = _maMonHoc;
			this.TenMonHoc = _tenMonHoc;
			this.Nhom = _nhom;
			this.SoTinChi = _soTinChi;
			this.LyThuyet = _lyThuyet;
			this.ThucHanh = _thucHanh;
			this.BaiTap = _baiTap;
			this.BaiTapLon = _baiTapLon;
			this.DoAn = _doAn;
			this.LuanAn = _luanAn;
			this.TieuLuan = _tieuLuan;
			this.ThucTap = _thucTap;
			this.SoLuong = _soLuong;
			this.MaLoaiHocPhan = _maLoaiHocPhan;
			this.LoaiHocPhan = _loaiHocPhan;
			this.PhanLoai = _phanLoai;
			this.HeSoThanhPhan = _heSoThanhPhan;
			this.Nam = _nam;
			this.Tuan = _tuan;
			this.DonViTinh = _donViTinh;
			this.MaBuoiHoc = _maBuoiHoc;
			this.MaLop = _maLop;
			this.TietBatDau = _tietBatDau;
			this.SoTiet = _soTiet;
			this.TinhTrang = _tinhTrang;
			this.NgayDay = _ngayDay;
			this.Compensate = _compensate;
			this.MaBacDaoTao = _maBacDaoTao;
			this.MaKhoa = _maKhoa;
			this.MaNhomMonHoc = _maNhomMonHoc;
			this.MaPhongHoc = _maPhongHoc;
			this.MaKhoaHoc = _maKhoaHoc;
			this.LoaiHocKy = _loaiHocKy;
			this.HeSoHocKy = _heSoHocKy;
			this.NamThu = _namThu;
			this.MaHocHam = _maHocHam;
			this.MaHocVi = _maHocVi;
			this.MaLoaiGiangVien = _maLoaiGiangVien;
			this.MaChucVu = _maChucVu;
			this.MaHinhThucDaoTao = _maHinhThucDaoTao;
			this.GhiChu = _ghiChu;
			this.NgayCapNhat = _ngayCapNhat;
			this.LopHocPhanChuyenNganh = _lopHocPhanChuyenNganh;
			this.DotImport = _dotImport;
			this.DaoTaoTinChi = _daoTaoTinChi;
			this.MaCauHinhChotGio = _maCauHinhChotGio;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="KhoiLuongGiangDayChiTiet"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_nhom"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_baiTap"></param>
		///<param name="_baiTapLon"></param>
		///<param name="_doAn"></param>
		///<param name="_luanAn"></param>
		///<param name="_tieuLuan"></param>
		///<param name="_thucTap"></param>
		///<param name="_soLuong"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_phanLoai"></param>
		///<param name="_heSoThanhPhan"></param>
		///<param name="_nam"></param>
		///<param name="_tuan"></param>
		///<param name="_donViTinh"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_tinhTrang"></param>
		///<param name="_ngayDay"></param>
		///<param name="_compensate"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maKhoa"></param>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_maPhongHoc"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_loaiHocKy"></param>
		///<param name="_heSoHocKy"></param>
		///<param name="_namThu"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maChucVu"></param>
		///<param name="_maHinhThucDaoTao"></param>
		///<param name="_ghiChu"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_lopHocPhanChuyenNganh"></param>
		///<param name="_dotImport"></param>
		///<param name="_daoTaoTinChi"></param>
		///<param name="_maCauHinhChotGio"></param>
		public static KhoiLuongGiangDayChiTiet CreateKhoiLuongGiangDayChiTiet(System.Int32 _maLichHoc, System.String _maGiangVien, 
			System.String _maLopHocPhan, System.String _namHoc, System.String _hocKy, 
			System.String _maMonHoc, System.String _tenMonHoc, System.String _nhom, 
			System.Decimal _soTinChi, System.Decimal _lyThuyet, System.Decimal _thucHanh, 
			System.Decimal _baiTap, System.Decimal _baiTapLon, System.Decimal _doAn, 
			System.Decimal _luanAn, System.Decimal _tieuLuan, System.Decimal _thucTap, 
			System.Int32? _soLuong, System.Byte _maLoaiHocPhan, System.String _loaiHocPhan, 
			System.String _phanLoai, System.Decimal? _heSoThanhPhan, System.Int32? _nam, 
			System.Int32? _tuan, System.String _donViTinh, System.Int32? _maBuoiHoc, 
			System.String _maLop, System.Int32? _tietBatDau, System.Decimal? _soTiet, 
			System.Int32 _tinhTrang, System.DateTime? _ngayDay, System.Byte? _compensate, 
			System.String _maBacDaoTao, System.String _maKhoa, System.String _maNhomMonHoc, 
			System.String _maPhongHoc, System.String _maKhoaHoc, System.Byte? _loaiHocKy, 
			System.Decimal? _heSoHocKy, System.String _namThu, System.Int32? _maHocHam, 
			System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien, System.Int32? _maChucVu, 
			System.String _maHinhThucDaoTao, System.String _ghiChu, System.String _ngayCapNhat, 
			System.Boolean? _lopHocPhanChuyenNganh, System.String _dotImport, System.Boolean? _daoTaoTinChi, 
			System.Int32? _maCauHinhChotGio)
		{
			KhoiLuongGiangDayChiTiet newKhoiLuongGiangDayChiTiet = new KhoiLuongGiangDayChiTiet();
			newKhoiLuongGiangDayChiTiet.MaLichHoc = _maLichHoc;
			newKhoiLuongGiangDayChiTiet.MaGiangVien = _maGiangVien;
			newKhoiLuongGiangDayChiTiet.MaLopHocPhan = _maLopHocPhan;
			newKhoiLuongGiangDayChiTiet.NamHoc = _namHoc;
			newKhoiLuongGiangDayChiTiet.HocKy = _hocKy;
			newKhoiLuongGiangDayChiTiet.MaMonHoc = _maMonHoc;
			newKhoiLuongGiangDayChiTiet.TenMonHoc = _tenMonHoc;
			newKhoiLuongGiangDayChiTiet.Nhom = _nhom;
			newKhoiLuongGiangDayChiTiet.SoTinChi = _soTinChi;
			newKhoiLuongGiangDayChiTiet.LyThuyet = _lyThuyet;
			newKhoiLuongGiangDayChiTiet.ThucHanh = _thucHanh;
			newKhoiLuongGiangDayChiTiet.BaiTap = _baiTap;
			newKhoiLuongGiangDayChiTiet.BaiTapLon = _baiTapLon;
			newKhoiLuongGiangDayChiTiet.DoAn = _doAn;
			newKhoiLuongGiangDayChiTiet.LuanAn = _luanAn;
			newKhoiLuongGiangDayChiTiet.TieuLuan = _tieuLuan;
			newKhoiLuongGiangDayChiTiet.ThucTap = _thucTap;
			newKhoiLuongGiangDayChiTiet.SoLuong = _soLuong;
			newKhoiLuongGiangDayChiTiet.MaLoaiHocPhan = _maLoaiHocPhan;
			newKhoiLuongGiangDayChiTiet.LoaiHocPhan = _loaiHocPhan;
			newKhoiLuongGiangDayChiTiet.PhanLoai = _phanLoai;
			newKhoiLuongGiangDayChiTiet.HeSoThanhPhan = _heSoThanhPhan;
			newKhoiLuongGiangDayChiTiet.Nam = _nam;
			newKhoiLuongGiangDayChiTiet.Tuan = _tuan;
			newKhoiLuongGiangDayChiTiet.DonViTinh = _donViTinh;
			newKhoiLuongGiangDayChiTiet.MaBuoiHoc = _maBuoiHoc;
			newKhoiLuongGiangDayChiTiet.MaLop = _maLop;
			newKhoiLuongGiangDayChiTiet.TietBatDau = _tietBatDau;
			newKhoiLuongGiangDayChiTiet.SoTiet = _soTiet;
			newKhoiLuongGiangDayChiTiet.TinhTrang = _tinhTrang;
			newKhoiLuongGiangDayChiTiet.NgayDay = _ngayDay;
			newKhoiLuongGiangDayChiTiet.Compensate = _compensate;
			newKhoiLuongGiangDayChiTiet.MaBacDaoTao = _maBacDaoTao;
			newKhoiLuongGiangDayChiTiet.MaKhoa = _maKhoa;
			newKhoiLuongGiangDayChiTiet.MaNhomMonHoc = _maNhomMonHoc;
			newKhoiLuongGiangDayChiTiet.MaPhongHoc = _maPhongHoc;
			newKhoiLuongGiangDayChiTiet.MaKhoaHoc = _maKhoaHoc;
			newKhoiLuongGiangDayChiTiet.LoaiHocKy = _loaiHocKy;
			newKhoiLuongGiangDayChiTiet.HeSoHocKy = _heSoHocKy;
			newKhoiLuongGiangDayChiTiet.NamThu = _namThu;
			newKhoiLuongGiangDayChiTiet.MaHocHam = _maHocHam;
			newKhoiLuongGiangDayChiTiet.MaHocVi = _maHocVi;
			newKhoiLuongGiangDayChiTiet.MaLoaiGiangVien = _maLoaiGiangVien;
			newKhoiLuongGiangDayChiTiet.MaChucVu = _maChucVu;
			newKhoiLuongGiangDayChiTiet.MaHinhThucDaoTao = _maHinhThucDaoTao;
			newKhoiLuongGiangDayChiTiet.GhiChu = _ghiChu;
			newKhoiLuongGiangDayChiTiet.NgayCapNhat = _ngayCapNhat;
			newKhoiLuongGiangDayChiTiet.LopHocPhanChuyenNganh = _lopHocPhanChuyenNganh;
			newKhoiLuongGiangDayChiTiet.DotImport = _dotImport;
			newKhoiLuongGiangDayChiTiet.DaoTaoTinChi = _daoTaoTinChi;
			newKhoiLuongGiangDayChiTiet.MaCauHinhChotGio = _maCauHinhChotGio;
			return newKhoiLuongGiangDayChiTiet;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaKhoiLuong property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaKhoiLuong
		{
			get
			{
				return this.entityData.MaKhoiLuong; 
			}
			
			set
			{
				if (this.entityData.MaKhoiLuong == value)
					return;
				
                OnPropertyChanging("MaKhoiLuong");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaKhoiLuong, this.entityData.MaKhoiLuong);
				this.entityData.MaKhoiLuong = value;
				this.EntityId.MaKhoiLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaKhoiLuong, this.entityData.MaKhoiLuong);
				OnPropertyChanged("MaKhoiLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLichHoc property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MaLichHoc
		{
			get
			{
				return this.entityData.MaLichHoc; 
			}
			
			set
			{
				if (this.entityData.MaLichHoc == value)
					return;
				
                OnPropertyChanging("MaLichHoc");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaLichHoc, this.entityData.MaLichHoc);
				this.entityData.MaLichHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaLichHoc, this.entityData.MaLichHoc);
				OnPropertyChanged("MaLichHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String MaGiangVien
		{
			get
			{
				return this.entityData.MaGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaGiangVien == value)
					return;
				
                OnPropertyChanging("MaGiangVien");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaGiangVien, this.entityData.MaGiangVien);
				this.entityData.MaGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaGiangVien, this.entityData.MaGiangVien);
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this.entityData.TenMonHoc; 
			}
			
			set
			{
				if (this.entityData.TenMonHoc == value)
					return;
				
                OnPropertyChanging("TenMonHoc");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.TenMonHoc, this.entityData.TenMonHoc);
				this.entityData.TenMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.TenMonHoc, this.entityData.TenMonHoc);
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nhom property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Nhom
		{
			get
			{
				return this.entityData.Nhom; 
			}
			
			set
			{
				if (this.entityData.Nhom == value)
					return;
				
                OnPropertyChanging("Nhom");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.Nhom, this.entityData.Nhom);
				this.entityData.Nhom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.Nhom, this.entityData.Nhom);
				OnPropertyChanged("Nhom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SoTinChi
		{
			get
			{
				return this.entityData.SoTinChi; 
			}
			
			set
			{
				if (this.entityData.SoTinChi == value)
					return;
				
                OnPropertyChanging("SoTinChi");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.SoTinChi, this.entityData.SoTinChi);
				this.entityData.SoTinChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.SoTinChi, this.entityData.SoTinChi);
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal LyThuyet
		{
			get
			{
				return this.entityData.LyThuyet; 
			}
			
			set
			{
				if (this.entityData.LyThuyet == value)
					return;
				
                OnPropertyChanging("LyThuyet");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.LyThuyet, this.entityData.LyThuyet);
				this.entityData.LyThuyet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.LyThuyet, this.entityData.LyThuyet);
				OnPropertyChanged("LyThuyet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ThucHanh
		{
			get
			{
				return this.entityData.ThucHanh; 
			}
			
			set
			{
				if (this.entityData.ThucHanh == value)
					return;
				
                OnPropertyChanging("ThucHanh");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.ThucHanh, this.entityData.ThucHanh);
				this.entityData.ThucHanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.ThucHanh, this.entityData.ThucHanh);
				OnPropertyChanged("ThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BaiTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal BaiTap
		{
			get
			{
				return this.entityData.BaiTap; 
			}
			
			set
			{
				if (this.entityData.BaiTap == value)
					return;
				
                OnPropertyChanging("BaiTap");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.BaiTap, this.entityData.BaiTap);
				this.entityData.BaiTap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.BaiTap, this.entityData.BaiTap);
				OnPropertyChanged("BaiTap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BaiTapLon property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal BaiTapLon
		{
			get
			{
				return this.entityData.BaiTapLon; 
			}
			
			set
			{
				if (this.entityData.BaiTapLon == value)
					return;
				
                OnPropertyChanging("BaiTapLon");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.BaiTapLon, this.entityData.BaiTapLon);
				this.entityData.BaiTapLon = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.BaiTapLon, this.entityData.BaiTapLon);
				OnPropertyChanged("BaiTapLon");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoAn property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DoAn
		{
			get
			{
				return this.entityData.DoAn; 
			}
			
			set
			{
				if (this.entityData.DoAn == value)
					return;
				
                OnPropertyChanging("DoAn");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.DoAn, this.entityData.DoAn);
				this.entityData.DoAn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.DoAn, this.entityData.DoAn);
				OnPropertyChanged("DoAn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LuanAn property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal LuanAn
		{
			get
			{
				return this.entityData.LuanAn; 
			}
			
			set
			{
				if (this.entityData.LuanAn == value)
					return;
				
                OnPropertyChanging("LuanAn");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.LuanAn, this.entityData.LuanAn);
				this.entityData.LuanAn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.LuanAn, this.entityData.LuanAn);
				OnPropertyChanged("LuanAn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TieuLuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TieuLuan
		{
			get
			{
				return this.entityData.TieuLuan; 
			}
			
			set
			{
				if (this.entityData.TieuLuan == value)
					return;
				
                OnPropertyChanging("TieuLuan");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.TieuLuan, this.entityData.TieuLuan);
				this.entityData.TieuLuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.TieuLuan, this.entityData.TieuLuan);
				OnPropertyChanged("TieuLuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThucTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ThucTap
		{
			get
			{
				return this.entityData.ThucTap; 
			}
			
			set
			{
				if (this.entityData.ThucTap == value)
					return;
				
                OnPropertyChanging("ThucTap");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.ThucTap, this.entityData.ThucTap);
				this.entityData.ThucTap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.ThucTap, this.entityData.ThucTap);
				OnPropertyChanged("ThucTap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoLuong property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoLuong
		{
			get
			{
				return this.entityData.SoLuong; 
			}
			
			set
			{
				if (this.entityData.SoLuong == value)
					return;
				
                OnPropertyChanging("SoLuong");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.SoLuong, this.entityData.SoLuong);
				this.entityData.SoLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.SoLuong, this.entityData.SoLuong);
				OnPropertyChanged("SoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Byte MaLoaiHocPhan
		{
			get
			{
				return this.entityData.MaLoaiHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLoaiHocPhan == value)
					return;
				
                OnPropertyChanging("MaLoaiHocPhan");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaLoaiHocPhan, this.entityData.MaLoaiHocPhan);
				this.entityData.MaLoaiHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaLoaiHocPhan, this.entityData.MaLoaiHocPhan);
				OnPropertyChanged("MaLoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String LoaiHocPhan
		{
			get
			{
				return this.entityData.LoaiHocPhan; 
			}
			
			set
			{
				if (this.entityData.LoaiHocPhan == value)
					return;
				
                OnPropertyChanging("LoaiHocPhan");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.LoaiHocPhan, this.entityData.LoaiHocPhan);
				this.entityData.LoaiHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.LoaiHocPhan, this.entityData.LoaiHocPhan);
				OnPropertyChanged("LoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhanLoai property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PhanLoai
		{
			get
			{
				return this.entityData.PhanLoai; 
			}
			
			set
			{
				if (this.entityData.PhanLoai == value)
					return;
				
                OnPropertyChanging("PhanLoai");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.PhanLoai, this.entityData.PhanLoai);
				this.entityData.PhanLoai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.PhanLoai, this.entityData.PhanLoai);
				OnPropertyChanged("PhanLoai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoThanhPhan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoThanhPhan
		{
			get
			{
				return this.entityData.HeSoThanhPhan; 
			}
			
			set
			{
				if (this.entityData.HeSoThanhPhan == value)
					return;
				
                OnPropertyChanging("HeSoThanhPhan");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.HeSoThanhPhan, this.entityData.HeSoThanhPhan);
				this.entityData.HeSoThanhPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.HeSoThanhPhan, this.entityData.HeSoThanhPhan);
				OnPropertyChanged("HeSoThanhPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Nam
		{
			get
			{
				return this.entityData.Nam; 
			}
			
			set
			{
				if (this.entityData.Nam == value)
					return;
				
                OnPropertyChanging("Nam");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.Nam, this.entityData.Nam);
				this.entityData.Nam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.Nam, this.entityData.Nam);
				OnPropertyChanged("Nam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tuan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Tuan
		{
			get
			{
				return this.entityData.Tuan; 
			}
			
			set
			{
				if (this.entityData.Tuan == value)
					return;
				
                OnPropertyChanging("Tuan");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.Tuan, this.entityData.Tuan);
				this.entityData.Tuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.Tuan, this.entityData.Tuan);
				OnPropertyChanged("Tuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonViTinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String DonViTinh
		{
			get
			{
				return this.entityData.DonViTinh; 
			}
			
			set
			{
				if (this.entityData.DonViTinh == value)
					return;
				
                OnPropertyChanging("DonViTinh");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.DonViTinh, this.entityData.DonViTinh);
				this.entityData.DonViTinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.DonViTinh, this.entityData.DonViTinh);
				OnPropertyChanged("DonViTinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaBuoiHoc property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaBuoiHoc
		{
			get
			{
				return this.entityData.MaBuoiHoc; 
			}
			
			set
			{
				if (this.entityData.MaBuoiHoc == value)
					return;
				
                OnPropertyChanging("MaBuoiHoc");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaBuoiHoc, this.entityData.MaBuoiHoc);
				this.entityData.MaBuoiHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaBuoiHoc, this.entityData.MaBuoiHoc);
				OnPropertyChanged("MaBuoiHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
				
                OnPropertyChanging("MaLop");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietBatDau property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietBatDau
		{
			get
			{
				return this.entityData.TietBatDau; 
			}
			
			set
			{
				if (this.entityData.TietBatDau == value)
					return;
				
                OnPropertyChanging("TietBatDau");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.TietBatDau, this.entityData.TietBatDau);
				this.entityData.TietBatDau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.TietBatDau, this.entityData.TietBatDau);
				OnPropertyChanged("TietBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTiet
		{
			get
			{
				return this.entityData.SoTiet; 
			}
			
			set
			{
				if (this.entityData.SoTiet == value)
					return;
				
                OnPropertyChanging("SoTiet");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.SoTiet, this.entityData.SoTiet);
				this.entityData.SoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.SoTiet, this.entityData.SoTiet);
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TinhTrang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TinhTrang
		{
			get
			{
				return this.entityData.TinhTrang; 
			}
			
			set
			{
				if (this.entityData.TinhTrang == value)
					return;
				
                OnPropertyChanging("TinhTrang");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.TinhTrang, this.entityData.TinhTrang);
				this.entityData.TinhTrang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.TinhTrang, this.entityData.TinhTrang);
				OnPropertyChanged("TinhTrang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayDay property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayDay
		{
			get
			{
				return this.entityData.NgayDay; 
			}
			
			set
			{
				if (this.entityData.NgayDay == value)
					return;
				
                OnPropertyChanging("NgayDay");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.NgayDay, this.entityData.NgayDay);
				this.entityData.NgayDay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.NgayDay, this.entityData.NgayDay);
				OnPropertyChanged("NgayDay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Compensate property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? Compensate
		{
			get
			{
				return this.entityData.Compensate; 
			}
			
			set
			{
				if (this.entityData.Compensate == value)
					return;
				
                OnPropertyChanging("Compensate");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.Compensate, this.entityData.Compensate);
				this.entityData.Compensate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.Compensate, this.entityData.Compensate);
				OnPropertyChanged("Compensate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaBacDaoTao
		{
			get
			{
				return this.entityData.MaBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaBacDaoTao == value)
					return;
				
                OnPropertyChanging("MaBacDaoTao");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				this.entityData.MaBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				OnPropertyChanged("MaBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaKhoa property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String MaKhoa
		{
			get
			{
				return this.entityData.MaKhoa; 
			}
			
			set
			{
				if (this.entityData.MaKhoa == value)
					return;
				
                OnPropertyChanging("MaKhoa");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaKhoa, this.entityData.MaKhoa);
				this.entityData.MaKhoa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaKhoa, this.entityData.MaKhoa);
				OnPropertyChanged("MaKhoa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaNhomMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaNhomMonHoc
		{
			get
			{
				return this.entityData.MaNhomMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaNhomMonHoc == value)
					return;
				
                OnPropertyChanging("MaNhomMonHoc");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaNhomMonHoc, this.entityData.MaNhomMonHoc);
				this.entityData.MaNhomMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaNhomMonHoc, this.entityData.MaNhomMonHoc);
				OnPropertyChanged("MaNhomMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaPhongHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaPhongHoc
		{
			get
			{
				return this.entityData.MaPhongHoc; 
			}
			
			set
			{
				if (this.entityData.MaPhongHoc == value)
					return;
				
                OnPropertyChanging("MaPhongHoc");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaPhongHoc, this.entityData.MaPhongHoc);
				this.entityData.MaPhongHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaPhongHoc, this.entityData.MaPhongHoc);
				OnPropertyChanged("MaPhongHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaKhoaHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaKhoaHoc
		{
			get
			{
				return this.entityData.MaKhoaHoc; 
			}
			
			set
			{
				if (this.entityData.MaKhoaHoc == value)
					return;
				
                OnPropertyChanging("MaKhoaHoc");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaKhoaHoc, this.entityData.MaKhoaHoc);
				this.entityData.MaKhoaHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaKhoaHoc, this.entityData.MaKhoaHoc);
				OnPropertyChanged("MaKhoaHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiHocKy property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? LoaiHocKy
		{
			get
			{
				return this.entityData.LoaiHocKy; 
			}
			
			set
			{
				if (this.entityData.LoaiHocKy == value)
					return;
				
                OnPropertyChanging("LoaiHocKy");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.LoaiHocKy, this.entityData.LoaiHocKy);
				this.entityData.LoaiHocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.LoaiHocKy, this.entityData.LoaiHocKy);
				OnPropertyChanged("LoaiHocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoHocKy property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoHocKy
		{
			get
			{
				return this.entityData.HeSoHocKy; 
			}
			
			set
			{
				if (this.entityData.HeSoHocKy == value)
					return;
				
                OnPropertyChanging("HeSoHocKy");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.HeSoHocKy, this.entityData.HeSoHocKy);
				this.entityData.HeSoHocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.HeSoHocKy, this.entityData.HeSoHocKy);
				OnPropertyChanged("HeSoHocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamThu property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamThu
		{
			get
			{
				return this.entityData.NamThu; 
			}
			
			set
			{
				if (this.entityData.NamThu == value)
					return;
				
                OnPropertyChanging("NamThu");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.NamThu, this.entityData.NamThu);
				this.entityData.NamThu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.NamThu, this.entityData.NamThu);
				OnPropertyChanged("NamThu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this.entityData.MaHocVi; 
			}
			
			set
			{
				if (this.entityData.MaHocVi == value)
					return;
				
                OnPropertyChanging("MaHocVi");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaHocVi, this.entityData.MaHocVi);
				this.entityData.MaHocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaHocVi, this.entityData.MaHocVi);
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this.entityData.MaLoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaLoaiGiangVien == value)
					return;
				
                OnPropertyChanging("MaLoaiGiangVien");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				this.entityData.MaLoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaChucVu property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaChucVu
		{
			get
			{
				return this.entityData.MaChucVu; 
			}
			
			set
			{
				if (this.entityData.MaChucVu == value)
					return;
				
                OnPropertyChanging("MaChucVu");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaChucVu, this.entityData.MaChucVu);
				this.entityData.MaChucVu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaChucVu, this.entityData.MaChucVu);
				OnPropertyChanged("MaChucVu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHinhThucDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaHinhThucDaoTao
		{
			get
			{
				return this.entityData.MaHinhThucDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaHinhThucDaoTao == value)
					return;
				
                OnPropertyChanging("MaHinhThucDaoTao");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaHinhThucDaoTao, this.entityData.MaHinhThucDaoTao);
				this.entityData.MaHinhThucDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaHinhThucDaoTao, this.entityData.MaHinhThucDaoTao);
				OnPropertyChanged("MaHinhThucDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LopHocPhanChuyenNganh property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? LopHocPhanChuyenNganh
		{
			get
			{
				return this.entityData.LopHocPhanChuyenNganh; 
			}
			
			set
			{
				if (this.entityData.LopHocPhanChuyenNganh == value)
					return;
				
                OnPropertyChanging("LopHocPhanChuyenNganh");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.LopHocPhanChuyenNganh, this.entityData.LopHocPhanChuyenNganh);
				this.entityData.LopHocPhanChuyenNganh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.LopHocPhanChuyenNganh, this.entityData.LopHocPhanChuyenNganh);
				OnPropertyChanged("LopHocPhanChuyenNganh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotImport property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String DotImport
		{
			get
			{
				return this.entityData.DotImport; 
			}
			
			set
			{
				if (this.entityData.DotImport == value)
					return;
				
                OnPropertyChanging("DotImport");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.DotImport, this.entityData.DotImport);
				this.entityData.DotImport = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.DotImport, this.entityData.DotImport);
				OnPropertyChanged("DotImport");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaoTaoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DaoTaoTinChi
		{
			get
			{
				return this.entityData.DaoTaoTinChi; 
			}
			
			set
			{
				if (this.entityData.DaoTaoTinChi == value)
					return;
				
                OnPropertyChanging("DaoTaoTinChi");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.DaoTaoTinChi, this.entityData.DaoTaoTinChi);
				this.entityData.DaoTaoTinChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.DaoTaoTinChi, this.entityData.DaoTaoTinChi);
				OnPropertyChanged("DaoTaoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaCauHinhChotGio property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaCauHinhChotGio
		{
			get
			{
				return this.entityData.MaCauHinhChotGio; 
			}
			
			set
			{
				if (this.entityData.MaCauHinhChotGio == value)
					return;
				
                OnPropertyChanging("MaCauHinhChotGio");                    
				OnColumnChanging(KhoiLuongGiangDayChiTietColumn.MaCauHinhChotGio, this.entityData.MaCauHinhChotGio);
				this.entityData.MaCauHinhChotGio = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayChiTietColumn.MaCauHinhChotGio, this.entityData.MaCauHinhChotGio);
				OnPropertyChanged("MaCauHinhChotGio");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of KhoiLuongQuyDoi objects
		///	which are related to this object through the relation FK_KhoiLuongQuyDoi_KhoiLuongGiangDayChiTiet
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<KhoiLuongQuyDoi> KhoiLuongQuyDoiCollection
		{
			get { return entityData.KhoiLuongQuyDoiCollection; }
			set { entityData.KhoiLuongQuyDoiCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaGiangVien", "Ma Giang Vien"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaGiangVien", "Ma Giang Vien", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("NamHoc", "Nam Hoc"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("HocKy", "Hoc Ky"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaMonHoc", "Ma Mon Hoc"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TenMonHoc", "Ten Mon Hoc"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenMonHoc", "Ten Mon Hoc", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Nhom", "Nhom", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LoaiHocPhan", "Loai Hoc Phan", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhanLoai", "Phan Loai", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DonViTinh", "Don Vi Tinh", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaBacDaoTao", "Ma Bac Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaKhoa", "Ma Khoa", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaNhomMonHoc", "Ma Nhom Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaPhongHoc", "Ma Phong Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaKhoaHoc", "Ma Khoa Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamThu", "Nam Thu", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaHinhThucDaoTao", "Ma Hinh Thuc Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GhiChu", "Ghi Chu", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayCapNhat", "Ngay Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DotImport", "Dot Import", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "KhoiLuongGiangDayChiTiet"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaKhoiLuong", "MaLichHoc", "MaGiangVien", "MaLopHocPhan", "NamHoc", "HocKy", "MaMonHoc", "TenMonHoc", "Nhom", "SoTinChi", "LyThuyet", "ThucHanh", "BaiTap", "BaiTapLon", "DoAn", "LuanAn", "TieuLuan", "ThucTap", "SoLuong", "MaLoaiHocPhan", "LoaiHocPhan", "PhanLoai", "HeSoThanhPhan", "Nam", "Tuan", "DonViTinh", "MaBuoiHoc", "MaLop", "TietBatDau", "SoTiet", "TinhTrang", "NgayDay", "Compensate", "MaBacDaoTao", "MaKhoa", "MaNhomMonHoc", "MaPhongHoc", "MaKhoaHoc", "LoaiHocKy", "HeSoHocKy", "NamThu", "MaHocHam", "MaHocVi", "MaLoaiGiangVien", "MaChucVu", "MaHinhThucDaoTao", "GhiChu", "NgayCapNhat", "LopHocPhanChuyenNganh", "DotImport", "DaoTaoTinChi", "MaCauHinhChotGio"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as KhoiLuongGiangDayChiTietEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (KhoiLuongGiangDayChiTiet) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<KhoiLuongGiangDayChiTiet>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as KhoiLuongGiangDayChiTiet);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed KhoiLuongGiangDayChiTiet Entity 
		///</summary>
		protected virtual KhoiLuongGiangDayChiTiet Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			KhoiLuongGiangDayChiTiet copy = new KhoiLuongGiangDayChiTiet();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaKhoiLuong = this.MaKhoiLuong;
				copy.MaLichHoc = this.MaLichHoc;
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.Nhom = this.Nhom;
				copy.SoTinChi = this.SoTinChi;
				copy.LyThuyet = this.LyThuyet;
				copy.ThucHanh = this.ThucHanh;
				copy.BaiTap = this.BaiTap;
				copy.BaiTapLon = this.BaiTapLon;
				copy.DoAn = this.DoAn;
				copy.LuanAn = this.LuanAn;
				copy.TieuLuan = this.TieuLuan;
				copy.ThucTap = this.ThucTap;
				copy.SoLuong = this.SoLuong;
				copy.MaLoaiHocPhan = this.MaLoaiHocPhan;
				copy.LoaiHocPhan = this.LoaiHocPhan;
				copy.PhanLoai = this.PhanLoai;
				copy.HeSoThanhPhan = this.HeSoThanhPhan;
				copy.Nam = this.Nam;
				copy.Tuan = this.Tuan;
				copy.DonViTinh = this.DonViTinh;
				copy.MaBuoiHoc = this.MaBuoiHoc;
				copy.MaLop = this.MaLop;
				copy.TietBatDau = this.TietBatDau;
				copy.SoTiet = this.SoTiet;
				copy.TinhTrang = this.TinhTrang;
				copy.NgayDay = this.NgayDay;
				copy.Compensate = this.Compensate;
				copy.MaBacDaoTao = this.MaBacDaoTao;
				copy.MaKhoa = this.MaKhoa;
				copy.MaNhomMonHoc = this.MaNhomMonHoc;
				copy.MaPhongHoc = this.MaPhongHoc;
				copy.MaKhoaHoc = this.MaKhoaHoc;
				copy.LoaiHocKy = this.LoaiHocKy;
				copy.HeSoHocKy = this.HeSoHocKy;
				copy.NamThu = this.NamThu;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.MaChucVu = this.MaChucVu;
				copy.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
				copy.GhiChu = this.GhiChu;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.LopHocPhanChuyenNganh = this.LopHocPhanChuyenNganh;
				copy.DotImport = this.DotImport;
				copy.DaoTaoTinChi = this.DaoTaoTinChi;
				copy.MaCauHinhChotGio = this.MaCauHinhChotGio;
			
		
			//deep copy nested objects
			copy.KhoiLuongQuyDoiCollection = (TList<KhoiLuongQuyDoi>) MakeCopyOf(this.KhoiLuongQuyDoiCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed KhoiLuongGiangDayChiTiet Entity 
		///</summary>
		public virtual KhoiLuongGiangDayChiTiet Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed KhoiLuongGiangDayChiTiet Entity which is a deep copy of the current entity.
		///</summary>
		public virtual KhoiLuongGiangDayChiTiet DeepCopy()
		{
			return EntityHelper.Clone<KhoiLuongGiangDayChiTiet>(this as KhoiLuongGiangDayChiTiet);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as KhoiLuongGiangDayChiTietEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new KhoiLuongGiangDayChiTietEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as KhoiLuongGiangDayChiTietEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(KhoiLuongGiangDayChiTietColumn column)
		{
			switch(column)
			{
					case KhoiLuongGiangDayChiTietColumn.MaKhoiLuong:
					return entityData.MaKhoiLuong != _originalData.MaKhoiLuong;
					case KhoiLuongGiangDayChiTietColumn.MaLichHoc:
					return entityData.MaLichHoc != _originalData.MaLichHoc;
					case KhoiLuongGiangDayChiTietColumn.MaGiangVien:
					return entityData.MaGiangVien != _originalData.MaGiangVien;
					case KhoiLuongGiangDayChiTietColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case KhoiLuongGiangDayChiTietColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case KhoiLuongGiangDayChiTietColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case KhoiLuongGiangDayChiTietColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case KhoiLuongGiangDayChiTietColumn.TenMonHoc:
					return entityData.TenMonHoc != _originalData.TenMonHoc;
					case KhoiLuongGiangDayChiTietColumn.Nhom:
					return entityData.Nhom != _originalData.Nhom;
					case KhoiLuongGiangDayChiTietColumn.SoTinChi:
					return entityData.SoTinChi != _originalData.SoTinChi;
					case KhoiLuongGiangDayChiTietColumn.LyThuyet:
					return entityData.LyThuyet != _originalData.LyThuyet;
					case KhoiLuongGiangDayChiTietColumn.ThucHanh:
					return entityData.ThucHanh != _originalData.ThucHanh;
					case KhoiLuongGiangDayChiTietColumn.BaiTap:
					return entityData.BaiTap != _originalData.BaiTap;
					case KhoiLuongGiangDayChiTietColumn.BaiTapLon:
					return entityData.BaiTapLon != _originalData.BaiTapLon;
					case KhoiLuongGiangDayChiTietColumn.DoAn:
					return entityData.DoAn != _originalData.DoAn;
					case KhoiLuongGiangDayChiTietColumn.LuanAn:
					return entityData.LuanAn != _originalData.LuanAn;
					case KhoiLuongGiangDayChiTietColumn.TieuLuan:
					return entityData.TieuLuan != _originalData.TieuLuan;
					case KhoiLuongGiangDayChiTietColumn.ThucTap:
					return entityData.ThucTap != _originalData.ThucTap;
					case KhoiLuongGiangDayChiTietColumn.SoLuong:
					return entityData.SoLuong != _originalData.SoLuong;
					case KhoiLuongGiangDayChiTietColumn.MaLoaiHocPhan:
					return entityData.MaLoaiHocPhan != _originalData.MaLoaiHocPhan;
					case KhoiLuongGiangDayChiTietColumn.LoaiHocPhan:
					return entityData.LoaiHocPhan != _originalData.LoaiHocPhan;
					case KhoiLuongGiangDayChiTietColumn.PhanLoai:
					return entityData.PhanLoai != _originalData.PhanLoai;
					case KhoiLuongGiangDayChiTietColumn.HeSoThanhPhan:
					return entityData.HeSoThanhPhan != _originalData.HeSoThanhPhan;
					case KhoiLuongGiangDayChiTietColumn.Nam:
					return entityData.Nam != _originalData.Nam;
					case KhoiLuongGiangDayChiTietColumn.Tuan:
					return entityData.Tuan != _originalData.Tuan;
					case KhoiLuongGiangDayChiTietColumn.DonViTinh:
					return entityData.DonViTinh != _originalData.DonViTinh;
					case KhoiLuongGiangDayChiTietColumn.MaBuoiHoc:
					return entityData.MaBuoiHoc != _originalData.MaBuoiHoc;
					case KhoiLuongGiangDayChiTietColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
					case KhoiLuongGiangDayChiTietColumn.TietBatDau:
					return entityData.TietBatDau != _originalData.TietBatDau;
					case KhoiLuongGiangDayChiTietColumn.SoTiet:
					return entityData.SoTiet != _originalData.SoTiet;
					case KhoiLuongGiangDayChiTietColumn.TinhTrang:
					return entityData.TinhTrang != _originalData.TinhTrang;
					case KhoiLuongGiangDayChiTietColumn.NgayDay:
					return entityData.NgayDay != _originalData.NgayDay;
					case KhoiLuongGiangDayChiTietColumn.Compensate:
					return entityData.Compensate != _originalData.Compensate;
					case KhoiLuongGiangDayChiTietColumn.MaBacDaoTao:
					return entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
					case KhoiLuongGiangDayChiTietColumn.MaKhoa:
					return entityData.MaKhoa != _originalData.MaKhoa;
					case KhoiLuongGiangDayChiTietColumn.MaNhomMonHoc:
					return entityData.MaNhomMonHoc != _originalData.MaNhomMonHoc;
					case KhoiLuongGiangDayChiTietColumn.MaPhongHoc:
					return entityData.MaPhongHoc != _originalData.MaPhongHoc;
					case KhoiLuongGiangDayChiTietColumn.MaKhoaHoc:
					return entityData.MaKhoaHoc != _originalData.MaKhoaHoc;
					case KhoiLuongGiangDayChiTietColumn.LoaiHocKy:
					return entityData.LoaiHocKy != _originalData.LoaiHocKy;
					case KhoiLuongGiangDayChiTietColumn.HeSoHocKy:
					return entityData.HeSoHocKy != _originalData.HeSoHocKy;
					case KhoiLuongGiangDayChiTietColumn.NamThu:
					return entityData.NamThu != _originalData.NamThu;
					case KhoiLuongGiangDayChiTietColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case KhoiLuongGiangDayChiTietColumn.MaHocVi:
					return entityData.MaHocVi != _originalData.MaHocVi;
					case KhoiLuongGiangDayChiTietColumn.MaLoaiGiangVien:
					return entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
					case KhoiLuongGiangDayChiTietColumn.MaChucVu:
					return entityData.MaChucVu != _originalData.MaChucVu;
					case KhoiLuongGiangDayChiTietColumn.MaHinhThucDaoTao:
					return entityData.MaHinhThucDaoTao != _originalData.MaHinhThucDaoTao;
					case KhoiLuongGiangDayChiTietColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case KhoiLuongGiangDayChiTietColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case KhoiLuongGiangDayChiTietColumn.LopHocPhanChuyenNganh:
					return entityData.LopHocPhanChuyenNganh != _originalData.LopHocPhanChuyenNganh;
					case KhoiLuongGiangDayChiTietColumn.DotImport:
					return entityData.DotImport != _originalData.DotImport;
					case KhoiLuongGiangDayChiTietColumn.DaoTaoTinChi:
					return entityData.DaoTaoTinChi != _originalData.DaoTaoTinChi;
					case KhoiLuongGiangDayChiTietColumn.MaCauHinhChotGio:
					return entityData.MaCauHinhChotGio != _originalData.MaCauHinhChotGio;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< KhoiLuongGiangDayChiTietColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaKhoiLuong != _originalData.MaKhoiLuong;
			result = result || entityData.MaLichHoc != _originalData.MaLichHoc;
			result = result || entityData.MaGiangVien != _originalData.MaGiangVien;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.TenMonHoc != _originalData.TenMonHoc;
			result = result || entityData.Nhom != _originalData.Nhom;
			result = result || entityData.SoTinChi != _originalData.SoTinChi;
			result = result || entityData.LyThuyet != _originalData.LyThuyet;
			result = result || entityData.ThucHanh != _originalData.ThucHanh;
			result = result || entityData.BaiTap != _originalData.BaiTap;
			result = result || entityData.BaiTapLon != _originalData.BaiTapLon;
			result = result || entityData.DoAn != _originalData.DoAn;
			result = result || entityData.LuanAn != _originalData.LuanAn;
			result = result || entityData.TieuLuan != _originalData.TieuLuan;
			result = result || entityData.ThucTap != _originalData.ThucTap;
			result = result || entityData.SoLuong != _originalData.SoLuong;
			result = result || entityData.MaLoaiHocPhan != _originalData.MaLoaiHocPhan;
			result = result || entityData.LoaiHocPhan != _originalData.LoaiHocPhan;
			result = result || entityData.PhanLoai != _originalData.PhanLoai;
			result = result || entityData.HeSoThanhPhan != _originalData.HeSoThanhPhan;
			result = result || entityData.Nam != _originalData.Nam;
			result = result || entityData.Tuan != _originalData.Tuan;
			result = result || entityData.DonViTinh != _originalData.DonViTinh;
			result = result || entityData.MaBuoiHoc != _originalData.MaBuoiHoc;
			result = result || entityData.MaLop != _originalData.MaLop;
			result = result || entityData.TietBatDau != _originalData.TietBatDau;
			result = result || entityData.SoTiet != _originalData.SoTiet;
			result = result || entityData.TinhTrang != _originalData.TinhTrang;
			result = result || entityData.NgayDay != _originalData.NgayDay;
			result = result || entityData.Compensate != _originalData.Compensate;
			result = result || entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
			result = result || entityData.MaKhoa != _originalData.MaKhoa;
			result = result || entityData.MaNhomMonHoc != _originalData.MaNhomMonHoc;
			result = result || entityData.MaPhongHoc != _originalData.MaPhongHoc;
			result = result || entityData.MaKhoaHoc != _originalData.MaKhoaHoc;
			result = result || entityData.LoaiHocKy != _originalData.LoaiHocKy;
			result = result || entityData.HeSoHocKy != _originalData.HeSoHocKy;
			result = result || entityData.NamThu != _originalData.NamThu;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.MaHocVi != _originalData.MaHocVi;
			result = result || entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
			result = result || entityData.MaChucVu != _originalData.MaChucVu;
			result = result || entityData.MaHinhThucDaoTao != _originalData.MaHinhThucDaoTao;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.LopHocPhanChuyenNganh != _originalData.LopHocPhanChuyenNganh;
			result = result || entityData.DotImport != _originalData.DotImport;
			result = result || entityData.DaoTaoTinChi != _originalData.DaoTaoTinChi;
			result = result || entityData.MaCauHinhChotGio != _originalData.MaCauHinhChotGio;
			return result;
		}	
		
		///<summary>
		///  Returns a KhoiLuongGiangDayChiTiet Entity with the original data.
		///</summary>
		public KhoiLuongGiangDayChiTiet GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateKhoiLuongGiangDayChiTiet(
				_originalData.MaLichHoc,
				_originalData.MaGiangVien,
				_originalData.MaLopHocPhan,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaMonHoc,
				_originalData.TenMonHoc,
				_originalData.Nhom,
				_originalData.SoTinChi,
				_originalData.LyThuyet,
				_originalData.ThucHanh,
				_originalData.BaiTap,
				_originalData.BaiTapLon,
				_originalData.DoAn,
				_originalData.LuanAn,
				_originalData.TieuLuan,
				_originalData.ThucTap,
				_originalData.SoLuong,
				_originalData.MaLoaiHocPhan,
				_originalData.LoaiHocPhan,
				_originalData.PhanLoai,
				_originalData.HeSoThanhPhan,
				_originalData.Nam,
				_originalData.Tuan,
				_originalData.DonViTinh,
				_originalData.MaBuoiHoc,
				_originalData.MaLop,
				_originalData.TietBatDau,
				_originalData.SoTiet,
				_originalData.TinhTrang,
				_originalData.NgayDay,
				_originalData.Compensate,
				_originalData.MaBacDaoTao,
				_originalData.MaKhoa,
				_originalData.MaNhomMonHoc,
				_originalData.MaPhongHoc,
				_originalData.MaKhoaHoc,
				_originalData.LoaiHocKy,
				_originalData.HeSoHocKy,
				_originalData.NamThu,
				_originalData.MaHocHam,
				_originalData.MaHocVi,
				_originalData.MaLoaiGiangVien,
				_originalData.MaChucVu,
				_originalData.MaHinhThucDaoTao,
				_originalData.GhiChu,
				_originalData.NgayCapNhat,
				_originalData.LopHocPhanChuyenNganh,
				_originalData.DotImport,
				_originalData.DaoTaoTinChi,
				_originalData.MaCauHinhChotGio
				);
				
			return (KhoiLuongGiangDayChiTiet)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="KhoiLuongGiangDayChiTietBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is KhoiLuongGiangDayChiTietBase)
				return ValueEquals(this, (KhoiLuongGiangDayChiTietBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="KhoiLuongGiangDayChiTietBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaKhoiLuong.GetHashCode() ^ 
					this.MaLichHoc.GetHashCode() ^ 
					this.MaGiangVien.GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					this.NamHoc.GetHashCode() ^ 
					this.HocKy.GetHashCode() ^ 
					this.MaMonHoc.GetHashCode() ^ 
					this.TenMonHoc.GetHashCode() ^ 
					((this.Nhom == null) ? string.Empty : this.Nhom.ToString()).GetHashCode() ^ 
					this.SoTinChi.GetHashCode() ^ 
					this.LyThuyet.GetHashCode() ^ 
					this.ThucHanh.GetHashCode() ^ 
					this.BaiTap.GetHashCode() ^ 
					this.BaiTapLon.GetHashCode() ^ 
					this.DoAn.GetHashCode() ^ 
					this.LuanAn.GetHashCode() ^ 
					this.TieuLuan.GetHashCode() ^ 
					this.ThucTap.GetHashCode() ^ 
					((this.SoLuong == null) ? string.Empty : this.SoLuong.ToString()).GetHashCode() ^ 
					this.MaLoaiHocPhan.GetHashCode() ^ 
					((this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString()).GetHashCode() ^ 
					((this.PhanLoai == null) ? string.Empty : this.PhanLoai.ToString()).GetHashCode() ^ 
					((this.HeSoThanhPhan == null) ? string.Empty : this.HeSoThanhPhan.ToString()).GetHashCode() ^ 
					((this.Nam == null) ? string.Empty : this.Nam.ToString()).GetHashCode() ^ 
					((this.Tuan == null) ? string.Empty : this.Tuan.ToString()).GetHashCode() ^ 
					((this.DonViTinh == null) ? string.Empty : this.DonViTinh.ToString()).GetHashCode() ^ 
					((this.MaBuoiHoc == null) ? string.Empty : this.MaBuoiHoc.ToString()).GetHashCode() ^ 
					((this.MaLop == null) ? string.Empty : this.MaLop.ToString()).GetHashCode() ^ 
					((this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString()).GetHashCode() ^ 
					((this.SoTiet == null) ? string.Empty : this.SoTiet.ToString()).GetHashCode() ^ 
					this.TinhTrang.GetHashCode() ^ 
					((this.NgayDay == null) ? string.Empty : this.NgayDay.ToString()).GetHashCode() ^ 
					((this.Compensate == null) ? string.Empty : this.Compensate.ToString()).GetHashCode() ^ 
					((this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString()).GetHashCode() ^ 
					((this.MaKhoa == null) ? string.Empty : this.MaKhoa.ToString()).GetHashCode() ^ 
					((this.MaNhomMonHoc == null) ? string.Empty : this.MaNhomMonHoc.ToString()).GetHashCode() ^ 
					((this.MaPhongHoc == null) ? string.Empty : this.MaPhongHoc.ToString()).GetHashCode() ^ 
					((this.MaKhoaHoc == null) ? string.Empty : this.MaKhoaHoc.ToString()).GetHashCode() ^ 
					((this.LoaiHocKy == null) ? string.Empty : this.LoaiHocKy.ToString()).GetHashCode() ^ 
					((this.HeSoHocKy == null) ? string.Empty : this.HeSoHocKy.ToString()).GetHashCode() ^ 
					((this.NamThu == null) ? string.Empty : this.NamThu.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString()).GetHashCode() ^ 
					((this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString()).GetHashCode() ^ 
					((this.MaChucVu == null) ? string.Empty : this.MaChucVu.ToString()).GetHashCode() ^ 
					((this.MaHinhThucDaoTao == null) ? string.Empty : this.MaHinhThucDaoTao.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.LopHocPhanChuyenNganh == null) ? string.Empty : this.LopHocPhanChuyenNganh.ToString()).GetHashCode() ^ 
					((this.DotImport == null) ? string.Empty : this.DotImport.ToString()).GetHashCode() ^ 
					((this.DaoTaoTinChi == null) ? string.Empty : this.DaoTaoTinChi.ToString()).GetHashCode() ^ 
					((this.MaCauHinhChotGio == null) ? string.Empty : this.MaCauHinhChotGio.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="KhoiLuongGiangDayChiTietBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(KhoiLuongGiangDayChiTietBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="KhoiLuongGiangDayChiTietBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="KhoiLuongGiangDayChiTietBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="KhoiLuongGiangDayChiTietBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(KhoiLuongGiangDayChiTietBase Object1, KhoiLuongGiangDayChiTietBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaKhoiLuong != Object2.MaKhoiLuong)
				equal = false;
			if (Object1.MaLichHoc != Object2.MaLichHoc)
				equal = false;
			if (Object1.MaGiangVien != Object2.MaGiangVien)
				equal = false;
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if (Object1.NamHoc != Object2.NamHoc)
				equal = false;
			if (Object1.HocKy != Object2.HocKy)
				equal = false;
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if ( Object1.Nhom != null && Object2.Nhom != null )
			{
				if (Object1.Nhom != Object2.Nhom)
					equal = false;
			}
			else if (Object1.Nhom == null ^ Object2.Nhom == null )
			{
				equal = false;
			}
			if (Object1.SoTinChi != Object2.SoTinChi)
				equal = false;
			if (Object1.LyThuyet != Object2.LyThuyet)
				equal = false;
			if (Object1.ThucHanh != Object2.ThucHanh)
				equal = false;
			if (Object1.BaiTap != Object2.BaiTap)
				equal = false;
			if (Object1.BaiTapLon != Object2.BaiTapLon)
				equal = false;
			if (Object1.DoAn != Object2.DoAn)
				equal = false;
			if (Object1.LuanAn != Object2.LuanAn)
				equal = false;
			if (Object1.TieuLuan != Object2.TieuLuan)
				equal = false;
			if (Object1.ThucTap != Object2.ThucTap)
				equal = false;
			if ( Object1.SoLuong != null && Object2.SoLuong != null )
			{
				if (Object1.SoLuong != Object2.SoLuong)
					equal = false;
			}
			else if (Object1.SoLuong == null ^ Object2.SoLuong == null )
			{
				equal = false;
			}
			if (Object1.MaLoaiHocPhan != Object2.MaLoaiHocPhan)
				equal = false;
			if ( Object1.LoaiHocPhan != null && Object2.LoaiHocPhan != null )
			{
				if (Object1.LoaiHocPhan != Object2.LoaiHocPhan)
					equal = false;
			}
			else if (Object1.LoaiHocPhan == null ^ Object2.LoaiHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.PhanLoai != null && Object2.PhanLoai != null )
			{
				if (Object1.PhanLoai != Object2.PhanLoai)
					equal = false;
			}
			else if (Object1.PhanLoai == null ^ Object2.PhanLoai == null )
			{
				equal = false;
			}
			if ( Object1.HeSoThanhPhan != null && Object2.HeSoThanhPhan != null )
			{
				if (Object1.HeSoThanhPhan != Object2.HeSoThanhPhan)
					equal = false;
			}
			else if (Object1.HeSoThanhPhan == null ^ Object2.HeSoThanhPhan == null )
			{
				equal = false;
			}
			if ( Object1.Nam != null && Object2.Nam != null )
			{
				if (Object1.Nam != Object2.Nam)
					equal = false;
			}
			else if (Object1.Nam == null ^ Object2.Nam == null )
			{
				equal = false;
			}
			if ( Object1.Tuan != null && Object2.Tuan != null )
			{
				if (Object1.Tuan != Object2.Tuan)
					equal = false;
			}
			else if (Object1.Tuan == null ^ Object2.Tuan == null )
			{
				equal = false;
			}
			if ( Object1.DonViTinh != null && Object2.DonViTinh != null )
			{
				if (Object1.DonViTinh != Object2.DonViTinh)
					equal = false;
			}
			else if (Object1.DonViTinh == null ^ Object2.DonViTinh == null )
			{
				equal = false;
			}
			if ( Object1.MaBuoiHoc != null && Object2.MaBuoiHoc != null )
			{
				if (Object1.MaBuoiHoc != Object2.MaBuoiHoc)
					equal = false;
			}
			else if (Object1.MaBuoiHoc == null ^ Object2.MaBuoiHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object2.MaLop == null )
			{
				equal = false;
			}
			if ( Object1.TietBatDau != null && Object2.TietBatDau != null )
			{
				if (Object1.TietBatDau != Object2.TietBatDau)
					equal = false;
			}
			else if (Object1.TietBatDau == null ^ Object2.TietBatDau == null )
			{
				equal = false;
			}
			if ( Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object2.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.TinhTrang != Object2.TinhTrang)
				equal = false;
			if ( Object1.NgayDay != null && Object2.NgayDay != null )
			{
				if (Object1.NgayDay != Object2.NgayDay)
					equal = false;
			}
			else if (Object1.NgayDay == null ^ Object2.NgayDay == null )
			{
				equal = false;
			}
			if ( Object1.Compensate != null && Object2.Compensate != null )
			{
				if (Object1.Compensate != Object2.Compensate)
					equal = false;
			}
			else if (Object1.Compensate == null ^ Object2.Compensate == null )
			{
				equal = false;
			}
			if ( Object1.MaBacDaoTao != null && Object2.MaBacDaoTao != null )
			{
				if (Object1.MaBacDaoTao != Object2.MaBacDaoTao)
					equal = false;
			}
			else if (Object1.MaBacDaoTao == null ^ Object2.MaBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.MaKhoa != null && Object2.MaKhoa != null )
			{
				if (Object1.MaKhoa != Object2.MaKhoa)
					equal = false;
			}
			else if (Object1.MaKhoa == null ^ Object2.MaKhoa == null )
			{
				equal = false;
			}
			if ( Object1.MaNhomMonHoc != null && Object2.MaNhomMonHoc != null )
			{
				if (Object1.MaNhomMonHoc != Object2.MaNhomMonHoc)
					equal = false;
			}
			else if (Object1.MaNhomMonHoc == null ^ Object2.MaNhomMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaPhongHoc != null && Object2.MaPhongHoc != null )
			{
				if (Object1.MaPhongHoc != Object2.MaPhongHoc)
					equal = false;
			}
			else if (Object1.MaPhongHoc == null ^ Object2.MaPhongHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaKhoaHoc != null && Object2.MaKhoaHoc != null )
			{
				if (Object1.MaKhoaHoc != Object2.MaKhoaHoc)
					equal = false;
			}
			else if (Object1.MaKhoaHoc == null ^ Object2.MaKhoaHoc == null )
			{
				equal = false;
			}
			if ( Object1.LoaiHocKy != null && Object2.LoaiHocKy != null )
			{
				if (Object1.LoaiHocKy != Object2.LoaiHocKy)
					equal = false;
			}
			else if (Object1.LoaiHocKy == null ^ Object2.LoaiHocKy == null )
			{
				equal = false;
			}
			if ( Object1.HeSoHocKy != null && Object2.HeSoHocKy != null )
			{
				if (Object1.HeSoHocKy != Object2.HeSoHocKy)
					equal = false;
			}
			else if (Object1.HeSoHocKy == null ^ Object2.HeSoHocKy == null )
			{
				equal = false;
			}
			if ( Object1.NamThu != null && Object2.NamThu != null )
			{
				if (Object1.NamThu != Object2.NamThu)
					equal = false;
			}
			else if (Object1.NamThu == null ^ Object2.NamThu == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object2.MaHocVi == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object2.MaLoaiGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.MaChucVu != null && Object2.MaChucVu != null )
			{
				if (Object1.MaChucVu != Object2.MaChucVu)
					equal = false;
			}
			else if (Object1.MaChucVu == null ^ Object2.MaChucVu == null )
			{
				equal = false;
			}
			if ( Object1.MaHinhThucDaoTao != null && Object2.MaHinhThucDaoTao != null )
			{
				if (Object1.MaHinhThucDaoTao != Object2.MaHinhThucDaoTao)
					equal = false;
			}
			else if (Object1.MaHinhThucDaoTao == null ^ Object2.MaHinhThucDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.LopHocPhanChuyenNganh != null && Object2.LopHocPhanChuyenNganh != null )
			{
				if (Object1.LopHocPhanChuyenNganh != Object2.LopHocPhanChuyenNganh)
					equal = false;
			}
			else if (Object1.LopHocPhanChuyenNganh == null ^ Object2.LopHocPhanChuyenNganh == null )
			{
				equal = false;
			}
			if ( Object1.DotImport != null && Object2.DotImport != null )
			{
				if (Object1.DotImport != Object2.DotImport)
					equal = false;
			}
			else if (Object1.DotImport == null ^ Object2.DotImport == null )
			{
				equal = false;
			}
			if ( Object1.DaoTaoTinChi != null && Object2.DaoTaoTinChi != null )
			{
				if (Object1.DaoTaoTinChi != Object2.DaoTaoTinChi)
					equal = false;
			}
			else if (Object1.DaoTaoTinChi == null ^ Object2.DaoTaoTinChi == null )
			{
				equal = false;
			}
			if ( Object1.MaCauHinhChotGio != null && Object2.MaCauHinhChotGio != null )
			{
				if (Object1.MaCauHinhChotGio != Object2.MaCauHinhChotGio)
					equal = false;
			}
			else if (Object1.MaCauHinhChotGio == null ^ Object2.MaCauHinhChotGio == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((KhoiLuongGiangDayChiTietBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static KhoiLuongGiangDayChiTietComparer GetComparer()
        {
            return new KhoiLuongGiangDayChiTietComparer();
        }
        */

        // Comparer delegates back to KhoiLuongGiangDayChiTiet
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(KhoiLuongGiangDayChiTiet rhs, KhoiLuongGiangDayChiTietColumn which)
        {
            switch (which)
            {
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaKhoiLuong:
            		return this.MaKhoiLuong.CompareTo(rhs.MaKhoiLuong);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaLichHoc:
            		return this.MaLichHoc.CompareTo(rhs.MaLichHoc);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaGiangVien:
            		return this.MaGiangVien.CompareTo(rhs.MaGiangVien);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.TenMonHoc:
            		return this.TenMonHoc.CompareTo(rhs.TenMonHoc);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.Nhom:
            		return this.Nhom.CompareTo(rhs.Nhom);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.SoTinChi:
            		return this.SoTinChi.CompareTo(rhs.SoTinChi);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.LyThuyet:
            		return this.LyThuyet.CompareTo(rhs.LyThuyet);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.ThucHanh:
            		return this.ThucHanh.CompareTo(rhs.ThucHanh);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.BaiTap:
            		return this.BaiTap.CompareTo(rhs.BaiTap);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.BaiTapLon:
            		return this.BaiTapLon.CompareTo(rhs.BaiTapLon);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.DoAn:
            		return this.DoAn.CompareTo(rhs.DoAn);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.LuanAn:
            		return this.LuanAn.CompareTo(rhs.LuanAn);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.TieuLuan:
            		return this.TieuLuan.CompareTo(rhs.TieuLuan);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.ThucTap:
            		return this.ThucTap.CompareTo(rhs.ThucTap);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.SoLuong:
            		return this.SoLuong.Value.CompareTo(rhs.SoLuong.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaLoaiHocPhan:
            		return this.MaLoaiHocPhan.CompareTo(rhs.MaLoaiHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.LoaiHocPhan:
            		return this.LoaiHocPhan.CompareTo(rhs.LoaiHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.PhanLoai:
            		return this.PhanLoai.CompareTo(rhs.PhanLoai);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.HeSoThanhPhan:
            		return this.HeSoThanhPhan.Value.CompareTo(rhs.HeSoThanhPhan.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.Nam:
            		return this.Nam.Value.CompareTo(rhs.Nam.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.Tuan:
            		return this.Tuan.Value.CompareTo(rhs.Tuan.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.DonViTinh:
            		return this.DonViTinh.CompareTo(rhs.DonViTinh);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaBuoiHoc:
            		return this.MaBuoiHoc.Value.CompareTo(rhs.MaBuoiHoc.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.TietBatDau:
            		return this.TietBatDau.Value.CompareTo(rhs.TietBatDau.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.SoTiet:
            		return this.SoTiet.Value.CompareTo(rhs.SoTiet.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.TinhTrang:
            		return this.TinhTrang.CompareTo(rhs.TinhTrang);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.NgayDay:
            		return this.NgayDay.Value.CompareTo(rhs.NgayDay.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.Compensate:
            		return this.Compensate.Value.CompareTo(rhs.Compensate.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaBacDaoTao:
            		return this.MaBacDaoTao.CompareTo(rhs.MaBacDaoTao);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaKhoa:
            		return this.MaKhoa.CompareTo(rhs.MaKhoa);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaNhomMonHoc:
            		return this.MaNhomMonHoc.CompareTo(rhs.MaNhomMonHoc);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaPhongHoc:
            		return this.MaPhongHoc.CompareTo(rhs.MaPhongHoc);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaKhoaHoc:
            		return this.MaKhoaHoc.CompareTo(rhs.MaKhoaHoc);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.LoaiHocKy:
            		return this.LoaiHocKy.Value.CompareTo(rhs.LoaiHocKy.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.HeSoHocKy:
            		return this.HeSoHocKy.Value.CompareTo(rhs.HeSoHocKy.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.NamThu:
            		return this.NamThu.CompareTo(rhs.NamThu);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaHocVi:
            		return this.MaHocVi.Value.CompareTo(rhs.MaHocVi.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaLoaiGiangVien:
            		return this.MaLoaiGiangVien.Value.CompareTo(rhs.MaLoaiGiangVien.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaChucVu:
            		return this.MaChucVu.Value.CompareTo(rhs.MaChucVu.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaHinhThucDaoTao:
            		return this.MaHinhThucDaoTao.CompareTo(rhs.MaHinhThucDaoTao);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.NgayCapNhat:
            		return this.NgayCapNhat.CompareTo(rhs.NgayCapNhat);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.LopHocPhanChuyenNganh:
            		return this.LopHocPhanChuyenNganh.Value.CompareTo(rhs.LopHocPhanChuyenNganh.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.DotImport:
            		return this.DotImport.CompareTo(rhs.DotImport);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.DaoTaoTinChi:
            		return this.DaoTaoTinChi.Value.CompareTo(rhs.DaoTaoTinChi.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayChiTietColumn.MaCauHinhChotGio:
            		return this.MaCauHinhChotGio.Value.CompareTo(rhs.MaCauHinhChotGio.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<KhoiLuongGiangDayChiTietKey> Members
		
		// member variable for the EntityId property
		private KhoiLuongGiangDayChiTietKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual KhoiLuongGiangDayChiTietKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new KhoiLuongGiangDayChiTietKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("KhoiLuongGiangDayChiTiet")
					.Append("|").Append( this.MaKhoiLuong.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{53}{52}- MaKhoiLuong: {0}{52}- MaLichHoc: {1}{52}- MaGiangVien: {2}{52}- MaLopHocPhan: {3}{52}- NamHoc: {4}{52}- HocKy: {5}{52}- MaMonHoc: {6}{52}- TenMonHoc: {7}{52}- Nhom: {8}{52}- SoTinChi: {9}{52}- LyThuyet: {10}{52}- ThucHanh: {11}{52}- BaiTap: {12}{52}- BaiTapLon: {13}{52}- DoAn: {14}{52}- LuanAn: {15}{52}- TieuLuan: {16}{52}- ThucTap: {17}{52}- SoLuong: {18}{52}- MaLoaiHocPhan: {19}{52}- LoaiHocPhan: {20}{52}- PhanLoai: {21}{52}- HeSoThanhPhan: {22}{52}- Nam: {23}{52}- Tuan: {24}{52}- DonViTinh: {25}{52}- MaBuoiHoc: {26}{52}- MaLop: {27}{52}- TietBatDau: {28}{52}- SoTiet: {29}{52}- TinhTrang: {30}{52}- NgayDay: {31}{52}- Compensate: {32}{52}- MaBacDaoTao: {33}{52}- MaKhoa: {34}{52}- MaNhomMonHoc: {35}{52}- MaPhongHoc: {36}{52}- MaKhoaHoc: {37}{52}- LoaiHocKy: {38}{52}- HeSoHocKy: {39}{52}- NamThu: {40}{52}- MaHocHam: {41}{52}- MaHocVi: {42}{52}- MaLoaiGiangVien: {43}{52}- MaChucVu: {44}{52}- MaHinhThucDaoTao: {45}{52}- GhiChu: {46}{52}- NgayCapNhat: {47}{52}- LopHocPhanChuyenNganh: {48}{52}- DotImport: {49}{52}- DaoTaoTinChi: {50}{52}- MaCauHinhChotGio: {51}{52}{54}", 
				this.MaKhoiLuong,
				this.MaLichHoc,
				this.MaGiangVien,
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				this.NamHoc,
				this.HocKy,
				this.MaMonHoc,
				this.TenMonHoc,
				(this.Nhom == null) ? string.Empty : this.Nhom.ToString(),
				this.SoTinChi,
				this.LyThuyet,
				this.ThucHanh,
				this.BaiTap,
				this.BaiTapLon,
				this.DoAn,
				this.LuanAn,
				this.TieuLuan,
				this.ThucTap,
				(this.SoLuong == null) ? string.Empty : this.SoLuong.ToString(),
				this.MaLoaiHocPhan,
				(this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString(),
				(this.PhanLoai == null) ? string.Empty : this.PhanLoai.ToString(),
				(this.HeSoThanhPhan == null) ? string.Empty : this.HeSoThanhPhan.ToString(),
				(this.Nam == null) ? string.Empty : this.Nam.ToString(),
				(this.Tuan == null) ? string.Empty : this.Tuan.ToString(),
				(this.DonViTinh == null) ? string.Empty : this.DonViTinh.ToString(),
				(this.MaBuoiHoc == null) ? string.Empty : this.MaBuoiHoc.ToString(),
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
				(this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString(),
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
				this.TinhTrang,
				(this.NgayDay == null) ? string.Empty : this.NgayDay.ToString(),
				(this.Compensate == null) ? string.Empty : this.Compensate.ToString(),
				(this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString(),
				(this.MaKhoa == null) ? string.Empty : this.MaKhoa.ToString(),
				(this.MaNhomMonHoc == null) ? string.Empty : this.MaNhomMonHoc.ToString(),
				(this.MaPhongHoc == null) ? string.Empty : this.MaPhongHoc.ToString(),
				(this.MaKhoaHoc == null) ? string.Empty : this.MaKhoaHoc.ToString(),
				(this.LoaiHocKy == null) ? string.Empty : this.LoaiHocKy.ToString(),
				(this.HeSoHocKy == null) ? string.Empty : this.HeSoHocKy.ToString(),
				(this.NamThu == null) ? string.Empty : this.NamThu.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
				(this.MaChucVu == null) ? string.Empty : this.MaChucVu.ToString(),
				(this.MaHinhThucDaoTao == null) ? string.Empty : this.MaHinhThucDaoTao.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.LopHocPhanChuyenNganh == null) ? string.Empty : this.LopHocPhanChuyenNganh.ToString(),
				(this.DotImport == null) ? string.Empty : this.DotImport.ToString(),
				(this.DaoTaoTinChi == null) ? string.Empty : this.DaoTaoTinChi.ToString(),
				(this.MaCauHinhChotGio == null) ? string.Empty : this.MaCauHinhChotGio.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'KhoiLuongGiangDayChiTiet' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class KhoiLuongGiangDayChiTietEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaKhoiLuong : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "KhoiLuongGiangDayChiTiet"</remarks>
		public System.Int32 MaKhoiLuong;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		public System.Int32 MaLichHoc = (int)0;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		public System.String MaGiangVien = string.Empty;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = string.Empty;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = string.Empty;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		public System.String TenMonHoc = string.Empty;
		
		/// <summary>
		/// Nhom : 
		/// </summary>
		public System.String Nhom = null;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		public System.Decimal SoTinChi = 0.0m;
		
		/// <summary>
		/// LyThuyet : 
		/// </summary>
		public System.Decimal LyThuyet = 0.0m;
		
		/// <summary>
		/// ThucHanh : 
		/// </summary>
		public System.Decimal ThucHanh = 0.0m;
		
		/// <summary>
		/// BaiTap : 
		/// </summary>
		public System.Decimal BaiTap = 0.0m;
		
		/// <summary>
		/// BaiTapLon : 
		/// </summary>
		public System.Decimal BaiTapLon = 0.0m;
		
		/// <summary>
		/// DoAn : 
		/// </summary>
		public System.Decimal DoAn = 0.0m;
		
		/// <summary>
		/// LuanAn : 
		/// </summary>
		public System.Decimal LuanAn = 0.0m;
		
		/// <summary>
		/// TieuLuan : 
		/// </summary>
		public System.Decimal TieuLuan = 0.0m;
		
		/// <summary>
		/// ThucTap : 
		/// </summary>
		public System.Decimal ThucTap = 0.0m;
		
		/// <summary>
		/// SoLuong : 
		/// </summary>
		public System.Int32? SoLuong = null;
		
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		public System.Byte MaLoaiHocPhan = (byte)0;
		
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		public System.String LoaiHocPhan = null;
		
		/// <summary>
		/// PhanLoai : 
		/// </summary>
		public System.String PhanLoai = null;
		
		/// <summary>
		/// HeSoThanhPhan : 
		/// </summary>
		public System.Decimal? HeSoThanhPhan = null;
		
		/// <summary>
		/// Nam : 
		/// </summary>
		public System.Int32? Nam = null;
		
		/// <summary>
		/// Tuan : 
		/// </summary>
		public System.Int32? Tuan = null;
		
		/// <summary>
		/// DonViTinh : 
		/// </summary>
		public System.String DonViTinh = null;
		
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		public System.Int32? MaBuoiHoc = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String MaLop = null;
		
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		public System.Int32? TietBatDau = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		public System.Decimal? SoTiet = null;
		
		/// <summary>
		/// TinhTrang : 
		/// </summary>
		public System.Int32 TinhTrang = (int)0;
		
		/// <summary>
		/// NgayDay : 
		/// </summary>
		public System.DateTime? NgayDay = null;
		
		/// <summary>
		/// Compensate : 
		/// </summary>
		public System.Byte? Compensate = null;
		
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		public System.String MaBacDaoTao = null;
		
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		public System.String MaKhoa = null;
		
		/// <summary>
		/// MaNhomMonHoc : 
		/// </summary>
		public System.String MaNhomMonHoc = null;
		
		/// <summary>
		/// MaPhongHoc : 
		/// </summary>
		public System.String MaPhongHoc = null;
		
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		public System.String MaKhoaHoc = null;
		
		/// <summary>
		/// LoaiHocKy : 
		/// </summary>
		public System.Byte? LoaiHocKy = null;
		
		/// <summary>
		/// HeSoHocKy : 
		/// </summary>
		public System.Decimal? HeSoHocKy = null;
		
		/// <summary>
		/// NamThu : 
		/// </summary>
		public System.String NamThu = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		public System.Int32? MaHocVi = null;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		public System.Int32? MaLoaiGiangVien = null;
		
		/// <summary>
		/// MaChucVu : 
		/// </summary>
		public System.Int32? MaChucVu = null;
		
		/// <summary>
		/// MaHinhThucDaoTao : 
		/// </summary>
		public System.String MaHinhThucDaoTao = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.String NgayCapNhat = null;
		
		/// <summary>
		/// LopHocPhanChuyenNganh : 
		/// </summary>
		public System.Boolean? LopHocPhanChuyenNganh = null;
		
		/// <summary>
		/// DotImport : 
		/// </summary>
		public System.String DotImport = null;
		
		/// <summary>
		/// DaoTaoTinChi : 
		/// </summary>
		public System.Boolean? DaoTaoTinChi = null;
		
		/// <summary>
		/// MaCauHinhChotGio : 
		/// </summary>
		public System.Int32? MaCauHinhChotGio = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region KhoiLuongQuyDoiCollection
		
		private TList<KhoiLuongQuyDoi> _khoiLuongQuyDoiMaKhoiLuongGiangDay;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _khoiLuongQuyDoiMaKhoiLuongGiangDay
		/// </summary>
		
		public TList<KhoiLuongQuyDoi> KhoiLuongQuyDoiCollection
		{
			get
			{
				if (_khoiLuongQuyDoiMaKhoiLuongGiangDay == null)
				{
				_khoiLuongQuyDoiMaKhoiLuongGiangDay = new TList<KhoiLuongQuyDoi>();
				}
	
				return _khoiLuongQuyDoiMaKhoiLuongGiangDay;
			}
			set { _khoiLuongQuyDoiMaKhoiLuongGiangDay = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			KhoiLuongGiangDayChiTietEntityData _tmp = new KhoiLuongGiangDayChiTietEntityData();
						
			_tmp.MaKhoiLuong = this.MaKhoiLuong;
			
			_tmp.MaLichHoc = this.MaLichHoc;
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.Nhom = this.Nhom;
			_tmp.SoTinChi = this.SoTinChi;
			_tmp.LyThuyet = this.LyThuyet;
			_tmp.ThucHanh = this.ThucHanh;
			_tmp.BaiTap = this.BaiTap;
			_tmp.BaiTapLon = this.BaiTapLon;
			_tmp.DoAn = this.DoAn;
			_tmp.LuanAn = this.LuanAn;
			_tmp.TieuLuan = this.TieuLuan;
			_tmp.ThucTap = this.ThucTap;
			_tmp.SoLuong = this.SoLuong;
			_tmp.MaLoaiHocPhan = this.MaLoaiHocPhan;
			_tmp.LoaiHocPhan = this.LoaiHocPhan;
			_tmp.PhanLoai = this.PhanLoai;
			_tmp.HeSoThanhPhan = this.HeSoThanhPhan;
			_tmp.Nam = this.Nam;
			_tmp.Tuan = this.Tuan;
			_tmp.DonViTinh = this.DonViTinh;
			_tmp.MaBuoiHoc = this.MaBuoiHoc;
			_tmp.MaLop = this.MaLop;
			_tmp.TietBatDau = this.TietBatDau;
			_tmp.SoTiet = this.SoTiet;
			_tmp.TinhTrang = this.TinhTrang;
			_tmp.NgayDay = this.NgayDay;
			_tmp.Compensate = this.Compensate;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaKhoa = this.MaKhoa;
			_tmp.MaNhomMonHoc = this.MaNhomMonHoc;
			_tmp.MaPhongHoc = this.MaPhongHoc;
			_tmp.MaKhoaHoc = this.MaKhoaHoc;
			_tmp.LoaiHocKy = this.LoaiHocKy;
			_tmp.HeSoHocKy = this.HeSoHocKy;
			_tmp.NamThu = this.NamThu;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.MaChucVu = this.MaChucVu;
			_tmp.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
			_tmp.GhiChu = this.GhiChu;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.LopHocPhanChuyenNganh = this.LopHocPhanChuyenNganh;
			_tmp.DotImport = this.DotImport;
			_tmp.DaoTaoTinChi = this.DaoTaoTinChi;
			_tmp.MaCauHinhChotGio = this.MaCauHinhChotGio;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._khoiLuongQuyDoiMaKhoiLuongGiangDay != null)
				_tmp.KhoiLuongQuyDoiCollection = (TList<KhoiLuongQuyDoi>) MakeCopyOf(this.KhoiLuongQuyDoiCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			KhoiLuongGiangDayChiTietEntityData _tmp = new KhoiLuongGiangDayChiTietEntityData();
						
			_tmp.MaKhoiLuong = this.MaKhoiLuong;
			
			_tmp.MaLichHoc = this.MaLichHoc;
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.Nhom = this.Nhom;
			_tmp.SoTinChi = this.SoTinChi;
			_tmp.LyThuyet = this.LyThuyet;
			_tmp.ThucHanh = this.ThucHanh;
			_tmp.BaiTap = this.BaiTap;
			_tmp.BaiTapLon = this.BaiTapLon;
			_tmp.DoAn = this.DoAn;
			_tmp.LuanAn = this.LuanAn;
			_tmp.TieuLuan = this.TieuLuan;
			_tmp.ThucTap = this.ThucTap;
			_tmp.SoLuong = this.SoLuong;
			_tmp.MaLoaiHocPhan = this.MaLoaiHocPhan;
			_tmp.LoaiHocPhan = this.LoaiHocPhan;
			_tmp.PhanLoai = this.PhanLoai;
			_tmp.HeSoThanhPhan = this.HeSoThanhPhan;
			_tmp.Nam = this.Nam;
			_tmp.Tuan = this.Tuan;
			_tmp.DonViTinh = this.DonViTinh;
			_tmp.MaBuoiHoc = this.MaBuoiHoc;
			_tmp.MaLop = this.MaLop;
			_tmp.TietBatDau = this.TietBatDau;
			_tmp.SoTiet = this.SoTiet;
			_tmp.TinhTrang = this.TinhTrang;
			_tmp.NgayDay = this.NgayDay;
			_tmp.Compensate = this.Compensate;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaKhoa = this.MaKhoa;
			_tmp.MaNhomMonHoc = this.MaNhomMonHoc;
			_tmp.MaPhongHoc = this.MaPhongHoc;
			_tmp.MaKhoaHoc = this.MaKhoaHoc;
			_tmp.LoaiHocKy = this.LoaiHocKy;
			_tmp.HeSoHocKy = this.HeSoHocKy;
			_tmp.NamThu = this.NamThu;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.MaChucVu = this.MaChucVu;
			_tmp.MaHinhThucDaoTao = this.MaHinhThucDaoTao;
			_tmp.GhiChu = this.GhiChu;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.LopHocPhanChuyenNganh = this.LopHocPhanChuyenNganh;
			_tmp.DotImport = this.DotImport;
			_tmp.DaoTaoTinChi = this.DaoTaoTinChi;
			_tmp.MaCauHinhChotGio = this.MaCauHinhChotGio;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.KhoiLuongQuyDoiCollection = (TList<KhoiLuongQuyDoi>) MakeCopyOf(this.KhoiLuongQuyDoiCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongGiangDayChiTietColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(KhoiLuongGiangDayChiTietColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongGiangDayChiTietColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(KhoiLuongGiangDayChiTietColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongGiangDayChiTietColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(KhoiLuongGiangDayChiTietColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				KhoiLuongGiangDayChiTietEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new KhoiLuongGiangDayChiTietEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongGiangDayChiTietColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(KhoiLuongGiangDayChiTietColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				KhoiLuongGiangDayChiTietEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new KhoiLuongGiangDayChiTietEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region KhoiLuongGiangDayChiTietEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="KhoiLuongGiangDayChiTiet"/> object.
	/// </remarks>
	public class KhoiLuongGiangDayChiTietEventArgs : System.EventArgs
	{
		private KhoiLuongGiangDayChiTietColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the KhoiLuongGiangDayChiTietEventArgs class.
		///</summary>
		public KhoiLuongGiangDayChiTietEventArgs(KhoiLuongGiangDayChiTietColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the KhoiLuongGiangDayChiTietEventArgs class.
		///</summary>
		public KhoiLuongGiangDayChiTietEventArgs(KhoiLuongGiangDayChiTietColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The KhoiLuongGiangDayChiTietColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="KhoiLuongGiangDayChiTietColumn" />
		public KhoiLuongGiangDayChiTietColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all KhoiLuongGiangDayChiTiet related events.
	///</summary>
	public delegate void KhoiLuongGiangDayChiTietEventHandler(object sender, KhoiLuongGiangDayChiTietEventArgs e);
	
	#region KhoiLuongGiangDayChiTietComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class KhoiLuongGiangDayChiTietComparer : System.Collections.Generic.IComparer<KhoiLuongGiangDayChiTiet>
	{
		KhoiLuongGiangDayChiTietColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:KhoiLuongGiangDayChiTietComparer"/> class.
        /// </summary>
		public KhoiLuongGiangDayChiTietComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:KhoiLuongGiangDayChiTietComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public KhoiLuongGiangDayChiTietComparer(KhoiLuongGiangDayChiTietColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="KhoiLuongGiangDayChiTiet"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="KhoiLuongGiangDayChiTiet"/> to compare.</param>
        /// <param name="b">The second <c>KhoiLuongGiangDayChiTiet</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(KhoiLuongGiangDayChiTiet a, KhoiLuongGiangDayChiTiet b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(KhoiLuongGiangDayChiTiet entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(KhoiLuongGiangDayChiTiet a, KhoiLuongGiangDayChiTiet b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public KhoiLuongGiangDayChiTietColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region KhoiLuongGiangDayChiTietKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="KhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayChiTietKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietKey class.
		/// </summary>
		public KhoiLuongGiangDayChiTietKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietKey class.
		/// </summary>
		public KhoiLuongGiangDayChiTietKey(KhoiLuongGiangDayChiTietBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaKhoiLuong = entity.MaKhoiLuong;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietKey class.
		/// </summary>
		public KhoiLuongGiangDayChiTietKey(System.Int32 _maKhoiLuong)
		{
			#region Init Properties

			this.MaKhoiLuong = _maKhoiLuong;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private KhoiLuongGiangDayChiTietBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public KhoiLuongGiangDayChiTietBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaKhoiLuong property
		private System.Int32 _maKhoiLuong;
		
		/// <summary>
		/// Gets or sets the MaKhoiLuong property.
		/// </summary>
		public System.Int32 MaKhoiLuong
		{
			get { return _maKhoiLuong; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaKhoiLuong = value;
				
				_maKhoiLuong = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaKhoiLuong = ( values["MaKhoiLuong"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaKhoiLuong"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaKhoiLuong", MaKhoiLuong);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaKhoiLuong: {0}{1}",
								MaKhoiLuong,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region KhoiLuongGiangDayChiTietColumn Enum
	
	/// <summary>
	/// Enumerate the KhoiLuongGiangDayChiTiet columns.
	/// </summary>
	[Serializable]
	public enum KhoiLuongGiangDayChiTietColumn : int
	{
		/// <summary>
		/// MaKhoiLuong : 
		/// </summary>
		[EnumTextValue("Ma Khoi Luong")]
		[ColumnEnum("MaKhoiLuong", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaKhoiLuong = 1,
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		[EnumTextValue("Ma Lich Hoc")]
		[ColumnEnum("MaLichHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaLichHoc = 2,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien")]
		[ColumnEnum("MaGiangVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaGiangVien = 3,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaLopHocPhan = 4,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		NamHoc = 5,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		HocKy = 6,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc = 7,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("Ten Mon Hoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc = 8,
		/// <summary>
		/// Nhom : 
		/// </summary>
		[EnumTextValue("Nhom")]
		[ColumnEnum("Nhom", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Nhom = 9,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("So Tin Chi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SoTinChi = 10,
		/// <summary>
		/// LyThuyet : 
		/// </summary>
		[EnumTextValue("Ly Thuyet")]
		[ColumnEnum("LyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		LyThuyet = 11,
		/// <summary>
		/// ThucHanh : 
		/// </summary>
		[EnumTextValue("Thuc Hanh")]
		[ColumnEnum("ThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ThucHanh = 12,
		/// <summary>
		/// BaiTap : 
		/// </summary>
		[EnumTextValue("Bai Tap")]
		[ColumnEnum("BaiTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		BaiTap = 13,
		/// <summary>
		/// BaiTapLon : 
		/// </summary>
		[EnumTextValue("Bai Tap Lon")]
		[ColumnEnum("BaiTapLon", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		BaiTapLon = 14,
		/// <summary>
		/// DoAn : 
		/// </summary>
		[EnumTextValue("Do An")]
		[ColumnEnum("DoAn", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DoAn = 15,
		/// <summary>
		/// LuanAn : 
		/// </summary>
		[EnumTextValue("Luan An")]
		[ColumnEnum("LuanAn", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		LuanAn = 16,
		/// <summary>
		/// TieuLuan : 
		/// </summary>
		[EnumTextValue("Tieu Luan")]
		[ColumnEnum("TieuLuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TieuLuan = 17,
		/// <summary>
		/// ThucTap : 
		/// </summary>
		[EnumTextValue("Thuc Tap")]
		[ColumnEnum("ThucTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ThucTap = 18,
		/// <summary>
		/// SoLuong : 
		/// </summary>
		[EnumTextValue("So Luong")]
		[ColumnEnum("SoLuong", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuong = 19,
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Loai Hoc Phan")]
		[ColumnEnum("MaLoaiHocPhan", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		MaLoaiHocPhan = 20,
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		[EnumTextValue("Loai Hoc Phan")]
		[ColumnEnum("LoaiHocPhan", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		LoaiHocPhan = 21,
		/// <summary>
		/// PhanLoai : 
		/// </summary>
		[EnumTextValue("Phan Loai")]
		[ColumnEnum("PhanLoai", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		PhanLoai = 22,
		/// <summary>
		/// HeSoThanhPhan : 
		/// </summary>
		[EnumTextValue("He So Thanh Phan")]
		[ColumnEnum("HeSoThanhPhan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoThanhPhan = 23,
		/// <summary>
		/// Nam : 
		/// </summary>
		[EnumTextValue("Nam")]
		[ColumnEnum("Nam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Nam = 24,
		/// <summary>
		/// Tuan : 
		/// </summary>
		[EnumTextValue("Tuan")]
		[ColumnEnum("Tuan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Tuan = 25,
		/// <summary>
		/// DonViTinh : 
		/// </summary>
		[EnumTextValue("Don Vi Tinh")]
		[ColumnEnum("DonViTinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		DonViTinh = 26,
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		[EnumTextValue("Ma Buoi Hoc")]
		[ColumnEnum("MaBuoiHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaBuoiHoc = 27,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("Ma Lop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		MaLop = 28,
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		[EnumTextValue("Tiet Bat Dau")]
		[ColumnEnum("TietBatDau", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietBatDau = 29,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("So Tiet")]
		[ColumnEnum("SoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet = 30,
		/// <summary>
		/// TinhTrang : 
		/// </summary>
		[EnumTextValue("Tinh Trang")]
		[ColumnEnum("TinhTrang", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TinhTrang = 31,
		/// <summary>
		/// NgayDay : 
		/// </summary>
		[EnumTextValue("Ngay Day")]
		[ColumnEnum("NgayDay", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayDay = 32,
		/// <summary>
		/// Compensate : 
		/// </summary>
		[EnumTextValue("Compensate")]
		[ColumnEnum("Compensate", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		Compensate = 33,
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Bac Dao Tao")]
		[ColumnEnum("MaBacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaBacDaoTao = 34,
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		[EnumTextValue("Ma Khoa")]
		[ColumnEnum("MaKhoa", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		MaKhoa = 35,
		/// <summary>
		/// MaNhomMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Nhom Mon Hoc")]
		[ColumnEnum("MaNhomMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaNhomMonHoc = 36,
		/// <summary>
		/// MaPhongHoc : 
		/// </summary>
		[EnumTextValue("Ma Phong Hoc")]
		[ColumnEnum("MaPhongHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaPhongHoc = 37,
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		[EnumTextValue("Ma Khoa Hoc")]
		[ColumnEnum("MaKhoaHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaKhoaHoc = 38,
		/// <summary>
		/// LoaiHocKy : 
		/// </summary>
		[EnumTextValue("Loai Hoc Ky")]
		[ColumnEnum("LoaiHocKy", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		LoaiHocKy = 39,
		/// <summary>
		/// HeSoHocKy : 
		/// </summary>
		[EnumTextValue("He So Hoc Ky")]
		[ColumnEnum("HeSoHocKy", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoHocKy = 40,
		/// <summary>
		/// NamThu : 
		/// </summary>
		[EnumTextValue("Nam Thu")]
		[ColumnEnum("NamThu", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamThu = 41,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 42,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("Ma Hoc Vi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi = 43,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Loai Giang Vien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien = 44,
		/// <summary>
		/// MaChucVu : 
		/// </summary>
		[EnumTextValue("Ma Chuc Vu")]
		[ColumnEnum("MaChucVu", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaChucVu = 45,
		/// <summary>
		/// MaHinhThucDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Hinh Thuc Dao Tao")]
		[ColumnEnum("MaHinhThucDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHinhThucDaoTao = 46,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		GhiChu = 47,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgayCapNhat = 48,
		/// <summary>
		/// LopHocPhanChuyenNganh : 
		/// </summary>
		[EnumTextValue("Lop Hoc Phan Chuyen Nganh")]
		[ColumnEnum("LopHocPhanChuyenNganh", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		LopHocPhanChuyenNganh = 49,
		/// <summary>
		/// DotImport : 
		/// </summary>
		[EnumTextValue("Dot Import")]
		[ColumnEnum("DotImport", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		DotImport = 50,
		/// <summary>
		/// DaoTaoTinChi : 
		/// </summary>
		[EnumTextValue("Dao Tao Tin Chi")]
		[ColumnEnum("DaoTaoTinChi", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DaoTaoTinChi = 51,
		/// <summary>
		/// MaCauHinhChotGio : 
		/// </summary>
		[EnumTextValue("Ma Cau Hinh Chot Gio")]
		[ColumnEnum("MaCauHinhChotGio", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaCauHinhChotGio = 52
	}//End enum

	#endregion KhoiLuongGiangDayChiTietColumn Enum

} // end namespace
