
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file BangPhuTroiGioDayGiangVien.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'BangPhuTroiGioDay_GiangVien' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class BangPhuTroiGioDayGiangVienBase : EntityBase, IBangPhuTroiGioDayGiangVien, IEntityId<BangPhuTroiGioDayGiangVienKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private BangPhuTroiGioDayGiangVienEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private BangPhuTroiGioDayGiangVienEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private BangPhuTroiGioDayGiangVienEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<BangPhuTroiGioDayGiangVien> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BangPhuTroiGioDayGiangVienEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BangPhuTroiGioDayGiangVienEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="BangPhuTroiGioDayGiangVienBase"/> instance.
		///</summary>
		public BangPhuTroiGioDayGiangVienBase()
		{
			this.entityData = new BangPhuTroiGioDayGiangVienEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="BangPhuTroiGioDayGiangVienBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_namHoc"></param>
		///<param name="_maDonVi"></param>
		///<param name="_tenDonVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_tenLoaiGiangVien"></param>
		///<param name="_tcThucDay"></param>
		///<param name="_tietQd"></param>
		///<param name="_nhiemVuGd"></param>
		///<param name="_nhiemVuNckh"></param>
		///<param name="_phanCongCn"></param>
		///<param name="_congTrinhCd"></param>
		///<param name="_congTrinhTc"></param>
		public BangPhuTroiGioDayGiangVienBase(System.Int32 _maGiangVien, System.String _maQuanLy, 
			System.String _ho, System.String _ten, System.String _namHoc, 
			System.String _maDonVi, System.String _tenDonVi, System.Int32 _maLoaiGiangVien, 
			System.String _tenLoaiGiangVien, System.Decimal? _tcThucDay, System.Decimal? _tietQd, 
			System.Int32? _nhiemVuGd, System.Int32? _nhiemVuNckh, System.Int32? _phanCongCn, 
			System.Int32? _congTrinhCd, System.Int32? _congTrinhTc)
		{
			this.entityData = new BangPhuTroiGioDayGiangVienEntityData();
			this.backupData = null;

			this.MaGiangVien = _maGiangVien;
			this.MaQuanLy = _maQuanLy;
			this.Ho = _ho;
			this.Ten = _ten;
			this.NamHoc = _namHoc;
			this.MaDonVi = _maDonVi;
			this.TenDonVi = _tenDonVi;
			this.MaLoaiGiangVien = _maLoaiGiangVien;
			this.TenLoaiGiangVien = _tenLoaiGiangVien;
			this.TcThucDay = _tcThucDay;
			this.TietQd = _tietQd;
			this.NhiemVuGd = _nhiemVuGd;
			this.NhiemVuNckh = _nhiemVuNckh;
			this.PhanCongCn = _phanCongCn;
			this.CongTrinhCd = _congTrinhCd;
			this.CongTrinhTc = _congTrinhTc;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="BangPhuTroiGioDayGiangVien"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_namHoc"></param>
		///<param name="_maDonVi"></param>
		///<param name="_tenDonVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_tenLoaiGiangVien"></param>
		///<param name="_tcThucDay"></param>
		///<param name="_tietQd"></param>
		///<param name="_nhiemVuGd"></param>
		///<param name="_nhiemVuNckh"></param>
		///<param name="_phanCongCn"></param>
		///<param name="_congTrinhCd"></param>
		///<param name="_congTrinhTc"></param>
		public static BangPhuTroiGioDayGiangVien CreateBangPhuTroiGioDayGiangVien(System.Int32 _maGiangVien, System.String _maQuanLy, 
			System.String _ho, System.String _ten, System.String _namHoc, 
			System.String _maDonVi, System.String _tenDonVi, System.Int32 _maLoaiGiangVien, 
			System.String _tenLoaiGiangVien, System.Decimal? _tcThucDay, System.Decimal? _tietQd, 
			System.Int32? _nhiemVuGd, System.Int32? _nhiemVuNckh, System.Int32? _phanCongCn, 
			System.Int32? _congTrinhCd, System.Int32? _congTrinhTc)
		{
			BangPhuTroiGioDayGiangVien newBangPhuTroiGioDayGiangVien = new BangPhuTroiGioDayGiangVien();
			newBangPhuTroiGioDayGiangVien.MaGiangVien = _maGiangVien;
			newBangPhuTroiGioDayGiangVien.MaQuanLy = _maQuanLy;
			newBangPhuTroiGioDayGiangVien.Ho = _ho;
			newBangPhuTroiGioDayGiangVien.Ten = _ten;
			newBangPhuTroiGioDayGiangVien.NamHoc = _namHoc;
			newBangPhuTroiGioDayGiangVien.MaDonVi = _maDonVi;
			newBangPhuTroiGioDayGiangVien.TenDonVi = _tenDonVi;
			newBangPhuTroiGioDayGiangVien.MaLoaiGiangVien = _maLoaiGiangVien;
			newBangPhuTroiGioDayGiangVien.TenLoaiGiangVien = _tenLoaiGiangVien;
			newBangPhuTroiGioDayGiangVien.TcThucDay = _tcThucDay;
			newBangPhuTroiGioDayGiangVien.TietQd = _tietQd;
			newBangPhuTroiGioDayGiangVien.NhiemVuGd = _nhiemVuGd;
			newBangPhuTroiGioDayGiangVien.NhiemVuNckh = _nhiemVuNckh;
			newBangPhuTroiGioDayGiangVien.PhanCongCn = _phanCongCn;
			newBangPhuTroiGioDayGiangVien.CongTrinhCd = _congTrinhCd;
			newBangPhuTroiGioDayGiangVien.CongTrinhTc = _congTrinhTc;
			return newBangPhuTroiGioDayGiangVien;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 MaGiangVien
		{
			get
			{
				return this.entityData.MaGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaGiangVien == value)
					return;
				
                OnPropertyChanging("MaGiangVien");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.MaGiangVien, this.entityData.MaGiangVien);
				this.entityData.MaGiangVien = value;
				this.EntityId.MaGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.MaGiangVien, this.entityData.MaGiangVien);
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaGiangVien property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaGiangVien property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalMaGiangVien
		{
			get { return this.entityData.OriginalMaGiangVien; }
			set { this.entityData.OriginalMaGiangVien = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this.entityData.MaQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaQuanLy == value)
					return;
				
                OnPropertyChanging("MaQuanLy");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.MaQuanLy, this.entityData.MaQuanLy);
				this.entityData.MaQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.MaQuanLy, this.entityData.MaQuanLy);
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ho property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 101)]
		public virtual System.String Ho
		{
			get
			{
				return this.entityData.Ho; 
			}
			
			set
			{
				if (this.entityData.Ho == value)
					return;
				
                OnPropertyChanging("Ho");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.Ho, this.entityData.Ho);
				this.entityData.Ho = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.Ho, this.entityData.Ho);
				OnPropertyChanged("Ho");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ten property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Ten
		{
			get
			{
				return this.entityData.Ten; 
			}
			
			set
			{
				if (this.entityData.Ten == value)
					return;
				
                OnPropertyChanging("Ten");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.Ten, this.entityData.Ten);
				this.entityData.Ten = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.Ten, this.entityData.Ten);
				OnPropertyChanged("Ten");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaDonVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaDonVi
		{
			get
			{
				return this.entityData.MaDonVi; 
			}
			
			set
			{
				if (this.entityData.MaDonVi == value)
					return;
				
                OnPropertyChanging("MaDonVi");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.MaDonVi, this.entityData.MaDonVi);
				this.entityData.MaDonVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.MaDonVi, this.entityData.MaDonVi);
				OnPropertyChanged("MaDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenDonVi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String TenDonVi
		{
			get
			{
				return this.entityData.TenDonVi; 
			}
			
			set
			{
				if (this.entityData.TenDonVi == value)
					return;
				
                OnPropertyChanging("TenDonVi");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.TenDonVi, this.entityData.TenDonVi);
				this.entityData.TenDonVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.TenDonVi, this.entityData.TenDonVi);
				OnPropertyChanged("TenDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MaLoaiGiangVien
		{
			get
			{
				return this.entityData.MaLoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaLoaiGiangVien == value)
					return;
				
                OnPropertyChanging("MaLoaiGiangVien");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				this.entityData.MaLoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TenLoaiGiangVien
		{
			get
			{
				return this.entityData.TenLoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.TenLoaiGiangVien == value)
					return;
				
                OnPropertyChanging("TenLoaiGiangVien");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.TenLoaiGiangVien, this.entityData.TenLoaiGiangVien);
				this.entityData.TenLoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.TenLoaiGiangVien, this.entityData.TenLoaiGiangVien);
				OnPropertyChanged("TenLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TcThucDay property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TcThucDay
		{
			get
			{
				return this.entityData.TcThucDay; 
			}
			
			set
			{
				if (this.entityData.TcThucDay == value)
					return;
				
                OnPropertyChanging("TcThucDay");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.TcThucDay, this.entityData.TcThucDay);
				this.entityData.TcThucDay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.TcThucDay, this.entityData.TcThucDay);
				OnPropertyChanged("TcThucDay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietQd property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietQd
		{
			get
			{
				return this.entityData.TietQd; 
			}
			
			set
			{
				if (this.entityData.TietQd == value)
					return;
				
                OnPropertyChanging("TietQd");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.TietQd, this.entityData.TietQd);
				this.entityData.TietQd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.TietQd, this.entityData.TietQd);
				OnPropertyChanged("TietQd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NhiemVuGd property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? NhiemVuGd
		{
			get
			{
				return this.entityData.NhiemVuGd; 
			}
			
			set
			{
				if (this.entityData.NhiemVuGd == value)
					return;
				
                OnPropertyChanging("NhiemVuGd");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.NhiemVuGd, this.entityData.NhiemVuGd);
				this.entityData.NhiemVuGd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.NhiemVuGd, this.entityData.NhiemVuGd);
				OnPropertyChanged("NhiemVuGd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NhiemVuNckh property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? NhiemVuNckh
		{
			get
			{
				return this.entityData.NhiemVuNckh; 
			}
			
			set
			{
				if (this.entityData.NhiemVuNckh == value)
					return;
				
                OnPropertyChanging("NhiemVuNckh");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.NhiemVuNckh, this.entityData.NhiemVuNckh);
				this.entityData.NhiemVuNckh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.NhiemVuNckh, this.entityData.NhiemVuNckh);
				OnPropertyChanged("NhiemVuNckh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhanCongCn property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PhanCongCn
		{
			get
			{
				return this.entityData.PhanCongCn; 
			}
			
			set
			{
				if (this.entityData.PhanCongCn == value)
					return;
				
                OnPropertyChanging("PhanCongCn");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.PhanCongCn, this.entityData.PhanCongCn);
				this.entityData.PhanCongCn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.PhanCongCn, this.entityData.PhanCongCn);
				OnPropertyChanged("PhanCongCn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CongTrinhCd property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CongTrinhCd
		{
			get
			{
				return this.entityData.CongTrinhCd; 
			}
			
			set
			{
				if (this.entityData.CongTrinhCd == value)
					return;
				
                OnPropertyChanging("CongTrinhCd");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.CongTrinhCd, this.entityData.CongTrinhCd);
				this.entityData.CongTrinhCd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.CongTrinhCd, this.entityData.CongTrinhCd);
				OnPropertyChanged("CongTrinhCd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CongTrinhTc property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CongTrinhTc
		{
			get
			{
				return this.entityData.CongTrinhTc; 
			}
			
			set
			{
				if (this.entityData.CongTrinhTc == value)
					return;
				
                OnPropertyChanging("CongTrinhTc");                    
				OnColumnChanging(BangPhuTroiGioDayGiangVienColumn.CongTrinhTc, this.entityData.CongTrinhTc);
				this.entityData.CongTrinhTc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BangPhuTroiGioDayGiangVienColumn.CongTrinhTc, this.entityData.CongTrinhTc);
				OnPropertyChanged("CongTrinhTc");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaQuanLy", "Ma Quan Ly"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaQuanLy", "Ma Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Ho", "Ho", 101));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Ten", "Ten", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaDonVi", "Ma Don Vi", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TenDonVi", "Ten Don Vi"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenDonVi", "Ten Don Vi", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenLoaiGiangVien", "Ten Loai Giang Vien", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "BangPhuTroiGioDay_GiangVien"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaGiangVien", "MaQuanLy", "Ho", "Ten", "NamHoc", "MaDonVi", "TenDonVi", "MaLoaiGiangVien", "TenLoaiGiangVien", "TCThucDay", "TietQD", "NhiemVuGD", "NhiemVuNCKH", "PhanCongCN", "CongTrinhCD", "CongTrinhTC"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as BangPhuTroiGioDayGiangVienEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (BangPhuTroiGioDayGiangVien) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<BangPhuTroiGioDayGiangVien>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as BangPhuTroiGioDayGiangVien);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed BangPhuTroiGioDayGiangVien Entity 
		///</summary>
		protected virtual BangPhuTroiGioDayGiangVien Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			BangPhuTroiGioDayGiangVien copy = new BangPhuTroiGioDayGiangVien();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaGiangVien = this.MaGiangVien;
					copy.OriginalMaGiangVien = this.OriginalMaGiangVien;
				copy.MaQuanLy = this.MaQuanLy;
				copy.Ho = this.Ho;
				copy.Ten = this.Ten;
				copy.NamHoc = this.NamHoc;
				copy.MaDonVi = this.MaDonVi;
				copy.TenDonVi = this.TenDonVi;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.TenLoaiGiangVien = this.TenLoaiGiangVien;
				copy.TcThucDay = this.TcThucDay;
				copy.TietQd = this.TietQd;
				copy.NhiemVuGd = this.NhiemVuGd;
				copy.NhiemVuNckh = this.NhiemVuNckh;
				copy.PhanCongCn = this.PhanCongCn;
				copy.CongTrinhCd = this.CongTrinhCd;
				copy.CongTrinhTc = this.CongTrinhTc;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed BangPhuTroiGioDayGiangVien Entity 
		///</summary>
		public virtual BangPhuTroiGioDayGiangVien Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed BangPhuTroiGioDayGiangVien Entity which is a deep copy of the current entity.
		///</summary>
		public virtual BangPhuTroiGioDayGiangVien DeepCopy()
		{
			return EntityHelper.Clone<BangPhuTroiGioDayGiangVien>(this as BangPhuTroiGioDayGiangVien);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as BangPhuTroiGioDayGiangVienEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new BangPhuTroiGioDayGiangVienEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as BangPhuTroiGioDayGiangVienEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(BangPhuTroiGioDayGiangVienColumn column)
		{
			switch(column)
			{
					case BangPhuTroiGioDayGiangVienColumn.MaGiangVien:
					return entityData.MaGiangVien != _originalData.MaGiangVien;
					case BangPhuTroiGioDayGiangVienColumn.MaQuanLy:
					return entityData.MaQuanLy != _originalData.MaQuanLy;
					case BangPhuTroiGioDayGiangVienColumn.Ho:
					return entityData.Ho != _originalData.Ho;
					case BangPhuTroiGioDayGiangVienColumn.Ten:
					return entityData.Ten != _originalData.Ten;
					case BangPhuTroiGioDayGiangVienColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case BangPhuTroiGioDayGiangVienColumn.MaDonVi:
					return entityData.MaDonVi != _originalData.MaDonVi;
					case BangPhuTroiGioDayGiangVienColumn.TenDonVi:
					return entityData.TenDonVi != _originalData.TenDonVi;
					case BangPhuTroiGioDayGiangVienColumn.MaLoaiGiangVien:
					return entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
					case BangPhuTroiGioDayGiangVienColumn.TenLoaiGiangVien:
					return entityData.TenLoaiGiangVien != _originalData.TenLoaiGiangVien;
					case BangPhuTroiGioDayGiangVienColumn.TcThucDay:
					return entityData.TcThucDay != _originalData.TcThucDay;
					case BangPhuTroiGioDayGiangVienColumn.TietQd:
					return entityData.TietQd != _originalData.TietQd;
					case BangPhuTroiGioDayGiangVienColumn.NhiemVuGd:
					return entityData.NhiemVuGd != _originalData.NhiemVuGd;
					case BangPhuTroiGioDayGiangVienColumn.NhiemVuNckh:
					return entityData.NhiemVuNckh != _originalData.NhiemVuNckh;
					case BangPhuTroiGioDayGiangVienColumn.PhanCongCn:
					return entityData.PhanCongCn != _originalData.PhanCongCn;
					case BangPhuTroiGioDayGiangVienColumn.CongTrinhCd:
					return entityData.CongTrinhCd != _originalData.CongTrinhCd;
					case BangPhuTroiGioDayGiangVienColumn.CongTrinhTc:
					return entityData.CongTrinhTc != _originalData.CongTrinhTc;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< BangPhuTroiGioDayGiangVienColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaGiangVien != _originalData.MaGiangVien;
			result = result || entityData.MaQuanLy != _originalData.MaQuanLy;
			result = result || entityData.Ho != _originalData.Ho;
			result = result || entityData.Ten != _originalData.Ten;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.MaDonVi != _originalData.MaDonVi;
			result = result || entityData.TenDonVi != _originalData.TenDonVi;
			result = result || entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
			result = result || entityData.TenLoaiGiangVien != _originalData.TenLoaiGiangVien;
			result = result || entityData.TcThucDay != _originalData.TcThucDay;
			result = result || entityData.TietQd != _originalData.TietQd;
			result = result || entityData.NhiemVuGd != _originalData.NhiemVuGd;
			result = result || entityData.NhiemVuNckh != _originalData.NhiemVuNckh;
			result = result || entityData.PhanCongCn != _originalData.PhanCongCn;
			result = result || entityData.CongTrinhCd != _originalData.CongTrinhCd;
			result = result || entityData.CongTrinhTc != _originalData.CongTrinhTc;
			return result;
		}	
		
		///<summary>
		///  Returns a BangPhuTroiGioDayGiangVien Entity with the original data.
		///</summary>
		public BangPhuTroiGioDayGiangVien GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateBangPhuTroiGioDayGiangVien(
				_originalData.MaGiangVien,
				_originalData.MaQuanLy,
				_originalData.Ho,
				_originalData.Ten,
				_originalData.NamHoc,
				_originalData.MaDonVi,
				_originalData.TenDonVi,
				_originalData.MaLoaiGiangVien,
				_originalData.TenLoaiGiangVien,
				_originalData.TcThucDay,
				_originalData.TietQd,
				_originalData.NhiemVuGd,
				_originalData.NhiemVuNckh,
				_originalData.PhanCongCn,
				_originalData.CongTrinhCd,
				_originalData.CongTrinhTc
				);
				
			return (BangPhuTroiGioDayGiangVien)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="BangPhuTroiGioDayGiangVienBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is BangPhuTroiGioDayGiangVienBase)
				return ValueEquals(this, (BangPhuTroiGioDayGiangVienBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="BangPhuTroiGioDayGiangVienBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaGiangVien.GetHashCode() ^ 
					this.MaQuanLy.GetHashCode() ^ 
					((this.Ho == null) ? string.Empty : this.Ho.ToString()).GetHashCode() ^ 
					((this.Ten == null) ? string.Empty : this.Ten.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString()).GetHashCode() ^ 
					this.TenDonVi.GetHashCode() ^ 
					this.MaLoaiGiangVien.GetHashCode() ^ 
					((this.TenLoaiGiangVien == null) ? string.Empty : this.TenLoaiGiangVien.ToString()).GetHashCode() ^ 
					((this.TcThucDay == null) ? string.Empty : this.TcThucDay.ToString()).GetHashCode() ^ 
					((this.TietQd == null) ? string.Empty : this.TietQd.ToString()).GetHashCode() ^ 
					((this.NhiemVuGd == null) ? string.Empty : this.NhiemVuGd.ToString()).GetHashCode() ^ 
					((this.NhiemVuNckh == null) ? string.Empty : this.NhiemVuNckh.ToString()).GetHashCode() ^ 
					((this.PhanCongCn == null) ? string.Empty : this.PhanCongCn.ToString()).GetHashCode() ^ 
					((this.CongTrinhCd == null) ? string.Empty : this.CongTrinhCd.ToString()).GetHashCode() ^ 
					((this.CongTrinhTc == null) ? string.Empty : this.CongTrinhTc.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="BangPhuTroiGioDayGiangVienBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(BangPhuTroiGioDayGiangVienBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="BangPhuTroiGioDayGiangVienBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="BangPhuTroiGioDayGiangVienBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="BangPhuTroiGioDayGiangVienBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(BangPhuTroiGioDayGiangVienBase Object1, BangPhuTroiGioDayGiangVienBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaGiangVien != Object2.MaGiangVien)
				equal = false;
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if ( Object1.Ho != null && Object2.Ho != null )
			{
				if (Object1.Ho != Object2.Ho)
					equal = false;
			}
			else if (Object1.Ho == null ^ Object2.Ho == null )
			{
				equal = false;
			}
			if ( Object1.Ten != null && Object2.Ten != null )
			{
				if (Object1.Ten != Object2.Ten)
					equal = false;
			}
			else if (Object1.Ten == null ^ Object2.Ten == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaDonVi != null && Object2.MaDonVi != null )
			{
				if (Object1.MaDonVi != Object2.MaDonVi)
					equal = false;
			}
			else if (Object1.MaDonVi == null ^ Object2.MaDonVi == null )
			{
				equal = false;
			}
			if (Object1.TenDonVi != Object2.TenDonVi)
				equal = false;
			if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
				equal = false;
			if ( Object1.TenLoaiGiangVien != null && Object2.TenLoaiGiangVien != null )
			{
				if (Object1.TenLoaiGiangVien != Object2.TenLoaiGiangVien)
					equal = false;
			}
			else if (Object1.TenLoaiGiangVien == null ^ Object2.TenLoaiGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.TcThucDay != null && Object2.TcThucDay != null )
			{
				if (Object1.TcThucDay != Object2.TcThucDay)
					equal = false;
			}
			else if (Object1.TcThucDay == null ^ Object2.TcThucDay == null )
			{
				equal = false;
			}
			if ( Object1.TietQd != null && Object2.TietQd != null )
			{
				if (Object1.TietQd != Object2.TietQd)
					equal = false;
			}
			else if (Object1.TietQd == null ^ Object2.TietQd == null )
			{
				equal = false;
			}
			if ( Object1.NhiemVuGd != null && Object2.NhiemVuGd != null )
			{
				if (Object1.NhiemVuGd != Object2.NhiemVuGd)
					equal = false;
			}
			else if (Object1.NhiemVuGd == null ^ Object2.NhiemVuGd == null )
			{
				equal = false;
			}
			if ( Object1.NhiemVuNckh != null && Object2.NhiemVuNckh != null )
			{
				if (Object1.NhiemVuNckh != Object2.NhiemVuNckh)
					equal = false;
			}
			else if (Object1.NhiemVuNckh == null ^ Object2.NhiemVuNckh == null )
			{
				equal = false;
			}
			if ( Object1.PhanCongCn != null && Object2.PhanCongCn != null )
			{
				if (Object1.PhanCongCn != Object2.PhanCongCn)
					equal = false;
			}
			else if (Object1.PhanCongCn == null ^ Object2.PhanCongCn == null )
			{
				equal = false;
			}
			if ( Object1.CongTrinhCd != null && Object2.CongTrinhCd != null )
			{
				if (Object1.CongTrinhCd != Object2.CongTrinhCd)
					equal = false;
			}
			else if (Object1.CongTrinhCd == null ^ Object2.CongTrinhCd == null )
			{
				equal = false;
			}
			if ( Object1.CongTrinhTc != null && Object2.CongTrinhTc != null )
			{
				if (Object1.CongTrinhTc != Object2.CongTrinhTc)
					equal = false;
			}
			else if (Object1.CongTrinhTc == null ^ Object2.CongTrinhTc == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((BangPhuTroiGioDayGiangVienBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static BangPhuTroiGioDayGiangVienComparer GetComparer()
        {
            return new BangPhuTroiGioDayGiangVienComparer();
        }
        */

        // Comparer delegates back to BangPhuTroiGioDayGiangVien
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(BangPhuTroiGioDayGiangVien rhs, BangPhuTroiGioDayGiangVienColumn which)
        {
            switch (which)
            {
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.MaGiangVien:
            		return this.MaGiangVien.CompareTo(rhs.MaGiangVien);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.MaQuanLy:
            		return this.MaQuanLy.CompareTo(rhs.MaQuanLy);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.Ho:
            		return this.Ho.CompareTo(rhs.Ho);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.Ten:
            		return this.Ten.CompareTo(rhs.Ten);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.MaDonVi:
            		return this.MaDonVi.CompareTo(rhs.MaDonVi);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.TenDonVi:
            		return this.TenDonVi.CompareTo(rhs.TenDonVi);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.MaLoaiGiangVien:
            		return this.MaLoaiGiangVien.CompareTo(rhs.MaLoaiGiangVien);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.TenLoaiGiangVien:
            		return this.TenLoaiGiangVien.CompareTo(rhs.TenLoaiGiangVien);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.TcThucDay:
            		return this.TcThucDay.Value.CompareTo(rhs.TcThucDay.Value);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.TietQd:
            		return this.TietQd.Value.CompareTo(rhs.TietQd.Value);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.NhiemVuGd:
            		return this.NhiemVuGd.Value.CompareTo(rhs.NhiemVuGd.Value);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.NhiemVuNckh:
            		return this.NhiemVuNckh.Value.CompareTo(rhs.NhiemVuNckh.Value);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.PhanCongCn:
            		return this.PhanCongCn.Value.CompareTo(rhs.PhanCongCn.Value);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.CongTrinhCd:
            		return this.CongTrinhCd.Value.CompareTo(rhs.CongTrinhCd.Value);
            		
            		                 
            	
            	
            	case BangPhuTroiGioDayGiangVienColumn.CongTrinhTc:
            		return this.CongTrinhTc.Value.CompareTo(rhs.CongTrinhTc.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<BangPhuTroiGioDayGiangVienKey> Members
		
		// member variable for the EntityId property
		private BangPhuTroiGioDayGiangVienKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual BangPhuTroiGioDayGiangVienKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new BangPhuTroiGioDayGiangVienKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("BangPhuTroiGioDayGiangVien")
					.Append("|").Append( this.MaGiangVien.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- MaGiangVien: {0}{16}- MaQuanLy: {1}{16}- Ho: {2}{16}- Ten: {3}{16}- NamHoc: {4}{16}- MaDonVi: {5}{16}- TenDonVi: {6}{16}- MaLoaiGiangVien: {7}{16}- TenLoaiGiangVien: {8}{16}- TcThucDay: {9}{16}- TietQd: {10}{16}- NhiemVuGd: {11}{16}- NhiemVuNckh: {12}{16}- PhanCongCn: {13}{16}- CongTrinhCd: {14}{16}- CongTrinhTc: {15}{16}{18}", 
				this.MaGiangVien,
				this.MaQuanLy,
				(this.Ho == null) ? string.Empty : this.Ho.ToString(),
				(this.Ten == null) ? string.Empty : this.Ten.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString(),
				this.TenDonVi,
				this.MaLoaiGiangVien,
				(this.TenLoaiGiangVien == null) ? string.Empty : this.TenLoaiGiangVien.ToString(),
				(this.TcThucDay == null) ? string.Empty : this.TcThucDay.ToString(),
				(this.TietQd == null) ? string.Empty : this.TietQd.ToString(),
				(this.NhiemVuGd == null) ? string.Empty : this.NhiemVuGd.ToString(),
				(this.NhiemVuNckh == null) ? string.Empty : this.NhiemVuNckh.ToString(),
				(this.PhanCongCn == null) ? string.Empty : this.PhanCongCn.ToString(),
				(this.CongTrinhCd == null) ? string.Empty : this.CongTrinhCd.ToString(),
				(this.CongTrinhTc == null) ? string.Empty : this.CongTrinhTc.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'BangPhuTroiGioDay_GiangVien' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class BangPhuTroiGioDayGiangVienEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaGiangVien : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "BangPhuTroiGioDay_GiangVien"</remarks>
		public System.Int32 MaGiangVien;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalMaGiangVien;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		public System.String MaQuanLy = string.Empty;
		
		/// <summary>
		/// Ho : 
		/// </summary>
		public System.String Ho = null;
		
		/// <summary>
		/// Ten : 
		/// </summary>
		public System.String Ten = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		public System.String MaDonVi = null;
		
		/// <summary>
		/// TenDonVi : 
		/// </summary>
		public System.String TenDonVi = string.Empty;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		public System.Int32 MaLoaiGiangVien = (int)0;
		
		/// <summary>
		/// TenLoaiGiangVien : 
		/// </summary>
		public System.String TenLoaiGiangVien = null;
		
		/// <summary>
		/// TCThucDay : 
		/// </summary>
		public System.Decimal? TcThucDay = null;
		
		/// <summary>
		/// TietQD : 
		/// </summary>
		public System.Decimal? TietQd = null;
		
		/// <summary>
		/// NhiemVuGD : 
		/// </summary>
		public System.Int32? NhiemVuGd = null;
		
		/// <summary>
		/// NhiemVuNCKH : 
		/// </summary>
		public System.Int32? NhiemVuNckh = null;
		
		/// <summary>
		/// PhanCongCN : 
		/// </summary>
		public System.Int32? PhanCongCn = null;
		
		/// <summary>
		/// CongTrinhCD : 
		/// </summary>
		public System.Int32? CongTrinhCd = null;
		
		/// <summary>
		/// CongTrinhTC : 
		/// </summary>
		public System.Int32? CongTrinhTc = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			BangPhuTroiGioDayGiangVienEntityData _tmp = new BangPhuTroiGioDayGiangVienEntityData();
						
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.OriginalMaGiangVien = this.OriginalMaGiangVien;
			
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.Ho = this.Ho;
			_tmp.Ten = this.Ten;
			_tmp.NamHoc = this.NamHoc;
			_tmp.MaDonVi = this.MaDonVi;
			_tmp.TenDonVi = this.TenDonVi;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.TenLoaiGiangVien = this.TenLoaiGiangVien;
			_tmp.TcThucDay = this.TcThucDay;
			_tmp.TietQd = this.TietQd;
			_tmp.NhiemVuGd = this.NhiemVuGd;
			_tmp.NhiemVuNckh = this.NhiemVuNckh;
			_tmp.PhanCongCn = this.PhanCongCn;
			_tmp.CongTrinhCd = this.CongTrinhCd;
			_tmp.CongTrinhTc = this.CongTrinhTc;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			BangPhuTroiGioDayGiangVienEntityData _tmp = new BangPhuTroiGioDayGiangVienEntityData();
						
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.OriginalMaGiangVien = this.OriginalMaGiangVien;
			
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.Ho = this.Ho;
			_tmp.Ten = this.Ten;
			_tmp.NamHoc = this.NamHoc;
			_tmp.MaDonVi = this.MaDonVi;
			_tmp.TenDonVi = this.TenDonVi;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.TenLoaiGiangVien = this.TenLoaiGiangVien;
			_tmp.TcThucDay = this.TcThucDay;
			_tmp.TietQd = this.TietQd;
			_tmp.NhiemVuGd = this.NhiemVuGd;
			_tmp.NhiemVuNckh = this.NhiemVuNckh;
			_tmp.PhanCongCn = this.PhanCongCn;
			_tmp.CongTrinhCd = this.CongTrinhCd;
			_tmp.CongTrinhTc = this.CongTrinhTc;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BangPhuTroiGioDayGiangVienColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(BangPhuTroiGioDayGiangVienColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BangPhuTroiGioDayGiangVienColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(BangPhuTroiGioDayGiangVienColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BangPhuTroiGioDayGiangVienColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(BangPhuTroiGioDayGiangVienColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				BangPhuTroiGioDayGiangVienEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new BangPhuTroiGioDayGiangVienEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BangPhuTroiGioDayGiangVienColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(BangPhuTroiGioDayGiangVienColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				BangPhuTroiGioDayGiangVienEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new BangPhuTroiGioDayGiangVienEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region BangPhuTroiGioDayGiangVienEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="BangPhuTroiGioDayGiangVien"/> object.
	/// </remarks>
	public class BangPhuTroiGioDayGiangVienEventArgs : System.EventArgs
	{
		private BangPhuTroiGioDayGiangVienColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the BangPhuTroiGioDayGiangVienEventArgs class.
		///</summary>
		public BangPhuTroiGioDayGiangVienEventArgs(BangPhuTroiGioDayGiangVienColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the BangPhuTroiGioDayGiangVienEventArgs class.
		///</summary>
		public BangPhuTroiGioDayGiangVienEventArgs(BangPhuTroiGioDayGiangVienColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The BangPhuTroiGioDayGiangVienColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="BangPhuTroiGioDayGiangVienColumn" />
		public BangPhuTroiGioDayGiangVienColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all BangPhuTroiGioDayGiangVien related events.
	///</summary>
	public delegate void BangPhuTroiGioDayGiangVienEventHandler(object sender, BangPhuTroiGioDayGiangVienEventArgs e);
	
	#region BangPhuTroiGioDayGiangVienComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class BangPhuTroiGioDayGiangVienComparer : System.Collections.Generic.IComparer<BangPhuTroiGioDayGiangVien>
	{
		BangPhuTroiGioDayGiangVienColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:BangPhuTroiGioDayGiangVienComparer"/> class.
        /// </summary>
		public BangPhuTroiGioDayGiangVienComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:BangPhuTroiGioDayGiangVienComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public BangPhuTroiGioDayGiangVienComparer(BangPhuTroiGioDayGiangVienColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="BangPhuTroiGioDayGiangVien"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="BangPhuTroiGioDayGiangVien"/> to compare.</param>
        /// <param name="b">The second <c>BangPhuTroiGioDayGiangVien</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(BangPhuTroiGioDayGiangVien a, BangPhuTroiGioDayGiangVien b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(BangPhuTroiGioDayGiangVien entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(BangPhuTroiGioDayGiangVien a, BangPhuTroiGioDayGiangVien b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public BangPhuTroiGioDayGiangVienColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region BangPhuTroiGioDayGiangVienKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="BangPhuTroiGioDayGiangVien"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class BangPhuTroiGioDayGiangVienKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienKey class.
		/// </summary>
		public BangPhuTroiGioDayGiangVienKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienKey class.
		/// </summary>
		public BangPhuTroiGioDayGiangVienKey(BangPhuTroiGioDayGiangVienBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaGiangVien = entity.MaGiangVien;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienKey class.
		/// </summary>
		public BangPhuTroiGioDayGiangVienKey(System.Int32 _maGiangVien)
		{
			#region Init Properties

			this.MaGiangVien = _maGiangVien;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private BangPhuTroiGioDayGiangVienBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public BangPhuTroiGioDayGiangVienBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaGiangVien property
		private System.Int32 _maGiangVien;
		
		/// <summary>
		/// Gets or sets the MaGiangVien property.
		/// </summary>
		public System.Int32 MaGiangVien
		{
			get { return _maGiangVien; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaGiangVien = value;
				
				_maGiangVien = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaGiangVien = ( values["MaGiangVien"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaGiangVien"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaGiangVien", MaGiangVien);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaGiangVien: {0}{1}",
								MaGiangVien,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region BangPhuTroiGioDayGiangVienColumn Enum
	
	/// <summary>
	/// Enumerate the BangPhuTroiGioDayGiangVien columns.
	/// </summary>
	[Serializable]
	public enum BangPhuTroiGioDayGiangVienColumn : int
	{
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		MaGiangVien = 1,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Quan Ly")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaQuanLy = 2,
		/// <summary>
		/// Ho : 
		/// </summary>
		[EnumTextValue("Ho")]
		[ColumnEnum("Ho", typeof(System.String), System.Data.DbType.String, false, false, true, 101)]
		Ho = 3,
		/// <summary>
		/// Ten : 
		/// </summary>
		[EnumTextValue("Ten")]
		[ColumnEnum("Ten", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Ten = 4,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 5,
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		[EnumTextValue("Ma Don Vi")]
		[ColumnEnum("MaDonVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDonVi = 6,
		/// <summary>
		/// TenDonVi : 
		/// </summary>
		[EnumTextValue("Ten Don Vi")]
		[ColumnEnum("TenDonVi", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenDonVi = 7,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Loai Giang Vien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaLoaiGiangVien = 8,
		/// <summary>
		/// TenLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Ten Loai Giang Vien")]
		[ColumnEnum("TenLoaiGiangVien", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TenLoaiGiangVien = 9,
		/// <summary>
		/// TcThucDay : 
		/// </summary>
		[EnumTextValue("Tc Thuc Day")]
		[ColumnEnum("TCThucDay", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TcThucDay = 10,
		/// <summary>
		/// TietQd : 
		/// </summary>
		[EnumTextValue("Tiet Qd")]
		[ColumnEnum("TietQD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietQd = 11,
		/// <summary>
		/// NhiemVuGd : 
		/// </summary>
		[EnumTextValue("Nhiem Vu Gd")]
		[ColumnEnum("NhiemVuGD", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NhiemVuGd = 12,
		/// <summary>
		/// NhiemVuNckh : 
		/// </summary>
		[EnumTextValue("Nhiem Vu Nckh")]
		[ColumnEnum("NhiemVuNCKH", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NhiemVuNckh = 13,
		/// <summary>
		/// PhanCongCn : 
		/// </summary>
		[EnumTextValue("Phan Cong Cn")]
		[ColumnEnum("PhanCongCN", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PhanCongCn = 14,
		/// <summary>
		/// CongTrinhCd : 
		/// </summary>
		[EnumTextValue("Cong Trinh Cd")]
		[ColumnEnum("CongTrinhCD", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CongTrinhCd = 15,
		/// <summary>
		/// CongTrinhTc : 
		/// </summary>
		[EnumTextValue("Cong Trinh Tc")]
		[ColumnEnum("CongTrinhTC", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CongTrinhTc = 16
	}//End enum

	#endregion BangPhuTroiGioDayGiangVienColumn Enum

} // end namespace
