
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThuLaoCoiThiVhuex.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThuLaoCoiThiVHUEX' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThuLaoCoiThiVhuexBase : EntityBase, IThuLaoCoiThiVhuex, IEntityId<ThuLaoCoiThiVhuexKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThuLaoCoiThiVhuexEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThuLaoCoiThiVhuexEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThuLaoCoiThiVhuexEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThuLaoCoiThiVhuex> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoCoiThiVhuexEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoCoiThiVhuexEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThuLaoCoiThiVhuexBase"/> instance.
		///</summary>
		public ThuLaoCoiThiVhuexBase()
		{
			this.entityData = new ThuLaoCoiThiVhuexEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThuLaoCoiThiVhuexBase"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_kyThi"></param>
		///<param name="_lanThi"></param>
		///<param name="_dotThanhToan"></param>
		///<param name="_maGv"></param>
		///<param name="_dotThi"></param>
		///<param name="_safeName60Phut"></param>
		///<param name="_safeName90Phut"></param>
		///<param name="_safeName120Phut"></param>
		///<param name="_soCa"></param>
		///<param name="_gioChuan"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateStaff"></param>
		public ThuLaoCoiThiVhuexBase(System.String _namHoc, System.String _hocKy, System.String _kyThi, 
			System.Int32? _lanThi, System.String _dotThanhToan, System.String _maGv, 
			System.String _dotThi, System.Decimal? _safeName60Phut, System.Decimal? _safeName90Phut, 
			System.Decimal? _safeName120Phut, System.Decimal? _soCa, System.Decimal? _gioChuan, 
			System.DateTime? _updateDate, System.String _updateStaff)
		{
			this.entityData = new ThuLaoCoiThiVhuexEntityData();
			this.backupData = null;

			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.KyThi = _kyThi;
			this.LanThi = _lanThi;
			this.DotThanhToan = _dotThanhToan;
			this.MaGv = _maGv;
			this.DotThi = _dotThi;
			this.SafeName60Phut = _safeName60Phut;
			this.SafeName90Phut = _safeName90Phut;
			this.SafeName120Phut = _safeName120Phut;
			this.SoCa = _soCa;
			this.GioChuan = _gioChuan;
			this.UpdateDate = _updateDate;
			this.UpdateStaff = _updateStaff;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThuLaoCoiThiVhuex"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_kyThi"></param>
		///<param name="_lanThi"></param>
		///<param name="_dotThanhToan"></param>
		///<param name="_maGv"></param>
		///<param name="_dotThi"></param>
		///<param name="_safeName60Phut"></param>
		///<param name="_safeName90Phut"></param>
		///<param name="_safeName120Phut"></param>
		///<param name="_soCa"></param>
		///<param name="_gioChuan"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateStaff"></param>
		public static ThuLaoCoiThiVhuex CreateThuLaoCoiThiVhuex(System.String _namHoc, System.String _hocKy, System.String _kyThi, 
			System.Int32? _lanThi, System.String _dotThanhToan, System.String _maGv, 
			System.String _dotThi, System.Decimal? _safeName60Phut, System.Decimal? _safeName90Phut, 
			System.Decimal? _safeName120Phut, System.Decimal? _soCa, System.Decimal? _gioChuan, 
			System.DateTime? _updateDate, System.String _updateStaff)
		{
			ThuLaoCoiThiVhuex newThuLaoCoiThiVhuex = new ThuLaoCoiThiVhuex();
			newThuLaoCoiThiVhuex.NamHoc = _namHoc;
			newThuLaoCoiThiVhuex.HocKy = _hocKy;
			newThuLaoCoiThiVhuex.KyThi = _kyThi;
			newThuLaoCoiThiVhuex.LanThi = _lanThi;
			newThuLaoCoiThiVhuex.DotThanhToan = _dotThanhToan;
			newThuLaoCoiThiVhuex.MaGv = _maGv;
			newThuLaoCoiThiVhuex.DotThi = _dotThi;
			newThuLaoCoiThiVhuex.SafeName60Phut = _safeName60Phut;
			newThuLaoCoiThiVhuex.SafeName90Phut = _safeName90Phut;
			newThuLaoCoiThiVhuex.SafeName120Phut = _safeName120Phut;
			newThuLaoCoiThiVhuex.SoCa = _soCa;
			newThuLaoCoiThiVhuex.GioChuan = _gioChuan;
			newThuLaoCoiThiVhuex.UpdateDate = _updateDate;
			newThuLaoCoiThiVhuex.UpdateStaff = _updateStaff;
			return newThuLaoCoiThiVhuex;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KyThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String KyThi
		{
			get
			{
				return this.entityData.KyThi; 
			}
			
			set
			{
				if (this.entityData.KyThi == value)
					return;
				
                OnPropertyChanging("KyThi");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.KyThi, this.entityData.KyThi);
				this.entityData.KyThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.KyThi, this.entityData.KyThi);
				OnPropertyChanged("KyThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanThi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LanThi
		{
			get
			{
				return this.entityData.LanThi; 
			}
			
			set
			{
				if (this.entityData.LanThi == value)
					return;
				
                OnPropertyChanging("LanThi");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.LanThi, this.entityData.LanThi);
				this.entityData.LanThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.LanThi, this.entityData.LanThi);
				OnPropertyChanged("LanThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotThanhToan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String DotThanhToan
		{
			get
			{
				return this.entityData.DotThanhToan; 
			}
			
			set
			{
				if (this.entityData.DotThanhToan == value)
					return;
				
                OnPropertyChanging("DotThanhToan");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.DotThanhToan, this.entityData.DotThanhToan);
				this.entityData.DotThanhToan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.DotThanhToan, this.entityData.DotThanhToan);
				OnPropertyChanged("DotThanhToan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGv property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaGv
		{
			get
			{
				return this.entityData.MaGv; 
			}
			
			set
			{
				if (this.entityData.MaGv == value)
					return;
				
                OnPropertyChanging("MaGv");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.MaGv, this.entityData.MaGv);
				this.entityData.MaGv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.MaGv, this.entityData.MaGv);
				OnPropertyChanged("MaGv");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2000)]
		public virtual System.String DotThi
		{
			get
			{
				return this.entityData.DotThi; 
			}
			
			set
			{
				if (this.entityData.DotThi == value)
					return;
				
                OnPropertyChanging("DotThi");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.DotThi, this.entityData.DotThi);
				this.entityData.DotThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.DotThi, this.entityData.DotThi);
				OnPropertyChanged("DotThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeName60Phut property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SafeName60Phut
		{
			get
			{
				return this.entityData.SafeName60Phut; 
			}
			
			set
			{
				if (this.entityData.SafeName60Phut == value)
					return;
				
                OnPropertyChanging("SafeName60Phut");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.SafeName60Phut, this.entityData.SafeName60Phut);
				this.entityData.SafeName60Phut = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.SafeName60Phut, this.entityData.SafeName60Phut);
				OnPropertyChanged("SafeName60Phut");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeName90Phut property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SafeName90Phut
		{
			get
			{
				return this.entityData.SafeName90Phut; 
			}
			
			set
			{
				if (this.entityData.SafeName90Phut == value)
					return;
				
                OnPropertyChanging("SafeName90Phut");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.SafeName90Phut, this.entityData.SafeName90Phut);
				this.entityData.SafeName90Phut = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.SafeName90Phut, this.entityData.SafeName90Phut);
				OnPropertyChanged("SafeName90Phut");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeName120Phut property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SafeName120Phut
		{
			get
			{
				return this.entityData.SafeName120Phut; 
			}
			
			set
			{
				if (this.entityData.SafeName120Phut == value)
					return;
				
                OnPropertyChanging("SafeName120Phut");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.SafeName120Phut, this.entityData.SafeName120Phut);
				this.entityData.SafeName120Phut = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.SafeName120Phut, this.entityData.SafeName120Phut);
				OnPropertyChanged("SafeName120Phut");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoCa property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoCa
		{
			get
			{
				return this.entityData.SoCa; 
			}
			
			set
			{
				if (this.entityData.SoCa == value)
					return;
				
                OnPropertyChanging("SoCa");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.SoCa, this.entityData.SoCa);
				this.entityData.SoCa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.SoCa, this.entityData.SoCa);
				OnPropertyChanged("SoCa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioChuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioChuan
		{
			get
			{
				return this.entityData.GioChuan; 
			}
			
			set
			{
				if (this.entityData.GioChuan == value)
					return;
				
                OnPropertyChanging("GioChuan");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.GioChuan, this.entityData.GioChuan);
				this.entityData.GioChuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.GioChuan, this.entityData.GioChuan);
				OnPropertyChanged("GioChuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateStaff property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String UpdateStaff
		{
			get
			{
				return this.entityData.UpdateStaff; 
			}
			
			set
			{
				if (this.entityData.UpdateStaff == value)
					return;
				
                OnPropertyChanging("UpdateStaff");                    
				OnColumnChanging(ThuLaoCoiThiVhuexColumn.UpdateStaff, this.entityData.UpdateStaff);
				this.entityData.UpdateStaff = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiVhuexColumn.UpdateStaff, this.entityData.UpdateStaff);
				OnPropertyChanged("UpdateStaff");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KyThi", "Ky Thi", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DotThanhToan", "Dot Thanh Toan", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaGv", "Ma Gv", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DotThi", "Dot Thi", 2000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdateStaff", "Update Staff", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThuLaoCoiThiVHUEX"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "NamHoc", "HocKy", "KyThi", "LanThi", "DotThanhToan", "MaGV", "DotThi", "60Phut", "90Phut", "120Phut", "SoCa", "GioChuan", "UpdateDate", "UpdateStaff"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThuLaoCoiThiVhuexEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThuLaoCoiThiVhuex) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThuLaoCoiThiVhuex>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThuLaoCoiThiVhuex);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThuLaoCoiThiVhuex Entity 
		///</summary>
		protected virtual ThuLaoCoiThiVhuex Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThuLaoCoiThiVhuex copy = new ThuLaoCoiThiVhuex();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.KyThi = this.KyThi;
				copy.LanThi = this.LanThi;
				copy.DotThanhToan = this.DotThanhToan;
				copy.MaGv = this.MaGv;
				copy.DotThi = this.DotThi;
				copy.SafeName60Phut = this.SafeName60Phut;
				copy.SafeName90Phut = this.SafeName90Phut;
				copy.SafeName120Phut = this.SafeName120Phut;
				copy.SoCa = this.SoCa;
				copy.GioChuan = this.GioChuan;
				copy.UpdateDate = this.UpdateDate;
				copy.UpdateStaff = this.UpdateStaff;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThuLaoCoiThiVhuex Entity 
		///</summary>
		public virtual ThuLaoCoiThiVhuex Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThuLaoCoiThiVhuex Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThuLaoCoiThiVhuex DeepCopy()
		{
			return EntityHelper.Clone<ThuLaoCoiThiVhuex>(this as ThuLaoCoiThiVhuex);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThuLaoCoiThiVhuexEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThuLaoCoiThiVhuexEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThuLaoCoiThiVhuexEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThuLaoCoiThiVhuexColumn column)
		{
			switch(column)
			{
					case ThuLaoCoiThiVhuexColumn.Id:
					return entityData.Id != _originalData.Id;
					case ThuLaoCoiThiVhuexColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case ThuLaoCoiThiVhuexColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case ThuLaoCoiThiVhuexColumn.KyThi:
					return entityData.KyThi != _originalData.KyThi;
					case ThuLaoCoiThiVhuexColumn.LanThi:
					return entityData.LanThi != _originalData.LanThi;
					case ThuLaoCoiThiVhuexColumn.DotThanhToan:
					return entityData.DotThanhToan != _originalData.DotThanhToan;
					case ThuLaoCoiThiVhuexColumn.MaGv:
					return entityData.MaGv != _originalData.MaGv;
					case ThuLaoCoiThiVhuexColumn.DotThi:
					return entityData.DotThi != _originalData.DotThi;
					case ThuLaoCoiThiVhuexColumn.SafeName60Phut:
					return entityData.SafeName60Phut != _originalData.SafeName60Phut;
					case ThuLaoCoiThiVhuexColumn.SafeName90Phut:
					return entityData.SafeName90Phut != _originalData.SafeName90Phut;
					case ThuLaoCoiThiVhuexColumn.SafeName120Phut:
					return entityData.SafeName120Phut != _originalData.SafeName120Phut;
					case ThuLaoCoiThiVhuexColumn.SoCa:
					return entityData.SoCa != _originalData.SoCa;
					case ThuLaoCoiThiVhuexColumn.GioChuan:
					return entityData.GioChuan != _originalData.GioChuan;
					case ThuLaoCoiThiVhuexColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case ThuLaoCoiThiVhuexColumn.UpdateStaff:
					return entityData.UpdateStaff != _originalData.UpdateStaff;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThuLaoCoiThiVhuexColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.KyThi != _originalData.KyThi;
			result = result || entityData.LanThi != _originalData.LanThi;
			result = result || entityData.DotThanhToan != _originalData.DotThanhToan;
			result = result || entityData.MaGv != _originalData.MaGv;
			result = result || entityData.DotThi != _originalData.DotThi;
			result = result || entityData.SafeName60Phut != _originalData.SafeName60Phut;
			result = result || entityData.SafeName90Phut != _originalData.SafeName90Phut;
			result = result || entityData.SafeName120Phut != _originalData.SafeName120Phut;
			result = result || entityData.SoCa != _originalData.SoCa;
			result = result || entityData.GioChuan != _originalData.GioChuan;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.UpdateStaff != _originalData.UpdateStaff;
			return result;
		}	
		
		///<summary>
		///  Returns a ThuLaoCoiThiVhuex Entity with the original data.
		///</summary>
		public ThuLaoCoiThiVhuex GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThuLaoCoiThiVhuex(
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.KyThi,
				_originalData.LanThi,
				_originalData.DotThanhToan,
				_originalData.MaGv,
				_originalData.DotThi,
				_originalData.SafeName60Phut,
				_originalData.SafeName90Phut,
				_originalData.SafeName120Phut,
				_originalData.SoCa,
				_originalData.GioChuan,
				_originalData.UpdateDate,
				_originalData.UpdateStaff
				);
				
			return (ThuLaoCoiThiVhuex)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThuLaoCoiThiVhuexBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThuLaoCoiThiVhuexBase)
				return ValueEquals(this, (ThuLaoCoiThiVhuexBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThuLaoCoiThiVhuexBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.KyThi == null) ? string.Empty : this.KyThi.ToString()).GetHashCode() ^ 
					((this.LanThi == null) ? string.Empty : this.LanThi.ToString()).GetHashCode() ^ 
					((this.DotThanhToan == null) ? string.Empty : this.DotThanhToan.ToString()).GetHashCode() ^ 
					((this.MaGv == null) ? string.Empty : this.MaGv.ToString()).GetHashCode() ^ 
					((this.DotThi == null) ? string.Empty : this.DotThi.ToString()).GetHashCode() ^ 
					((this.SafeName60Phut == null) ? string.Empty : this.SafeName60Phut.ToString()).GetHashCode() ^ 
					((this.SafeName90Phut == null) ? string.Empty : this.SafeName90Phut.ToString()).GetHashCode() ^ 
					((this.SafeName120Phut == null) ? string.Empty : this.SafeName120Phut.ToString()).GetHashCode() ^ 
					((this.SoCa == null) ? string.Empty : this.SoCa.ToString()).GetHashCode() ^ 
					((this.GioChuan == null) ? string.Empty : this.GioChuan.ToString()).GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					((this.UpdateStaff == null) ? string.Empty : this.UpdateStaff.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThuLaoCoiThiVhuexBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThuLaoCoiThiVhuexBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThuLaoCoiThiVhuexBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThuLaoCoiThiVhuexBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThuLaoCoiThiVhuexBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThuLaoCoiThiVhuexBase Object1, ThuLaoCoiThiVhuexBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.KyThi != null && Object2.KyThi != null )
			{
				if (Object1.KyThi != Object2.KyThi)
					equal = false;
			}
			else if (Object1.KyThi == null ^ Object2.KyThi == null )
			{
				equal = false;
			}
			if ( Object1.LanThi != null && Object2.LanThi != null )
			{
				if (Object1.LanThi != Object2.LanThi)
					equal = false;
			}
			else if (Object1.LanThi == null ^ Object2.LanThi == null )
			{
				equal = false;
			}
			if ( Object1.DotThanhToan != null && Object2.DotThanhToan != null )
			{
				if (Object1.DotThanhToan != Object2.DotThanhToan)
					equal = false;
			}
			else if (Object1.DotThanhToan == null ^ Object2.DotThanhToan == null )
			{
				equal = false;
			}
			if ( Object1.MaGv != null && Object2.MaGv != null )
			{
				if (Object1.MaGv != Object2.MaGv)
					equal = false;
			}
			else if (Object1.MaGv == null ^ Object2.MaGv == null )
			{
				equal = false;
			}
			if ( Object1.DotThi != null && Object2.DotThi != null )
			{
				if (Object1.DotThi != Object2.DotThi)
					equal = false;
			}
			else if (Object1.DotThi == null ^ Object2.DotThi == null )
			{
				equal = false;
			}
			if ( Object1.SafeName60Phut != null && Object2.SafeName60Phut != null )
			{
				if (Object1.SafeName60Phut != Object2.SafeName60Phut)
					equal = false;
			}
			else if (Object1.SafeName60Phut == null ^ Object2.SafeName60Phut == null )
			{
				equal = false;
			}
			if ( Object1.SafeName90Phut != null && Object2.SafeName90Phut != null )
			{
				if (Object1.SafeName90Phut != Object2.SafeName90Phut)
					equal = false;
			}
			else if (Object1.SafeName90Phut == null ^ Object2.SafeName90Phut == null )
			{
				equal = false;
			}
			if ( Object1.SafeName120Phut != null && Object2.SafeName120Phut != null )
			{
				if (Object1.SafeName120Phut != Object2.SafeName120Phut)
					equal = false;
			}
			else if (Object1.SafeName120Phut == null ^ Object2.SafeName120Phut == null )
			{
				equal = false;
			}
			if ( Object1.SoCa != null && Object2.SoCa != null )
			{
				if (Object1.SoCa != Object2.SoCa)
					equal = false;
			}
			else if (Object1.SoCa == null ^ Object2.SoCa == null )
			{
				equal = false;
			}
			if ( Object1.GioChuan != null && Object2.GioChuan != null )
			{
				if (Object1.GioChuan != Object2.GioChuan)
					equal = false;
			}
			else if (Object1.GioChuan == null ^ Object2.GioChuan == null )
			{
				equal = false;
			}
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdateStaff != null && Object2.UpdateStaff != null )
			{
				if (Object1.UpdateStaff != Object2.UpdateStaff)
					equal = false;
			}
			else if (Object1.UpdateStaff == null ^ Object2.UpdateStaff == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThuLaoCoiThiVhuexBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThuLaoCoiThiVhuexComparer GetComparer()
        {
            return new ThuLaoCoiThiVhuexComparer();
        }
        */

        // Comparer delegates back to ThuLaoCoiThiVhuex
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThuLaoCoiThiVhuex rhs, ThuLaoCoiThiVhuexColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThuLaoCoiThiVhuexColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.KyThi:
            		return this.KyThi.CompareTo(rhs.KyThi);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.LanThi:
            		return this.LanThi.Value.CompareTo(rhs.LanThi.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.DotThanhToan:
            		return this.DotThanhToan.CompareTo(rhs.DotThanhToan);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.MaGv:
            		return this.MaGv.CompareTo(rhs.MaGv);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.DotThi:
            		return this.DotThi.CompareTo(rhs.DotThi);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.SafeName60Phut:
            		return this.SafeName60Phut.Value.CompareTo(rhs.SafeName60Phut.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.SafeName90Phut:
            		return this.SafeName90Phut.Value.CompareTo(rhs.SafeName90Phut.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.SafeName120Phut:
            		return this.SafeName120Phut.Value.CompareTo(rhs.SafeName120Phut.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.SoCa:
            		return this.SoCa.Value.CompareTo(rhs.SoCa.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.GioChuan:
            		return this.GioChuan.Value.CompareTo(rhs.GioChuan.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiVhuexColumn.UpdateStaff:
            		return this.UpdateStaff.CompareTo(rhs.UpdateStaff);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThuLaoCoiThiVhuexKey> Members
		
		// member variable for the EntityId property
		private ThuLaoCoiThiVhuexKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThuLaoCoiThiVhuexKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThuLaoCoiThiVhuexKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThuLaoCoiThiVhuex")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- Id: {0}{15}- NamHoc: {1}{15}- HocKy: {2}{15}- KyThi: {3}{15}- LanThi: {4}{15}- DotThanhToan: {5}{15}- MaGv: {6}{15}- DotThi: {7}{15}- SafeName60Phut: {8}{15}- SafeName90Phut: {9}{15}- SafeName120Phut: {10}{15}- SoCa: {11}{15}- GioChuan: {12}{15}- UpdateDate: {13}{15}- UpdateStaff: {14}{15}{17}", 
				this.Id,
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.KyThi == null) ? string.Empty : this.KyThi.ToString(),
				(this.LanThi == null) ? string.Empty : this.LanThi.ToString(),
				(this.DotThanhToan == null) ? string.Empty : this.DotThanhToan.ToString(),
				(this.MaGv == null) ? string.Empty : this.MaGv.ToString(),
				(this.DotThi == null) ? string.Empty : this.DotThi.ToString(),
				(this.SafeName60Phut == null) ? string.Empty : this.SafeName60Phut.ToString(),
				(this.SafeName90Phut == null) ? string.Empty : this.SafeName90Phut.ToString(),
				(this.SafeName120Phut == null) ? string.Empty : this.SafeName120Phut.ToString(),
				(this.SoCa == null) ? string.Empty : this.SoCa.ToString(),
				(this.GioChuan == null) ? string.Empty : this.GioChuan.ToString(),
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				(this.UpdateStaff == null) ? string.Empty : this.UpdateStaff.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThuLaoCoiThiVHUEX' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThuLaoCoiThiVhuexEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThuLaoCoiThiVHUEX"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// KyThi : 
		/// </summary>
		public System.String KyThi = null;
		
		/// <summary>
		/// LanThi : 
		/// </summary>
		public System.Int32? LanThi = null;
		
		/// <summary>
		/// DotThanhToan : 
		/// </summary>
		public System.String DotThanhToan = null;
		
		/// <summary>
		/// MaGV : 
		/// </summary>
		public System.String MaGv = null;
		
		/// <summary>
		/// DotThi : 
		/// </summary>
		public System.String DotThi = null;
		
		/// <summary>
		/// 60Phut : 
		/// </summary>
		public System.Decimal? SafeName60Phut = null;
		
		/// <summary>
		/// 90Phut : 
		/// </summary>
		public System.Decimal? SafeName90Phut = null;
		
		/// <summary>
		/// 120Phut : 
		/// </summary>
		public System.Decimal? SafeName120Phut = null;
		
		/// <summary>
		/// SoCa : 
		/// </summary>
		public System.Decimal? SoCa = null;
		
		/// <summary>
		/// GioChuan : 
		/// </summary>
		public System.Decimal? GioChuan = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// UpdateStaff : 
		/// </summary>
		public System.String UpdateStaff = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThuLaoCoiThiVhuexEntityData _tmp = new ThuLaoCoiThiVhuexEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.KyThi = this.KyThi;
			_tmp.LanThi = this.LanThi;
			_tmp.DotThanhToan = this.DotThanhToan;
			_tmp.MaGv = this.MaGv;
			_tmp.DotThi = this.DotThi;
			_tmp.SafeName60Phut = this.SafeName60Phut;
			_tmp.SafeName90Phut = this.SafeName90Phut;
			_tmp.SafeName120Phut = this.SafeName120Phut;
			_tmp.SoCa = this.SoCa;
			_tmp.GioChuan = this.GioChuan;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateStaff = this.UpdateStaff;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThuLaoCoiThiVhuexEntityData _tmp = new ThuLaoCoiThiVhuexEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.KyThi = this.KyThi;
			_tmp.LanThi = this.LanThi;
			_tmp.DotThanhToan = this.DotThanhToan;
			_tmp.MaGv = this.MaGv;
			_tmp.DotThi = this.DotThi;
			_tmp.SafeName60Phut = this.SafeName60Phut;
			_tmp.SafeName90Phut = this.SafeName90Phut;
			_tmp.SafeName120Phut = this.SafeName120Phut;
			_tmp.SoCa = this.SoCa;
			_tmp.GioChuan = this.GioChuan;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateStaff = this.UpdateStaff;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiVhuexColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThuLaoCoiThiVhuexColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiVhuexColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThuLaoCoiThiVhuexColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiVhuexColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThuLaoCoiThiVhuexColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThuLaoCoiThiVhuexEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThuLaoCoiThiVhuexEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiVhuexColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThuLaoCoiThiVhuexColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThuLaoCoiThiVhuexEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThuLaoCoiThiVhuexEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThuLaoCoiThiVhuexEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThuLaoCoiThiVhuex"/> object.
	/// </remarks>
	public class ThuLaoCoiThiVhuexEventArgs : System.EventArgs
	{
		private ThuLaoCoiThiVhuexColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoCoiThiVhuexEventArgs class.
		///</summary>
		public ThuLaoCoiThiVhuexEventArgs(ThuLaoCoiThiVhuexColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoCoiThiVhuexEventArgs class.
		///</summary>
		public ThuLaoCoiThiVhuexEventArgs(ThuLaoCoiThiVhuexColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThuLaoCoiThiVhuexColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThuLaoCoiThiVhuexColumn" />
		public ThuLaoCoiThiVhuexColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThuLaoCoiThiVhuex related events.
	///</summary>
	public delegate void ThuLaoCoiThiVhuexEventHandler(object sender, ThuLaoCoiThiVhuexEventArgs e);
	
	#region ThuLaoCoiThiVhuexComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThuLaoCoiThiVhuexComparer : System.Collections.Generic.IComparer<ThuLaoCoiThiVhuex>
	{
		ThuLaoCoiThiVhuexColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoCoiThiVhuexComparer"/> class.
        /// </summary>
		public ThuLaoCoiThiVhuexComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoCoiThiVhuexComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThuLaoCoiThiVhuexComparer(ThuLaoCoiThiVhuexColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThuLaoCoiThiVhuex"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThuLaoCoiThiVhuex"/> to compare.</param>
        /// <param name="b">The second <c>ThuLaoCoiThiVhuex</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThuLaoCoiThiVhuex a, ThuLaoCoiThiVhuex b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThuLaoCoiThiVhuex entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThuLaoCoiThiVhuex a, ThuLaoCoiThiVhuex b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThuLaoCoiThiVhuexColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThuLaoCoiThiVhuexKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThuLaoCoiThiVhuex"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThuLaoCoiThiVhuexKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexKey class.
		/// </summary>
		public ThuLaoCoiThiVhuexKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexKey class.
		/// </summary>
		public ThuLaoCoiThiVhuexKey(ThuLaoCoiThiVhuexBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexKey class.
		/// </summary>
		public ThuLaoCoiThiVhuexKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThuLaoCoiThiVhuexBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThuLaoCoiThiVhuexBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThuLaoCoiThiVhuexColumn Enum
	
	/// <summary>
	/// Enumerate the ThuLaoCoiThiVhuex columns.
	/// </summary>
	[Serializable]
	public enum ThuLaoCoiThiVhuexColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		NamHoc = 2,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		HocKy = 3,
		/// <summary>
		/// KyThi : 
		/// </summary>
		[EnumTextValue("Ky Thi")]
		[ColumnEnum("KyThi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		KyThi = 4,
		/// <summary>
		/// LanThi : 
		/// </summary>
		[EnumTextValue("Lan Thi")]
		[ColumnEnum("LanThi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LanThi = 5,
		/// <summary>
		/// DotThanhToan : 
		/// </summary>
		[EnumTextValue("Dot Thanh Toan")]
		[ColumnEnum("DotThanhToan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		DotThanhToan = 6,
		/// <summary>
		/// MaGv : 
		/// </summary>
		[EnumTextValue("Ma Gv")]
		[ColumnEnum("MaGV", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGv = 7,
		/// <summary>
		/// DotThi : 
		/// </summary>
		[EnumTextValue("Dot Thi")]
		[ColumnEnum("DotThi", typeof(System.String), System.Data.DbType.String, false, false, true, 2000)]
		DotThi = 8,
		/// <summary>
		/// SafeName60Phut : 
		/// </summary>
		[EnumTextValue("Phut")]
		[ColumnEnum("60Phut", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SafeName60Phut = 9,
		/// <summary>
		/// SafeName90Phut : 
		/// </summary>
		[EnumTextValue("Phut")]
		[ColumnEnum("90Phut", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SafeName90Phut = 10,
		/// <summary>
		/// SafeName120Phut : 
		/// </summary>
		[EnumTextValue("Phut")]
		[ColumnEnum("120Phut", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SafeName120Phut = 11,
		/// <summary>
		/// SoCa : 
		/// </summary>
		[EnumTextValue("So Ca")]
		[ColumnEnum("SoCa", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoCa = 12,
		/// <summary>
		/// GioChuan : 
		/// </summary>
		[EnumTextValue("Gio Chuan")]
		[ColumnEnum("GioChuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioChuan = 13,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 14,
		/// <summary>
		/// UpdateStaff : 
		/// </summary>
		[EnumTextValue("Update Staff")]
		[ColumnEnum("UpdateStaff", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		UpdateStaff = 15
	}//End enum

	#endregion ThuLaoCoiThiVhuexColumn Enum

} // end namespace
