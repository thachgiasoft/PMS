
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file TaiKhoan.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'TaiKhoan' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TaiKhoanBase : EntityBase, ITaiKhoan, IEntityId<TaiKhoanKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TaiKhoanEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TaiKhoanEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TaiKhoanEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<TaiKhoan> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TaiKhoanEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TaiKhoanEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TaiKhoanBase"/> instance.
		///</summary>
		public TaiKhoanBase()
		{
			this.entityData = new TaiKhoanEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TaiKhoanBase"/> instance.
		///</summary>
		///<param name="_maNhomQuyen"></param>
		///<param name="_tenDangNhap"></param>
		///<param name="_matKhau"></param>
		///<param name="_hoTen"></param>
		///<param name="_tenMayTinh"></param>
		///<param name="_duongDan"></param>
		///<param name="_phienBan"></param>
		///<param name="_ngayDangNhap"></param>
		///<param name="_trangThai"></param>
		///<param name="_skinName"></param>
		///<param name="_ngayTao"></param>
		///<param name="_resetPassWordGv"></param>
		public TaiKhoanBase(System.Int32? _maNhomQuyen, System.String _tenDangNhap, System.String _matKhau, 
			System.String _hoTen, System.String _tenMayTinh, System.String _duongDan, System.String _phienBan, 
			System.DateTime? _ngayDangNhap, System.Boolean? _trangThai, System.String _skinName, System.DateTime? _ngayTao, 
			System.Boolean? _resetPassWordGv)
		{
			this.entityData = new TaiKhoanEntityData();
			this.backupData = null;

			this.MaNhomQuyen = _maNhomQuyen;
			this.TenDangNhap = _tenDangNhap;
			this.MatKhau = _matKhau;
			this.HoTen = _hoTen;
			this.TenMayTinh = _tenMayTinh;
			this.DuongDan = _duongDan;
			this.PhienBan = _phienBan;
			this.NgayDangNhap = _ngayDangNhap;
			this.TrangThai = _trangThai;
			this.SkinName = _skinName;
			this.NgayTao = _ngayTao;
			this.ResetPassWordGv = _resetPassWordGv;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="TaiKhoan"/> instance.
		///</summary>
		///<param name="_maNhomQuyen"></param>
		///<param name="_tenDangNhap"></param>
		///<param name="_matKhau"></param>
		///<param name="_hoTen"></param>
		///<param name="_tenMayTinh"></param>
		///<param name="_duongDan"></param>
		///<param name="_phienBan"></param>
		///<param name="_ngayDangNhap"></param>
		///<param name="_trangThai"></param>
		///<param name="_skinName"></param>
		///<param name="_ngayTao"></param>
		///<param name="_resetPassWordGv"></param>
		public static TaiKhoan CreateTaiKhoan(System.Int32? _maNhomQuyen, System.String _tenDangNhap, System.String _matKhau, 
			System.String _hoTen, System.String _tenMayTinh, System.String _duongDan, System.String _phienBan, 
			System.DateTime? _ngayDangNhap, System.Boolean? _trangThai, System.String _skinName, System.DateTime? _ngayTao, 
			System.Boolean? _resetPassWordGv)
		{
			TaiKhoan newTaiKhoan = new TaiKhoan();
			newTaiKhoan.MaNhomQuyen = _maNhomQuyen;
			newTaiKhoan.TenDangNhap = _tenDangNhap;
			newTaiKhoan.MatKhau = _matKhau;
			newTaiKhoan.HoTen = _hoTen;
			newTaiKhoan.TenMayTinh = _tenMayTinh;
			newTaiKhoan.DuongDan = _duongDan;
			newTaiKhoan.PhienBan = _phienBan;
			newTaiKhoan.NgayDangNhap = _ngayDangNhap;
			newTaiKhoan.TrangThai = _trangThai;
			newTaiKhoan.SkinName = _skinName;
			newTaiKhoan.NgayTao = _ngayTao;
			newTaiKhoan.ResetPassWordGv = _resetPassWordGv;
			return newTaiKhoan;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaTaiKhoan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaTaiKhoan
		{
			get
			{
				return this.entityData.MaTaiKhoan; 
			}
			
			set
			{
				if (this.entityData.MaTaiKhoan == value)
					return;
				
                OnPropertyChanging("MaTaiKhoan");                    
				OnColumnChanging(TaiKhoanColumn.MaTaiKhoan, this.entityData.MaTaiKhoan);
				this.entityData.MaTaiKhoan = value;
				this.EntityId.MaTaiKhoan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.MaTaiKhoan, this.entityData.MaTaiKhoan);
				OnPropertyChanged("MaTaiKhoan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaNhomQuyen property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaNhomQuyen
		{
			get
			{
				return this.entityData.MaNhomQuyen; 
			}
			
			set
			{
				if (this.entityData.MaNhomQuyen == value)
					return;
				
                OnPropertyChanging("MaNhomQuyen");                    
				OnColumnChanging(TaiKhoanColumn.MaNhomQuyen, this.entityData.MaNhomQuyen);
				this.entityData.MaNhomQuyen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.MaNhomQuyen, this.entityData.MaNhomQuyen);
				OnPropertyChanged("MaNhomQuyen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenDangNhap property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String TenDangNhap
		{
			get
			{
				return this.entityData.TenDangNhap; 
			}
			
			set
			{
				if (this.entityData.TenDangNhap == value)
					return;
				
                OnPropertyChanging("TenDangNhap");                    
				OnColumnChanging(TaiKhoanColumn.TenDangNhap, this.entityData.TenDangNhap);
				this.entityData.TenDangNhap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.TenDangNhap, this.entityData.TenDangNhap);
				OnPropertyChanged("TenDangNhap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MatKhau property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MatKhau
		{
			get
			{
				return this.entityData.MatKhau; 
			}
			
			set
			{
				if (this.entityData.MatKhau == value)
					return;
				
                OnPropertyChanging("MatKhau");                    
				OnColumnChanging(TaiKhoanColumn.MatKhau, this.entityData.MatKhau);
				this.entityData.MatKhau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.MatKhau, this.entityData.MatKhau);
				OnPropertyChanged("MatKhau");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String HoTen
		{
			get
			{
				return this.entityData.HoTen; 
			}
			
			set
			{
				if (this.entityData.HoTen == value)
					return;
				
                OnPropertyChanging("HoTen");                    
				OnColumnChanging(TaiKhoanColumn.HoTen, this.entityData.HoTen);
				this.entityData.HoTen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.HoTen, this.entityData.HoTen);
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenMayTinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TenMayTinh
		{
			get
			{
				return this.entityData.TenMayTinh; 
			}
			
			set
			{
				if (this.entityData.TenMayTinh == value)
					return;
				
                OnPropertyChanging("TenMayTinh");                    
				OnColumnChanging(TaiKhoanColumn.TenMayTinh, this.entityData.TenMayTinh);
				this.entityData.TenMayTinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.TenMayTinh, this.entityData.TenMayTinh);
				OnPropertyChanged("TenMayTinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DuongDan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String DuongDan
		{
			get
			{
				return this.entityData.DuongDan; 
			}
			
			set
			{
				if (this.entityData.DuongDan == value)
					return;
				
                OnPropertyChanging("DuongDan");                    
				OnColumnChanging(TaiKhoanColumn.DuongDan, this.entityData.DuongDan);
				this.entityData.DuongDan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.DuongDan, this.entityData.DuongDan);
				OnPropertyChanged("DuongDan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhienBan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String PhienBan
		{
			get
			{
				return this.entityData.PhienBan; 
			}
			
			set
			{
				if (this.entityData.PhienBan == value)
					return;
				
                OnPropertyChanging("PhienBan");                    
				OnColumnChanging(TaiKhoanColumn.PhienBan, this.entityData.PhienBan);
				this.entityData.PhienBan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.PhienBan, this.entityData.PhienBan);
				OnPropertyChanged("PhienBan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayDangNhap property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayDangNhap
		{
			get
			{
				return this.entityData.NgayDangNhap; 
			}
			
			set
			{
				if (this.entityData.NgayDangNhap == value)
					return;
				
                OnPropertyChanging("NgayDangNhap");                    
				OnColumnChanging(TaiKhoanColumn.NgayDangNhap, this.entityData.NgayDangNhap);
				this.entityData.NgayDangNhap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.NgayDangNhap, this.entityData.NgayDangNhap);
				OnPropertyChanged("NgayDangNhap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrangThai property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TrangThai
		{
			get
			{
				return this.entityData.TrangThai; 
			}
			
			set
			{
				if (this.entityData.TrangThai == value)
					return;
				
                OnPropertyChanging("TrangThai");                    
				OnColumnChanging(TaiKhoanColumn.TrangThai, this.entityData.TrangThai);
				this.entityData.TrangThai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.TrangThai, this.entityData.TrangThai);
				OnPropertyChanged("TrangThai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SkinName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String SkinName
		{
			get
			{
				return this.entityData.SkinName; 
			}
			
			set
			{
				if (this.entityData.SkinName == value)
					return;
				
                OnPropertyChanging("SkinName");                    
				OnColumnChanging(TaiKhoanColumn.SkinName, this.entityData.SkinName);
				this.entityData.SkinName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.SkinName, this.entityData.SkinName);
				OnPropertyChanged("SkinName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayTao property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayTao
		{
			get
			{
				return this.entityData.NgayTao; 
			}
			
			set
			{
				if (this.entityData.NgayTao == value)
					return;
				
                OnPropertyChanging("NgayTao");                    
				OnColumnChanging(TaiKhoanColumn.NgayTao, this.entityData.NgayTao);
				this.entityData.NgayTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.NgayTao, this.entityData.NgayTao);
				OnPropertyChanged("NgayTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResetPassWordGv property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ResetPassWordGv
		{
			get
			{
				return this.entityData.ResetPassWordGv; 
			}
			
			set
			{
				if (this.entityData.ResetPassWordGv == value)
					return;
				
                OnPropertyChanging("ResetPassWordGv");                    
				OnColumnChanging(TaiKhoanColumn.ResetPassWordGv, this.entityData.ResetPassWordGv);
				this.entityData.ResetPassWordGv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TaiKhoanColumn.ResetPassWordGv, this.entityData.ResetPassWordGv);
				OnPropertyChanged("ResetPassWordGv");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="NhomQuyen"/>.
		/// </summary>
		/// <value>The source NhomQuyen for MaNhomQuyen.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual NhomQuyen MaNhomQuyenSource
      	{
            get { return entityData.MaNhomQuyenSource; }
            set { entityData.MaNhomQuyenSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a collection of TaiKhoanFromHeThong objects
		///	which are related to this object through the junction table HeThong
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TaiKhoan> UserIdTaiKhoanCollection_From_HeThong
		{
			get { return entityData.UserIdTaiKhoanCollection_From_HeThong; }
			set { entityData.UserIdTaiKhoanCollection_From_HeThong = value; }	
		}
	
		/// <summary>
		///	Holds a collection of HeThong objects
		///	which are related to this object through the relation FK_HeThong_TaiKhoan1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<HeThong> HeThongCollectionGetByParentId
		{
			get { return entityData.HeThongCollectionGetByParentId; }
			set { entityData.HeThongCollectionGetByParentId = value; }	
		}

		/// <summary>
		///	Holds a collection of TaiKhoanFromHeThong objects
		///	which are related to this object through the junction table HeThong
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TaiKhoan> ParentIdTaiKhoanCollection_From_HeThong
		{
			get { return entityData.ParentIdTaiKhoanCollection_From_HeThong; }
			set { entityData.ParentIdTaiKhoanCollection_From_HeThong = value; }	
		}
	
		/// <summary>
		///	Holds a collection of HeThong objects
		///	which are related to this object through the relation FK_HeThong_TaiKhoan
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<HeThong> HeThongCollectionGetByUserId
		{
			get { return entityData.HeThongCollectionGetByUserId; }
			set { entityData.HeThongCollectionGetByUserId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GiangVien objects
		///	which are related to this object through the relation FK_GiangVien_TaiKhoan
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GiangVien> GiangVienCollection
		{
			get { return entityData.GiangVienCollection; }
			set { entityData.GiangVienCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ReportTemplate objects
		///	which are related to this object through the relation FK_ReportTemplate_TaiKhoan
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ReportTemplate> ReportTemplateCollection
		{
			get { return entityData.ReportTemplateCollection; }
			set { entityData.ReportTemplateCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenDangNhap", "Ten Dang Nhap", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MatKhau", "Mat Khau", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HoTen", "Ho Ten", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenMayTinh", "Ten May Tinh", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DuongDan", "Duong Dan", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhienBan", "Phien Ban", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SkinName", "Skin Name", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "TaiKhoan"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaTaiKhoan", "MaNhomQuyen", "TenDangNhap", "MatKhau", "HoTen", "TenMayTinh", "DuongDan", "PhienBan", "NgayDangNhap", "TrangThai", "SkinName", "NgayTao", "ResetPassWordGv"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TaiKhoanEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (TaiKhoan) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<TaiKhoan>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as TaiKhoan);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed TaiKhoan Entity 
		///</summary>
		protected virtual TaiKhoan Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			TaiKhoan copy = new TaiKhoan();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaTaiKhoan = this.MaTaiKhoan;
				copy.MaNhomQuyen = this.MaNhomQuyen;
				copy.TenDangNhap = this.TenDangNhap;
				copy.MatKhau = this.MatKhau;
				copy.HoTen = this.HoTen;
				copy.TenMayTinh = this.TenMayTinh;
				copy.DuongDan = this.DuongDan;
				copy.PhienBan = this.PhienBan;
				copy.NgayDangNhap = this.NgayDangNhap;
				copy.TrangThai = this.TrangThai;
				copy.SkinName = this.SkinName;
				copy.NgayTao = this.NgayTao;
				copy.ResetPassWordGv = this.ResetPassWordGv;
			
			if (this.MaNhomQuyenSource != null && existingCopies.Contains(this.MaNhomQuyenSource))
				copy.MaNhomQuyenSource = existingCopies[this.MaNhomQuyenSource] as NhomQuyen;
			else
				copy.MaNhomQuyenSource = MakeCopyOf(this.MaNhomQuyenSource, existingCopies) as NhomQuyen;
		
			//deep copy nested objects
			copy.UserIdTaiKhoanCollection_From_HeThong = (TList<TaiKhoan>) MakeCopyOf(this.UserIdTaiKhoanCollection_From_HeThong, existingCopies); 
			copy.HeThongCollectionGetByParentId = (TList<HeThong>) MakeCopyOf(this.HeThongCollectionGetByParentId, existingCopies); 
			copy.ParentIdTaiKhoanCollection_From_HeThong = (TList<TaiKhoan>) MakeCopyOf(this.ParentIdTaiKhoanCollection_From_HeThong, existingCopies); 
			copy.HeThongCollectionGetByUserId = (TList<HeThong>) MakeCopyOf(this.HeThongCollectionGetByUserId, existingCopies); 
			copy.GiangVienCollection = (TList<GiangVien>) MakeCopyOf(this.GiangVienCollection, existingCopies); 
			copy.ReportTemplateCollection = (TList<ReportTemplate>) MakeCopyOf(this.ReportTemplateCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed TaiKhoan Entity 
		///</summary>
		public virtual TaiKhoan Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed TaiKhoan Entity which is a deep copy of the current entity.
		///</summary>
		public virtual TaiKhoan DeepCopy()
		{
			return EntityHelper.Clone<TaiKhoan>(this as TaiKhoan);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TaiKhoanEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TaiKhoanEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TaiKhoanEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TaiKhoanColumn column)
		{
			switch(column)
			{
					case TaiKhoanColumn.MaTaiKhoan:
					return entityData.MaTaiKhoan != _originalData.MaTaiKhoan;
					case TaiKhoanColumn.MaNhomQuyen:
					return entityData.MaNhomQuyen != _originalData.MaNhomQuyen;
					case TaiKhoanColumn.TenDangNhap:
					return entityData.TenDangNhap != _originalData.TenDangNhap;
					case TaiKhoanColumn.MatKhau:
					return entityData.MatKhau != _originalData.MatKhau;
					case TaiKhoanColumn.HoTen:
					return entityData.HoTen != _originalData.HoTen;
					case TaiKhoanColumn.TenMayTinh:
					return entityData.TenMayTinh != _originalData.TenMayTinh;
					case TaiKhoanColumn.DuongDan:
					return entityData.DuongDan != _originalData.DuongDan;
					case TaiKhoanColumn.PhienBan:
					return entityData.PhienBan != _originalData.PhienBan;
					case TaiKhoanColumn.NgayDangNhap:
					return entityData.NgayDangNhap != _originalData.NgayDangNhap;
					case TaiKhoanColumn.TrangThai:
					return entityData.TrangThai != _originalData.TrangThai;
					case TaiKhoanColumn.SkinName:
					return entityData.SkinName != _originalData.SkinName;
					case TaiKhoanColumn.NgayTao:
					return entityData.NgayTao != _originalData.NgayTao;
					case TaiKhoanColumn.ResetPassWordGv:
					return entityData.ResetPassWordGv != _originalData.ResetPassWordGv;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TaiKhoanColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaTaiKhoan != _originalData.MaTaiKhoan;
			result = result || entityData.MaNhomQuyen != _originalData.MaNhomQuyen;
			result = result || entityData.TenDangNhap != _originalData.TenDangNhap;
			result = result || entityData.MatKhau != _originalData.MatKhau;
			result = result || entityData.HoTen != _originalData.HoTen;
			result = result || entityData.TenMayTinh != _originalData.TenMayTinh;
			result = result || entityData.DuongDan != _originalData.DuongDan;
			result = result || entityData.PhienBan != _originalData.PhienBan;
			result = result || entityData.NgayDangNhap != _originalData.NgayDangNhap;
			result = result || entityData.TrangThai != _originalData.TrangThai;
			result = result || entityData.SkinName != _originalData.SkinName;
			result = result || entityData.NgayTao != _originalData.NgayTao;
			result = result || entityData.ResetPassWordGv != _originalData.ResetPassWordGv;
			return result;
		}	
		
		///<summary>
		///  Returns a TaiKhoan Entity with the original data.
		///</summary>
		public TaiKhoan GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTaiKhoan(
				_originalData.MaNhomQuyen,
				_originalData.TenDangNhap,
				_originalData.MatKhau,
				_originalData.HoTen,
				_originalData.TenMayTinh,
				_originalData.DuongDan,
				_originalData.PhienBan,
				_originalData.NgayDangNhap,
				_originalData.TrangThai,
				_originalData.SkinName,
				_originalData.NgayTao,
				_originalData.ResetPassWordGv
				);
				
			return (TaiKhoan)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TaiKhoanBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TaiKhoanBase)
				return ValueEquals(this, (TaiKhoanBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TaiKhoanBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaTaiKhoan.GetHashCode() ^ 
					((this.MaNhomQuyen == null) ? string.Empty : this.MaNhomQuyen.ToString()).GetHashCode() ^ 
					((this.TenDangNhap == null) ? string.Empty : this.TenDangNhap.ToString()).GetHashCode() ^ 
					((this.MatKhau == null) ? string.Empty : this.MatKhau.ToString()).GetHashCode() ^ 
					((this.HoTen == null) ? string.Empty : this.HoTen.ToString()).GetHashCode() ^ 
					((this.TenMayTinh == null) ? string.Empty : this.TenMayTinh.ToString()).GetHashCode() ^ 
					((this.DuongDan == null) ? string.Empty : this.DuongDan.ToString()).GetHashCode() ^ 
					((this.PhienBan == null) ? string.Empty : this.PhienBan.ToString()).GetHashCode() ^ 
					((this.NgayDangNhap == null) ? string.Empty : this.NgayDangNhap.ToString()).GetHashCode() ^ 
					((this.TrangThai == null) ? string.Empty : this.TrangThai.ToString()).GetHashCode() ^ 
					((this.SkinName == null) ? string.Empty : this.SkinName.ToString()).GetHashCode() ^ 
					((this.NgayTao == null) ? string.Empty : this.NgayTao.ToString()).GetHashCode() ^ 
					((this.ResetPassWordGv == null) ? string.Empty : this.ResetPassWordGv.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TaiKhoanBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TaiKhoanBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TaiKhoanBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TaiKhoanBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TaiKhoanBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TaiKhoanBase Object1, TaiKhoanBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaTaiKhoan != Object2.MaTaiKhoan)
				equal = false;
			if ( Object1.MaNhomQuyen != null && Object2.MaNhomQuyen != null )
			{
				if (Object1.MaNhomQuyen != Object2.MaNhomQuyen)
					equal = false;
			}
			else if (Object1.MaNhomQuyen == null ^ Object2.MaNhomQuyen == null )
			{
				equal = false;
			}
			if ( Object1.TenDangNhap != null && Object2.TenDangNhap != null )
			{
				if (Object1.TenDangNhap != Object2.TenDangNhap)
					equal = false;
			}
			else if (Object1.TenDangNhap == null ^ Object2.TenDangNhap == null )
			{
				equal = false;
			}
			if ( Object1.MatKhau != null && Object2.MatKhau != null )
			{
				if (Object1.MatKhau != Object2.MatKhau)
					equal = false;
			}
			else if (Object1.MatKhau == null ^ Object2.MatKhau == null )
			{
				equal = false;
			}
			if ( Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object2.HoTen == null )
			{
				equal = false;
			}
			if ( Object1.TenMayTinh != null && Object2.TenMayTinh != null )
			{
				if (Object1.TenMayTinh != Object2.TenMayTinh)
					equal = false;
			}
			else if (Object1.TenMayTinh == null ^ Object2.TenMayTinh == null )
			{
				equal = false;
			}
			if ( Object1.DuongDan != null && Object2.DuongDan != null )
			{
				if (Object1.DuongDan != Object2.DuongDan)
					equal = false;
			}
			else if (Object1.DuongDan == null ^ Object2.DuongDan == null )
			{
				equal = false;
			}
			if ( Object1.PhienBan != null && Object2.PhienBan != null )
			{
				if (Object1.PhienBan != Object2.PhienBan)
					equal = false;
			}
			else if (Object1.PhienBan == null ^ Object2.PhienBan == null )
			{
				equal = false;
			}
			if ( Object1.NgayDangNhap != null && Object2.NgayDangNhap != null )
			{
				if (Object1.NgayDangNhap != Object2.NgayDangNhap)
					equal = false;
			}
			else if (Object1.NgayDangNhap == null ^ Object2.NgayDangNhap == null )
			{
				equal = false;
			}
			if ( Object1.TrangThai != null && Object2.TrangThai != null )
			{
				if (Object1.TrangThai != Object2.TrangThai)
					equal = false;
			}
			else if (Object1.TrangThai == null ^ Object2.TrangThai == null )
			{
				equal = false;
			}
			if ( Object1.SkinName != null && Object2.SkinName != null )
			{
				if (Object1.SkinName != Object2.SkinName)
					equal = false;
			}
			else if (Object1.SkinName == null ^ Object2.SkinName == null )
			{
				equal = false;
			}
			if ( Object1.NgayTao != null && Object2.NgayTao != null )
			{
				if (Object1.NgayTao != Object2.NgayTao)
					equal = false;
			}
			else if (Object1.NgayTao == null ^ Object2.NgayTao == null )
			{
				equal = false;
			}
			if ( Object1.ResetPassWordGv != null && Object2.ResetPassWordGv != null )
			{
				if (Object1.ResetPassWordGv != Object2.ResetPassWordGv)
					equal = false;
			}
			else if (Object1.ResetPassWordGv == null ^ Object2.ResetPassWordGv == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TaiKhoanBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TaiKhoanComparer GetComparer()
        {
            return new TaiKhoanComparer();
        }
        */

        // Comparer delegates back to TaiKhoan
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(TaiKhoan rhs, TaiKhoanColumn which)
        {
            switch (which)
            {
            	
            	
            	case TaiKhoanColumn.MaTaiKhoan:
            		return this.MaTaiKhoan.CompareTo(rhs.MaTaiKhoan);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.MaNhomQuyen:
            		return this.MaNhomQuyen.Value.CompareTo(rhs.MaNhomQuyen.Value);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.TenDangNhap:
            		return this.TenDangNhap.CompareTo(rhs.TenDangNhap);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.MatKhau:
            		return this.MatKhau.CompareTo(rhs.MatKhau);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.HoTen:
            		return this.HoTen.CompareTo(rhs.HoTen);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.TenMayTinh:
            		return this.TenMayTinh.CompareTo(rhs.TenMayTinh);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.DuongDan:
            		return this.DuongDan.CompareTo(rhs.DuongDan);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.PhienBan:
            		return this.PhienBan.CompareTo(rhs.PhienBan);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.NgayDangNhap:
            		return this.NgayDangNhap.Value.CompareTo(rhs.NgayDangNhap.Value);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.TrangThai:
            		return this.TrangThai.Value.CompareTo(rhs.TrangThai.Value);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.SkinName:
            		return this.SkinName.CompareTo(rhs.SkinName);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.NgayTao:
            		return this.NgayTao.Value.CompareTo(rhs.NgayTao.Value);
            		
            		                 
            	
            	
            	case TaiKhoanColumn.ResetPassWordGv:
            		return this.ResetPassWordGv.Value.CompareTo(rhs.ResetPassWordGv.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TaiKhoanKey> Members
		
		// member variable for the EntityId property
		private TaiKhoanKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TaiKhoanKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TaiKhoanKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("TaiKhoan")
					.Append("|").Append( this.MaTaiKhoan.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- MaTaiKhoan: {0}{13}- MaNhomQuyen: {1}{13}- TenDangNhap: {2}{13}- MatKhau: {3}{13}- HoTen: {4}{13}- TenMayTinh: {5}{13}- DuongDan: {6}{13}- PhienBan: {7}{13}- NgayDangNhap: {8}{13}- TrangThai: {9}{13}- SkinName: {10}{13}- NgayTao: {11}{13}- ResetPassWordGv: {12}{13}{15}", 
				this.MaTaiKhoan,
				(this.MaNhomQuyen == null) ? string.Empty : this.MaNhomQuyen.ToString(),
				(this.TenDangNhap == null) ? string.Empty : this.TenDangNhap.ToString(),
				(this.MatKhau == null) ? string.Empty : this.MatKhau.ToString(),
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
				(this.TenMayTinh == null) ? string.Empty : this.TenMayTinh.ToString(),
				(this.DuongDan == null) ? string.Empty : this.DuongDan.ToString(),
				(this.PhienBan == null) ? string.Empty : this.PhienBan.ToString(),
				(this.NgayDangNhap == null) ? string.Empty : this.NgayDangNhap.ToString(),
				(this.TrangThai == null) ? string.Empty : this.TrangThai.ToString(),
				(this.SkinName == null) ? string.Empty : this.SkinName.ToString(),
				(this.NgayTao == null) ? string.Empty : this.NgayTao.ToString(),
				(this.ResetPassWordGv == null) ? string.Empty : this.ResetPassWordGv.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'TaiKhoan' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TaiKhoanEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaTaiKhoan : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "TaiKhoan"</remarks>
		public System.Int32 MaTaiKhoan;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaNhomQuyen : 
		/// </summary>
		public System.Int32? MaNhomQuyen = null;
		
		/// <summary>
		/// TenDangNhap : 
		/// </summary>
		public System.String TenDangNhap = null;
		
		/// <summary>
		/// MatKhau : 
		/// </summary>
		public System.String MatKhau = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		public System.String HoTen = null;
		
		/// <summary>
		/// TenMayTinh : 
		/// </summary>
		public System.String TenMayTinh = null;
		
		/// <summary>
		/// DuongDan : 
		/// </summary>
		public System.String DuongDan = null;
		
		/// <summary>
		/// PhienBan : 
		/// </summary>
		public System.String PhienBan = null;
		
		/// <summary>
		/// NgayDangNhap : 
		/// </summary>
		public System.DateTime? NgayDangNhap = null;
		
		/// <summary>
		/// TrangThai : 
		/// </summary>
		public System.Boolean? TrangThai = null;
		
		/// <summary>
		/// SkinName : 
		/// </summary>
		public System.String SkinName = null;
		
		/// <summary>
		/// NgayTao : 
		/// </summary>
		public System.DateTime? NgayTao = null;
		
		/// <summary>
		/// ResetPassWordGv : 
		/// </summary>
		public System.Boolean? ResetPassWordGv = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private NhomQuyen _maNhomQuyenSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="NhomQuyen"/>.
		/// </summary>
		/// <value>The source NhomQuyen for MaNhomQuyen.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual NhomQuyen MaNhomQuyenSource
      	{
            get { return this._maNhomQuyenSource; }
            set { this._maNhomQuyenSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region UserIdTaiKhoanCollection_From_HeThong
		
		private TList<TaiKhoan> userIdTaiKhoanCollectionFromHeThong;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table userIdTaiKhoanCollectionFromHeThong
		/// </summary>
		
		public TList<TaiKhoan> UserIdTaiKhoanCollection_From_HeThong
		{
			get
			{
				if (userIdTaiKhoanCollectionFromHeThong == null)
				{
				userIdTaiKhoanCollectionFromHeThong = new TList<TaiKhoan>();
				}
	
				return userIdTaiKhoanCollectionFromHeThong;
			}
			set { userIdTaiKhoanCollectionFromHeThong = value; }
		}
		
		#endregion 

		#region HeThongCollectionGetByParentId
		
		private TList<HeThong> _heThongParentIdGetByParentId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _heThongParentIdGetByParentId
		/// </summary>
		
		public TList<HeThong> HeThongCollectionGetByParentId
		{
			get
			{
				if (_heThongParentIdGetByParentId == null)
				{
				_heThongParentIdGetByParentId = new TList<HeThong>();
				}
	
				return _heThongParentIdGetByParentId;
			}
			set { _heThongParentIdGetByParentId = value; }
		}
		
		#endregion

		#region ParentIdTaiKhoanCollection_From_HeThong
		
		private TList<TaiKhoan> parentIdTaiKhoanCollectionFromHeThong;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table parentIdTaiKhoanCollectionFromHeThong
		/// </summary>
		
		public TList<TaiKhoan> ParentIdTaiKhoanCollection_From_HeThong
		{
			get
			{
				if (parentIdTaiKhoanCollectionFromHeThong == null)
				{
				parentIdTaiKhoanCollectionFromHeThong = new TList<TaiKhoan>();
				}
	
				return parentIdTaiKhoanCollectionFromHeThong;
			}
			set { parentIdTaiKhoanCollectionFromHeThong = value; }
		}
		
		#endregion 

		#region HeThongCollectionGetByUserId
		
		private TList<HeThong> _heThongParentIdGetByUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _heThongParentIdGetByUserId
		/// </summary>
		
		public TList<HeThong> HeThongCollectionGetByUserId
		{
			get
			{
				if (_heThongParentIdGetByUserId == null)
				{
				_heThongParentIdGetByUserId = new TList<HeThong>();
				}
	
				return _heThongParentIdGetByUserId;
			}
			set { _heThongParentIdGetByUserId = value; }
		}
		
		#endregion

		#region GiangVienCollection
		
		private TList<GiangVien> _giangVienMaNguoiLap;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _giangVienMaNguoiLap
		/// </summary>
		
		public TList<GiangVien> GiangVienCollection
		{
			get
			{
				if (_giangVienMaNguoiLap == null)
				{
				_giangVienMaNguoiLap = new TList<GiangVien>();
				}
	
				return _giangVienMaNguoiLap;
			}
			set { _giangVienMaNguoiLap = value; }
		}
		
		#endregion

		#region ReportTemplateCollection
		
		private TList<ReportTemplate> _reportTemplateUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _reportTemplateUserId
		/// </summary>
		
		public TList<ReportTemplate> ReportTemplateCollection
		{
			get
			{
				if (_reportTemplateUserId == null)
				{
				_reportTemplateUserId = new TList<ReportTemplate>();
				}
	
				return _reportTemplateUserId;
			}
			set { _reportTemplateUserId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TaiKhoanEntityData _tmp = new TaiKhoanEntityData();
						
			_tmp.MaTaiKhoan = this.MaTaiKhoan;
			
			_tmp.MaNhomQuyen = this.MaNhomQuyen;
			_tmp.TenDangNhap = this.TenDangNhap;
			_tmp.MatKhau = this.MatKhau;
			_tmp.HoTen = this.HoTen;
			_tmp.TenMayTinh = this.TenMayTinh;
			_tmp.DuongDan = this.DuongDan;
			_tmp.PhienBan = this.PhienBan;
			_tmp.NgayDangNhap = this.NgayDangNhap;
			_tmp.TrangThai = this.TrangThai;
			_tmp.SkinName = this.SkinName;
			_tmp.NgayTao = this.NgayTao;
			_tmp.ResetPassWordGv = this.ResetPassWordGv;
			
			#region Source Parent Composite Entities
			if (this.MaNhomQuyenSource != null)
				_tmp.MaNhomQuyenSource = MakeCopyOf(this.MaNhomQuyenSource) as NhomQuyen;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.userIdTaiKhoanCollectionFromHeThong != null)
				_tmp.UserIdTaiKhoanCollection_From_HeThong = (TList<TaiKhoan>) MakeCopyOf(this.UserIdTaiKhoanCollection_From_HeThong); 
			if (this._heThongParentIdGetByParentId != null)
				_tmp.HeThongCollectionGetByParentId = (TList<HeThong>) MakeCopyOf(this.HeThongCollectionGetByParentId); 
			if (this.parentIdTaiKhoanCollectionFromHeThong != null)
				_tmp.ParentIdTaiKhoanCollection_From_HeThong = (TList<TaiKhoan>) MakeCopyOf(this.ParentIdTaiKhoanCollection_From_HeThong); 
			if (this._heThongParentIdGetByUserId != null)
				_tmp.HeThongCollectionGetByUserId = (TList<HeThong>) MakeCopyOf(this.HeThongCollectionGetByUserId); 
			if (this._giangVienMaNguoiLap != null)
				_tmp.GiangVienCollection = (TList<GiangVien>) MakeCopyOf(this.GiangVienCollection); 
			if (this._reportTemplateUserId != null)
				_tmp.ReportTemplateCollection = (TList<ReportTemplate>) MakeCopyOf(this.ReportTemplateCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TaiKhoanEntityData _tmp = new TaiKhoanEntityData();
						
			_tmp.MaTaiKhoan = this.MaTaiKhoan;
			
			_tmp.MaNhomQuyen = this.MaNhomQuyen;
			_tmp.TenDangNhap = this.TenDangNhap;
			_tmp.MatKhau = this.MatKhau;
			_tmp.HoTen = this.HoTen;
			_tmp.TenMayTinh = this.TenMayTinh;
			_tmp.DuongDan = this.DuongDan;
			_tmp.PhienBan = this.PhienBan;
			_tmp.NgayDangNhap = this.NgayDangNhap;
			_tmp.TrangThai = this.TrangThai;
			_tmp.SkinName = this.SkinName;
			_tmp.NgayTao = this.NgayTao;
			_tmp.ResetPassWordGv = this.ResetPassWordGv;
			
			#region Source Parent Composite Entities
			if (this.MaNhomQuyenSource != null && existingCopies.Contains(this.MaNhomQuyenSource))
				_tmp.MaNhomQuyenSource = existingCopies[this.MaNhomQuyenSource] as NhomQuyen;
			else
				_tmp.MaNhomQuyenSource = MakeCopyOf(this.MaNhomQuyenSource, existingCopies) as NhomQuyen;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.UserIdTaiKhoanCollection_From_HeThong = (TList<TaiKhoan>) MakeCopyOf(this.UserIdTaiKhoanCollection_From_HeThong, existingCopies); 
			_tmp.HeThongCollectionGetByParentId = (TList<HeThong>) MakeCopyOf(this.HeThongCollectionGetByParentId, existingCopies); 
			_tmp.ParentIdTaiKhoanCollection_From_HeThong = (TList<TaiKhoan>) MakeCopyOf(this.ParentIdTaiKhoanCollection_From_HeThong, existingCopies); 
			_tmp.HeThongCollectionGetByUserId = (TList<HeThong>) MakeCopyOf(this.HeThongCollectionGetByUserId, existingCopies); 
			_tmp.GiangVienCollection = (TList<GiangVien>) MakeCopyOf(this.GiangVienCollection, existingCopies); 
			_tmp.ReportTemplateCollection = (TList<ReportTemplate>) MakeCopyOf(this.ReportTemplateCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TaiKhoanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TaiKhoanColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TaiKhoanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TaiKhoanColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TaiKhoanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TaiKhoanColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				TaiKhoanEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TaiKhoanEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TaiKhoanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TaiKhoanColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TaiKhoanEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TaiKhoanEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TaiKhoanEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="TaiKhoan"/> object.
	/// </remarks>
	public class TaiKhoanEventArgs : System.EventArgs
	{
		private TaiKhoanColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TaiKhoanEventArgs class.
		///</summary>
		public TaiKhoanEventArgs(TaiKhoanColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TaiKhoanEventArgs class.
		///</summary>
		public TaiKhoanEventArgs(TaiKhoanColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TaiKhoanColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TaiKhoanColumn" />
		public TaiKhoanColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all TaiKhoan related events.
	///</summary>
	public delegate void TaiKhoanEventHandler(object sender, TaiKhoanEventArgs e);
	
	#region TaiKhoanComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TaiKhoanComparer : System.Collections.Generic.IComparer<TaiKhoan>
	{
		TaiKhoanColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TaiKhoanComparer"/> class.
        /// </summary>
		public TaiKhoanComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TaiKhoanComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TaiKhoanComparer(TaiKhoanColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="TaiKhoan"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="TaiKhoan"/> to compare.</param>
        /// <param name="b">The second <c>TaiKhoan</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(TaiKhoan a, TaiKhoan b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(TaiKhoan entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(TaiKhoan a, TaiKhoan b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TaiKhoanColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TaiKhoanKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="TaiKhoan"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TaiKhoanKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TaiKhoanKey class.
		/// </summary>
		public TaiKhoanKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TaiKhoanKey class.
		/// </summary>
		public TaiKhoanKey(TaiKhoanBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaTaiKhoan = entity.MaTaiKhoan;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TaiKhoanKey class.
		/// </summary>
		public TaiKhoanKey(System.Int32 _maTaiKhoan)
		{
			#region Init Properties

			this.MaTaiKhoan = _maTaiKhoan;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TaiKhoanBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TaiKhoanBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaTaiKhoan property
		private System.Int32 _maTaiKhoan;
		
		/// <summary>
		/// Gets or sets the MaTaiKhoan property.
		/// </summary>
		public System.Int32 MaTaiKhoan
		{
			get { return _maTaiKhoan; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaTaiKhoan = value;
				
				_maTaiKhoan = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaTaiKhoan = ( values["MaTaiKhoan"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaTaiKhoan"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaTaiKhoan", MaTaiKhoan);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaTaiKhoan: {0}{1}",
								MaTaiKhoan,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TaiKhoanColumn Enum
	
	/// <summary>
	/// Enumerate the TaiKhoan columns.
	/// </summary>
	[Serializable]
	public enum TaiKhoanColumn : int
	{
		/// <summary>
		/// MaTaiKhoan : 
		/// </summary>
		[EnumTextValue("Ma Tai Khoan")]
		[ColumnEnum("MaTaiKhoan", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaTaiKhoan = 1,
		/// <summary>
		/// MaNhomQuyen : 
		/// </summary>
		[EnumTextValue("Ma Nhom Quyen")]
		[ColumnEnum("MaNhomQuyen", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaNhomQuyen = 2,
		/// <summary>
		/// TenDangNhap : 
		/// </summary>
		[EnumTextValue("Ten Dang Nhap")]
		[ColumnEnum("TenDangNhap", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		TenDangNhap = 3,
		/// <summary>
		/// MatKhau : 
		/// </summary>
		[EnumTextValue("Mat Khau")]
		[ColumnEnum("MatKhau", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MatKhau = 4,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("Ho Ten")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		HoTen = 5,
		/// <summary>
		/// TenMayTinh : 
		/// </summary>
		[EnumTextValue("Ten May Tinh")]
		[ColumnEnum("TenMayTinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		TenMayTinh = 6,
		/// <summary>
		/// DuongDan : 
		/// </summary>
		[EnumTextValue("Duong Dan")]
		[ColumnEnum("DuongDan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		DuongDan = 7,
		/// <summary>
		/// PhienBan : 
		/// </summary>
		[EnumTextValue("Phien Ban")]
		[ColumnEnum("PhienBan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		PhienBan = 8,
		/// <summary>
		/// NgayDangNhap : 
		/// </summary>
		[EnumTextValue("Ngay Dang Nhap")]
		[ColumnEnum("NgayDangNhap", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayDangNhap = 9,
		/// <summary>
		/// TrangThai : 
		/// </summary>
		[EnumTextValue("Trang Thai")]
		[ColumnEnum("TrangThai", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TrangThai = 10,
		/// <summary>
		/// SkinName : 
		/// </summary>
		[EnumTextValue("Skin Name")]
		[ColumnEnum("SkinName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		SkinName = 11,
		/// <summary>
		/// NgayTao : 
		/// </summary>
		[EnumTextValue("Ngay Tao")]
		[ColumnEnum("NgayTao", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayTao = 12,
		/// <summary>
		/// ResetPassWordGv : 
		/// </summary>
		[EnumTextValue("Reset Pass Word Gv")]
		[ColumnEnum("ResetPassWordGv", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ResetPassWordGv = 13
	}//End enum

	#endregion TaiKhoanColumn Enum

} // end namespace
