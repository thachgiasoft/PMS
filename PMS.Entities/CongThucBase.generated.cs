
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file CongThuc.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'CongThuc' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CongThucBase : EntityBase, ICongThuc, IEntityId<CongThucKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CongThucEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CongThucEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CongThucEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CongThuc> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CongThucEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CongThucEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CongThucBase"/> instance.
		///</summary>
		public CongThucBase()
		{
			this.entityData = new CongThucEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CongThucBase"/> instance.
		///</summary>
		///<param name="_yearStudy"></param>
		///<param name="_name"></param>
		///<param name="_col01"></param>
		///<param name="_col02"></param>
		///<param name="_col03"></param>
		///<param name="_col04"></param>
		///<param name="_col05"></param>
		///<param name="_col06"></param>
		///<param name="_col07"></param>
		///<param name="_col08"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateStaff"></param>
		public CongThucBase(System.String _yearStudy, System.String _name, System.Decimal? _col01, 
			System.Decimal? _col02, System.Decimal? _col03, System.Decimal? _col04, System.Decimal? _col05, 
			System.Decimal? _col06, System.Decimal? _col07, System.Decimal? _col08, System.String _updateDate, 
			System.String _updateStaff)
		{
			this.entityData = new CongThucEntityData();
			this.backupData = null;

			this.YearStudy = _yearStudy;
			this.Name = _name;
			this.Col01 = _col01;
			this.Col02 = _col02;
			this.Col03 = _col03;
			this.Col04 = _col04;
			this.Col05 = _col05;
			this.Col06 = _col06;
			this.Col07 = _col07;
			this.Col08 = _col08;
			this.UpdateDate = _updateDate;
			this.UpdateStaff = _updateStaff;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CongThuc"/> instance.
		///</summary>
		///<param name="_yearStudy"></param>
		///<param name="_name"></param>
		///<param name="_col01"></param>
		///<param name="_col02"></param>
		///<param name="_col03"></param>
		///<param name="_col04"></param>
		///<param name="_col05"></param>
		///<param name="_col06"></param>
		///<param name="_col07"></param>
		///<param name="_col08"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateStaff"></param>
		public static CongThuc CreateCongThuc(System.String _yearStudy, System.String _name, System.Decimal? _col01, 
			System.Decimal? _col02, System.Decimal? _col03, System.Decimal? _col04, System.Decimal? _col05, 
			System.Decimal? _col06, System.Decimal? _col07, System.Decimal? _col08, System.String _updateDate, 
			System.String _updateStaff)
		{
			CongThuc newCongThuc = new CongThuc();
			newCongThuc.YearStudy = _yearStudy;
			newCongThuc.Name = _name;
			newCongThuc.Col01 = _col01;
			newCongThuc.Col02 = _col02;
			newCongThuc.Col03 = _col03;
			newCongThuc.Col04 = _col04;
			newCongThuc.Col05 = _col05;
			newCongThuc.Col06 = _col06;
			newCongThuc.Col07 = _col07;
			newCongThuc.Col08 = _col08;
			newCongThuc.UpdateDate = _updateDate;
			newCongThuc.UpdateStaff = _updateStaff;
			return newCongThuc;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(CongThucColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the YearStudy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String YearStudy
		{
			get
			{
				return this.entityData.YearStudy; 
			}
			
			set
			{
				if (this.entityData.YearStudy == value)
					return;
				
                OnPropertyChanging("YearStudy");                    
				OnColumnChanging(CongThucColumn.YearStudy, this.entityData.YearStudy);
				this.entityData.YearStudy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.YearStudy, this.entityData.YearStudy);
				OnPropertyChanged("YearStudy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(CongThucColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Col01 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Col01
		{
			get
			{
				return this.entityData.Col01; 
			}
			
			set
			{
				if (this.entityData.Col01 == value)
					return;
				
                OnPropertyChanging("Col01");                    
				OnColumnChanging(CongThucColumn.Col01, this.entityData.Col01);
				this.entityData.Col01 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Col01, this.entityData.Col01);
				OnPropertyChanged("Col01");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Col02 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Col02
		{
			get
			{
				return this.entityData.Col02; 
			}
			
			set
			{
				if (this.entityData.Col02 == value)
					return;
				
                OnPropertyChanging("Col02");                    
				OnColumnChanging(CongThucColumn.Col02, this.entityData.Col02);
				this.entityData.Col02 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Col02, this.entityData.Col02);
				OnPropertyChanged("Col02");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Col03 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Col03
		{
			get
			{
				return this.entityData.Col03; 
			}
			
			set
			{
				if (this.entityData.Col03 == value)
					return;
				
                OnPropertyChanging("Col03");                    
				OnColumnChanging(CongThucColumn.Col03, this.entityData.Col03);
				this.entityData.Col03 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Col03, this.entityData.Col03);
				OnPropertyChanged("Col03");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Col04 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Col04
		{
			get
			{
				return this.entityData.Col04; 
			}
			
			set
			{
				if (this.entityData.Col04 == value)
					return;
				
                OnPropertyChanging("Col04");                    
				OnColumnChanging(CongThucColumn.Col04, this.entityData.Col04);
				this.entityData.Col04 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Col04, this.entityData.Col04);
				OnPropertyChanged("Col04");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Col05 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Col05
		{
			get
			{
				return this.entityData.Col05; 
			}
			
			set
			{
				if (this.entityData.Col05 == value)
					return;
				
                OnPropertyChanging("Col05");                    
				OnColumnChanging(CongThucColumn.Col05, this.entityData.Col05);
				this.entityData.Col05 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Col05, this.entityData.Col05);
				OnPropertyChanged("Col05");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Col06 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Col06
		{
			get
			{
				return this.entityData.Col06; 
			}
			
			set
			{
				if (this.entityData.Col06 == value)
					return;
				
                OnPropertyChanging("Col06");                    
				OnColumnChanging(CongThucColumn.Col06, this.entityData.Col06);
				this.entityData.Col06 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Col06, this.entityData.Col06);
				OnPropertyChanged("Col06");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Col07 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Col07
		{
			get
			{
				return this.entityData.Col07; 
			}
			
			set
			{
				if (this.entityData.Col07 == value)
					return;
				
                OnPropertyChanging("Col07");                    
				OnColumnChanging(CongThucColumn.Col07, this.entityData.Col07);
				this.entityData.Col07 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Col07, this.entityData.Col07);
				OnPropertyChanged("Col07");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Col08 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Col08
		{
			get
			{
				return this.entityData.Col08; 
			}
			
			set
			{
				if (this.entityData.Col08 == value)
					return;
				
                OnPropertyChanging("Col08");                    
				OnColumnChanging(CongThucColumn.Col08, this.entityData.Col08);
				this.entityData.Col08 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.Col08, this.entityData.Col08);
				OnPropertyChanged("Col08");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(CongThucColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateStaff property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String UpdateStaff
		{
			get
			{
				return this.entityData.UpdateStaff; 
			}
			
			set
			{
				if (this.entityData.UpdateStaff == value)
					return;
				
                OnPropertyChanging("UpdateStaff");                    
				OnColumnChanging(CongThucColumn.UpdateStaff, this.entityData.UpdateStaff);
				this.entityData.UpdateStaff = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CongThucColumn.UpdateStaff, this.entityData.UpdateStaff);
				OnPropertyChanged("UpdateStaff");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("YearStudy", "Year Study", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdateDate", "Update Date", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdateStaff", "Update Staff", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CongThuc"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "YearStudy", "Name", "Col01", "Col02", "Col03", "Col04", "Col05", "Col06", "Col07", "Col08", "UpdateDate", "UpdateStaff"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CongThucEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CongThuc) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CongThuc>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CongThuc);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CongThuc Entity 
		///</summary>
		protected virtual CongThuc Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CongThuc copy = new CongThuc();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.YearStudy = this.YearStudy;
				copy.Name = this.Name;
				copy.Col01 = this.Col01;
				copy.Col02 = this.Col02;
				copy.Col03 = this.Col03;
				copy.Col04 = this.Col04;
				copy.Col05 = this.Col05;
				copy.Col06 = this.Col06;
				copy.Col07 = this.Col07;
				copy.Col08 = this.Col08;
				copy.UpdateDate = this.UpdateDate;
				copy.UpdateStaff = this.UpdateStaff;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CongThuc Entity 
		///</summary>
		public virtual CongThuc Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CongThuc Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CongThuc DeepCopy()
		{
			return EntityHelper.Clone<CongThuc>(this as CongThuc);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CongThucEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CongThucEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CongThucEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CongThucColumn column)
		{
			switch(column)
			{
					case CongThucColumn.Id:
					return entityData.Id != _originalData.Id;
					case CongThucColumn.YearStudy:
					return entityData.YearStudy != _originalData.YearStudy;
					case CongThucColumn.Name:
					return entityData.Name != _originalData.Name;
					case CongThucColumn.Col01:
					return entityData.Col01 != _originalData.Col01;
					case CongThucColumn.Col02:
					return entityData.Col02 != _originalData.Col02;
					case CongThucColumn.Col03:
					return entityData.Col03 != _originalData.Col03;
					case CongThucColumn.Col04:
					return entityData.Col04 != _originalData.Col04;
					case CongThucColumn.Col05:
					return entityData.Col05 != _originalData.Col05;
					case CongThucColumn.Col06:
					return entityData.Col06 != _originalData.Col06;
					case CongThucColumn.Col07:
					return entityData.Col07 != _originalData.Col07;
					case CongThucColumn.Col08:
					return entityData.Col08 != _originalData.Col08;
					case CongThucColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case CongThucColumn.UpdateStaff:
					return entityData.UpdateStaff != _originalData.UpdateStaff;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CongThucColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.YearStudy != _originalData.YearStudy;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Col01 != _originalData.Col01;
			result = result || entityData.Col02 != _originalData.Col02;
			result = result || entityData.Col03 != _originalData.Col03;
			result = result || entityData.Col04 != _originalData.Col04;
			result = result || entityData.Col05 != _originalData.Col05;
			result = result || entityData.Col06 != _originalData.Col06;
			result = result || entityData.Col07 != _originalData.Col07;
			result = result || entityData.Col08 != _originalData.Col08;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.UpdateStaff != _originalData.UpdateStaff;
			return result;
		}	
		
		///<summary>
		///  Returns a CongThuc Entity with the original data.
		///</summary>
		public CongThuc GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCongThuc(
				_originalData.YearStudy,
				_originalData.Name,
				_originalData.Col01,
				_originalData.Col02,
				_originalData.Col03,
				_originalData.Col04,
				_originalData.Col05,
				_originalData.Col06,
				_originalData.Col07,
				_originalData.Col08,
				_originalData.UpdateDate,
				_originalData.UpdateStaff
				);
				
			return (CongThuc)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CongThucBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CongThucBase)
				return ValueEquals(this, (CongThucBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CongThucBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.YearStudy == null) ? string.Empty : this.YearStudy.ToString()).GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.Col01 == null) ? string.Empty : this.Col01.ToString()).GetHashCode() ^ 
					((this.Col02 == null) ? string.Empty : this.Col02.ToString()).GetHashCode() ^ 
					((this.Col03 == null) ? string.Empty : this.Col03.ToString()).GetHashCode() ^ 
					((this.Col04 == null) ? string.Empty : this.Col04.ToString()).GetHashCode() ^ 
					((this.Col05 == null) ? string.Empty : this.Col05.ToString()).GetHashCode() ^ 
					((this.Col06 == null) ? string.Empty : this.Col06.ToString()).GetHashCode() ^ 
					((this.Col07 == null) ? string.Empty : this.Col07.ToString()).GetHashCode() ^ 
					((this.Col08 == null) ? string.Empty : this.Col08.ToString()).GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					((this.UpdateStaff == null) ? string.Empty : this.UpdateStaff.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CongThucBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CongThucBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CongThucBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CongThucBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CongThucBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CongThucBase Object1, CongThucBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.YearStudy != null && Object2.YearStudy != null )
			{
				if (Object1.YearStudy != Object2.YearStudy)
					equal = false;
			}
			else if (Object1.YearStudy == null ^ Object2.YearStudy == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Col01 != null && Object2.Col01 != null )
			{
				if (Object1.Col01 != Object2.Col01)
					equal = false;
			}
			else if (Object1.Col01 == null ^ Object2.Col01 == null )
			{
				equal = false;
			}
			if ( Object1.Col02 != null && Object2.Col02 != null )
			{
				if (Object1.Col02 != Object2.Col02)
					equal = false;
			}
			else if (Object1.Col02 == null ^ Object2.Col02 == null )
			{
				equal = false;
			}
			if ( Object1.Col03 != null && Object2.Col03 != null )
			{
				if (Object1.Col03 != Object2.Col03)
					equal = false;
			}
			else if (Object1.Col03 == null ^ Object2.Col03 == null )
			{
				equal = false;
			}
			if ( Object1.Col04 != null && Object2.Col04 != null )
			{
				if (Object1.Col04 != Object2.Col04)
					equal = false;
			}
			else if (Object1.Col04 == null ^ Object2.Col04 == null )
			{
				equal = false;
			}
			if ( Object1.Col05 != null && Object2.Col05 != null )
			{
				if (Object1.Col05 != Object2.Col05)
					equal = false;
			}
			else if (Object1.Col05 == null ^ Object2.Col05 == null )
			{
				equal = false;
			}
			if ( Object1.Col06 != null && Object2.Col06 != null )
			{
				if (Object1.Col06 != Object2.Col06)
					equal = false;
			}
			else if (Object1.Col06 == null ^ Object2.Col06 == null )
			{
				equal = false;
			}
			if ( Object1.Col07 != null && Object2.Col07 != null )
			{
				if (Object1.Col07 != Object2.Col07)
					equal = false;
			}
			else if (Object1.Col07 == null ^ Object2.Col07 == null )
			{
				equal = false;
			}
			if ( Object1.Col08 != null && Object2.Col08 != null )
			{
				if (Object1.Col08 != Object2.Col08)
					equal = false;
			}
			else if (Object1.Col08 == null ^ Object2.Col08 == null )
			{
				equal = false;
			}
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdateStaff != null && Object2.UpdateStaff != null )
			{
				if (Object1.UpdateStaff != Object2.UpdateStaff)
					equal = false;
			}
			else if (Object1.UpdateStaff == null ^ Object2.UpdateStaff == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CongThucBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CongThucComparer GetComparer()
        {
            return new CongThucComparer();
        }
        */

        // Comparer delegates back to CongThuc
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CongThuc rhs, CongThucColumn which)
        {
            switch (which)
            {
            	
            	
            	case CongThucColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CongThucColumn.YearStudy:
            		return this.YearStudy.CompareTo(rhs.YearStudy);
            		
            		                 
            	
            	
            	case CongThucColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case CongThucColumn.Col01:
            		return this.Col01.Value.CompareTo(rhs.Col01.Value);
            		
            		                 
            	
            	
            	case CongThucColumn.Col02:
            		return this.Col02.Value.CompareTo(rhs.Col02.Value);
            		
            		                 
            	
            	
            	case CongThucColumn.Col03:
            		return this.Col03.Value.CompareTo(rhs.Col03.Value);
            		
            		                 
            	
            	
            	case CongThucColumn.Col04:
            		return this.Col04.Value.CompareTo(rhs.Col04.Value);
            		
            		                 
            	
            	
            	case CongThucColumn.Col05:
            		return this.Col05.Value.CompareTo(rhs.Col05.Value);
            		
            		                 
            	
            	
            	case CongThucColumn.Col06:
            		return this.Col06.Value.CompareTo(rhs.Col06.Value);
            		
            		                 
            	
            	
            	case CongThucColumn.Col07:
            		return this.Col07.Value.CompareTo(rhs.Col07.Value);
            		
            		                 
            	
            	
            	case CongThucColumn.Col08:
            		return this.Col08.Value.CompareTo(rhs.Col08.Value);
            		
            		                 
            	
            	
            	case CongThucColumn.UpdateDate:
            		return this.UpdateDate.CompareTo(rhs.UpdateDate);
            		
            		                 
            	
            	
            	case CongThucColumn.UpdateStaff:
            		return this.UpdateStaff.CompareTo(rhs.UpdateStaff);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CongThucKey> Members
		
		// member variable for the EntityId property
		private CongThucKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CongThucKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CongThucKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CongThuc")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- Id: {0}{13}- YearStudy: {1}{13}- Name: {2}{13}- Col01: {3}{13}- Col02: {4}{13}- Col03: {5}{13}- Col04: {6}{13}- Col05: {7}{13}- Col06: {8}{13}- Col07: {9}{13}- Col08: {10}{13}- UpdateDate: {11}{13}- UpdateStaff: {12}{13}{15}", 
				this.Id,
				(this.YearStudy == null) ? string.Empty : this.YearStudy.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Col01 == null) ? string.Empty : this.Col01.ToString(),
				(this.Col02 == null) ? string.Empty : this.Col02.ToString(),
				(this.Col03 == null) ? string.Empty : this.Col03.ToString(),
				(this.Col04 == null) ? string.Empty : this.Col04.ToString(),
				(this.Col05 == null) ? string.Empty : this.Col05.ToString(),
				(this.Col06 == null) ? string.Empty : this.Col06.ToString(),
				(this.Col07 == null) ? string.Empty : this.Col07.ToString(),
				(this.Col08 == null) ? string.Empty : this.Col08.ToString(),
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				(this.UpdateStaff == null) ? string.Empty : this.UpdateStaff.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CongThuc' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CongThucEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CongThuc"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// YearStudy : 
		/// </summary>
		public System.String YearStudy = null;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String Name = null;
		
		/// <summary>
		/// Col01 : 
		/// </summary>
		public System.Decimal? Col01 = null;
		
		/// <summary>
		/// Col02 : 
		/// </summary>
		public System.Decimal? Col02 = null;
		
		/// <summary>
		/// Col03 : 
		/// </summary>
		public System.Decimal? Col03 = null;
		
		/// <summary>
		/// Col04 : 
		/// </summary>
		public System.Decimal? Col04 = null;
		
		/// <summary>
		/// Col05 : 
		/// </summary>
		public System.Decimal? Col05 = null;
		
		/// <summary>
		/// Col06 : 
		/// </summary>
		public System.Decimal? Col06 = null;
		
		/// <summary>
		/// Col07 : 
		/// </summary>
		public System.Decimal? Col07 = null;
		
		/// <summary>
		/// Col08 : 
		/// </summary>
		public System.Decimal? Col08 = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		public System.String UpdateDate = null;
		
		/// <summary>
		/// UpdateStaff : 
		/// </summary>
		public System.String UpdateStaff = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CongThucEntityData _tmp = new CongThucEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.YearStudy = this.YearStudy;
			_tmp.Name = this.Name;
			_tmp.Col01 = this.Col01;
			_tmp.Col02 = this.Col02;
			_tmp.Col03 = this.Col03;
			_tmp.Col04 = this.Col04;
			_tmp.Col05 = this.Col05;
			_tmp.Col06 = this.Col06;
			_tmp.Col07 = this.Col07;
			_tmp.Col08 = this.Col08;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateStaff = this.UpdateStaff;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CongThucEntityData _tmp = new CongThucEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.YearStudy = this.YearStudy;
			_tmp.Name = this.Name;
			_tmp.Col01 = this.Col01;
			_tmp.Col02 = this.Col02;
			_tmp.Col03 = this.Col03;
			_tmp.Col04 = this.Col04;
			_tmp.Col05 = this.Col05;
			_tmp.Col06 = this.Col06;
			_tmp.Col07 = this.Col07;
			_tmp.Col08 = this.Col08;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateStaff = this.UpdateStaff;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CongThucColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CongThucColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CongThucColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CongThucColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CongThucColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CongThucColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				CongThucEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CongThucEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CongThucColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CongThucColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CongThucEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CongThucEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CongThucEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CongThuc"/> object.
	/// </remarks>
	public class CongThucEventArgs : System.EventArgs
	{
		private CongThucColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CongThucEventArgs class.
		///</summary>
		public CongThucEventArgs(CongThucColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CongThucEventArgs class.
		///</summary>
		public CongThucEventArgs(CongThucColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CongThucColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CongThucColumn" />
		public CongThucColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CongThuc related events.
	///</summary>
	public delegate void CongThucEventHandler(object sender, CongThucEventArgs e);
	
	#region CongThucComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CongThucComparer : System.Collections.Generic.IComparer<CongThuc>
	{
		CongThucColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CongThucComparer"/> class.
        /// </summary>
		public CongThucComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CongThucComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CongThucComparer(CongThucColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="CongThuc"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="CongThuc"/> to compare.</param>
        /// <param name="b">The second <c>CongThuc</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CongThuc a, CongThuc b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CongThuc entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CongThuc a, CongThuc b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CongThucColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CongThucKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CongThuc"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CongThucKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CongThucKey class.
		/// </summary>
		public CongThucKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CongThucKey class.
		/// </summary>
		public CongThucKey(CongThucBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CongThucKey class.
		/// </summary>
		public CongThucKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CongThucBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CongThucBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CongThucColumn Enum
	
	/// <summary>
	/// Enumerate the CongThuc columns.
	/// </summary>
	[Serializable]
	public enum CongThucColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// YearStudy : 
		/// </summary>
		[EnumTextValue("Year Study")]
		[ColumnEnum("YearStudy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		YearStudy = 2,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Name = 3,
		/// <summary>
		/// Col01 : 
		/// </summary>
		[EnumTextValue("Col01")]
		[ColumnEnum("Col01", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Col01 = 4,
		/// <summary>
		/// Col02 : 
		/// </summary>
		[EnumTextValue("Col02")]
		[ColumnEnum("Col02", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Col02 = 5,
		/// <summary>
		/// Col03 : 
		/// </summary>
		[EnumTextValue("Col03")]
		[ColumnEnum("Col03", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Col03 = 6,
		/// <summary>
		/// Col04 : 
		/// </summary>
		[EnumTextValue("Col04")]
		[ColumnEnum("Col04", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Col04 = 7,
		/// <summary>
		/// Col05 : 
		/// </summary>
		[EnumTextValue("Col05")]
		[ColumnEnum("Col05", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Col05 = 8,
		/// <summary>
		/// Col06 : 
		/// </summary>
		[EnumTextValue("Col06")]
		[ColumnEnum("Col06", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Col06 = 9,
		/// <summary>
		/// Col07 : 
		/// </summary>
		[EnumTextValue("Col07")]
		[ColumnEnum("Col07", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Col07 = 10,
		/// <summary>
		/// Col08 : 
		/// </summary>
		[EnumTextValue("Col08")]
		[ColumnEnum("Col08", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Col08 = 11,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		UpdateDate = 12,
		/// <summary>
		/// UpdateStaff : 
		/// </summary>
		[EnumTextValue("Update Staff")]
		[ColumnEnum("UpdateStaff", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		UpdateStaff = 13
	}//End enum

	#endregion CongThucColumn Enum

} // end namespace
