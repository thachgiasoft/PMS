
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file GiangVienTamUng.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'GiangVienTamUng' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GiangVienTamUngBase : EntityBase, IGiangVienTamUng, IEntityId<GiangVienTamUngKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GiangVienTamUngEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GiangVienTamUngEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GiangVienTamUngEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GiangVienTamUng> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GiangVienTamUngEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GiangVienTamUngEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GiangVienTamUngBase"/> instance.
		///</summary>
		public GiangVienTamUngBase()
		{
			this.entityData = new GiangVienTamUngEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GiangVienTamUngBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_soTien"></param>
		///<param name="_ngayTamUng"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_ghiChu"></param>
		///<param name="_soTiet"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_dotThanhToan"></param>
		///<param name="_gioNghiaVuGiangDay"></param>
		///<param name="_gioNghiaVuNckh"></param>
		///<param name="_gioGiangDayQuyDoi"></param>
		///<param name="_gioNckh"></param>
		///<param name="_donGia"></param>
		///<param name="_soGioQuyDoi"></param>
		///<param name="_soGioQuyDoiKhoiLuongCongThem"></param>
		public GiangVienTamUngBase(System.Int32? _maGiangVien, System.String _hoTen, System.Decimal? _soTien, 
			System.DateTime? _ngayTamUng, System.String _namHoc, System.String _hocKy, System.String _ghiChu, 
			System.Decimal? _soTiet, System.String _ngayCapNhat, System.String _nguoiCapNhat, 
			System.Int32? _dotThanhToan, System.Decimal? _gioNghiaVuGiangDay, System.Decimal? _gioNghiaVuNckh, 
			System.Decimal? _gioGiangDayQuyDoi, System.Decimal? _gioNckh, System.Decimal? _donGia, 
			System.Decimal? _soGioQuyDoi, System.Decimal? _soGioQuyDoiKhoiLuongCongThem)
		{
			this.entityData = new GiangVienTamUngEntityData();
			this.backupData = null;

			this.MaGiangVien = _maGiangVien;
			this.HoTen = _hoTen;
			this.SoTien = _soTien;
			this.NgayTamUng = _ngayTamUng;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.GhiChu = _ghiChu;
			this.SoTiet = _soTiet;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.DotThanhToan = _dotThanhToan;
			this.GioNghiaVuGiangDay = _gioNghiaVuGiangDay;
			this.GioNghiaVuNckh = _gioNghiaVuNckh;
			this.GioGiangDayQuyDoi = _gioGiangDayQuyDoi;
			this.GioNckh = _gioNckh;
			this.DonGia = _donGia;
			this.SoGioQuyDoi = _soGioQuyDoi;
			this.SoGioQuyDoiKhoiLuongCongThem = _soGioQuyDoiKhoiLuongCongThem;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GiangVienTamUng"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_soTien"></param>
		///<param name="_ngayTamUng"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_ghiChu"></param>
		///<param name="_soTiet"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_dotThanhToan"></param>
		///<param name="_gioNghiaVuGiangDay"></param>
		///<param name="_gioNghiaVuNckh"></param>
		///<param name="_gioGiangDayQuyDoi"></param>
		///<param name="_gioNckh"></param>
		///<param name="_donGia"></param>
		///<param name="_soGioQuyDoi"></param>
		///<param name="_soGioQuyDoiKhoiLuongCongThem"></param>
		public static GiangVienTamUng CreateGiangVienTamUng(System.Int32? _maGiangVien, System.String _hoTen, System.Decimal? _soTien, 
			System.DateTime? _ngayTamUng, System.String _namHoc, System.String _hocKy, System.String _ghiChu, 
			System.Decimal? _soTiet, System.String _ngayCapNhat, System.String _nguoiCapNhat, 
			System.Int32? _dotThanhToan, System.Decimal? _gioNghiaVuGiangDay, System.Decimal? _gioNghiaVuNckh, 
			System.Decimal? _gioGiangDayQuyDoi, System.Decimal? _gioNckh, System.Decimal? _donGia, 
			System.Decimal? _soGioQuyDoi, System.Decimal? _soGioQuyDoiKhoiLuongCongThem)
		{
			GiangVienTamUng newGiangVienTamUng = new GiangVienTamUng();
			newGiangVienTamUng.MaGiangVien = _maGiangVien;
			newGiangVienTamUng.HoTen = _hoTen;
			newGiangVienTamUng.SoTien = _soTien;
			newGiangVienTamUng.NgayTamUng = _ngayTamUng;
			newGiangVienTamUng.NamHoc = _namHoc;
			newGiangVienTamUng.HocKy = _hocKy;
			newGiangVienTamUng.GhiChu = _ghiChu;
			newGiangVienTamUng.SoTiet = _soTiet;
			newGiangVienTamUng.NgayCapNhat = _ngayCapNhat;
			newGiangVienTamUng.NguoiCapNhat = _nguoiCapNhat;
			newGiangVienTamUng.DotThanhToan = _dotThanhToan;
			newGiangVienTamUng.GioNghiaVuGiangDay = _gioNghiaVuGiangDay;
			newGiangVienTamUng.GioNghiaVuNckh = _gioNghiaVuNckh;
			newGiangVienTamUng.GioGiangDayQuyDoi = _gioGiangDayQuyDoi;
			newGiangVienTamUng.GioNckh = _gioNckh;
			newGiangVienTamUng.DonGia = _donGia;
			newGiangVienTamUng.SoGioQuyDoi = _soGioQuyDoi;
			newGiangVienTamUng.SoGioQuyDoiKhoiLuongCongThem = _soGioQuyDoiKhoiLuongCongThem;
			return newGiangVienTamUng;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaQuanLy
		{
			get
			{
				return this.entityData.MaQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaQuanLy == value)
					return;
				
                OnPropertyChanging("MaQuanLy");                    
				OnColumnChanging(GiangVienTamUngColumn.MaQuanLy, this.entityData.MaQuanLy);
				this.entityData.MaQuanLy = value;
				this.EntityId.MaQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.MaQuanLy, this.entityData.MaQuanLy);
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this.entityData.MaGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaGiangVien == value)
					return;
				
                OnPropertyChanging("MaGiangVien");                    
				OnColumnChanging(GiangVienTamUngColumn.MaGiangVien, this.entityData.MaGiangVien);
				this.entityData.MaGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.MaGiangVien, this.entityData.MaGiangVien);
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String HoTen
		{
			get
			{
				return this.entityData.HoTen; 
			}
			
			set
			{
				if (this.entityData.HoTen == value)
					return;
				
                OnPropertyChanging("HoTen");                    
				OnColumnChanging(GiangVienTamUngColumn.HoTen, this.entityData.HoTen);
				this.entityData.HoTen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.HoTen, this.entityData.HoTen);
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTien property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTien
		{
			get
			{
				return this.entityData.SoTien; 
			}
			
			set
			{
				if (this.entityData.SoTien == value)
					return;
				
                OnPropertyChanging("SoTien");                    
				OnColumnChanging(GiangVienTamUngColumn.SoTien, this.entityData.SoTien);
				this.entityData.SoTien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.SoTien, this.entityData.SoTien);
				OnPropertyChanged("SoTien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayTamUng property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayTamUng
		{
			get
			{
				return this.entityData.NgayTamUng; 
			}
			
			set
			{
				if (this.entityData.NgayTamUng == value)
					return;
				
                OnPropertyChanging("NgayTamUng");                    
				OnColumnChanging(GiangVienTamUngColumn.NgayTamUng, this.entityData.NgayTamUng);
				this.entityData.NgayTamUng = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.NgayTamUng, this.entityData.NgayTamUng);
				OnPropertyChanged("NgayTamUng");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(GiangVienTamUngColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(GiangVienTamUngColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(GiangVienTamUngColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTiet
		{
			get
			{
				return this.entityData.SoTiet; 
			}
			
			set
			{
				if (this.entityData.SoTiet == value)
					return;
				
                OnPropertyChanging("SoTiet");                    
				OnColumnChanging(GiangVienTamUngColumn.SoTiet, this.entityData.SoTiet);
				this.entityData.SoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.SoTiet, this.entityData.SoTiet);
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(GiangVienTamUngColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(GiangVienTamUngColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotThanhToan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DotThanhToan
		{
			get
			{
				return this.entityData.DotThanhToan; 
			}
			
			set
			{
				if (this.entityData.DotThanhToan == value)
					return;
				
                OnPropertyChanging("DotThanhToan");                    
				OnColumnChanging(GiangVienTamUngColumn.DotThanhToan, this.entityData.DotThanhToan);
				this.entityData.DotThanhToan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.DotThanhToan, this.entityData.DotThanhToan);
				OnPropertyChanged("DotThanhToan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioNghiaVuGiangDay property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioNghiaVuGiangDay
		{
			get
			{
				return this.entityData.GioNghiaVuGiangDay; 
			}
			
			set
			{
				if (this.entityData.GioNghiaVuGiangDay == value)
					return;
				
                OnPropertyChanging("GioNghiaVuGiangDay");                    
				OnColumnChanging(GiangVienTamUngColumn.GioNghiaVuGiangDay, this.entityData.GioNghiaVuGiangDay);
				this.entityData.GioNghiaVuGiangDay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.GioNghiaVuGiangDay, this.entityData.GioNghiaVuGiangDay);
				OnPropertyChanged("GioNghiaVuGiangDay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioNghiaVuNckh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioNghiaVuNckh
		{
			get
			{
				return this.entityData.GioNghiaVuNckh; 
			}
			
			set
			{
				if (this.entityData.GioNghiaVuNckh == value)
					return;
				
                OnPropertyChanging("GioNghiaVuNckh");                    
				OnColumnChanging(GiangVienTamUngColumn.GioNghiaVuNckh, this.entityData.GioNghiaVuNckh);
				this.entityData.GioNghiaVuNckh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.GioNghiaVuNckh, this.entityData.GioNghiaVuNckh);
				OnPropertyChanged("GioNghiaVuNckh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioGiangDayQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioGiangDayQuyDoi
		{
			get
			{
				return this.entityData.GioGiangDayQuyDoi; 
			}
			
			set
			{
				if (this.entityData.GioGiangDayQuyDoi == value)
					return;
				
                OnPropertyChanging("GioGiangDayQuyDoi");                    
				OnColumnChanging(GiangVienTamUngColumn.GioGiangDayQuyDoi, this.entityData.GioGiangDayQuyDoi);
				this.entityData.GioGiangDayQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.GioGiangDayQuyDoi, this.entityData.GioGiangDayQuyDoi);
				OnPropertyChanged("GioGiangDayQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioNckh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioNckh
		{
			get
			{
				return this.entityData.GioNckh; 
			}
			
			set
			{
				if (this.entityData.GioNckh == value)
					return;
				
                OnPropertyChanging("GioNckh");                    
				OnColumnChanging(GiangVienTamUngColumn.GioNckh, this.entityData.GioNckh);
				this.entityData.GioNckh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.GioNckh, this.entityData.GioNckh);
				OnPropertyChanged("GioNckh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGia
		{
			get
			{
				return this.entityData.DonGia; 
			}
			
			set
			{
				if (this.entityData.DonGia == value)
					return;
				
                OnPropertyChanging("DonGia");                    
				OnColumnChanging(GiangVienTamUngColumn.DonGia, this.entityData.DonGia);
				this.entityData.DonGia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.DonGia, this.entityData.DonGia);
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoGioQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoGioQuyDoi
		{
			get
			{
				return this.entityData.SoGioQuyDoi; 
			}
			
			set
			{
				if (this.entityData.SoGioQuyDoi == value)
					return;
				
                OnPropertyChanging("SoGioQuyDoi");                    
				OnColumnChanging(GiangVienTamUngColumn.SoGioQuyDoi, this.entityData.SoGioQuyDoi);
				this.entityData.SoGioQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.SoGioQuyDoi, this.entityData.SoGioQuyDoi);
				OnPropertyChanged("SoGioQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoGioQuyDoiKhoiLuongCongThem property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoGioQuyDoiKhoiLuongCongThem
		{
			get
			{
				return this.entityData.SoGioQuyDoiKhoiLuongCongThem; 
			}
			
			set
			{
				if (this.entityData.SoGioQuyDoiKhoiLuongCongThem == value)
					return;
				
                OnPropertyChanging("SoGioQuyDoiKhoiLuongCongThem");                    
				OnColumnChanging(GiangVienTamUngColumn.SoGioQuyDoiKhoiLuongCongThem, this.entityData.SoGioQuyDoiKhoiLuongCongThem);
				this.entityData.SoGioQuyDoiKhoiLuongCongThem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GiangVienTamUngColumn.SoGioQuyDoiKhoiLuongCongThem, this.entityData.SoGioQuyDoiKhoiLuongCongThem);
				OnPropertyChanged("SoGioQuyDoiKhoiLuongCongThem");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HoTen", "Ho Ten", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayCapNhat", "Ngay Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GiangVienTamUng"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaQuanLy", "MaGiangVien", "HoTen", "SoTien", "NgayTamUng", "NamHoc", "HocKy", "GhiChu", "SoTiet", "NgayCapNhat", "NguoiCapNhat", "DotThanhToan", "GioNghiaVuGiangDay", "GioNghiaVuNckh", "GioGiangDayQuyDoi", "GioNckh", "DonGia", "SoGioQuyDoi", "SoGioQuyDoiKhoiLuongCongThem"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GiangVienTamUngEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GiangVienTamUng) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GiangVienTamUng>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GiangVienTamUng);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GiangVienTamUng Entity 
		///</summary>
		protected virtual GiangVienTamUng Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GiangVienTamUng copy = new GiangVienTamUng();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaQuanLy = this.MaQuanLy;
				copy.MaGiangVien = this.MaGiangVien;
				copy.HoTen = this.HoTen;
				copy.SoTien = this.SoTien;
				copy.NgayTamUng = this.NgayTamUng;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.GhiChu = this.GhiChu;
				copy.SoTiet = this.SoTiet;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.DotThanhToan = this.DotThanhToan;
				copy.GioNghiaVuGiangDay = this.GioNghiaVuGiangDay;
				copy.GioNghiaVuNckh = this.GioNghiaVuNckh;
				copy.GioGiangDayQuyDoi = this.GioGiangDayQuyDoi;
				copy.GioNckh = this.GioNckh;
				copy.DonGia = this.DonGia;
				copy.SoGioQuyDoi = this.SoGioQuyDoi;
				copy.SoGioQuyDoiKhoiLuongCongThem = this.SoGioQuyDoiKhoiLuongCongThem;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GiangVienTamUng Entity 
		///</summary>
		public virtual GiangVienTamUng Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GiangVienTamUng Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GiangVienTamUng DeepCopy()
		{
			return EntityHelper.Clone<GiangVienTamUng>(this as GiangVienTamUng);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GiangVienTamUngEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GiangVienTamUngEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GiangVienTamUngEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GiangVienTamUngColumn column)
		{
			switch(column)
			{
					case GiangVienTamUngColumn.MaQuanLy:
					return entityData.MaQuanLy != _originalData.MaQuanLy;
					case GiangVienTamUngColumn.MaGiangVien:
					return entityData.MaGiangVien != _originalData.MaGiangVien;
					case GiangVienTamUngColumn.HoTen:
					return entityData.HoTen != _originalData.HoTen;
					case GiangVienTamUngColumn.SoTien:
					return entityData.SoTien != _originalData.SoTien;
					case GiangVienTamUngColumn.NgayTamUng:
					return entityData.NgayTamUng != _originalData.NgayTamUng;
					case GiangVienTamUngColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case GiangVienTamUngColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case GiangVienTamUngColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case GiangVienTamUngColumn.SoTiet:
					return entityData.SoTiet != _originalData.SoTiet;
					case GiangVienTamUngColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case GiangVienTamUngColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case GiangVienTamUngColumn.DotThanhToan:
					return entityData.DotThanhToan != _originalData.DotThanhToan;
					case GiangVienTamUngColumn.GioNghiaVuGiangDay:
					return entityData.GioNghiaVuGiangDay != _originalData.GioNghiaVuGiangDay;
					case GiangVienTamUngColumn.GioNghiaVuNckh:
					return entityData.GioNghiaVuNckh != _originalData.GioNghiaVuNckh;
					case GiangVienTamUngColumn.GioGiangDayQuyDoi:
					return entityData.GioGiangDayQuyDoi != _originalData.GioGiangDayQuyDoi;
					case GiangVienTamUngColumn.GioNckh:
					return entityData.GioNckh != _originalData.GioNckh;
					case GiangVienTamUngColumn.DonGia:
					return entityData.DonGia != _originalData.DonGia;
					case GiangVienTamUngColumn.SoGioQuyDoi:
					return entityData.SoGioQuyDoi != _originalData.SoGioQuyDoi;
					case GiangVienTamUngColumn.SoGioQuyDoiKhoiLuongCongThem:
					return entityData.SoGioQuyDoiKhoiLuongCongThem != _originalData.SoGioQuyDoiKhoiLuongCongThem;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GiangVienTamUngColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaQuanLy != _originalData.MaQuanLy;
			result = result || entityData.MaGiangVien != _originalData.MaGiangVien;
			result = result || entityData.HoTen != _originalData.HoTen;
			result = result || entityData.SoTien != _originalData.SoTien;
			result = result || entityData.NgayTamUng != _originalData.NgayTamUng;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.SoTiet != _originalData.SoTiet;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.DotThanhToan != _originalData.DotThanhToan;
			result = result || entityData.GioNghiaVuGiangDay != _originalData.GioNghiaVuGiangDay;
			result = result || entityData.GioNghiaVuNckh != _originalData.GioNghiaVuNckh;
			result = result || entityData.GioGiangDayQuyDoi != _originalData.GioGiangDayQuyDoi;
			result = result || entityData.GioNckh != _originalData.GioNckh;
			result = result || entityData.DonGia != _originalData.DonGia;
			result = result || entityData.SoGioQuyDoi != _originalData.SoGioQuyDoi;
			result = result || entityData.SoGioQuyDoiKhoiLuongCongThem != _originalData.SoGioQuyDoiKhoiLuongCongThem;
			return result;
		}	
		
		///<summary>
		///  Returns a GiangVienTamUng Entity with the original data.
		///</summary>
		public GiangVienTamUng GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGiangVienTamUng(
				_originalData.MaGiangVien,
				_originalData.HoTen,
				_originalData.SoTien,
				_originalData.NgayTamUng,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.GhiChu,
				_originalData.SoTiet,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.DotThanhToan,
				_originalData.GioNghiaVuGiangDay,
				_originalData.GioNghiaVuNckh,
				_originalData.GioGiangDayQuyDoi,
				_originalData.GioNckh,
				_originalData.DonGia,
				_originalData.SoGioQuyDoi,
				_originalData.SoGioQuyDoiKhoiLuongCongThem
				);
				
			return (GiangVienTamUng)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GiangVienTamUngBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GiangVienTamUngBase)
				return ValueEquals(this, (GiangVienTamUngBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GiangVienTamUngBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaQuanLy.GetHashCode() ^ 
					((this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString()).GetHashCode() ^ 
					((this.HoTen == null) ? string.Empty : this.HoTen.ToString()).GetHashCode() ^ 
					((this.SoTien == null) ? string.Empty : this.SoTien.ToString()).GetHashCode() ^ 
					((this.NgayTamUng == null) ? string.Empty : this.NgayTamUng.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.SoTiet == null) ? string.Empty : this.SoTiet.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.DotThanhToan == null) ? string.Empty : this.DotThanhToan.ToString()).GetHashCode() ^ 
					((this.GioNghiaVuGiangDay == null) ? string.Empty : this.GioNghiaVuGiangDay.ToString()).GetHashCode() ^ 
					((this.GioNghiaVuNckh == null) ? string.Empty : this.GioNghiaVuNckh.ToString()).GetHashCode() ^ 
					((this.GioGiangDayQuyDoi == null) ? string.Empty : this.GioGiangDayQuyDoi.ToString()).GetHashCode() ^ 
					((this.GioNckh == null) ? string.Empty : this.GioNckh.ToString()).GetHashCode() ^ 
					((this.DonGia == null) ? string.Empty : this.DonGia.ToString()).GetHashCode() ^ 
					((this.SoGioQuyDoi == null) ? string.Empty : this.SoGioQuyDoi.ToString()).GetHashCode() ^ 
					((this.SoGioQuyDoiKhoiLuongCongThem == null) ? string.Empty : this.SoGioQuyDoiKhoiLuongCongThem.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GiangVienTamUngBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GiangVienTamUngBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GiangVienTamUngBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GiangVienTamUngBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GiangVienTamUngBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GiangVienTamUngBase Object1, GiangVienTamUngBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if ( Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object2.MaGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object2.HoTen == null )
			{
				equal = false;
			}
			if ( Object1.SoTien != null && Object2.SoTien != null )
			{
				if (Object1.SoTien != Object2.SoTien)
					equal = false;
			}
			else if (Object1.SoTien == null ^ Object2.SoTien == null )
			{
				equal = false;
			}
			if ( Object1.NgayTamUng != null && Object2.NgayTamUng != null )
			{
				if (Object1.NgayTamUng != Object2.NgayTamUng)
					equal = false;
			}
			else if (Object1.NgayTamUng == null ^ Object2.NgayTamUng == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object2.SoTiet == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.DotThanhToan != null && Object2.DotThanhToan != null )
			{
				if (Object1.DotThanhToan != Object2.DotThanhToan)
					equal = false;
			}
			else if (Object1.DotThanhToan == null ^ Object2.DotThanhToan == null )
			{
				equal = false;
			}
			if ( Object1.GioNghiaVuGiangDay != null && Object2.GioNghiaVuGiangDay != null )
			{
				if (Object1.GioNghiaVuGiangDay != Object2.GioNghiaVuGiangDay)
					equal = false;
			}
			else if (Object1.GioNghiaVuGiangDay == null ^ Object2.GioNghiaVuGiangDay == null )
			{
				equal = false;
			}
			if ( Object1.GioNghiaVuNckh != null && Object2.GioNghiaVuNckh != null )
			{
				if (Object1.GioNghiaVuNckh != Object2.GioNghiaVuNckh)
					equal = false;
			}
			else if (Object1.GioNghiaVuNckh == null ^ Object2.GioNghiaVuNckh == null )
			{
				equal = false;
			}
			if ( Object1.GioGiangDayQuyDoi != null && Object2.GioGiangDayQuyDoi != null )
			{
				if (Object1.GioGiangDayQuyDoi != Object2.GioGiangDayQuyDoi)
					equal = false;
			}
			else if (Object1.GioGiangDayQuyDoi == null ^ Object2.GioGiangDayQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.GioNckh != null && Object2.GioNckh != null )
			{
				if (Object1.GioNckh != Object2.GioNckh)
					equal = false;
			}
			else if (Object1.GioNckh == null ^ Object2.GioNckh == null )
			{
				equal = false;
			}
			if ( Object1.DonGia != null && Object2.DonGia != null )
			{
				if (Object1.DonGia != Object2.DonGia)
					equal = false;
			}
			else if (Object1.DonGia == null ^ Object2.DonGia == null )
			{
				equal = false;
			}
			if ( Object1.SoGioQuyDoi != null && Object2.SoGioQuyDoi != null )
			{
				if (Object1.SoGioQuyDoi != Object2.SoGioQuyDoi)
					equal = false;
			}
			else if (Object1.SoGioQuyDoi == null ^ Object2.SoGioQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.SoGioQuyDoiKhoiLuongCongThem != null && Object2.SoGioQuyDoiKhoiLuongCongThem != null )
			{
				if (Object1.SoGioQuyDoiKhoiLuongCongThem != Object2.SoGioQuyDoiKhoiLuongCongThem)
					equal = false;
			}
			else if (Object1.SoGioQuyDoiKhoiLuongCongThem == null ^ Object2.SoGioQuyDoiKhoiLuongCongThem == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GiangVienTamUngBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GiangVienTamUngComparer GetComparer()
        {
            return new GiangVienTamUngComparer();
        }
        */

        // Comparer delegates back to GiangVienTamUng
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GiangVienTamUng rhs, GiangVienTamUngColumn which)
        {
            switch (which)
            {
            	
            	
            	case GiangVienTamUngColumn.MaQuanLy:
            		return this.MaQuanLy.CompareTo(rhs.MaQuanLy);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.MaGiangVien:
            		return this.MaGiangVien.Value.CompareTo(rhs.MaGiangVien.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.HoTen:
            		return this.HoTen.CompareTo(rhs.HoTen);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.SoTien:
            		return this.SoTien.Value.CompareTo(rhs.SoTien.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.NgayTamUng:
            		return this.NgayTamUng.Value.CompareTo(rhs.NgayTamUng.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.SoTiet:
            		return this.SoTiet.Value.CompareTo(rhs.SoTiet.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.NgayCapNhat:
            		return this.NgayCapNhat.CompareTo(rhs.NgayCapNhat);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.DotThanhToan:
            		return this.DotThanhToan.Value.CompareTo(rhs.DotThanhToan.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.GioNghiaVuGiangDay:
            		return this.GioNghiaVuGiangDay.Value.CompareTo(rhs.GioNghiaVuGiangDay.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.GioNghiaVuNckh:
            		return this.GioNghiaVuNckh.Value.CompareTo(rhs.GioNghiaVuNckh.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.GioGiangDayQuyDoi:
            		return this.GioGiangDayQuyDoi.Value.CompareTo(rhs.GioGiangDayQuyDoi.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.GioNckh:
            		return this.GioNckh.Value.CompareTo(rhs.GioNckh.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.DonGia:
            		return this.DonGia.Value.CompareTo(rhs.DonGia.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.SoGioQuyDoi:
            		return this.SoGioQuyDoi.Value.CompareTo(rhs.SoGioQuyDoi.Value);
            		
            		                 
            	
            	
            	case GiangVienTamUngColumn.SoGioQuyDoiKhoiLuongCongThem:
            		return this.SoGioQuyDoiKhoiLuongCongThem.Value.CompareTo(rhs.SoGioQuyDoiKhoiLuongCongThem.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GiangVienTamUngKey> Members
		
		// member variable for the EntityId property
		private GiangVienTamUngKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GiangVienTamUngKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GiangVienTamUngKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GiangVienTamUng")
					.Append("|").Append( this.MaQuanLy.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- MaQuanLy: {0}{19}- MaGiangVien: {1}{19}- HoTen: {2}{19}- SoTien: {3}{19}- NgayTamUng: {4}{19}- NamHoc: {5}{19}- HocKy: {6}{19}- GhiChu: {7}{19}- SoTiet: {8}{19}- NgayCapNhat: {9}{19}- NguoiCapNhat: {10}{19}- DotThanhToan: {11}{19}- GioNghiaVuGiangDay: {12}{19}- GioNghiaVuNckh: {13}{19}- GioGiangDayQuyDoi: {14}{19}- GioNckh: {15}{19}- DonGia: {16}{19}- SoGioQuyDoi: {17}{19}- SoGioQuyDoiKhoiLuongCongThem: {18}{19}{21}", 
				this.MaQuanLy,
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
				(this.SoTien == null) ? string.Empty : this.SoTien.ToString(),
				(this.NgayTamUng == null) ? string.Empty : this.NgayTamUng.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.DotThanhToan == null) ? string.Empty : this.DotThanhToan.ToString(),
				(this.GioNghiaVuGiangDay == null) ? string.Empty : this.GioNghiaVuGiangDay.ToString(),
				(this.GioNghiaVuNckh == null) ? string.Empty : this.GioNghiaVuNckh.ToString(),
				(this.GioGiangDayQuyDoi == null) ? string.Empty : this.GioGiangDayQuyDoi.ToString(),
				(this.GioNckh == null) ? string.Empty : this.GioNckh.ToString(),
				(this.DonGia == null) ? string.Empty : this.DonGia.ToString(),
				(this.SoGioQuyDoi == null) ? string.Empty : this.SoGioQuyDoi.ToString(),
				(this.SoGioQuyDoiKhoiLuongCongThem == null) ? string.Empty : this.SoGioQuyDoiKhoiLuongCongThem.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GiangVienTamUng' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GiangVienTamUngEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaQuanLy : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GiangVienTamUng"</remarks>
		public System.Int32 MaQuanLy;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		public System.Int32? MaGiangVien = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		public System.String HoTen = null;
		
		/// <summary>
		/// SoTien : 
		/// </summary>
		public System.Decimal? SoTien = null;
		
		/// <summary>
		/// NgayTamUng : 
		/// </summary>
		public System.DateTime? NgayTamUng = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		public System.Decimal? SoTiet = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.String NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// DotThanhToan : 
		/// </summary>
		public System.Int32? DotThanhToan = null;
		
		/// <summary>
		/// GioNghiaVuGiangDay : 
		/// </summary>
		public System.Decimal? GioNghiaVuGiangDay = null;
		
		/// <summary>
		/// GioNghiaVuNckh : 
		/// </summary>
		public System.Decimal? GioNghiaVuNckh = null;
		
		/// <summary>
		/// GioGiangDayQuyDoi : 
		/// </summary>
		public System.Decimal? GioGiangDayQuyDoi = null;
		
		/// <summary>
		/// GioNckh : 
		/// </summary>
		public System.Decimal? GioNckh = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		public System.Decimal? DonGia = null;
		
		/// <summary>
		/// SoGioQuyDoi : 
		/// </summary>
		public System.Decimal? SoGioQuyDoi = null;
		
		/// <summary>
		/// SoGioQuyDoiKhoiLuongCongThem : 
		/// </summary>
		public System.Decimal? SoGioQuyDoiKhoiLuongCongThem = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GiangVienTamUngEntityData _tmp = new GiangVienTamUngEntityData();
						
			_tmp.MaQuanLy = this.MaQuanLy;
			
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.HoTen = this.HoTen;
			_tmp.SoTien = this.SoTien;
			_tmp.NgayTamUng = this.NgayTamUng;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.GhiChu = this.GhiChu;
			_tmp.SoTiet = this.SoTiet;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.DotThanhToan = this.DotThanhToan;
			_tmp.GioNghiaVuGiangDay = this.GioNghiaVuGiangDay;
			_tmp.GioNghiaVuNckh = this.GioNghiaVuNckh;
			_tmp.GioGiangDayQuyDoi = this.GioGiangDayQuyDoi;
			_tmp.GioNckh = this.GioNckh;
			_tmp.DonGia = this.DonGia;
			_tmp.SoGioQuyDoi = this.SoGioQuyDoi;
			_tmp.SoGioQuyDoiKhoiLuongCongThem = this.SoGioQuyDoiKhoiLuongCongThem;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GiangVienTamUngEntityData _tmp = new GiangVienTamUngEntityData();
						
			_tmp.MaQuanLy = this.MaQuanLy;
			
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.HoTen = this.HoTen;
			_tmp.SoTien = this.SoTien;
			_tmp.NgayTamUng = this.NgayTamUng;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.GhiChu = this.GhiChu;
			_tmp.SoTiet = this.SoTiet;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.DotThanhToan = this.DotThanhToan;
			_tmp.GioNghiaVuGiangDay = this.GioNghiaVuGiangDay;
			_tmp.GioNghiaVuNckh = this.GioNghiaVuNckh;
			_tmp.GioGiangDayQuyDoi = this.GioGiangDayQuyDoi;
			_tmp.GioNckh = this.GioNckh;
			_tmp.DonGia = this.DonGia;
			_tmp.SoGioQuyDoi = this.SoGioQuyDoi;
			_tmp.SoGioQuyDoiKhoiLuongCongThem = this.SoGioQuyDoiKhoiLuongCongThem;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GiangVienTamUngColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GiangVienTamUngColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GiangVienTamUngColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GiangVienTamUngColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GiangVienTamUngColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GiangVienTamUngColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				GiangVienTamUngEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GiangVienTamUngEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GiangVienTamUngColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GiangVienTamUngColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GiangVienTamUngEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GiangVienTamUngEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GiangVienTamUngEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GiangVienTamUng"/> object.
	/// </remarks>
	public class GiangVienTamUngEventArgs : System.EventArgs
	{
		private GiangVienTamUngColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GiangVienTamUngEventArgs class.
		///</summary>
		public GiangVienTamUngEventArgs(GiangVienTamUngColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GiangVienTamUngEventArgs class.
		///</summary>
		public GiangVienTamUngEventArgs(GiangVienTamUngColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GiangVienTamUngColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GiangVienTamUngColumn" />
		public GiangVienTamUngColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GiangVienTamUng related events.
	///</summary>
	public delegate void GiangVienTamUngEventHandler(object sender, GiangVienTamUngEventArgs e);
	
	#region GiangVienTamUngComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GiangVienTamUngComparer : System.Collections.Generic.IComparer<GiangVienTamUng>
	{
		GiangVienTamUngColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GiangVienTamUngComparer"/> class.
        /// </summary>
		public GiangVienTamUngComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GiangVienTamUngComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GiangVienTamUngComparer(GiangVienTamUngColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="GiangVienTamUng"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="GiangVienTamUng"/> to compare.</param>
        /// <param name="b">The second <c>GiangVienTamUng</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GiangVienTamUng a, GiangVienTamUng b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GiangVienTamUng entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GiangVienTamUng a, GiangVienTamUng b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GiangVienTamUngColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GiangVienTamUngKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GiangVienTamUng"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GiangVienTamUngKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngKey class.
		/// </summary>
		public GiangVienTamUngKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngKey class.
		/// </summary>
		public GiangVienTamUngKey(GiangVienTamUngBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaQuanLy = entity.MaQuanLy;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngKey class.
		/// </summary>
		public GiangVienTamUngKey(System.Int32 _maQuanLy)
		{
			#region Init Properties

			this.MaQuanLy = _maQuanLy;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GiangVienTamUngBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GiangVienTamUngBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaQuanLy property
		private System.Int32 _maQuanLy;
		
		/// <summary>
		/// Gets or sets the MaQuanLy property.
		/// </summary>
		public System.Int32 MaQuanLy
		{
			get { return _maQuanLy; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaQuanLy = value;
				
				_maQuanLy = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaQuanLy = ( values["MaQuanLy"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaQuanLy"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaQuanLy", MaQuanLy);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaQuanLy: {0}{1}",
								MaQuanLy,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GiangVienTamUngColumn Enum
	
	/// <summary>
	/// Enumerate the GiangVienTamUng columns.
	/// </summary>
	[Serializable]
	public enum GiangVienTamUngColumn : int
	{
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Quan Ly")]
		[ColumnEnum("MaQuanLy", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaQuanLy = 1,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien = 2,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("Ho Ten")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		HoTen = 3,
		/// <summary>
		/// SoTien : 
		/// </summary>
		[EnumTextValue("So Tien")]
		[ColumnEnum("SoTien", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTien = 4,
		/// <summary>
		/// NgayTamUng : 
		/// </summary>
		[EnumTextValue("Ngay Tam Ung")]
		[ColumnEnum("NgayTamUng", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayTamUng = 5,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 6,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 7,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true)]
		GhiChu = 8,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("So Tiet")]
		[ColumnEnum("SoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet = 9,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgayCapNhat = 10,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 11,
		/// <summary>
		/// DotThanhToan : 
		/// </summary>
		[EnumTextValue("Dot Thanh Toan")]
		[ColumnEnum("DotThanhToan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DotThanhToan = 12,
		/// <summary>
		/// GioNghiaVuGiangDay : 
		/// </summary>
		[EnumTextValue("Gio Nghia Vu Giang Day")]
		[ColumnEnum("GioNghiaVuGiangDay", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioNghiaVuGiangDay = 13,
		/// <summary>
		/// GioNghiaVuNckh : 
		/// </summary>
		[EnumTextValue("Gio Nghia Vu Nckh")]
		[ColumnEnum("GioNghiaVuNckh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioNghiaVuNckh = 14,
		/// <summary>
		/// GioGiangDayQuyDoi : 
		/// </summary>
		[EnumTextValue("Gio Giang Day Quy Doi")]
		[ColumnEnum("GioGiangDayQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioGiangDayQuyDoi = 15,
		/// <summary>
		/// GioNckh : 
		/// </summary>
		[EnumTextValue("Gio Nckh")]
		[ColumnEnum("GioNckh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioNckh = 16,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("Don Gia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGia = 17,
		/// <summary>
		/// SoGioQuyDoi : 
		/// </summary>
		[EnumTextValue("So Gio Quy Doi")]
		[ColumnEnum("SoGioQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoGioQuyDoi = 18,
		/// <summary>
		/// SoGioQuyDoiKhoiLuongCongThem : 
		/// </summary>
		[EnumTextValue("So Gio Quy Doi Khoi Luong Cong Them")]
		[ColumnEnum("SoGioQuyDoiKhoiLuongCongThem", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoGioQuyDoiKhoiLuongCongThem = 19
	}//End enum

	#endregion GiangVienTamUngColumn Enum

} // end namespace
