
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThuLaoRaDeVhu.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThuLaoRaDeVhu' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThuLaoRaDeVhuBase : EntityBase, IThuLaoRaDeVhu, IEntityId<ThuLaoRaDeVhuKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThuLaoRaDeVhuEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThuLaoRaDeVhuEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThuLaoRaDeVhuEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThuLaoRaDeVhu> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoRaDeVhuEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoRaDeVhuEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThuLaoRaDeVhuBase"/> instance.
		///</summary>
		public ThuLaoRaDeVhuBase()
		{
			this.entityData = new ThuLaoRaDeVhuEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThuLaoRaDeVhuBase"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maDotThi"></param>
		///<param name="_tenDotThi"></param>
		///<param name="_thoiGianLamBai"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maHinhThucThi"></param>
		///<param name="_soLuongDe"></param>
		///<param name="_heSoExamination"></param>
		///<param name="_maDangDeThi"></param>
		///<param name="_tenDangDeThi"></param>
		///<param name="_kyThi"></param>
		///<param name="_heSoQuyDoi"></param>
		///<param name="_soTietQuyDoi"></param>
		///<param name="_tongTien"></param>
		///<param name="_chot"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		public ThuLaoRaDeVhuBase(System.String _namHoc, System.String _hocKy, System.Int32? _maGiangVien, 
			System.String _maDotThi, System.String _tenDotThi, System.String _thoiGianLamBai, 
			System.String _maLopHocPhan, System.String _maHinhThucThi, System.Int32? _soLuongDe, 
			System.Decimal? _heSoExamination, System.String _maDangDeThi, System.String _tenDangDeThi, 
			System.String _kyThi, System.Decimal? _heSoQuyDoi, System.Decimal? _soTietQuyDoi, 
			System.Decimal? _tongTien, System.Boolean? _chot, System.String _ngayCapNhat, System.String _nguoiCapNhat, 
			System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien)
		{
			this.entityData = new ThuLaoRaDeVhuEntityData();
			this.backupData = null;

			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaGiangVien = _maGiangVien;
			this.MaDotThi = _maDotThi;
			this.TenDotThi = _tenDotThi;
			this.ThoiGianLamBai = _thoiGianLamBai;
			this.MaLopHocPhan = _maLopHocPhan;
			this.MaHinhThucThi = _maHinhThucThi;
			this.SoLuongDe = _soLuongDe;
			this.HeSoExamination = _heSoExamination;
			this.MaDangDeThi = _maDangDeThi;
			this.TenDangDeThi = _tenDangDeThi;
			this.KyThi = _kyThi;
			this.HeSoQuyDoi = _heSoQuyDoi;
			this.SoTietQuyDoi = _soTietQuyDoi;
			this.TongTien = _tongTien;
			this.Chot = _chot;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.MaHocHam = _maHocHam;
			this.MaHocVi = _maHocVi;
			this.MaLoaiGiangVien = _maLoaiGiangVien;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThuLaoRaDeVhu"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maDotThi"></param>
		///<param name="_tenDotThi"></param>
		///<param name="_thoiGianLamBai"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maHinhThucThi"></param>
		///<param name="_soLuongDe"></param>
		///<param name="_heSoExamination"></param>
		///<param name="_maDangDeThi"></param>
		///<param name="_tenDangDeThi"></param>
		///<param name="_kyThi"></param>
		///<param name="_heSoQuyDoi"></param>
		///<param name="_soTietQuyDoi"></param>
		///<param name="_tongTien"></param>
		///<param name="_chot"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		public static ThuLaoRaDeVhu CreateThuLaoRaDeVhu(System.String _namHoc, System.String _hocKy, System.Int32? _maGiangVien, 
			System.String _maDotThi, System.String _tenDotThi, System.String _thoiGianLamBai, 
			System.String _maLopHocPhan, System.String _maHinhThucThi, System.Int32? _soLuongDe, 
			System.Decimal? _heSoExamination, System.String _maDangDeThi, System.String _tenDangDeThi, 
			System.String _kyThi, System.Decimal? _heSoQuyDoi, System.Decimal? _soTietQuyDoi, 
			System.Decimal? _tongTien, System.Boolean? _chot, System.String _ngayCapNhat, System.String _nguoiCapNhat, 
			System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien)
		{
			ThuLaoRaDeVhu newThuLaoRaDeVhu = new ThuLaoRaDeVhu();
			newThuLaoRaDeVhu.NamHoc = _namHoc;
			newThuLaoRaDeVhu.HocKy = _hocKy;
			newThuLaoRaDeVhu.MaGiangVien = _maGiangVien;
			newThuLaoRaDeVhu.MaDotThi = _maDotThi;
			newThuLaoRaDeVhu.TenDotThi = _tenDotThi;
			newThuLaoRaDeVhu.ThoiGianLamBai = _thoiGianLamBai;
			newThuLaoRaDeVhu.MaLopHocPhan = _maLopHocPhan;
			newThuLaoRaDeVhu.MaHinhThucThi = _maHinhThucThi;
			newThuLaoRaDeVhu.SoLuongDe = _soLuongDe;
			newThuLaoRaDeVhu.HeSoExamination = _heSoExamination;
			newThuLaoRaDeVhu.MaDangDeThi = _maDangDeThi;
			newThuLaoRaDeVhu.TenDangDeThi = _tenDangDeThi;
			newThuLaoRaDeVhu.KyThi = _kyThi;
			newThuLaoRaDeVhu.HeSoQuyDoi = _heSoQuyDoi;
			newThuLaoRaDeVhu.SoTietQuyDoi = _soTietQuyDoi;
			newThuLaoRaDeVhu.TongTien = _tongTien;
			newThuLaoRaDeVhu.Chot = _chot;
			newThuLaoRaDeVhu.NgayCapNhat = _ngayCapNhat;
			newThuLaoRaDeVhu.NguoiCapNhat = _nguoiCapNhat;
			newThuLaoRaDeVhu.MaHocHam = _maHocHam;
			newThuLaoRaDeVhu.MaHocVi = _maHocVi;
			newThuLaoRaDeVhu.MaLoaiGiangVien = _maLoaiGiangVien;
			return newThuLaoRaDeVhu;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this.entityData.MaGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaGiangVien == value)
					return;
				
                OnPropertyChanging("MaGiangVien");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.MaGiangVien, this.entityData.MaGiangVien);
				this.entityData.MaGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.MaGiangVien, this.entityData.MaGiangVien);
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaDotThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaDotThi
		{
			get
			{
				return this.entityData.MaDotThi; 
			}
			
			set
			{
				if (this.entityData.MaDotThi == value)
					return;
				
                OnPropertyChanging("MaDotThi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.MaDotThi, this.entityData.MaDotThi);
				this.entityData.MaDotThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.MaDotThi, this.entityData.MaDotThi);
				OnPropertyChanged("MaDotThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenDotThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenDotThi
		{
			get
			{
				return this.entityData.TenDotThi; 
			}
			
			set
			{
				if (this.entityData.TenDotThi == value)
					return;
				
                OnPropertyChanging("TenDotThi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.TenDotThi, this.entityData.TenDotThi);
				this.entityData.TenDotThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.TenDotThi, this.entityData.TenDotThi);
				OnPropertyChanged("TenDotThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThoiGianLamBai property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ThoiGianLamBai
		{
			get
			{
				return this.entityData.ThoiGianLamBai; 
			}
			
			set
			{
				if (this.entityData.ThoiGianLamBai == value)
					return;
				
                OnPropertyChanging("ThoiGianLamBai");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.ThoiGianLamBai, this.entityData.ThoiGianLamBai);
				this.entityData.ThoiGianLamBai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.ThoiGianLamBai, this.entityData.ThoiGianLamBai);
				OnPropertyChanged("ThoiGianLamBai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHinhThucThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaHinhThucThi
		{
			get
			{
				return this.entityData.MaHinhThucThi; 
			}
			
			set
			{
				if (this.entityData.MaHinhThucThi == value)
					return;
				
                OnPropertyChanging("MaHinhThucThi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.MaHinhThucThi, this.entityData.MaHinhThucThi);
				this.entityData.MaHinhThucThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.MaHinhThucThi, this.entityData.MaHinhThucThi);
				OnPropertyChanged("MaHinhThucThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoLuongDe property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoLuongDe
		{
			get
			{
				return this.entityData.SoLuongDe; 
			}
			
			set
			{
				if (this.entityData.SoLuongDe == value)
					return;
				
                OnPropertyChanging("SoLuongDe");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.SoLuongDe, this.entityData.SoLuongDe);
				this.entityData.SoLuongDe = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.SoLuongDe, this.entityData.SoLuongDe);
				OnPropertyChanged("SoLuongDe");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoExamination property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoExamination
		{
			get
			{
				return this.entityData.HeSoExamination; 
			}
			
			set
			{
				if (this.entityData.HeSoExamination == value)
					return;
				
                OnPropertyChanging("HeSoExamination");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.HeSoExamination, this.entityData.HeSoExamination);
				this.entityData.HeSoExamination = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.HeSoExamination, this.entityData.HeSoExamination);
				OnPropertyChanged("HeSoExamination");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaDangDeThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaDangDeThi
		{
			get
			{
				return this.entityData.MaDangDeThi; 
			}
			
			set
			{
				if (this.entityData.MaDangDeThi == value)
					return;
				
                OnPropertyChanging("MaDangDeThi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.MaDangDeThi, this.entityData.MaDangDeThi);
				this.entityData.MaDangDeThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.MaDangDeThi, this.entityData.MaDangDeThi);
				OnPropertyChanged("MaDangDeThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenDangDeThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenDangDeThi
		{
			get
			{
				return this.entityData.TenDangDeThi; 
			}
			
			set
			{
				if (this.entityData.TenDangDeThi == value)
					return;
				
                OnPropertyChanging("TenDangDeThi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.TenDangDeThi, this.entityData.TenDangDeThi);
				this.entityData.TenDangDeThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.TenDangDeThi, this.entityData.TenDangDeThi);
				OnPropertyChanged("TenDangDeThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KyThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String KyThi
		{
			get
			{
				return this.entityData.KyThi; 
			}
			
			set
			{
				if (this.entityData.KyThi == value)
					return;
				
                OnPropertyChanging("KyThi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.KyThi, this.entityData.KyThi);
				this.entityData.KyThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.KyThi, this.entityData.KyThi);
				OnPropertyChanged("KyThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoQuyDoi
		{
			get
			{
				return this.entityData.HeSoQuyDoi; 
			}
			
			set
			{
				if (this.entityData.HeSoQuyDoi == value)
					return;
				
                OnPropertyChanging("HeSoQuyDoi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.HeSoQuyDoi, this.entityData.HeSoQuyDoi);
				this.entityData.HeSoQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.HeSoQuyDoi, this.entityData.HeSoQuyDoi);
				OnPropertyChanged("HeSoQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTietQuyDoi
		{
			get
			{
				return this.entityData.SoTietQuyDoi; 
			}
			
			set
			{
				if (this.entityData.SoTietQuyDoi == value)
					return;
				
                OnPropertyChanging("SoTietQuyDoi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.SoTietQuyDoi, this.entityData.SoTietQuyDoi);
				this.entityData.SoTietQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.SoTietQuyDoi, this.entityData.SoTietQuyDoi);
				OnPropertyChanged("SoTietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongTien property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongTien
		{
			get
			{
				return this.entityData.TongTien; 
			}
			
			set
			{
				if (this.entityData.TongTien == value)
					return;
				
                OnPropertyChanging("TongTien");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.TongTien, this.entityData.TongTien);
				this.entityData.TongTien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.TongTien, this.entityData.TongTien);
				OnPropertyChanged("TongTien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Chot property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Chot
		{
			get
			{
				return this.entityData.Chot; 
			}
			
			set
			{
				if (this.entityData.Chot == value)
					return;
				
                OnPropertyChanging("Chot");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.Chot, this.entityData.Chot);
				this.entityData.Chot = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.Chot, this.entityData.Chot);
				OnPropertyChanged("Chot");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this.entityData.MaHocVi; 
			}
			
			set
			{
				if (this.entityData.MaHocVi == value)
					return;
				
                OnPropertyChanging("MaHocVi");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.MaHocVi, this.entityData.MaHocVi);
				this.entityData.MaHocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.MaHocVi, this.entityData.MaHocVi);
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this.entityData.MaLoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaLoaiGiangVien == value)
					return;
				
                OnPropertyChanging("MaLoaiGiangVien");                    
				OnColumnChanging(ThuLaoRaDeVhuColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				this.entityData.MaLoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoRaDeVhuColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaDotThi", "Ma Dot Thi", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenDotThi", "Ten Dot Thi", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThoiGianLamBai", "Thoi Gian Lam Bai", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaHinhThucThi", "Ma Hinh Thuc Thi", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaDangDeThi", "Ma Dang De Thi", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenDangDeThi", "Ten Dang De Thi", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KyThi", "Ky Thi", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayCapNhat", "Ngay Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThuLaoRaDeVhu"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "NamHoc", "HocKy", "MaGiangVien", "MaDotThi", "TenDotThi", "ThoiGianLamBai", "MaLopHocPhan", "MaHinhThucThi", "SoLuongDe", "HeSoExamination", "MaDangDeThi", "TenDangDeThi", "KyThi", "HeSoQuyDoi", "SoTietQuyDoi", "TongTien", "Chot", "NgayCapNhat", "NguoiCapNhat", "MaHocHam", "MaHocVi", "MaLoaiGiangVien"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThuLaoRaDeVhuEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThuLaoRaDeVhu) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThuLaoRaDeVhu>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThuLaoRaDeVhu);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThuLaoRaDeVhu Entity 
		///</summary>
		protected virtual ThuLaoRaDeVhu Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThuLaoRaDeVhu copy = new ThuLaoRaDeVhu();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaDotThi = this.MaDotThi;
				copy.TenDotThi = this.TenDotThi;
				copy.ThoiGianLamBai = this.ThoiGianLamBai;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaHinhThucThi = this.MaHinhThucThi;
				copy.SoLuongDe = this.SoLuongDe;
				copy.HeSoExamination = this.HeSoExamination;
				copy.MaDangDeThi = this.MaDangDeThi;
				copy.TenDangDeThi = this.TenDangDeThi;
				copy.KyThi = this.KyThi;
				copy.HeSoQuyDoi = this.HeSoQuyDoi;
				copy.SoTietQuyDoi = this.SoTietQuyDoi;
				copy.TongTien = this.TongTien;
				copy.Chot = this.Chot;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThuLaoRaDeVhu Entity 
		///</summary>
		public virtual ThuLaoRaDeVhu Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThuLaoRaDeVhu Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThuLaoRaDeVhu DeepCopy()
		{
			return EntityHelper.Clone<ThuLaoRaDeVhu>(this as ThuLaoRaDeVhu);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThuLaoRaDeVhuEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThuLaoRaDeVhuEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThuLaoRaDeVhuEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThuLaoRaDeVhuColumn column)
		{
			switch(column)
			{
					case ThuLaoRaDeVhuColumn.Id:
					return entityData.Id != _originalData.Id;
					case ThuLaoRaDeVhuColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case ThuLaoRaDeVhuColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case ThuLaoRaDeVhuColumn.MaGiangVien:
					return entityData.MaGiangVien != _originalData.MaGiangVien;
					case ThuLaoRaDeVhuColumn.MaDotThi:
					return entityData.MaDotThi != _originalData.MaDotThi;
					case ThuLaoRaDeVhuColumn.TenDotThi:
					return entityData.TenDotThi != _originalData.TenDotThi;
					case ThuLaoRaDeVhuColumn.ThoiGianLamBai:
					return entityData.ThoiGianLamBai != _originalData.ThoiGianLamBai;
					case ThuLaoRaDeVhuColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case ThuLaoRaDeVhuColumn.MaHinhThucThi:
					return entityData.MaHinhThucThi != _originalData.MaHinhThucThi;
					case ThuLaoRaDeVhuColumn.SoLuongDe:
					return entityData.SoLuongDe != _originalData.SoLuongDe;
					case ThuLaoRaDeVhuColumn.HeSoExamination:
					return entityData.HeSoExamination != _originalData.HeSoExamination;
					case ThuLaoRaDeVhuColumn.MaDangDeThi:
					return entityData.MaDangDeThi != _originalData.MaDangDeThi;
					case ThuLaoRaDeVhuColumn.TenDangDeThi:
					return entityData.TenDangDeThi != _originalData.TenDangDeThi;
					case ThuLaoRaDeVhuColumn.KyThi:
					return entityData.KyThi != _originalData.KyThi;
					case ThuLaoRaDeVhuColumn.HeSoQuyDoi:
					return entityData.HeSoQuyDoi != _originalData.HeSoQuyDoi;
					case ThuLaoRaDeVhuColumn.SoTietQuyDoi:
					return entityData.SoTietQuyDoi != _originalData.SoTietQuyDoi;
					case ThuLaoRaDeVhuColumn.TongTien:
					return entityData.TongTien != _originalData.TongTien;
					case ThuLaoRaDeVhuColumn.Chot:
					return entityData.Chot != _originalData.Chot;
					case ThuLaoRaDeVhuColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case ThuLaoRaDeVhuColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case ThuLaoRaDeVhuColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case ThuLaoRaDeVhuColumn.MaHocVi:
					return entityData.MaHocVi != _originalData.MaHocVi;
					case ThuLaoRaDeVhuColumn.MaLoaiGiangVien:
					return entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThuLaoRaDeVhuColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaGiangVien != _originalData.MaGiangVien;
			result = result || entityData.MaDotThi != _originalData.MaDotThi;
			result = result || entityData.TenDotThi != _originalData.TenDotThi;
			result = result || entityData.ThoiGianLamBai != _originalData.ThoiGianLamBai;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.MaHinhThucThi != _originalData.MaHinhThucThi;
			result = result || entityData.SoLuongDe != _originalData.SoLuongDe;
			result = result || entityData.HeSoExamination != _originalData.HeSoExamination;
			result = result || entityData.MaDangDeThi != _originalData.MaDangDeThi;
			result = result || entityData.TenDangDeThi != _originalData.TenDangDeThi;
			result = result || entityData.KyThi != _originalData.KyThi;
			result = result || entityData.HeSoQuyDoi != _originalData.HeSoQuyDoi;
			result = result || entityData.SoTietQuyDoi != _originalData.SoTietQuyDoi;
			result = result || entityData.TongTien != _originalData.TongTien;
			result = result || entityData.Chot != _originalData.Chot;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.MaHocVi != _originalData.MaHocVi;
			result = result || entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
			return result;
		}	
		
		///<summary>
		///  Returns a ThuLaoRaDeVhu Entity with the original data.
		///</summary>
		public ThuLaoRaDeVhu GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThuLaoRaDeVhu(
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaGiangVien,
				_originalData.MaDotThi,
				_originalData.TenDotThi,
				_originalData.ThoiGianLamBai,
				_originalData.MaLopHocPhan,
				_originalData.MaHinhThucThi,
				_originalData.SoLuongDe,
				_originalData.HeSoExamination,
				_originalData.MaDangDeThi,
				_originalData.TenDangDeThi,
				_originalData.KyThi,
				_originalData.HeSoQuyDoi,
				_originalData.SoTietQuyDoi,
				_originalData.TongTien,
				_originalData.Chot,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.MaHocHam,
				_originalData.MaHocVi,
				_originalData.MaLoaiGiangVien
				);
				
			return (ThuLaoRaDeVhu)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThuLaoRaDeVhuBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThuLaoRaDeVhuBase)
				return ValueEquals(this, (ThuLaoRaDeVhuBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThuLaoRaDeVhuBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString()).GetHashCode() ^ 
					((this.MaDotThi == null) ? string.Empty : this.MaDotThi.ToString()).GetHashCode() ^ 
					((this.TenDotThi == null) ? string.Empty : this.TenDotThi.ToString()).GetHashCode() ^ 
					((this.ThoiGianLamBai == null) ? string.Empty : this.ThoiGianLamBai.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.MaHinhThucThi == null) ? string.Empty : this.MaHinhThucThi.ToString()).GetHashCode() ^ 
					((this.SoLuongDe == null) ? string.Empty : this.SoLuongDe.ToString()).GetHashCode() ^ 
					((this.HeSoExamination == null) ? string.Empty : this.HeSoExamination.ToString()).GetHashCode() ^ 
					((this.MaDangDeThi == null) ? string.Empty : this.MaDangDeThi.ToString()).GetHashCode() ^ 
					((this.TenDangDeThi == null) ? string.Empty : this.TenDangDeThi.ToString()).GetHashCode() ^ 
					((this.KyThi == null) ? string.Empty : this.KyThi.ToString()).GetHashCode() ^ 
					((this.HeSoQuyDoi == null) ? string.Empty : this.HeSoQuyDoi.ToString()).GetHashCode() ^ 
					((this.SoTietQuyDoi == null) ? string.Empty : this.SoTietQuyDoi.ToString()).GetHashCode() ^ 
					((this.TongTien == null) ? string.Empty : this.TongTien.ToString()).GetHashCode() ^ 
					((this.Chot == null) ? string.Empty : this.Chot.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString()).GetHashCode() ^ 
					((this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThuLaoRaDeVhuBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThuLaoRaDeVhuBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThuLaoRaDeVhuBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThuLaoRaDeVhuBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThuLaoRaDeVhuBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThuLaoRaDeVhuBase Object1, ThuLaoRaDeVhuBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object2.MaGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.MaDotThi != null && Object2.MaDotThi != null )
			{
				if (Object1.MaDotThi != Object2.MaDotThi)
					equal = false;
			}
			else if (Object1.MaDotThi == null ^ Object2.MaDotThi == null )
			{
				equal = false;
			}
			if ( Object1.TenDotThi != null && Object2.TenDotThi != null )
			{
				if (Object1.TenDotThi != Object2.TenDotThi)
					equal = false;
			}
			else if (Object1.TenDotThi == null ^ Object2.TenDotThi == null )
			{
				equal = false;
			}
			if ( Object1.ThoiGianLamBai != null && Object2.ThoiGianLamBai != null )
			{
				if (Object1.ThoiGianLamBai != Object2.ThoiGianLamBai)
					equal = false;
			}
			else if (Object1.ThoiGianLamBai == null ^ Object2.ThoiGianLamBai == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaHinhThucThi != null && Object2.MaHinhThucThi != null )
			{
				if (Object1.MaHinhThucThi != Object2.MaHinhThucThi)
					equal = false;
			}
			else if (Object1.MaHinhThucThi == null ^ Object2.MaHinhThucThi == null )
			{
				equal = false;
			}
			if ( Object1.SoLuongDe != null && Object2.SoLuongDe != null )
			{
				if (Object1.SoLuongDe != Object2.SoLuongDe)
					equal = false;
			}
			else if (Object1.SoLuongDe == null ^ Object2.SoLuongDe == null )
			{
				equal = false;
			}
			if ( Object1.HeSoExamination != null && Object2.HeSoExamination != null )
			{
				if (Object1.HeSoExamination != Object2.HeSoExamination)
					equal = false;
			}
			else if (Object1.HeSoExamination == null ^ Object2.HeSoExamination == null )
			{
				equal = false;
			}
			if ( Object1.MaDangDeThi != null && Object2.MaDangDeThi != null )
			{
				if (Object1.MaDangDeThi != Object2.MaDangDeThi)
					equal = false;
			}
			else if (Object1.MaDangDeThi == null ^ Object2.MaDangDeThi == null )
			{
				equal = false;
			}
			if ( Object1.TenDangDeThi != null && Object2.TenDangDeThi != null )
			{
				if (Object1.TenDangDeThi != Object2.TenDangDeThi)
					equal = false;
			}
			else if (Object1.TenDangDeThi == null ^ Object2.TenDangDeThi == null )
			{
				equal = false;
			}
			if ( Object1.KyThi != null && Object2.KyThi != null )
			{
				if (Object1.KyThi != Object2.KyThi)
					equal = false;
			}
			else if (Object1.KyThi == null ^ Object2.KyThi == null )
			{
				equal = false;
			}
			if ( Object1.HeSoQuyDoi != null && Object2.HeSoQuyDoi != null )
			{
				if (Object1.HeSoQuyDoi != Object2.HeSoQuyDoi)
					equal = false;
			}
			else if (Object1.HeSoQuyDoi == null ^ Object2.HeSoQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.SoTietQuyDoi != null && Object2.SoTietQuyDoi != null )
			{
				if (Object1.SoTietQuyDoi != Object2.SoTietQuyDoi)
					equal = false;
			}
			else if (Object1.SoTietQuyDoi == null ^ Object2.SoTietQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.TongTien != null && Object2.TongTien != null )
			{
				if (Object1.TongTien != Object2.TongTien)
					equal = false;
			}
			else if (Object1.TongTien == null ^ Object2.TongTien == null )
			{
				equal = false;
			}
			if ( Object1.Chot != null && Object2.Chot != null )
			{
				if (Object1.Chot != Object2.Chot)
					equal = false;
			}
			else if (Object1.Chot == null ^ Object2.Chot == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object2.MaHocVi == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object2.MaLoaiGiangVien == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThuLaoRaDeVhuBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThuLaoRaDeVhuComparer GetComparer()
        {
            return new ThuLaoRaDeVhuComparer();
        }
        */

        // Comparer delegates back to ThuLaoRaDeVhu
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThuLaoRaDeVhu rhs, ThuLaoRaDeVhuColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThuLaoRaDeVhuColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.MaGiangVien:
            		return this.MaGiangVien.Value.CompareTo(rhs.MaGiangVien.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.MaDotThi:
            		return this.MaDotThi.CompareTo(rhs.MaDotThi);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.TenDotThi:
            		return this.TenDotThi.CompareTo(rhs.TenDotThi);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.ThoiGianLamBai:
            		return this.ThoiGianLamBai.CompareTo(rhs.ThoiGianLamBai);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.MaHinhThucThi:
            		return this.MaHinhThucThi.CompareTo(rhs.MaHinhThucThi);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.SoLuongDe:
            		return this.SoLuongDe.Value.CompareTo(rhs.SoLuongDe.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.HeSoExamination:
            		return this.HeSoExamination.Value.CompareTo(rhs.HeSoExamination.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.MaDangDeThi:
            		return this.MaDangDeThi.CompareTo(rhs.MaDangDeThi);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.TenDangDeThi:
            		return this.TenDangDeThi.CompareTo(rhs.TenDangDeThi);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.KyThi:
            		return this.KyThi.CompareTo(rhs.KyThi);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.HeSoQuyDoi:
            		return this.HeSoQuyDoi.Value.CompareTo(rhs.HeSoQuyDoi.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.SoTietQuyDoi:
            		return this.SoTietQuyDoi.Value.CompareTo(rhs.SoTietQuyDoi.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.TongTien:
            		return this.TongTien.Value.CompareTo(rhs.TongTien.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.Chot:
            		return this.Chot.Value.CompareTo(rhs.Chot.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.NgayCapNhat:
            		return this.NgayCapNhat.CompareTo(rhs.NgayCapNhat);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.MaHocVi:
            		return this.MaHocVi.Value.CompareTo(rhs.MaHocVi.Value);
            		
            		                 
            	
            	
            	case ThuLaoRaDeVhuColumn.MaLoaiGiangVien:
            		return this.MaLoaiGiangVien.Value.CompareTo(rhs.MaLoaiGiangVien.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThuLaoRaDeVhuKey> Members
		
		// member variable for the EntityId property
		private ThuLaoRaDeVhuKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThuLaoRaDeVhuKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThuLaoRaDeVhuKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThuLaoRaDeVhu")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- Id: {0}{23}- NamHoc: {1}{23}- HocKy: {2}{23}- MaGiangVien: {3}{23}- MaDotThi: {4}{23}- TenDotThi: {5}{23}- ThoiGianLamBai: {6}{23}- MaLopHocPhan: {7}{23}- MaHinhThucThi: {8}{23}- SoLuongDe: {9}{23}- HeSoExamination: {10}{23}- MaDangDeThi: {11}{23}- TenDangDeThi: {12}{23}- KyThi: {13}{23}- HeSoQuyDoi: {14}{23}- SoTietQuyDoi: {15}{23}- TongTien: {16}{23}- Chot: {17}{23}- NgayCapNhat: {18}{23}- NguoiCapNhat: {19}{23}- MaHocHam: {20}{23}- MaHocVi: {21}{23}- MaLoaiGiangVien: {22}{23}{25}", 
				this.Id,
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
				(this.MaDotThi == null) ? string.Empty : this.MaDotThi.ToString(),
				(this.TenDotThi == null) ? string.Empty : this.TenDotThi.ToString(),
				(this.ThoiGianLamBai == null) ? string.Empty : this.ThoiGianLamBai.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.MaHinhThucThi == null) ? string.Empty : this.MaHinhThucThi.ToString(),
				(this.SoLuongDe == null) ? string.Empty : this.SoLuongDe.ToString(),
				(this.HeSoExamination == null) ? string.Empty : this.HeSoExamination.ToString(),
				(this.MaDangDeThi == null) ? string.Empty : this.MaDangDeThi.ToString(),
				(this.TenDangDeThi == null) ? string.Empty : this.TenDangDeThi.ToString(),
				(this.KyThi == null) ? string.Empty : this.KyThi.ToString(),
				(this.HeSoQuyDoi == null) ? string.Empty : this.HeSoQuyDoi.ToString(),
				(this.SoTietQuyDoi == null) ? string.Empty : this.SoTietQuyDoi.ToString(),
				(this.TongTien == null) ? string.Empty : this.TongTien.ToString(),
				(this.Chot == null) ? string.Empty : this.Chot.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThuLaoRaDeVhu' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThuLaoRaDeVhuEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThuLaoRaDeVhu"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		public System.Int32? MaGiangVien = null;
		
		/// <summary>
		/// MaDotThi : 
		/// </summary>
		public System.String MaDotThi = null;
		
		/// <summary>
		/// TenDotThi : 
		/// </summary>
		public System.String TenDotThi = null;
		
		/// <summary>
		/// ThoiGianLamBai : 
		/// </summary>
		public System.String ThoiGianLamBai = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// MaHinhThucThi : 
		/// </summary>
		public System.String MaHinhThucThi = null;
		
		/// <summary>
		/// SoLuongDe : 
		/// </summary>
		public System.Int32? SoLuongDe = null;
		
		/// <summary>
		/// HeSoExamination : 
		/// </summary>
		public System.Decimal? HeSoExamination = null;
		
		/// <summary>
		/// MaDangDeThi : 
		/// </summary>
		public System.String MaDangDeThi = null;
		
		/// <summary>
		/// TenDangDeThi : 
		/// </summary>
		public System.String TenDangDeThi = null;
		
		/// <summary>
		/// KyThi : 
		/// </summary>
		public System.String KyThi = null;
		
		/// <summary>
		/// HeSoQuyDoi : 
		/// </summary>
		public System.Decimal? HeSoQuyDoi = null;
		
		/// <summary>
		/// SoTietQuyDoi : 
		/// </summary>
		public System.Decimal? SoTietQuyDoi = null;
		
		/// <summary>
		/// TongTien : 
		/// </summary>
		public System.Decimal? TongTien = null;
		
		/// <summary>
		/// Chot : 
		/// </summary>
		public System.Boolean? Chot = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.String NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		public System.Int32? MaHocVi = null;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		public System.Int32? MaLoaiGiangVien = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThuLaoRaDeVhuEntityData _tmp = new ThuLaoRaDeVhuEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.MaDotThi = this.MaDotThi;
			_tmp.TenDotThi = this.TenDotThi;
			_tmp.ThoiGianLamBai = this.ThoiGianLamBai;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaHinhThucThi = this.MaHinhThucThi;
			_tmp.SoLuongDe = this.SoLuongDe;
			_tmp.HeSoExamination = this.HeSoExamination;
			_tmp.MaDangDeThi = this.MaDangDeThi;
			_tmp.TenDangDeThi = this.TenDangDeThi;
			_tmp.KyThi = this.KyThi;
			_tmp.HeSoQuyDoi = this.HeSoQuyDoi;
			_tmp.SoTietQuyDoi = this.SoTietQuyDoi;
			_tmp.TongTien = this.TongTien;
			_tmp.Chot = this.Chot;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThuLaoRaDeVhuEntityData _tmp = new ThuLaoRaDeVhuEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.MaDotThi = this.MaDotThi;
			_tmp.TenDotThi = this.TenDotThi;
			_tmp.ThoiGianLamBai = this.ThoiGianLamBai;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaHinhThucThi = this.MaHinhThucThi;
			_tmp.SoLuongDe = this.SoLuongDe;
			_tmp.HeSoExamination = this.HeSoExamination;
			_tmp.MaDangDeThi = this.MaDangDeThi;
			_tmp.TenDangDeThi = this.TenDangDeThi;
			_tmp.KyThi = this.KyThi;
			_tmp.HeSoQuyDoi = this.HeSoQuyDoi;
			_tmp.SoTietQuyDoi = this.SoTietQuyDoi;
			_tmp.TongTien = this.TongTien;
			_tmp.Chot = this.Chot;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoRaDeVhuColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThuLaoRaDeVhuColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoRaDeVhuColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThuLaoRaDeVhuColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoRaDeVhuColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThuLaoRaDeVhuColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThuLaoRaDeVhuEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThuLaoRaDeVhuEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoRaDeVhuColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThuLaoRaDeVhuColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThuLaoRaDeVhuEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThuLaoRaDeVhuEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThuLaoRaDeVhuEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThuLaoRaDeVhu"/> object.
	/// </remarks>
	public class ThuLaoRaDeVhuEventArgs : System.EventArgs
	{
		private ThuLaoRaDeVhuColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoRaDeVhuEventArgs class.
		///</summary>
		public ThuLaoRaDeVhuEventArgs(ThuLaoRaDeVhuColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoRaDeVhuEventArgs class.
		///</summary>
		public ThuLaoRaDeVhuEventArgs(ThuLaoRaDeVhuColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThuLaoRaDeVhuColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThuLaoRaDeVhuColumn" />
		public ThuLaoRaDeVhuColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThuLaoRaDeVhu related events.
	///</summary>
	public delegate void ThuLaoRaDeVhuEventHandler(object sender, ThuLaoRaDeVhuEventArgs e);
	
	#region ThuLaoRaDeVhuComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThuLaoRaDeVhuComparer : System.Collections.Generic.IComparer<ThuLaoRaDeVhu>
	{
		ThuLaoRaDeVhuColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoRaDeVhuComparer"/> class.
        /// </summary>
		public ThuLaoRaDeVhuComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoRaDeVhuComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThuLaoRaDeVhuComparer(ThuLaoRaDeVhuColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThuLaoRaDeVhu"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThuLaoRaDeVhu"/> to compare.</param>
        /// <param name="b">The second <c>ThuLaoRaDeVhu</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThuLaoRaDeVhu a, ThuLaoRaDeVhu b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThuLaoRaDeVhu entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThuLaoRaDeVhu a, ThuLaoRaDeVhu b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThuLaoRaDeVhuColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThuLaoRaDeVhuKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThuLaoRaDeVhu"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThuLaoRaDeVhuKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuKey class.
		/// </summary>
		public ThuLaoRaDeVhuKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuKey class.
		/// </summary>
		public ThuLaoRaDeVhuKey(ThuLaoRaDeVhuBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuKey class.
		/// </summary>
		public ThuLaoRaDeVhuKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThuLaoRaDeVhuBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThuLaoRaDeVhuBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThuLaoRaDeVhuColumn Enum
	
	/// <summary>
	/// Enumerate the ThuLaoRaDeVhu columns.
	/// </summary>
	[Serializable]
	public enum ThuLaoRaDeVhuColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 2,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 3,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien = 4,
		/// <summary>
		/// MaDotThi : 
		/// </summary>
		[EnumTextValue("Ma Dot Thi")]
		[ColumnEnum("MaDotThi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDotThi = 5,
		/// <summary>
		/// TenDotThi : 
		/// </summary>
		[EnumTextValue("Ten Dot Thi")]
		[ColumnEnum("TenDotThi", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TenDotThi = 6,
		/// <summary>
		/// ThoiGianLamBai : 
		/// </summary>
		[EnumTextValue("Thoi Gian Lam Bai")]
		[ColumnEnum("ThoiGianLamBai", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ThoiGianLamBai = 7,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaLopHocPhan = 8,
		/// <summary>
		/// MaHinhThucThi : 
		/// </summary>
		[EnumTextValue("Ma Hinh Thuc Thi")]
		[ColumnEnum("MaHinhThucThi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaHinhThucThi = 9,
		/// <summary>
		/// SoLuongDe : 
		/// </summary>
		[EnumTextValue("So Luong De")]
		[ColumnEnum("SoLuongDe", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuongDe = 10,
		/// <summary>
		/// HeSoExamination : 
		/// </summary>
		[EnumTextValue("He So Examination")]
		[ColumnEnum("HeSoExamination", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoExamination = 11,
		/// <summary>
		/// MaDangDeThi : 
		/// </summary>
		[EnumTextValue("Ma Dang De Thi")]
		[ColumnEnum("MaDangDeThi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDangDeThi = 12,
		/// <summary>
		/// TenDangDeThi : 
		/// </summary>
		[EnumTextValue("Ten Dang De Thi")]
		[ColumnEnum("TenDangDeThi", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TenDangDeThi = 13,
		/// <summary>
		/// KyThi : 
		/// </summary>
		[EnumTextValue("Ky Thi")]
		[ColumnEnum("KyThi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		KyThi = 14,
		/// <summary>
		/// HeSoQuyDoi : 
		/// </summary>
		[EnumTextValue("He So Quy Doi")]
		[ColumnEnum("HeSoQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoQuyDoi = 15,
		/// <summary>
		/// SoTietQuyDoi : 
		/// </summary>
		[EnumTextValue("So Tiet Quy Doi")]
		[ColumnEnum("SoTietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietQuyDoi = 16,
		/// <summary>
		/// TongTien : 
		/// </summary>
		[EnumTextValue("Tong Tien")]
		[ColumnEnum("TongTien", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongTien = 17,
		/// <summary>
		/// Chot : 
		/// </summary>
		[EnumTextValue("Chot")]
		[ColumnEnum("Chot", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Chot = 18,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgayCapNhat = 19,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 20,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 21,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("Ma Hoc Vi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi = 22,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Loai Giang Vien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien = 23
	}//End enum

	#endregion ThuLaoRaDeVhuColumn Enum

} // end namespace
