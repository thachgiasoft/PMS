
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThanhToanThinhGiang.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThanhToanThinhGiang' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThanhToanThinhGiangBase : EntityBase, IThanhToanThinhGiang, IEntityId<ThanhToanThinhGiangKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThanhToanThinhGiangEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThanhToanThinhGiangEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThanhToanThinhGiangEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThanhToanThinhGiang> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThanhToanThinhGiangEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThanhToanThinhGiangEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThanhToanThinhGiangBase"/> instance.
		///</summary>
		public ThanhToanThinhGiangBase()
		{
			this.entityData = new ThanhToanThinhGiangEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThanhToanThinhGiangBase"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_chucDanh"></param>
		///<param name="_maLop"></param>
		///<param name="_siSo"></param>
		///<param name="_stt"></param>
		///<param name="_noiDung"></param>
		///<param name="_soTiet"></param>
		///<param name="_heSo"></param>
		///<param name="_heSoChucDanh"></param>
		///<param name="_congHeSo"></param>
		///<param name="_donGia"></param>
		///<param name="_thanhTien"></param>
		///<param name="_thue"></param>
		///<param name="_conNhan"></param>
		///<param name="_ghiChu"></param>
		///<param name="_ngayXacNhan"></param>
		///<param name="_heSoNgoaiGio"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_heSoKhoiNganh"></param>
		///<param name="_heSoBacDaoTao"></param>
		///<param name="_heSoNgonNgu"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_soTietTkb"></param>
		///<param name="_ngayNhap"></param>
		///<param name="_xacNhan"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_siSoNhomThucHanh"></param>
		///<param name="_heSoQuyDoiThucHanhSangLyThuyet"></param>
		public ThanhToanThinhGiangBase(System.String _namHoc, System.String _hocKy, 
			System.Int32? _maGiangVien, System.String _maLopHocPhan, System.String _chucDanh, 
			System.String _maLop, System.Int32? _siSo, System.Int32? _stt, System.String _noiDung, 
			System.Decimal? _soTiet, System.Decimal? _heSo, System.Decimal? _heSoChucDanh, 
			System.Decimal? _congHeSo, System.Decimal? _donGia, System.Decimal? _thanhTien, 
			System.Decimal? _thue, System.Decimal? _conNhan, System.String _ghiChu, 
			System.DateTime? _ngayXacNhan, System.Decimal? _heSoNgoaiGio, System.Decimal? _heSoLopDong, 
			System.Decimal? _heSoKhoiNganh, System.Decimal? _heSoBacDaoTao, System.Decimal? _heSoNgonNgu, 
			System.Decimal? _tietQuyDoi, System.Decimal? _soTietTkb, System.DateTime? _ngayNhap, 
			System.Boolean? _xacNhan, System.Int32? _maHocHam, System.Int32? _maHocVi, 
			System.Decimal? _siSoNhomThucHanh, System.Decimal? _heSoQuyDoiThucHanhSangLyThuyet)
		{
			this.entityData = new ThanhToanThinhGiangEntityData();
			this.backupData = null;

			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaGiangVien = _maGiangVien;
			this.MaLopHocPhan = _maLopHocPhan;
			this.ChucDanh = _chucDanh;
			this.MaLop = _maLop;
			this.SiSo = _siSo;
			this.Stt = _stt;
			this.NoiDung = _noiDung;
			this.SoTiet = _soTiet;
			this.HeSo = _heSo;
			this.HeSoChucDanh = _heSoChucDanh;
			this.CongHeSo = _congHeSo;
			this.DonGia = _donGia;
			this.ThanhTien = _thanhTien;
			this.Thue = _thue;
			this.ConNhan = _conNhan;
			this.GhiChu = _ghiChu;
			this.NgayXacNhan = _ngayXacNhan;
			this.HeSoNgoaiGio = _heSoNgoaiGio;
			this.HeSoLopDong = _heSoLopDong;
			this.HeSoKhoiNganh = _heSoKhoiNganh;
			this.HeSoBacDaoTao = _heSoBacDaoTao;
			this.HeSoNgonNgu = _heSoNgonNgu;
			this.TietQuyDoi = _tietQuyDoi;
			this.SoTietTkb = _soTietTkb;
			this.NgayNhap = _ngayNhap;
			this.XacNhan = _xacNhan;
			this.MaHocHam = _maHocHam;
			this.MaHocVi = _maHocVi;
			this.SiSoNhomThucHanh = _siSoNhomThucHanh;
			this.HeSoQuyDoiThucHanhSangLyThuyet = _heSoQuyDoiThucHanhSangLyThuyet;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThanhToanThinhGiang"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_chucDanh"></param>
		///<param name="_maLop"></param>
		///<param name="_siSo"></param>
		///<param name="_stt"></param>
		///<param name="_noiDung"></param>
		///<param name="_soTiet"></param>
		///<param name="_heSo"></param>
		///<param name="_heSoChucDanh"></param>
		///<param name="_congHeSo"></param>
		///<param name="_donGia"></param>
		///<param name="_thanhTien"></param>
		///<param name="_thue"></param>
		///<param name="_conNhan"></param>
		///<param name="_ghiChu"></param>
		///<param name="_ngayXacNhan"></param>
		///<param name="_heSoNgoaiGio"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_heSoKhoiNganh"></param>
		///<param name="_heSoBacDaoTao"></param>
		///<param name="_heSoNgonNgu"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_soTietTkb"></param>
		///<param name="_ngayNhap"></param>
		///<param name="_xacNhan"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_siSoNhomThucHanh"></param>
		///<param name="_heSoQuyDoiThucHanhSangLyThuyet"></param>
		public static ThanhToanThinhGiang CreateThanhToanThinhGiang(System.String _namHoc, System.String _hocKy, 
			System.Int32? _maGiangVien, System.String _maLopHocPhan, System.String _chucDanh, 
			System.String _maLop, System.Int32? _siSo, System.Int32? _stt, System.String _noiDung, 
			System.Decimal? _soTiet, System.Decimal? _heSo, System.Decimal? _heSoChucDanh, 
			System.Decimal? _congHeSo, System.Decimal? _donGia, System.Decimal? _thanhTien, 
			System.Decimal? _thue, System.Decimal? _conNhan, System.String _ghiChu, 
			System.DateTime? _ngayXacNhan, System.Decimal? _heSoNgoaiGio, System.Decimal? _heSoLopDong, 
			System.Decimal? _heSoKhoiNganh, System.Decimal? _heSoBacDaoTao, System.Decimal? _heSoNgonNgu, 
			System.Decimal? _tietQuyDoi, System.Decimal? _soTietTkb, System.DateTime? _ngayNhap, 
			System.Boolean? _xacNhan, System.Int32? _maHocHam, System.Int32? _maHocVi, 
			System.Decimal? _siSoNhomThucHanh, System.Decimal? _heSoQuyDoiThucHanhSangLyThuyet)
		{
			ThanhToanThinhGiang newThanhToanThinhGiang = new ThanhToanThinhGiang();
			newThanhToanThinhGiang.NamHoc = _namHoc;
			newThanhToanThinhGiang.HocKy = _hocKy;
			newThanhToanThinhGiang.MaGiangVien = _maGiangVien;
			newThanhToanThinhGiang.MaLopHocPhan = _maLopHocPhan;
			newThanhToanThinhGiang.ChucDanh = _chucDanh;
			newThanhToanThinhGiang.MaLop = _maLop;
			newThanhToanThinhGiang.SiSo = _siSo;
			newThanhToanThinhGiang.Stt = _stt;
			newThanhToanThinhGiang.NoiDung = _noiDung;
			newThanhToanThinhGiang.SoTiet = _soTiet;
			newThanhToanThinhGiang.HeSo = _heSo;
			newThanhToanThinhGiang.HeSoChucDanh = _heSoChucDanh;
			newThanhToanThinhGiang.CongHeSo = _congHeSo;
			newThanhToanThinhGiang.DonGia = _donGia;
			newThanhToanThinhGiang.ThanhTien = _thanhTien;
			newThanhToanThinhGiang.Thue = _thue;
			newThanhToanThinhGiang.ConNhan = _conNhan;
			newThanhToanThinhGiang.GhiChu = _ghiChu;
			newThanhToanThinhGiang.NgayXacNhan = _ngayXacNhan;
			newThanhToanThinhGiang.HeSoNgoaiGio = _heSoNgoaiGio;
			newThanhToanThinhGiang.HeSoLopDong = _heSoLopDong;
			newThanhToanThinhGiang.HeSoKhoiNganh = _heSoKhoiNganh;
			newThanhToanThinhGiang.HeSoBacDaoTao = _heSoBacDaoTao;
			newThanhToanThinhGiang.HeSoNgonNgu = _heSoNgonNgu;
			newThanhToanThinhGiang.TietQuyDoi = _tietQuyDoi;
			newThanhToanThinhGiang.SoTietTkb = _soTietTkb;
			newThanhToanThinhGiang.NgayNhap = _ngayNhap;
			newThanhToanThinhGiang.XacNhan = _xacNhan;
			newThanhToanThinhGiang.MaHocHam = _maHocHam;
			newThanhToanThinhGiang.MaHocVi = _maHocVi;
			newThanhToanThinhGiang.SiSoNhomThucHanh = _siSoNhomThucHanh;
			newThanhToanThinhGiang.HeSoQuyDoiThucHanhSangLyThuyet = _heSoQuyDoiThucHanhSangLyThuyet;
			return newThanhToanThinhGiang;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this.entityData.MaGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaGiangVien == value)
					return;
				
                OnPropertyChanging("MaGiangVien");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.MaGiangVien, this.entityData.MaGiangVien);
				this.entityData.MaGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.MaGiangVien, this.entityData.MaGiangVien);
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChucDanh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ChucDanh
		{
			get
			{
				return this.entityData.ChucDanh; 
			}
			
			set
			{
				if (this.entityData.ChucDanh == value)
					return;
				
                OnPropertyChanging("ChucDanh");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.ChucDanh, this.entityData.ChucDanh);
				this.entityData.ChucDanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.ChucDanh, this.entityData.ChucDanh);
				OnPropertyChanged("ChucDanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
				
                OnPropertyChanging("MaLop");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiSo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiSo
		{
			get
			{
				return this.entityData.SiSo; 
			}
			
			set
			{
				if (this.entityData.SiSo == value)
					return;
				
                OnPropertyChanging("SiSo");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.SiSo, this.entityData.SiSo);
				this.entityData.SiSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.SiSo, this.entityData.SiSo);
				OnPropertyChanged("SiSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Stt property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Stt
		{
			get
			{
				return this.entityData.Stt; 
			}
			
			set
			{
				if (this.entityData.Stt == value)
					return;
				
                OnPropertyChanging("Stt");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.Stt, this.entityData.Stt);
				this.entityData.Stt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.Stt, this.entityData.Stt);
				OnPropertyChanged("Stt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoiDung property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String NoiDung
		{
			get
			{
				return this.entityData.NoiDung; 
			}
			
			set
			{
				if (this.entityData.NoiDung == value)
					return;
				
                OnPropertyChanging("NoiDung");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.NoiDung, this.entityData.NoiDung);
				this.entityData.NoiDung = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.NoiDung, this.entityData.NoiDung);
				OnPropertyChanged("NoiDung");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTiet
		{
			get
			{
				return this.entityData.SoTiet; 
			}
			
			set
			{
				if (this.entityData.SoTiet == value)
					return;
				
                OnPropertyChanging("SoTiet");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.SoTiet, this.entityData.SoTiet);
				this.entityData.SoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.SoTiet, this.entityData.SoTiet);
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSo property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSo
		{
			get
			{
				return this.entityData.HeSo; 
			}
			
			set
			{
				if (this.entityData.HeSo == value)
					return;
				
                OnPropertyChanging("HeSo");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HeSo, this.entityData.HeSo);
				this.entityData.HeSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HeSo, this.entityData.HeSo);
				OnPropertyChanged("HeSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoChucDanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoChucDanh
		{
			get
			{
				return this.entityData.HeSoChucDanh; 
			}
			
			set
			{
				if (this.entityData.HeSoChucDanh == value)
					return;
				
                OnPropertyChanging("HeSoChucDanh");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HeSoChucDanh, this.entityData.HeSoChucDanh);
				this.entityData.HeSoChucDanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HeSoChucDanh, this.entityData.HeSoChucDanh);
				OnPropertyChanged("HeSoChucDanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CongHeSo property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CongHeSo
		{
			get
			{
				return this.entityData.CongHeSo; 
			}
			
			set
			{
				if (this.entityData.CongHeSo == value)
					return;
				
                OnPropertyChanging("CongHeSo");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.CongHeSo, this.entityData.CongHeSo);
				this.entityData.CongHeSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.CongHeSo, this.entityData.CongHeSo);
				OnPropertyChanged("CongHeSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGia
		{
			get
			{
				return this.entityData.DonGia; 
			}
			
			set
			{
				if (this.entityData.DonGia == value)
					return;
				
                OnPropertyChanging("DonGia");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.DonGia, this.entityData.DonGia);
				this.entityData.DonGia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.DonGia, this.entityData.DonGia);
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThanhTien property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ThanhTien
		{
			get
			{
				return this.entityData.ThanhTien; 
			}
			
			set
			{
				if (this.entityData.ThanhTien == value)
					return;
				
                OnPropertyChanging("ThanhTien");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.ThanhTien, this.entityData.ThanhTien);
				this.entityData.ThanhTien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.ThanhTien, this.entityData.ThanhTien);
				OnPropertyChanged("ThanhTien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Thue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Thue
		{
			get
			{
				return this.entityData.Thue; 
			}
			
			set
			{
				if (this.entityData.Thue == value)
					return;
				
                OnPropertyChanging("Thue");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.Thue, this.entityData.Thue);
				this.entityData.Thue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.Thue, this.entityData.Thue);
				OnPropertyChanged("Thue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConNhan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ConNhan
		{
			get
			{
				return this.entityData.ConNhan; 
			}
			
			set
			{
				if (this.entityData.ConNhan == value)
					return;
				
                OnPropertyChanging("ConNhan");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.ConNhan, this.entityData.ConNhan);
				this.entityData.ConNhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.ConNhan, this.entityData.ConNhan);
				OnPropertyChanged("ConNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayXacNhan property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayXacNhan
		{
			get
			{
				return this.entityData.NgayXacNhan; 
			}
			
			set
			{
				if (this.entityData.NgayXacNhan == value)
					return;
				
                OnPropertyChanging("NgayXacNhan");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.NgayXacNhan, this.entityData.NgayXacNhan);
				this.entityData.NgayXacNhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.NgayXacNhan, this.entityData.NgayXacNhan);
				OnPropertyChanged("NgayXacNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoNgoaiGio property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoNgoaiGio
		{
			get
			{
				return this.entityData.HeSoNgoaiGio; 
			}
			
			set
			{
				if (this.entityData.HeSoNgoaiGio == value)
					return;
				
                OnPropertyChanging("HeSoNgoaiGio");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HeSoNgoaiGio, this.entityData.HeSoNgoaiGio);
				this.entityData.HeSoNgoaiGio = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HeSoNgoaiGio, this.entityData.HeSoNgoaiGio);
				OnPropertyChanged("HeSoNgoaiGio");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoLopDong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoLopDong
		{
			get
			{
				return this.entityData.HeSoLopDong; 
			}
			
			set
			{
				if (this.entityData.HeSoLopDong == value)
					return;
				
                OnPropertyChanging("HeSoLopDong");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HeSoLopDong, this.entityData.HeSoLopDong);
				this.entityData.HeSoLopDong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HeSoLopDong, this.entityData.HeSoLopDong);
				OnPropertyChanged("HeSoLopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoKhoiNganh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoKhoiNganh
		{
			get
			{
				return this.entityData.HeSoKhoiNganh; 
			}
			
			set
			{
				if (this.entityData.HeSoKhoiNganh == value)
					return;
				
                OnPropertyChanging("HeSoKhoiNganh");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HeSoKhoiNganh, this.entityData.HeSoKhoiNganh);
				this.entityData.HeSoKhoiNganh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HeSoKhoiNganh, this.entityData.HeSoKhoiNganh);
				OnPropertyChanged("HeSoKhoiNganh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoBacDaoTao
		{
			get
			{
				return this.entityData.HeSoBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.HeSoBacDaoTao == value)
					return;
				
                OnPropertyChanging("HeSoBacDaoTao");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HeSoBacDaoTao, this.entityData.HeSoBacDaoTao);
				this.entityData.HeSoBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HeSoBacDaoTao, this.entityData.HeSoBacDaoTao);
				OnPropertyChanged("HeSoBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoNgonNgu property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoNgonNgu
		{
			get
			{
				return this.entityData.HeSoNgonNgu; 
			}
			
			set
			{
				if (this.entityData.HeSoNgonNgu == value)
					return;
				
                OnPropertyChanging("HeSoNgonNgu");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HeSoNgonNgu, this.entityData.HeSoNgonNgu);
				this.entityData.HeSoNgonNgu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HeSoNgonNgu, this.entityData.HeSoNgonNgu);
				OnPropertyChanged("HeSoNgonNgu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietQuyDoi
		{
			get
			{
				return this.entityData.TietQuyDoi; 
			}
			
			set
			{
				if (this.entityData.TietQuyDoi == value)
					return;
				
                OnPropertyChanging("TietQuyDoi");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				this.entityData.TietQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				OnPropertyChanged("TietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTietTkb property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTietTkb
		{
			get
			{
				return this.entityData.SoTietTkb; 
			}
			
			set
			{
				if (this.entityData.SoTietTkb == value)
					return;
				
                OnPropertyChanging("SoTietTkb");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.SoTietTkb, this.entityData.SoTietTkb);
				this.entityData.SoTietTkb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.SoTietTkb, this.entityData.SoTietTkb);
				OnPropertyChanged("SoTietTkb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayNhap property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayNhap
		{
			get
			{
				return this.entityData.NgayNhap; 
			}
			
			set
			{
				if (this.entityData.NgayNhap == value)
					return;
				
                OnPropertyChanging("NgayNhap");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.NgayNhap, this.entityData.NgayNhap);
				this.entityData.NgayNhap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.NgayNhap, this.entityData.NgayNhap);
				OnPropertyChanged("NgayNhap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the XacNhan property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? XacNhan
		{
			get
			{
				return this.entityData.XacNhan; 
			}
			
			set
			{
				if (this.entityData.XacNhan == value)
					return;
				
                OnPropertyChanging("XacNhan");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.XacNhan, this.entityData.XacNhan);
				this.entityData.XacNhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.XacNhan, this.entityData.XacNhan);
				OnPropertyChanged("XacNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this.entityData.MaHocVi; 
			}
			
			set
			{
				if (this.entityData.MaHocVi == value)
					return;
				
                OnPropertyChanging("MaHocVi");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.MaHocVi, this.entityData.MaHocVi);
				this.entityData.MaHocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.MaHocVi, this.entityData.MaHocVi);
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiSoNhomThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SiSoNhomThucHanh
		{
			get
			{
				return this.entityData.SiSoNhomThucHanh; 
			}
			
			set
			{
				if (this.entityData.SiSoNhomThucHanh == value)
					return;
				
                OnPropertyChanging("SiSoNhomThucHanh");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.SiSoNhomThucHanh, this.entityData.SiSoNhomThucHanh);
				this.entityData.SiSoNhomThucHanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.SiSoNhomThucHanh, this.entityData.SiSoNhomThucHanh);
				OnPropertyChanged("SiSoNhomThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoQuyDoiThucHanhSangLyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoQuyDoiThucHanhSangLyThuyet
		{
			get
			{
				return this.entityData.HeSoQuyDoiThucHanhSangLyThuyet; 
			}
			
			set
			{
				if (this.entityData.HeSoQuyDoiThucHanhSangLyThuyet == value)
					return;
				
                OnPropertyChanging("HeSoQuyDoiThucHanhSangLyThuyet");                    
				OnColumnChanging(ThanhToanThinhGiangColumn.HeSoQuyDoiThucHanhSangLyThuyet, this.entityData.HeSoQuyDoiThucHanhSangLyThuyet);
				this.entityData.HeSoQuyDoiThucHanhSangLyThuyet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhToanThinhGiangColumn.HeSoQuyDoiThucHanhSangLyThuyet, this.entityData.HeSoQuyDoiThucHanhSangLyThuyet);
				OnPropertyChanged("HeSoQuyDoiThucHanhSangLyThuyet");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ChucDanh", "Chuc Danh", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NoiDung", "Noi Dung", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GhiChu", "Ghi Chu", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThanhToanThinhGiang"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "NamHoc", "HocKy", "MaGiangVien", "MaLopHocPhan", "ChucDanh", "MaLop", "SiSo", "Stt", "NoiDung", "SoTiet", "HeSo", "HeSoChucDanh", "CongHeSo", "DonGia", "ThanhTien", "Thue", "ConNhan", "GhiChu", "NgayXacNhan", "HeSoNgoaiGio", "HeSoLopDong", "HeSoKhoiNganh", "HeSoBacDaoTao", "HeSoNgonNgu", "TietQuyDoi", "SoTietTkb", "NgayNhap", "XacNhan", "MaHocHam", "MaHocVi", "SiSoNhomThucHanh", "HeSoQuyDoiThucHanhSangLyThuyet"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThanhToanThinhGiangEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThanhToanThinhGiang) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThanhToanThinhGiang>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThanhToanThinhGiang);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThanhToanThinhGiang Entity 
		///</summary>
		protected virtual ThanhToanThinhGiang Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThanhToanThinhGiang copy = new ThanhToanThinhGiang();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.ChucDanh = this.ChucDanh;
				copy.MaLop = this.MaLop;
				copy.SiSo = this.SiSo;
				copy.Stt = this.Stt;
				copy.NoiDung = this.NoiDung;
				copy.SoTiet = this.SoTiet;
				copy.HeSo = this.HeSo;
				copy.HeSoChucDanh = this.HeSoChucDanh;
				copy.CongHeSo = this.CongHeSo;
				copy.DonGia = this.DonGia;
				copy.ThanhTien = this.ThanhTien;
				copy.Thue = this.Thue;
				copy.ConNhan = this.ConNhan;
				copy.GhiChu = this.GhiChu;
				copy.NgayXacNhan = this.NgayXacNhan;
				copy.HeSoNgoaiGio = this.HeSoNgoaiGio;
				copy.HeSoLopDong = this.HeSoLopDong;
				copy.HeSoKhoiNganh = this.HeSoKhoiNganh;
				copy.HeSoBacDaoTao = this.HeSoBacDaoTao;
				copy.HeSoNgonNgu = this.HeSoNgonNgu;
				copy.TietQuyDoi = this.TietQuyDoi;
				copy.SoTietTkb = this.SoTietTkb;
				copy.NgayNhap = this.NgayNhap;
				copy.XacNhan = this.XacNhan;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.SiSoNhomThucHanh = this.SiSoNhomThucHanh;
				copy.HeSoQuyDoiThucHanhSangLyThuyet = this.HeSoQuyDoiThucHanhSangLyThuyet;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThanhToanThinhGiang Entity 
		///</summary>
		public virtual ThanhToanThinhGiang Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThanhToanThinhGiang Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThanhToanThinhGiang DeepCopy()
		{
			return EntityHelper.Clone<ThanhToanThinhGiang>(this as ThanhToanThinhGiang);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThanhToanThinhGiangEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThanhToanThinhGiangEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThanhToanThinhGiangEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThanhToanThinhGiangColumn column)
		{
			switch(column)
			{
					case ThanhToanThinhGiangColumn.Id:
					return entityData.Id != _originalData.Id;
					case ThanhToanThinhGiangColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case ThanhToanThinhGiangColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case ThanhToanThinhGiangColumn.MaGiangVien:
					return entityData.MaGiangVien != _originalData.MaGiangVien;
					case ThanhToanThinhGiangColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case ThanhToanThinhGiangColumn.ChucDanh:
					return entityData.ChucDanh != _originalData.ChucDanh;
					case ThanhToanThinhGiangColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
					case ThanhToanThinhGiangColumn.SiSo:
					return entityData.SiSo != _originalData.SiSo;
					case ThanhToanThinhGiangColumn.Stt:
					return entityData.Stt != _originalData.Stt;
					case ThanhToanThinhGiangColumn.NoiDung:
					return entityData.NoiDung != _originalData.NoiDung;
					case ThanhToanThinhGiangColumn.SoTiet:
					return entityData.SoTiet != _originalData.SoTiet;
					case ThanhToanThinhGiangColumn.HeSo:
					return entityData.HeSo != _originalData.HeSo;
					case ThanhToanThinhGiangColumn.HeSoChucDanh:
					return entityData.HeSoChucDanh != _originalData.HeSoChucDanh;
					case ThanhToanThinhGiangColumn.CongHeSo:
					return entityData.CongHeSo != _originalData.CongHeSo;
					case ThanhToanThinhGiangColumn.DonGia:
					return entityData.DonGia != _originalData.DonGia;
					case ThanhToanThinhGiangColumn.ThanhTien:
					return entityData.ThanhTien != _originalData.ThanhTien;
					case ThanhToanThinhGiangColumn.Thue:
					return entityData.Thue != _originalData.Thue;
					case ThanhToanThinhGiangColumn.ConNhan:
					return entityData.ConNhan != _originalData.ConNhan;
					case ThanhToanThinhGiangColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case ThanhToanThinhGiangColumn.NgayXacNhan:
					return entityData.NgayXacNhan != _originalData.NgayXacNhan;
					case ThanhToanThinhGiangColumn.HeSoNgoaiGio:
					return entityData.HeSoNgoaiGio != _originalData.HeSoNgoaiGio;
					case ThanhToanThinhGiangColumn.HeSoLopDong:
					return entityData.HeSoLopDong != _originalData.HeSoLopDong;
					case ThanhToanThinhGiangColumn.HeSoKhoiNganh:
					return entityData.HeSoKhoiNganh != _originalData.HeSoKhoiNganh;
					case ThanhToanThinhGiangColumn.HeSoBacDaoTao:
					return entityData.HeSoBacDaoTao != _originalData.HeSoBacDaoTao;
					case ThanhToanThinhGiangColumn.HeSoNgonNgu:
					return entityData.HeSoNgonNgu != _originalData.HeSoNgonNgu;
					case ThanhToanThinhGiangColumn.TietQuyDoi:
					return entityData.TietQuyDoi != _originalData.TietQuyDoi;
					case ThanhToanThinhGiangColumn.SoTietTkb:
					return entityData.SoTietTkb != _originalData.SoTietTkb;
					case ThanhToanThinhGiangColumn.NgayNhap:
					return entityData.NgayNhap != _originalData.NgayNhap;
					case ThanhToanThinhGiangColumn.XacNhan:
					return entityData.XacNhan != _originalData.XacNhan;
					case ThanhToanThinhGiangColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case ThanhToanThinhGiangColumn.MaHocVi:
					return entityData.MaHocVi != _originalData.MaHocVi;
					case ThanhToanThinhGiangColumn.SiSoNhomThucHanh:
					return entityData.SiSoNhomThucHanh != _originalData.SiSoNhomThucHanh;
					case ThanhToanThinhGiangColumn.HeSoQuyDoiThucHanhSangLyThuyet:
					return entityData.HeSoQuyDoiThucHanhSangLyThuyet != _originalData.HeSoQuyDoiThucHanhSangLyThuyet;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThanhToanThinhGiangColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaGiangVien != _originalData.MaGiangVien;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.ChucDanh != _originalData.ChucDanh;
			result = result || entityData.MaLop != _originalData.MaLop;
			result = result || entityData.SiSo != _originalData.SiSo;
			result = result || entityData.Stt != _originalData.Stt;
			result = result || entityData.NoiDung != _originalData.NoiDung;
			result = result || entityData.SoTiet != _originalData.SoTiet;
			result = result || entityData.HeSo != _originalData.HeSo;
			result = result || entityData.HeSoChucDanh != _originalData.HeSoChucDanh;
			result = result || entityData.CongHeSo != _originalData.CongHeSo;
			result = result || entityData.DonGia != _originalData.DonGia;
			result = result || entityData.ThanhTien != _originalData.ThanhTien;
			result = result || entityData.Thue != _originalData.Thue;
			result = result || entityData.ConNhan != _originalData.ConNhan;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.NgayXacNhan != _originalData.NgayXacNhan;
			result = result || entityData.HeSoNgoaiGio != _originalData.HeSoNgoaiGio;
			result = result || entityData.HeSoLopDong != _originalData.HeSoLopDong;
			result = result || entityData.HeSoKhoiNganh != _originalData.HeSoKhoiNganh;
			result = result || entityData.HeSoBacDaoTao != _originalData.HeSoBacDaoTao;
			result = result || entityData.HeSoNgonNgu != _originalData.HeSoNgonNgu;
			result = result || entityData.TietQuyDoi != _originalData.TietQuyDoi;
			result = result || entityData.SoTietTkb != _originalData.SoTietTkb;
			result = result || entityData.NgayNhap != _originalData.NgayNhap;
			result = result || entityData.XacNhan != _originalData.XacNhan;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.MaHocVi != _originalData.MaHocVi;
			result = result || entityData.SiSoNhomThucHanh != _originalData.SiSoNhomThucHanh;
			result = result || entityData.HeSoQuyDoiThucHanhSangLyThuyet != _originalData.HeSoQuyDoiThucHanhSangLyThuyet;
			return result;
		}	
		
		///<summary>
		///  Returns a ThanhToanThinhGiang Entity with the original data.
		///</summary>
		public ThanhToanThinhGiang GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThanhToanThinhGiang(
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaGiangVien,
				_originalData.MaLopHocPhan,
				_originalData.ChucDanh,
				_originalData.MaLop,
				_originalData.SiSo,
				_originalData.Stt,
				_originalData.NoiDung,
				_originalData.SoTiet,
				_originalData.HeSo,
				_originalData.HeSoChucDanh,
				_originalData.CongHeSo,
				_originalData.DonGia,
				_originalData.ThanhTien,
				_originalData.Thue,
				_originalData.ConNhan,
				_originalData.GhiChu,
				_originalData.NgayXacNhan,
				_originalData.HeSoNgoaiGio,
				_originalData.HeSoLopDong,
				_originalData.HeSoKhoiNganh,
				_originalData.HeSoBacDaoTao,
				_originalData.HeSoNgonNgu,
				_originalData.TietQuyDoi,
				_originalData.SoTietTkb,
				_originalData.NgayNhap,
				_originalData.XacNhan,
				_originalData.MaHocHam,
				_originalData.MaHocVi,
				_originalData.SiSoNhomThucHanh,
				_originalData.HeSoQuyDoiThucHanhSangLyThuyet
				);
				
			return (ThanhToanThinhGiang)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThanhToanThinhGiangBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThanhToanThinhGiangBase)
				return ValueEquals(this, (ThanhToanThinhGiangBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThanhToanThinhGiangBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.ChucDanh == null) ? string.Empty : this.ChucDanh.ToString()).GetHashCode() ^ 
					((this.MaLop == null) ? string.Empty : this.MaLop.ToString()).GetHashCode() ^ 
					((this.SiSo == null) ? string.Empty : this.SiSo.ToString()).GetHashCode() ^ 
					((this.Stt == null) ? string.Empty : this.Stt.ToString()).GetHashCode() ^ 
					((this.NoiDung == null) ? string.Empty : this.NoiDung.ToString()).GetHashCode() ^ 
					((this.SoTiet == null) ? string.Empty : this.SoTiet.ToString()).GetHashCode() ^ 
					((this.HeSo == null) ? string.Empty : this.HeSo.ToString()).GetHashCode() ^ 
					((this.HeSoChucDanh == null) ? string.Empty : this.HeSoChucDanh.ToString()).GetHashCode() ^ 
					((this.CongHeSo == null) ? string.Empty : this.CongHeSo.ToString()).GetHashCode() ^ 
					((this.DonGia == null) ? string.Empty : this.DonGia.ToString()).GetHashCode() ^ 
					((this.ThanhTien == null) ? string.Empty : this.ThanhTien.ToString()).GetHashCode() ^ 
					((this.Thue == null) ? string.Empty : this.Thue.ToString()).GetHashCode() ^ 
					((this.ConNhan == null) ? string.Empty : this.ConNhan.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.NgayXacNhan == null) ? string.Empty : this.NgayXacNhan.ToString()).GetHashCode() ^ 
					((this.HeSoNgoaiGio == null) ? string.Empty : this.HeSoNgoaiGio.ToString()).GetHashCode() ^ 
					((this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString()).GetHashCode() ^ 
					((this.HeSoKhoiNganh == null) ? string.Empty : this.HeSoKhoiNganh.ToString()).GetHashCode() ^ 
					((this.HeSoBacDaoTao == null) ? string.Empty : this.HeSoBacDaoTao.ToString()).GetHashCode() ^ 
					((this.HeSoNgonNgu == null) ? string.Empty : this.HeSoNgonNgu.ToString()).GetHashCode() ^ 
					((this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString()).GetHashCode() ^ 
					((this.SoTietTkb == null) ? string.Empty : this.SoTietTkb.ToString()).GetHashCode() ^ 
					((this.NgayNhap == null) ? string.Empty : this.NgayNhap.ToString()).GetHashCode() ^ 
					((this.XacNhan == null) ? string.Empty : this.XacNhan.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString()).GetHashCode() ^ 
					((this.SiSoNhomThucHanh == null) ? string.Empty : this.SiSoNhomThucHanh.ToString()).GetHashCode() ^ 
					((this.HeSoQuyDoiThucHanhSangLyThuyet == null) ? string.Empty : this.HeSoQuyDoiThucHanhSangLyThuyet.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThanhToanThinhGiangBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThanhToanThinhGiangBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThanhToanThinhGiangBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThanhToanThinhGiangBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThanhToanThinhGiangBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThanhToanThinhGiangBase Object1, ThanhToanThinhGiangBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object2.MaGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.ChucDanh != null && Object2.ChucDanh != null )
			{
				if (Object1.ChucDanh != Object2.ChucDanh)
					equal = false;
			}
			else if (Object1.ChucDanh == null ^ Object2.ChucDanh == null )
			{
				equal = false;
			}
			if ( Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object2.MaLop == null )
			{
				equal = false;
			}
			if ( Object1.SiSo != null && Object2.SiSo != null )
			{
				if (Object1.SiSo != Object2.SiSo)
					equal = false;
			}
			else if (Object1.SiSo == null ^ Object2.SiSo == null )
			{
				equal = false;
			}
			if ( Object1.Stt != null && Object2.Stt != null )
			{
				if (Object1.Stt != Object2.Stt)
					equal = false;
			}
			else if (Object1.Stt == null ^ Object2.Stt == null )
			{
				equal = false;
			}
			if ( Object1.NoiDung != null && Object2.NoiDung != null )
			{
				if (Object1.NoiDung != Object2.NoiDung)
					equal = false;
			}
			else if (Object1.NoiDung == null ^ Object2.NoiDung == null )
			{
				equal = false;
			}
			if ( Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object2.SoTiet == null )
			{
				equal = false;
			}
			if ( Object1.HeSo != null && Object2.HeSo != null )
			{
				if (Object1.HeSo != Object2.HeSo)
					equal = false;
			}
			else if (Object1.HeSo == null ^ Object2.HeSo == null )
			{
				equal = false;
			}
			if ( Object1.HeSoChucDanh != null && Object2.HeSoChucDanh != null )
			{
				if (Object1.HeSoChucDanh != Object2.HeSoChucDanh)
					equal = false;
			}
			else if (Object1.HeSoChucDanh == null ^ Object2.HeSoChucDanh == null )
			{
				equal = false;
			}
			if ( Object1.CongHeSo != null && Object2.CongHeSo != null )
			{
				if (Object1.CongHeSo != Object2.CongHeSo)
					equal = false;
			}
			else if (Object1.CongHeSo == null ^ Object2.CongHeSo == null )
			{
				equal = false;
			}
			if ( Object1.DonGia != null && Object2.DonGia != null )
			{
				if (Object1.DonGia != Object2.DonGia)
					equal = false;
			}
			else if (Object1.DonGia == null ^ Object2.DonGia == null )
			{
				equal = false;
			}
			if ( Object1.ThanhTien != null && Object2.ThanhTien != null )
			{
				if (Object1.ThanhTien != Object2.ThanhTien)
					equal = false;
			}
			else if (Object1.ThanhTien == null ^ Object2.ThanhTien == null )
			{
				equal = false;
			}
			if ( Object1.Thue != null && Object2.Thue != null )
			{
				if (Object1.Thue != Object2.Thue)
					equal = false;
			}
			else if (Object1.Thue == null ^ Object2.Thue == null )
			{
				equal = false;
			}
			if ( Object1.ConNhan != null && Object2.ConNhan != null )
			{
				if (Object1.ConNhan != Object2.ConNhan)
					equal = false;
			}
			else if (Object1.ConNhan == null ^ Object2.ConNhan == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.NgayXacNhan != null && Object2.NgayXacNhan != null )
			{
				if (Object1.NgayXacNhan != Object2.NgayXacNhan)
					equal = false;
			}
			else if (Object1.NgayXacNhan == null ^ Object2.NgayXacNhan == null )
			{
				equal = false;
			}
			if ( Object1.HeSoNgoaiGio != null && Object2.HeSoNgoaiGio != null )
			{
				if (Object1.HeSoNgoaiGio != Object2.HeSoNgoaiGio)
					equal = false;
			}
			else if (Object1.HeSoNgoaiGio == null ^ Object2.HeSoNgoaiGio == null )
			{
				equal = false;
			}
			if ( Object1.HeSoLopDong != null && Object2.HeSoLopDong != null )
			{
				if (Object1.HeSoLopDong != Object2.HeSoLopDong)
					equal = false;
			}
			else if (Object1.HeSoLopDong == null ^ Object2.HeSoLopDong == null )
			{
				equal = false;
			}
			if ( Object1.HeSoKhoiNganh != null && Object2.HeSoKhoiNganh != null )
			{
				if (Object1.HeSoKhoiNganh != Object2.HeSoKhoiNganh)
					equal = false;
			}
			else if (Object1.HeSoKhoiNganh == null ^ Object2.HeSoKhoiNganh == null )
			{
				equal = false;
			}
			if ( Object1.HeSoBacDaoTao != null && Object2.HeSoBacDaoTao != null )
			{
				if (Object1.HeSoBacDaoTao != Object2.HeSoBacDaoTao)
					equal = false;
			}
			else if (Object1.HeSoBacDaoTao == null ^ Object2.HeSoBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.HeSoNgonNgu != null && Object2.HeSoNgonNgu != null )
			{
				if (Object1.HeSoNgonNgu != Object2.HeSoNgonNgu)
					equal = false;
			}
			else if (Object1.HeSoNgonNgu == null ^ Object2.HeSoNgonNgu == null )
			{
				equal = false;
			}
			if ( Object1.TietQuyDoi != null && Object2.TietQuyDoi != null )
			{
				if (Object1.TietQuyDoi != Object2.TietQuyDoi)
					equal = false;
			}
			else if (Object1.TietQuyDoi == null ^ Object2.TietQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.SoTietTkb != null && Object2.SoTietTkb != null )
			{
				if (Object1.SoTietTkb != Object2.SoTietTkb)
					equal = false;
			}
			else if (Object1.SoTietTkb == null ^ Object2.SoTietTkb == null )
			{
				equal = false;
			}
			if ( Object1.NgayNhap != null && Object2.NgayNhap != null )
			{
				if (Object1.NgayNhap != Object2.NgayNhap)
					equal = false;
			}
			else if (Object1.NgayNhap == null ^ Object2.NgayNhap == null )
			{
				equal = false;
			}
			if ( Object1.XacNhan != null && Object2.XacNhan != null )
			{
				if (Object1.XacNhan != Object2.XacNhan)
					equal = false;
			}
			else if (Object1.XacNhan == null ^ Object2.XacNhan == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object2.MaHocVi == null )
			{
				equal = false;
			}
			if ( Object1.SiSoNhomThucHanh != null && Object2.SiSoNhomThucHanh != null )
			{
				if (Object1.SiSoNhomThucHanh != Object2.SiSoNhomThucHanh)
					equal = false;
			}
			else if (Object1.SiSoNhomThucHanh == null ^ Object2.SiSoNhomThucHanh == null )
			{
				equal = false;
			}
			if ( Object1.HeSoQuyDoiThucHanhSangLyThuyet != null && Object2.HeSoQuyDoiThucHanhSangLyThuyet != null )
			{
				if (Object1.HeSoQuyDoiThucHanhSangLyThuyet != Object2.HeSoQuyDoiThucHanhSangLyThuyet)
					equal = false;
			}
			else if (Object1.HeSoQuyDoiThucHanhSangLyThuyet == null ^ Object2.HeSoQuyDoiThucHanhSangLyThuyet == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThanhToanThinhGiangBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThanhToanThinhGiangComparer GetComparer()
        {
            return new ThanhToanThinhGiangComparer();
        }
        */

        // Comparer delegates back to ThanhToanThinhGiang
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThanhToanThinhGiang rhs, ThanhToanThinhGiangColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThanhToanThinhGiangColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.MaGiangVien:
            		return this.MaGiangVien.Value.CompareTo(rhs.MaGiangVien.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.ChucDanh:
            		return this.ChucDanh.CompareTo(rhs.ChucDanh);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.SiSo:
            		return this.SiSo.Value.CompareTo(rhs.SiSo.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.Stt:
            		return this.Stt.Value.CompareTo(rhs.Stt.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.NoiDung:
            		return this.NoiDung.CompareTo(rhs.NoiDung);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.SoTiet:
            		return this.SoTiet.Value.CompareTo(rhs.SoTiet.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HeSo:
            		return this.HeSo.Value.CompareTo(rhs.HeSo.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HeSoChucDanh:
            		return this.HeSoChucDanh.Value.CompareTo(rhs.HeSoChucDanh.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.CongHeSo:
            		return this.CongHeSo.Value.CompareTo(rhs.CongHeSo.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.DonGia:
            		return this.DonGia.Value.CompareTo(rhs.DonGia.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.ThanhTien:
            		return this.ThanhTien.Value.CompareTo(rhs.ThanhTien.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.Thue:
            		return this.Thue.Value.CompareTo(rhs.Thue.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.ConNhan:
            		return this.ConNhan.Value.CompareTo(rhs.ConNhan.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.NgayXacNhan:
            		return this.NgayXacNhan.Value.CompareTo(rhs.NgayXacNhan.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HeSoNgoaiGio:
            		return this.HeSoNgoaiGio.Value.CompareTo(rhs.HeSoNgoaiGio.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HeSoLopDong:
            		return this.HeSoLopDong.Value.CompareTo(rhs.HeSoLopDong.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HeSoKhoiNganh:
            		return this.HeSoKhoiNganh.Value.CompareTo(rhs.HeSoKhoiNganh.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HeSoBacDaoTao:
            		return this.HeSoBacDaoTao.Value.CompareTo(rhs.HeSoBacDaoTao.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HeSoNgonNgu:
            		return this.HeSoNgonNgu.Value.CompareTo(rhs.HeSoNgonNgu.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.TietQuyDoi:
            		return this.TietQuyDoi.Value.CompareTo(rhs.TietQuyDoi.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.SoTietTkb:
            		return this.SoTietTkb.Value.CompareTo(rhs.SoTietTkb.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.NgayNhap:
            		return this.NgayNhap.Value.CompareTo(rhs.NgayNhap.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.XacNhan:
            		return this.XacNhan.Value.CompareTo(rhs.XacNhan.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.MaHocVi:
            		return this.MaHocVi.Value.CompareTo(rhs.MaHocVi.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.SiSoNhomThucHanh:
            		return this.SiSoNhomThucHanh.Value.CompareTo(rhs.SiSoNhomThucHanh.Value);
            		
            		                 
            	
            	
            	case ThanhToanThinhGiangColumn.HeSoQuyDoiThucHanhSangLyThuyet:
            		return this.HeSoQuyDoiThucHanhSangLyThuyet.Value.CompareTo(rhs.HeSoQuyDoiThucHanhSangLyThuyet.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThanhToanThinhGiangKey> Members
		
		// member variable for the EntityId property
		private ThanhToanThinhGiangKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThanhToanThinhGiangKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThanhToanThinhGiangKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThanhToanThinhGiang")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{34}{33}- Id: {0}{33}- NamHoc: {1}{33}- HocKy: {2}{33}- MaGiangVien: {3}{33}- MaLopHocPhan: {4}{33}- ChucDanh: {5}{33}- MaLop: {6}{33}- SiSo: {7}{33}- Stt: {8}{33}- NoiDung: {9}{33}- SoTiet: {10}{33}- HeSo: {11}{33}- HeSoChucDanh: {12}{33}- CongHeSo: {13}{33}- DonGia: {14}{33}- ThanhTien: {15}{33}- Thue: {16}{33}- ConNhan: {17}{33}- GhiChu: {18}{33}- NgayXacNhan: {19}{33}- HeSoNgoaiGio: {20}{33}- HeSoLopDong: {21}{33}- HeSoKhoiNganh: {22}{33}- HeSoBacDaoTao: {23}{33}- HeSoNgonNgu: {24}{33}- TietQuyDoi: {25}{33}- SoTietTkb: {26}{33}- NgayNhap: {27}{33}- XacNhan: {28}{33}- MaHocHam: {29}{33}- MaHocVi: {30}{33}- SiSoNhomThucHanh: {31}{33}- HeSoQuyDoiThucHanhSangLyThuyet: {32}{33}{35}", 
				this.Id,
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.ChucDanh == null) ? string.Empty : this.ChucDanh.ToString(),
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
				(this.SiSo == null) ? string.Empty : this.SiSo.ToString(),
				(this.Stt == null) ? string.Empty : this.Stt.ToString(),
				(this.NoiDung == null) ? string.Empty : this.NoiDung.ToString(),
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
				(this.HeSo == null) ? string.Empty : this.HeSo.ToString(),
				(this.HeSoChucDanh == null) ? string.Empty : this.HeSoChucDanh.ToString(),
				(this.CongHeSo == null) ? string.Empty : this.CongHeSo.ToString(),
				(this.DonGia == null) ? string.Empty : this.DonGia.ToString(),
				(this.ThanhTien == null) ? string.Empty : this.ThanhTien.ToString(),
				(this.Thue == null) ? string.Empty : this.Thue.ToString(),
				(this.ConNhan == null) ? string.Empty : this.ConNhan.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.NgayXacNhan == null) ? string.Empty : this.NgayXacNhan.ToString(),
				(this.HeSoNgoaiGio == null) ? string.Empty : this.HeSoNgoaiGio.ToString(),
				(this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString(),
				(this.HeSoKhoiNganh == null) ? string.Empty : this.HeSoKhoiNganh.ToString(),
				(this.HeSoBacDaoTao == null) ? string.Empty : this.HeSoBacDaoTao.ToString(),
				(this.HeSoNgonNgu == null) ? string.Empty : this.HeSoNgonNgu.ToString(),
				(this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString(),
				(this.SoTietTkb == null) ? string.Empty : this.SoTietTkb.ToString(),
				(this.NgayNhap == null) ? string.Empty : this.NgayNhap.ToString(),
				(this.XacNhan == null) ? string.Empty : this.XacNhan.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
				(this.SiSoNhomThucHanh == null) ? string.Empty : this.SiSoNhomThucHanh.ToString(),
				(this.HeSoQuyDoiThucHanhSangLyThuyet == null) ? string.Empty : this.HeSoQuyDoiThucHanhSangLyThuyet.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThanhToanThinhGiang' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThanhToanThinhGiangEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThanhToanThinhGiang"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		public System.Int32? MaGiangVien = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// ChucDanh : 
		/// </summary>
		public System.String ChucDanh = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String MaLop = null;
		
		/// <summary>
		/// SiSo : 
		/// </summary>
		public System.Int32? SiSo = null;
		
		/// <summary>
		/// Stt : 
		/// </summary>
		public System.Int32? Stt = null;
		
		/// <summary>
		/// NoiDung : 
		/// </summary>
		public System.String NoiDung = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		public System.Decimal? SoTiet = null;
		
		/// <summary>
		/// HeSo : 
		/// </summary>
		public System.Decimal? HeSo = null;
		
		/// <summary>
		/// HeSoChucDanh : 
		/// </summary>
		public System.Decimal? HeSoChucDanh = null;
		
		/// <summary>
		/// CongHeSo : 
		/// </summary>
		public System.Decimal? CongHeSo = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		public System.Decimal? DonGia = null;
		
		/// <summary>
		/// ThanhTien : 
		/// </summary>
		public System.Decimal? ThanhTien = null;
		
		/// <summary>
		/// Thue : 
		/// </summary>
		public System.Decimal? Thue = null;
		
		/// <summary>
		/// ConNhan : 
		/// </summary>
		public System.Decimal? ConNhan = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// NgayXacNhan : 
		/// </summary>
		public System.DateTime? NgayXacNhan = null;
		
		/// <summary>
		/// HeSoNgoaiGio : 
		/// </summary>
		public System.Decimal? HeSoNgoaiGio = null;
		
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		public System.Decimal? HeSoLopDong = null;
		
		/// <summary>
		/// HeSoKhoiNganh : 
		/// </summary>
		public System.Decimal? HeSoKhoiNganh = null;
		
		/// <summary>
		/// HeSoBacDaoTao : 
		/// </summary>
		public System.Decimal? HeSoBacDaoTao = null;
		
		/// <summary>
		/// HeSoNgonNgu : 
		/// </summary>
		public System.Decimal? HeSoNgonNgu = null;
		
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		public System.Decimal? TietQuyDoi = null;
		
		/// <summary>
		/// SoTietTkb : 
		/// </summary>
		public System.Decimal? SoTietTkb = null;
		
		/// <summary>
		/// NgayNhap : 
		/// </summary>
		public System.DateTime? NgayNhap = null;
		
		/// <summary>
		/// XacNhan : 
		/// </summary>
		public System.Boolean? XacNhan = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		public System.Int32? MaHocVi = null;
		
		/// <summary>
		/// SiSoNhomThucHanh : 
		/// </summary>
		public System.Decimal? SiSoNhomThucHanh = null;
		
		/// <summary>
		/// HeSoQuyDoiThucHanhSangLyThuyet : 
		/// </summary>
		public System.Decimal? HeSoQuyDoiThucHanhSangLyThuyet = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThanhToanThinhGiangEntityData _tmp = new ThanhToanThinhGiangEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.ChucDanh = this.ChucDanh;
			_tmp.MaLop = this.MaLop;
			_tmp.SiSo = this.SiSo;
			_tmp.Stt = this.Stt;
			_tmp.NoiDung = this.NoiDung;
			_tmp.SoTiet = this.SoTiet;
			_tmp.HeSo = this.HeSo;
			_tmp.HeSoChucDanh = this.HeSoChucDanh;
			_tmp.CongHeSo = this.CongHeSo;
			_tmp.DonGia = this.DonGia;
			_tmp.ThanhTien = this.ThanhTien;
			_tmp.Thue = this.Thue;
			_tmp.ConNhan = this.ConNhan;
			_tmp.GhiChu = this.GhiChu;
			_tmp.NgayXacNhan = this.NgayXacNhan;
			_tmp.HeSoNgoaiGio = this.HeSoNgoaiGio;
			_tmp.HeSoLopDong = this.HeSoLopDong;
			_tmp.HeSoKhoiNganh = this.HeSoKhoiNganh;
			_tmp.HeSoBacDaoTao = this.HeSoBacDaoTao;
			_tmp.HeSoNgonNgu = this.HeSoNgonNgu;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.SoTietTkb = this.SoTietTkb;
			_tmp.NgayNhap = this.NgayNhap;
			_tmp.XacNhan = this.XacNhan;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.SiSoNhomThucHanh = this.SiSoNhomThucHanh;
			_tmp.HeSoQuyDoiThucHanhSangLyThuyet = this.HeSoQuyDoiThucHanhSangLyThuyet;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThanhToanThinhGiangEntityData _tmp = new ThanhToanThinhGiangEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.ChucDanh = this.ChucDanh;
			_tmp.MaLop = this.MaLop;
			_tmp.SiSo = this.SiSo;
			_tmp.Stt = this.Stt;
			_tmp.NoiDung = this.NoiDung;
			_tmp.SoTiet = this.SoTiet;
			_tmp.HeSo = this.HeSo;
			_tmp.HeSoChucDanh = this.HeSoChucDanh;
			_tmp.CongHeSo = this.CongHeSo;
			_tmp.DonGia = this.DonGia;
			_tmp.ThanhTien = this.ThanhTien;
			_tmp.Thue = this.Thue;
			_tmp.ConNhan = this.ConNhan;
			_tmp.GhiChu = this.GhiChu;
			_tmp.NgayXacNhan = this.NgayXacNhan;
			_tmp.HeSoNgoaiGio = this.HeSoNgoaiGio;
			_tmp.HeSoLopDong = this.HeSoLopDong;
			_tmp.HeSoKhoiNganh = this.HeSoKhoiNganh;
			_tmp.HeSoBacDaoTao = this.HeSoBacDaoTao;
			_tmp.HeSoNgonNgu = this.HeSoNgonNgu;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.SoTietTkb = this.SoTietTkb;
			_tmp.NgayNhap = this.NgayNhap;
			_tmp.XacNhan = this.XacNhan;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.SiSoNhomThucHanh = this.SiSoNhomThucHanh;
			_tmp.HeSoQuyDoiThucHanhSangLyThuyet = this.HeSoQuyDoiThucHanhSangLyThuyet;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhToanThinhGiangColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThanhToanThinhGiangColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhToanThinhGiangColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThanhToanThinhGiangColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhToanThinhGiangColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThanhToanThinhGiangColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThanhToanThinhGiangEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThanhToanThinhGiangEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhToanThinhGiangColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThanhToanThinhGiangColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThanhToanThinhGiangEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThanhToanThinhGiangEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThanhToanThinhGiangEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThanhToanThinhGiang"/> object.
	/// </remarks>
	public class ThanhToanThinhGiangEventArgs : System.EventArgs
	{
		private ThanhToanThinhGiangColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThanhToanThinhGiangEventArgs class.
		///</summary>
		public ThanhToanThinhGiangEventArgs(ThanhToanThinhGiangColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThanhToanThinhGiangEventArgs class.
		///</summary>
		public ThanhToanThinhGiangEventArgs(ThanhToanThinhGiangColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThanhToanThinhGiangColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThanhToanThinhGiangColumn" />
		public ThanhToanThinhGiangColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThanhToanThinhGiang related events.
	///</summary>
	public delegate void ThanhToanThinhGiangEventHandler(object sender, ThanhToanThinhGiangEventArgs e);
	
	#region ThanhToanThinhGiangComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThanhToanThinhGiangComparer : System.Collections.Generic.IComparer<ThanhToanThinhGiang>
	{
		ThanhToanThinhGiangColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThanhToanThinhGiangComparer"/> class.
        /// </summary>
		public ThanhToanThinhGiangComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThanhToanThinhGiangComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThanhToanThinhGiangComparer(ThanhToanThinhGiangColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThanhToanThinhGiang"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThanhToanThinhGiang"/> to compare.</param>
        /// <param name="b">The second <c>ThanhToanThinhGiang</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThanhToanThinhGiang a, ThanhToanThinhGiang b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThanhToanThinhGiang entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThanhToanThinhGiang a, ThanhToanThinhGiang b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThanhToanThinhGiangColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThanhToanThinhGiangKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThanhToanThinhGiang"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThanhToanThinhGiangKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangKey class.
		/// </summary>
		public ThanhToanThinhGiangKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangKey class.
		/// </summary>
		public ThanhToanThinhGiangKey(ThanhToanThinhGiangBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangKey class.
		/// </summary>
		public ThanhToanThinhGiangKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThanhToanThinhGiangBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThanhToanThinhGiangBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThanhToanThinhGiangColumn Enum
	
	/// <summary>
	/// Enumerate the ThanhToanThinhGiang columns.
	/// </summary>
	[Serializable]
	public enum ThanhToanThinhGiangColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 2,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 3,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien = 4,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaLopHocPhan = 5,
		/// <summary>
		/// ChucDanh : 
		/// </summary>
		[EnumTextValue("Chuc Danh")]
		[ColumnEnum("ChucDanh", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ChucDanh = 6,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("Ma Lop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		MaLop = 7,
		/// <summary>
		/// SiSo : 
		/// </summary>
		[EnumTextValue("Si So")]
		[ColumnEnum("SiSo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSo = 8,
		/// <summary>
		/// Stt : 
		/// </summary>
		[EnumTextValue("Stt")]
		[ColumnEnum("Stt", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Stt = 9,
		/// <summary>
		/// NoiDung : 
		/// </summary>
		[EnumTextValue("Noi Dung")]
		[ColumnEnum("NoiDung", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		NoiDung = 10,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("So Tiet")]
		[ColumnEnum("SoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet = 11,
		/// <summary>
		/// HeSo : 
		/// </summary>
		[EnumTextValue("He So")]
		[ColumnEnum("HeSo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSo = 12,
		/// <summary>
		/// HeSoChucDanh : 
		/// </summary>
		[EnumTextValue("He So Chuc Danh")]
		[ColumnEnum("HeSoChucDanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoChucDanh = 13,
		/// <summary>
		/// CongHeSo : 
		/// </summary>
		[EnumTextValue("Cong He So")]
		[ColumnEnum("CongHeSo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CongHeSo = 14,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("Don Gia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGia = 15,
		/// <summary>
		/// ThanhTien : 
		/// </summary>
		[EnumTextValue("Thanh Tien")]
		[ColumnEnum("ThanhTien", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ThanhTien = 16,
		/// <summary>
		/// Thue : 
		/// </summary>
		[EnumTextValue("Thue")]
		[ColumnEnum("Thue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Thue = 17,
		/// <summary>
		/// ConNhan : 
		/// </summary>
		[EnumTextValue("Con Nhan")]
		[ColumnEnum("ConNhan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ConNhan = 18,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		GhiChu = 19,
		/// <summary>
		/// NgayXacNhan : 
		/// </summary>
		[EnumTextValue("Ngay Xac Nhan")]
		[ColumnEnum("NgayXacNhan", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayXacNhan = 20,
		/// <summary>
		/// HeSoNgoaiGio : 
		/// </summary>
		[EnumTextValue("He So Ngoai Gio")]
		[ColumnEnum("HeSoNgoaiGio", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoNgoaiGio = 21,
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		[EnumTextValue("He So Lop Dong")]
		[ColumnEnum("HeSoLopDong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLopDong = 22,
		/// <summary>
		/// HeSoKhoiNganh : 
		/// </summary>
		[EnumTextValue("He So Khoi Nganh")]
		[ColumnEnum("HeSoKhoiNganh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoKhoiNganh = 23,
		/// <summary>
		/// HeSoBacDaoTao : 
		/// </summary>
		[EnumTextValue("He So Bac Dao Tao")]
		[ColumnEnum("HeSoBacDaoTao", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoBacDaoTao = 24,
		/// <summary>
		/// HeSoNgonNgu : 
		/// </summary>
		[EnumTextValue("He So Ngon Ngu")]
		[ColumnEnum("HeSoNgonNgu", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoNgonNgu = 25,
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		[EnumTextValue("Tiet Quy Doi")]
		[ColumnEnum("TietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietQuyDoi = 26,
		/// <summary>
		/// SoTietTkb : 
		/// </summary>
		[EnumTextValue("So Tiet Tkb")]
		[ColumnEnum("SoTietTkb", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietTkb = 27,
		/// <summary>
		/// NgayNhap : 
		/// </summary>
		[EnumTextValue("Ngay Nhap")]
		[ColumnEnum("NgayNhap", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayNhap = 28,
		/// <summary>
		/// XacNhan : 
		/// </summary>
		[EnumTextValue("Xac Nhan")]
		[ColumnEnum("XacNhan", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		XacNhan = 29,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 30,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("Ma Hoc Vi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi = 31,
		/// <summary>
		/// SiSoNhomThucHanh : 
		/// </summary>
		[EnumTextValue("Si So Nhom Thuc Hanh")]
		[ColumnEnum("SiSoNhomThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SiSoNhomThucHanh = 32,
		/// <summary>
		/// HeSoQuyDoiThucHanhSangLyThuyet : 
		/// </summary>
		[EnumTextValue("He So Quy Doi Thuc Hanh Sang Ly Thuyet")]
		[ColumnEnum("HeSoQuyDoiThucHanhSangLyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoQuyDoiThucHanhSangLyThuyet = 33
	}//End enum

	#endregion ThanhToanThinhGiangColumn Enum

} // end namespace
