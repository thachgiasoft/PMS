
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file KetQuaTinhTheoTuan.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'KetQuaTinhTheoTuan' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class KetQuaTinhTheoTuanBase : EntityBase, IKetQuaTinhTheoTuan, IEntityId<KetQuaTinhTheoTuanKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private KetQuaTinhTheoTuanEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private KetQuaTinhTheoTuanEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private KetQuaTinhTheoTuanEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<KetQuaTinhTheoTuan> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KetQuaTinhTheoTuanEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KetQuaTinhTheoTuanEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="KetQuaTinhTheoTuanBase"/> instance.
		///</summary>
		public KetQuaTinhTheoTuanBase()
		{
			this.entityData = new KetQuaTinhTheoTuanEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="KetQuaTinhTheoTuanBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_tietNghiaVu"></param>
		///<param name="_tietGioiHan"></param>
		///<param name="_ngayTao"></param>
		///<param name="_tuan"></param>
		///<param name="_nam"></param>
		public KetQuaTinhTheoTuanBase(System.Int32? _maGiangVien, System.Int32? _tietNghiaVu, 
			System.Int32? _tietGioiHan, System.DateTime? _ngayTao, System.Int32? _tuan, 
			System.Int32? _nam)
		{
			this.entityData = new KetQuaTinhTheoTuanEntityData();
			this.backupData = null;

			this.MaGiangVien = _maGiangVien;
			this.TietNghiaVu = _tietNghiaVu;
			this.TietGioiHan = _tietGioiHan;
			this.NgayTao = _ngayTao;
			this.Tuan = _tuan;
			this.Nam = _nam;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="KetQuaTinhTheoTuan"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_tietNghiaVu"></param>
		///<param name="_tietGioiHan"></param>
		///<param name="_ngayTao"></param>
		///<param name="_tuan"></param>
		///<param name="_nam"></param>
		public static KetQuaTinhTheoTuan CreateKetQuaTinhTheoTuan(System.Int32? _maGiangVien, System.Int32? _tietNghiaVu, 
			System.Int32? _tietGioiHan, System.DateTime? _ngayTao, System.Int32? _tuan, 
			System.Int32? _nam)
		{
			KetQuaTinhTheoTuan newKetQuaTinhTheoTuan = new KetQuaTinhTheoTuan();
			newKetQuaTinhTheoTuan.MaGiangVien = _maGiangVien;
			newKetQuaTinhTheoTuan.TietNghiaVu = _tietNghiaVu;
			newKetQuaTinhTheoTuan.TietGioiHan = _tietGioiHan;
			newKetQuaTinhTheoTuan.NgayTao = _ngayTao;
			newKetQuaTinhTheoTuan.Tuan = _tuan;
			newKetQuaTinhTheoTuan.Nam = _nam;
			return newKetQuaTinhTheoTuan;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaKetQua property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaKetQua
		{
			get
			{
				return this.entityData.MaKetQua; 
			}
			
			set
			{
				if (this.entityData.MaKetQua == value)
					return;
				
                OnPropertyChanging("MaKetQua");                    
				OnColumnChanging(KetQuaTinhTheoTuanColumn.MaKetQua, this.entityData.MaKetQua);
				this.entityData.MaKetQua = value;
				this.EntityId.MaKetQua = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KetQuaTinhTheoTuanColumn.MaKetQua, this.entityData.MaKetQua);
				OnPropertyChanged("MaKetQua");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this.entityData.MaGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaGiangVien == value)
					return;
				
                OnPropertyChanging("MaGiangVien");                    
				OnColumnChanging(KetQuaTinhTheoTuanColumn.MaGiangVien, this.entityData.MaGiangVien);
				this.entityData.MaGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KetQuaTinhTheoTuanColumn.MaGiangVien, this.entityData.MaGiangVien);
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietNghiaVu property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietNghiaVu
		{
			get
			{
				return this.entityData.TietNghiaVu; 
			}
			
			set
			{
				if (this.entityData.TietNghiaVu == value)
					return;
				
                OnPropertyChanging("TietNghiaVu");                    
				OnColumnChanging(KetQuaTinhTheoTuanColumn.TietNghiaVu, this.entityData.TietNghiaVu);
				this.entityData.TietNghiaVu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KetQuaTinhTheoTuanColumn.TietNghiaVu, this.entityData.TietNghiaVu);
				OnPropertyChanged("TietNghiaVu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietGioiHan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietGioiHan
		{
			get
			{
				return this.entityData.TietGioiHan; 
			}
			
			set
			{
				if (this.entityData.TietGioiHan == value)
					return;
				
                OnPropertyChanging("TietGioiHan");                    
				OnColumnChanging(KetQuaTinhTheoTuanColumn.TietGioiHan, this.entityData.TietGioiHan);
				this.entityData.TietGioiHan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KetQuaTinhTheoTuanColumn.TietGioiHan, this.entityData.TietGioiHan);
				OnPropertyChanged("TietGioiHan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayTao property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayTao
		{
			get
			{
				return this.entityData.NgayTao; 
			}
			
			set
			{
				if (this.entityData.NgayTao == value)
					return;
				
                OnPropertyChanging("NgayTao");                    
				OnColumnChanging(KetQuaTinhTheoTuanColumn.NgayTao, this.entityData.NgayTao);
				this.entityData.NgayTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KetQuaTinhTheoTuanColumn.NgayTao, this.entityData.NgayTao);
				OnPropertyChanged("NgayTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tuan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Tuan
		{
			get
			{
				return this.entityData.Tuan; 
			}
			
			set
			{
				if (this.entityData.Tuan == value)
					return;
				
                OnPropertyChanging("Tuan");                    
				OnColumnChanging(KetQuaTinhTheoTuanColumn.Tuan, this.entityData.Tuan);
				this.entityData.Tuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KetQuaTinhTheoTuanColumn.Tuan, this.entityData.Tuan);
				OnPropertyChanged("Tuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Nam
		{
			get
			{
				return this.entityData.Nam; 
			}
			
			set
			{
				if (this.entityData.Nam == value)
					return;
				
                OnPropertyChanging("Nam");                    
				OnColumnChanging(KetQuaTinhTheoTuanColumn.Nam, this.entityData.Nam);
				this.entityData.Nam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KetQuaTinhTheoTuanColumn.Nam, this.entityData.Nam);
				OnPropertyChanged("Nam");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "KetQuaTinhTheoTuan"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaKetQua", "MaGiangVien", "TietNghiaVu", "TietGioiHan", "NgayTao", "Tuan", "Nam"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as KetQuaTinhTheoTuanEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (KetQuaTinhTheoTuan) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<KetQuaTinhTheoTuan>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as KetQuaTinhTheoTuan);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed KetQuaTinhTheoTuan Entity 
		///</summary>
		protected virtual KetQuaTinhTheoTuan Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			KetQuaTinhTheoTuan copy = new KetQuaTinhTheoTuan();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaKetQua = this.MaKetQua;
				copy.MaGiangVien = this.MaGiangVien;
				copy.TietNghiaVu = this.TietNghiaVu;
				copy.TietGioiHan = this.TietGioiHan;
				copy.NgayTao = this.NgayTao;
				copy.Tuan = this.Tuan;
				copy.Nam = this.Nam;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed KetQuaTinhTheoTuan Entity 
		///</summary>
		public virtual KetQuaTinhTheoTuan Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed KetQuaTinhTheoTuan Entity which is a deep copy of the current entity.
		///</summary>
		public virtual KetQuaTinhTheoTuan DeepCopy()
		{
			return EntityHelper.Clone<KetQuaTinhTheoTuan>(this as KetQuaTinhTheoTuan);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as KetQuaTinhTheoTuanEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new KetQuaTinhTheoTuanEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as KetQuaTinhTheoTuanEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(KetQuaTinhTheoTuanColumn column)
		{
			switch(column)
			{
					case KetQuaTinhTheoTuanColumn.MaKetQua:
					return entityData.MaKetQua != _originalData.MaKetQua;
					case KetQuaTinhTheoTuanColumn.MaGiangVien:
					return entityData.MaGiangVien != _originalData.MaGiangVien;
					case KetQuaTinhTheoTuanColumn.TietNghiaVu:
					return entityData.TietNghiaVu != _originalData.TietNghiaVu;
					case KetQuaTinhTheoTuanColumn.TietGioiHan:
					return entityData.TietGioiHan != _originalData.TietGioiHan;
					case KetQuaTinhTheoTuanColumn.NgayTao:
					return entityData.NgayTao != _originalData.NgayTao;
					case KetQuaTinhTheoTuanColumn.Tuan:
					return entityData.Tuan != _originalData.Tuan;
					case KetQuaTinhTheoTuanColumn.Nam:
					return entityData.Nam != _originalData.Nam;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< KetQuaTinhTheoTuanColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaKetQua != _originalData.MaKetQua;
			result = result || entityData.MaGiangVien != _originalData.MaGiangVien;
			result = result || entityData.TietNghiaVu != _originalData.TietNghiaVu;
			result = result || entityData.TietGioiHan != _originalData.TietGioiHan;
			result = result || entityData.NgayTao != _originalData.NgayTao;
			result = result || entityData.Tuan != _originalData.Tuan;
			result = result || entityData.Nam != _originalData.Nam;
			return result;
		}	
		
		///<summary>
		///  Returns a KetQuaTinhTheoTuan Entity with the original data.
		///</summary>
		public KetQuaTinhTheoTuan GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateKetQuaTinhTheoTuan(
				_originalData.MaGiangVien,
				_originalData.TietNghiaVu,
				_originalData.TietGioiHan,
				_originalData.NgayTao,
				_originalData.Tuan,
				_originalData.Nam
				);
				
			return (KetQuaTinhTheoTuan)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="KetQuaTinhTheoTuanBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is KetQuaTinhTheoTuanBase)
				return ValueEquals(this, (KetQuaTinhTheoTuanBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="KetQuaTinhTheoTuanBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaKetQua.GetHashCode() ^ 
					((this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString()).GetHashCode() ^ 
					((this.TietNghiaVu == null) ? string.Empty : this.TietNghiaVu.ToString()).GetHashCode() ^ 
					((this.TietGioiHan == null) ? string.Empty : this.TietGioiHan.ToString()).GetHashCode() ^ 
					((this.NgayTao == null) ? string.Empty : this.NgayTao.ToString()).GetHashCode() ^ 
					((this.Tuan == null) ? string.Empty : this.Tuan.ToString()).GetHashCode() ^ 
					((this.Nam == null) ? string.Empty : this.Nam.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="KetQuaTinhTheoTuanBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(KetQuaTinhTheoTuanBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="KetQuaTinhTheoTuanBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="KetQuaTinhTheoTuanBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="KetQuaTinhTheoTuanBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(KetQuaTinhTheoTuanBase Object1, KetQuaTinhTheoTuanBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaKetQua != Object2.MaKetQua)
				equal = false;
			if ( Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object2.MaGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.TietNghiaVu != null && Object2.TietNghiaVu != null )
			{
				if (Object1.TietNghiaVu != Object2.TietNghiaVu)
					equal = false;
			}
			else if (Object1.TietNghiaVu == null ^ Object2.TietNghiaVu == null )
			{
				equal = false;
			}
			if ( Object1.TietGioiHan != null && Object2.TietGioiHan != null )
			{
				if (Object1.TietGioiHan != Object2.TietGioiHan)
					equal = false;
			}
			else if (Object1.TietGioiHan == null ^ Object2.TietGioiHan == null )
			{
				equal = false;
			}
			if ( Object1.NgayTao != null && Object2.NgayTao != null )
			{
				if (Object1.NgayTao != Object2.NgayTao)
					equal = false;
			}
			else if (Object1.NgayTao == null ^ Object2.NgayTao == null )
			{
				equal = false;
			}
			if ( Object1.Tuan != null && Object2.Tuan != null )
			{
				if (Object1.Tuan != Object2.Tuan)
					equal = false;
			}
			else if (Object1.Tuan == null ^ Object2.Tuan == null )
			{
				equal = false;
			}
			if ( Object1.Nam != null && Object2.Nam != null )
			{
				if (Object1.Nam != Object2.Nam)
					equal = false;
			}
			else if (Object1.Nam == null ^ Object2.Nam == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((KetQuaTinhTheoTuanBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static KetQuaTinhTheoTuanComparer GetComparer()
        {
            return new KetQuaTinhTheoTuanComparer();
        }
        */

        // Comparer delegates back to KetQuaTinhTheoTuan
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(KetQuaTinhTheoTuan rhs, KetQuaTinhTheoTuanColumn which)
        {
            switch (which)
            {
            	
            	
            	case KetQuaTinhTheoTuanColumn.MaKetQua:
            		return this.MaKetQua.CompareTo(rhs.MaKetQua);
            		
            		                 
            	
            	
            	case KetQuaTinhTheoTuanColumn.MaGiangVien:
            		return this.MaGiangVien.Value.CompareTo(rhs.MaGiangVien.Value);
            		
            		                 
            	
            	
            	case KetQuaTinhTheoTuanColumn.TietNghiaVu:
            		return this.TietNghiaVu.Value.CompareTo(rhs.TietNghiaVu.Value);
            		
            		                 
            	
            	
            	case KetQuaTinhTheoTuanColumn.TietGioiHan:
            		return this.TietGioiHan.Value.CompareTo(rhs.TietGioiHan.Value);
            		
            		                 
            	
            	
            	case KetQuaTinhTheoTuanColumn.NgayTao:
            		return this.NgayTao.Value.CompareTo(rhs.NgayTao.Value);
            		
            		                 
            	
            	
            	case KetQuaTinhTheoTuanColumn.Tuan:
            		return this.Tuan.Value.CompareTo(rhs.Tuan.Value);
            		
            		                 
            	
            	
            	case KetQuaTinhTheoTuanColumn.Nam:
            		return this.Nam.Value.CompareTo(rhs.Nam.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<KetQuaTinhTheoTuanKey> Members
		
		// member variable for the EntityId property
		private KetQuaTinhTheoTuanKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual KetQuaTinhTheoTuanKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new KetQuaTinhTheoTuanKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("KetQuaTinhTheoTuan")
					.Append("|").Append( this.MaKetQua.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- MaKetQua: {0}{7}- MaGiangVien: {1}{7}- TietNghiaVu: {2}{7}- TietGioiHan: {3}{7}- NgayTao: {4}{7}- Tuan: {5}{7}- Nam: {6}{7}{9}", 
				this.MaKetQua,
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
				(this.TietNghiaVu == null) ? string.Empty : this.TietNghiaVu.ToString(),
				(this.TietGioiHan == null) ? string.Empty : this.TietGioiHan.ToString(),
				(this.NgayTao == null) ? string.Empty : this.NgayTao.ToString(),
				(this.Tuan == null) ? string.Empty : this.Tuan.ToString(),
				(this.Nam == null) ? string.Empty : this.Nam.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'KetQuaTinhTheoTuan' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class KetQuaTinhTheoTuanEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaKetQua : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "KetQuaTinhTheoTuan"</remarks>
		public System.Int32 MaKetQua;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		public System.Int32? MaGiangVien = null;
		
		/// <summary>
		/// TietNghiaVu : 
		/// </summary>
		public System.Int32? TietNghiaVu = null;
		
		/// <summary>
		/// TietGioiHan : 
		/// </summary>
		public System.Int32? TietGioiHan = null;
		
		/// <summary>
		/// NgayTao : 
		/// </summary>
		public System.DateTime? NgayTao = null;
		
		/// <summary>
		/// Tuan : 
		/// </summary>
		public System.Int32? Tuan = null;
		
		/// <summary>
		/// Nam : 
		/// </summary>
		public System.Int32? Nam = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			KetQuaTinhTheoTuanEntityData _tmp = new KetQuaTinhTheoTuanEntityData();
						
			_tmp.MaKetQua = this.MaKetQua;
			
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.TietNghiaVu = this.TietNghiaVu;
			_tmp.TietGioiHan = this.TietGioiHan;
			_tmp.NgayTao = this.NgayTao;
			_tmp.Tuan = this.Tuan;
			_tmp.Nam = this.Nam;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			KetQuaTinhTheoTuanEntityData _tmp = new KetQuaTinhTheoTuanEntityData();
						
			_tmp.MaKetQua = this.MaKetQua;
			
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.TietNghiaVu = this.TietNghiaVu;
			_tmp.TietGioiHan = this.TietGioiHan;
			_tmp.NgayTao = this.NgayTao;
			_tmp.Tuan = this.Tuan;
			_tmp.Nam = this.Nam;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KetQuaTinhTheoTuanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(KetQuaTinhTheoTuanColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KetQuaTinhTheoTuanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(KetQuaTinhTheoTuanColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KetQuaTinhTheoTuanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(KetQuaTinhTheoTuanColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				KetQuaTinhTheoTuanEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new KetQuaTinhTheoTuanEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KetQuaTinhTheoTuanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(KetQuaTinhTheoTuanColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				KetQuaTinhTheoTuanEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new KetQuaTinhTheoTuanEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region KetQuaTinhTheoTuanEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="KetQuaTinhTheoTuan"/> object.
	/// </remarks>
	public class KetQuaTinhTheoTuanEventArgs : System.EventArgs
	{
		private KetQuaTinhTheoTuanColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the KetQuaTinhTheoTuanEventArgs class.
		///</summary>
		public KetQuaTinhTheoTuanEventArgs(KetQuaTinhTheoTuanColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the KetQuaTinhTheoTuanEventArgs class.
		///</summary>
		public KetQuaTinhTheoTuanEventArgs(KetQuaTinhTheoTuanColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The KetQuaTinhTheoTuanColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="KetQuaTinhTheoTuanColumn" />
		public KetQuaTinhTheoTuanColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all KetQuaTinhTheoTuan related events.
	///</summary>
	public delegate void KetQuaTinhTheoTuanEventHandler(object sender, KetQuaTinhTheoTuanEventArgs e);
	
	#region KetQuaTinhTheoTuanComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class KetQuaTinhTheoTuanComparer : System.Collections.Generic.IComparer<KetQuaTinhTheoTuan>
	{
		KetQuaTinhTheoTuanColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:KetQuaTinhTheoTuanComparer"/> class.
        /// </summary>
		public KetQuaTinhTheoTuanComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:KetQuaTinhTheoTuanComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public KetQuaTinhTheoTuanComparer(KetQuaTinhTheoTuanColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="KetQuaTinhTheoTuan"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="KetQuaTinhTheoTuan"/> to compare.</param>
        /// <param name="b">The second <c>KetQuaTinhTheoTuan</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(KetQuaTinhTheoTuan a, KetQuaTinhTheoTuan b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(KetQuaTinhTheoTuan entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(KetQuaTinhTheoTuan a, KetQuaTinhTheoTuan b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public KetQuaTinhTheoTuanColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region KetQuaTinhTheoTuanKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="KetQuaTinhTheoTuan"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class KetQuaTinhTheoTuanKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanKey class.
		/// </summary>
		public KetQuaTinhTheoTuanKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanKey class.
		/// </summary>
		public KetQuaTinhTheoTuanKey(KetQuaTinhTheoTuanBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaKetQua = entity.MaKetQua;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanKey class.
		/// </summary>
		public KetQuaTinhTheoTuanKey(System.Int32 _maKetQua)
		{
			#region Init Properties

			this.MaKetQua = _maKetQua;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private KetQuaTinhTheoTuanBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public KetQuaTinhTheoTuanBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaKetQua property
		private System.Int32 _maKetQua;
		
		/// <summary>
		/// Gets or sets the MaKetQua property.
		/// </summary>
		public System.Int32 MaKetQua
		{
			get { return _maKetQua; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaKetQua = value;
				
				_maKetQua = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaKetQua = ( values["MaKetQua"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaKetQua"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaKetQua", MaKetQua);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaKetQua: {0}{1}",
								MaKetQua,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region KetQuaTinhTheoTuanColumn Enum
	
	/// <summary>
	/// Enumerate the KetQuaTinhTheoTuan columns.
	/// </summary>
	[Serializable]
	public enum KetQuaTinhTheoTuanColumn : int
	{
		/// <summary>
		/// MaKetQua : 
		/// </summary>
		[EnumTextValue("Ma Ket Qua")]
		[ColumnEnum("MaKetQua", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaKetQua = 1,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien = 2,
		/// <summary>
		/// TietNghiaVu : 
		/// </summary>
		[EnumTextValue("Tiet Nghia Vu")]
		[ColumnEnum("TietNghiaVu", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietNghiaVu = 3,
		/// <summary>
		/// TietGioiHan : 
		/// </summary>
		[EnumTextValue("Tiet Gioi Han")]
		[ColumnEnum("TietGioiHan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietGioiHan = 4,
		/// <summary>
		/// NgayTao : 
		/// </summary>
		[EnumTextValue("Ngay Tao")]
		[ColumnEnum("NgayTao", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayTao = 5,
		/// <summary>
		/// Tuan : 
		/// </summary>
		[EnumTextValue("Tuan")]
		[ColumnEnum("Tuan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Tuan = 6,
		/// <summary>
		/// Nam : 
		/// </summary>
		[EnumTextValue("Nam")]
		[ColumnEnum("Nam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Nam = 7
	}//End enum

	#endregion KetQuaTinhTheoTuanColumn Enum

} // end namespace
