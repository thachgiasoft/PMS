
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file DuTruGioGiangTruocLopHocPhan.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'DuTruGioGiangTruocLopHocPhan' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DuTruGioGiangTruocLopHocPhanBase : EntityBase, IDuTruGioGiangTruocLopHocPhan, IEntityId<DuTruGioGiangTruocLopHocPhanKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DuTruGioGiangTruocLopHocPhanEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DuTruGioGiangTruocLopHocPhanEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DuTruGioGiangTruocLopHocPhanEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DuTruGioGiangTruocLopHocPhan> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DuTruGioGiangTruocLopHocPhanEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DuTruGioGiangTruocLopHocPhanEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DuTruGioGiangTruocLopHocPhanBase"/> instance.
		///</summary>
		public DuTruGioGiangTruocLopHocPhanBase()
		{
			this.entityData = new DuTruGioGiangTruocLopHocPhanEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DuTruGioGiangTruocLopHocPhanBase"/> instance.
		///</summary>
		///<param name="_maLopSinhVien"></param>
		///<param name="_tenLopSinhVien"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_siSo"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maDonVi"></param>
		///<param name="_heSoBacDaoTao"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_heSoMonThucTap"></param>
		///<param name="_heSoCoVanHocTap"></param>
		///<param name="_soTietQuyDoi"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		public DuTruGioGiangTruocLopHocPhanBase(System.String _maLopSinhVien, System.String _tenLopSinhVien, 
			System.String _maMonHoc, System.String _tenMonHoc, System.Decimal? _soTinChi, 
			System.Decimal? _lyThuyet, System.Decimal? _thucHanh, System.Int32? _siSo, 
			System.String _maBacDaoTao, System.String _maDonVi, System.Decimal? _heSoBacDaoTao, 
			System.Decimal? _heSoLopDong, System.Decimal? _heSoMonThucTap, System.Decimal? _heSoCoVanHocTap, 
			System.Decimal? _soTietQuyDoi, System.String _namHoc, System.String _hocKy)
		{
			this.entityData = new DuTruGioGiangTruocLopHocPhanEntityData();
			this.backupData = null;

			this.MaLopSinhVien = _maLopSinhVien;
			this.TenLopSinhVien = _tenLopSinhVien;
			this.MaMonHoc = _maMonHoc;
			this.TenMonHoc = _tenMonHoc;
			this.SoTinChi = _soTinChi;
			this.LyThuyet = _lyThuyet;
			this.ThucHanh = _thucHanh;
			this.SiSo = _siSo;
			this.MaBacDaoTao = _maBacDaoTao;
			this.MaDonVi = _maDonVi;
			this.HeSoBacDaoTao = _heSoBacDaoTao;
			this.HeSoLopDong = _heSoLopDong;
			this.HeSoMonThucTap = _heSoMonThucTap;
			this.HeSoCoVanHocTap = _heSoCoVanHocTap;
			this.SoTietQuyDoi = _soTietQuyDoi;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DuTruGioGiangTruocLopHocPhan"/> instance.
		///</summary>
		///<param name="_maLopSinhVien"></param>
		///<param name="_tenLopSinhVien"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_siSo"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maDonVi"></param>
		///<param name="_heSoBacDaoTao"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_heSoMonThucTap"></param>
		///<param name="_heSoCoVanHocTap"></param>
		///<param name="_soTietQuyDoi"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		public static DuTruGioGiangTruocLopHocPhan CreateDuTruGioGiangTruocLopHocPhan(System.String _maLopSinhVien, System.String _tenLopSinhVien, 
			System.String _maMonHoc, System.String _tenMonHoc, System.Decimal? _soTinChi, 
			System.Decimal? _lyThuyet, System.Decimal? _thucHanh, System.Int32? _siSo, 
			System.String _maBacDaoTao, System.String _maDonVi, System.Decimal? _heSoBacDaoTao, 
			System.Decimal? _heSoLopDong, System.Decimal? _heSoMonThucTap, System.Decimal? _heSoCoVanHocTap, 
			System.Decimal? _soTietQuyDoi, System.String _namHoc, System.String _hocKy)
		{
			DuTruGioGiangTruocLopHocPhan newDuTruGioGiangTruocLopHocPhan = new DuTruGioGiangTruocLopHocPhan();
			newDuTruGioGiangTruocLopHocPhan.MaLopSinhVien = _maLopSinhVien;
			newDuTruGioGiangTruocLopHocPhan.TenLopSinhVien = _tenLopSinhVien;
			newDuTruGioGiangTruocLopHocPhan.MaMonHoc = _maMonHoc;
			newDuTruGioGiangTruocLopHocPhan.TenMonHoc = _tenMonHoc;
			newDuTruGioGiangTruocLopHocPhan.SoTinChi = _soTinChi;
			newDuTruGioGiangTruocLopHocPhan.LyThuyet = _lyThuyet;
			newDuTruGioGiangTruocLopHocPhan.ThucHanh = _thucHanh;
			newDuTruGioGiangTruocLopHocPhan.SiSo = _siSo;
			newDuTruGioGiangTruocLopHocPhan.MaBacDaoTao = _maBacDaoTao;
			newDuTruGioGiangTruocLopHocPhan.MaDonVi = _maDonVi;
			newDuTruGioGiangTruocLopHocPhan.HeSoBacDaoTao = _heSoBacDaoTao;
			newDuTruGioGiangTruocLopHocPhan.HeSoLopDong = _heSoLopDong;
			newDuTruGioGiangTruocLopHocPhan.HeSoMonThucTap = _heSoMonThucTap;
			newDuTruGioGiangTruocLopHocPhan.HeSoCoVanHocTap = _heSoCoVanHocTap;
			newDuTruGioGiangTruocLopHocPhan.SoTietQuyDoi = _soTietQuyDoi;
			newDuTruGioGiangTruocLopHocPhan.NamHoc = _namHoc;
			newDuTruGioGiangTruocLopHocPhan.HocKy = _hocKy;
			return newDuTruGioGiangTruocLopHocPhan;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopSinhVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaLopSinhVien
		{
			get
			{
				return this.entityData.MaLopSinhVien; 
			}
			
			set
			{
				if (this.entityData.MaLopSinhVien == value)
					return;
				
                OnPropertyChanging("MaLopSinhVien");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.MaLopSinhVien, this.entityData.MaLopSinhVien);
				this.entityData.MaLopSinhVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.MaLopSinhVien, this.entityData.MaLopSinhVien);
				OnPropertyChanged("MaLopSinhVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenLopSinhVien property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TenLopSinhVien
		{
			get
			{
				return this.entityData.TenLopSinhVien; 
			}
			
			set
			{
				if (this.entityData.TenLopSinhVien == value)
					return;
				
                OnPropertyChanging("TenLopSinhVien");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.TenLopSinhVien, this.entityData.TenLopSinhVien);
				this.entityData.TenLopSinhVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.TenLopSinhVien, this.entityData.TenLopSinhVien);
				OnPropertyChanged("TenLopSinhVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this.entityData.TenMonHoc; 
			}
			
			set
			{
				if (this.entityData.TenMonHoc == value)
					return;
				
                OnPropertyChanging("TenMonHoc");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.TenMonHoc, this.entityData.TenMonHoc);
				this.entityData.TenMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.TenMonHoc, this.entityData.TenMonHoc);
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTinChi
		{
			get
			{
				return this.entityData.SoTinChi; 
			}
			
			set
			{
				if (this.entityData.SoTinChi == value)
					return;
				
                OnPropertyChanging("SoTinChi");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.SoTinChi, this.entityData.SoTinChi);
				this.entityData.SoTinChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.SoTinChi, this.entityData.SoTinChi);
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LyThuyet
		{
			get
			{
				return this.entityData.LyThuyet; 
			}
			
			set
			{
				if (this.entityData.LyThuyet == value)
					return;
				
                OnPropertyChanging("LyThuyet");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.LyThuyet, this.entityData.LyThuyet);
				this.entityData.LyThuyet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.LyThuyet, this.entityData.LyThuyet);
				OnPropertyChanged("LyThuyet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ThucHanh
		{
			get
			{
				return this.entityData.ThucHanh; 
			}
			
			set
			{
				if (this.entityData.ThucHanh == value)
					return;
				
                OnPropertyChanging("ThucHanh");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.ThucHanh, this.entityData.ThucHanh);
				this.entityData.ThucHanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.ThucHanh, this.entityData.ThucHanh);
				OnPropertyChanged("ThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiSo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiSo
		{
			get
			{
				return this.entityData.SiSo; 
			}
			
			set
			{
				if (this.entityData.SiSo == value)
					return;
				
                OnPropertyChanging("SiSo");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.SiSo, this.entityData.SiSo);
				this.entityData.SiSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.SiSo, this.entityData.SiSo);
				OnPropertyChanged("SiSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaBacDaoTao
		{
			get
			{
				return this.entityData.MaBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaBacDaoTao == value)
					return;
				
                OnPropertyChanging("MaBacDaoTao");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				this.entityData.MaBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				OnPropertyChanged("MaBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaDonVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaDonVi
		{
			get
			{
				return this.entityData.MaDonVi; 
			}
			
			set
			{
				if (this.entityData.MaDonVi == value)
					return;
				
                OnPropertyChanging("MaDonVi");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.MaDonVi, this.entityData.MaDonVi);
				this.entityData.MaDonVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.MaDonVi, this.entityData.MaDonVi);
				OnPropertyChanged("MaDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoBacDaoTao
		{
			get
			{
				return this.entityData.HeSoBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.HeSoBacDaoTao == value)
					return;
				
                OnPropertyChanging("HeSoBacDaoTao");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.HeSoBacDaoTao, this.entityData.HeSoBacDaoTao);
				this.entityData.HeSoBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.HeSoBacDaoTao, this.entityData.HeSoBacDaoTao);
				OnPropertyChanged("HeSoBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoLopDong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoLopDong
		{
			get
			{
				return this.entityData.HeSoLopDong; 
			}
			
			set
			{
				if (this.entityData.HeSoLopDong == value)
					return;
				
                OnPropertyChanging("HeSoLopDong");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.HeSoLopDong, this.entityData.HeSoLopDong);
				this.entityData.HeSoLopDong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.HeSoLopDong, this.entityData.HeSoLopDong);
				OnPropertyChanged("HeSoLopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoMonThucTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoMonThucTap
		{
			get
			{
				return this.entityData.HeSoMonThucTap; 
			}
			
			set
			{
				if (this.entityData.HeSoMonThucTap == value)
					return;
				
                OnPropertyChanging("HeSoMonThucTap");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.HeSoMonThucTap, this.entityData.HeSoMonThucTap);
				this.entityData.HeSoMonThucTap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.HeSoMonThucTap, this.entityData.HeSoMonThucTap);
				OnPropertyChanged("HeSoMonThucTap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoCoVanHocTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoCoVanHocTap
		{
			get
			{
				return this.entityData.HeSoCoVanHocTap; 
			}
			
			set
			{
				if (this.entityData.HeSoCoVanHocTap == value)
					return;
				
                OnPropertyChanging("HeSoCoVanHocTap");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.HeSoCoVanHocTap, this.entityData.HeSoCoVanHocTap);
				this.entityData.HeSoCoVanHocTap = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.HeSoCoVanHocTap, this.entityData.HeSoCoVanHocTap);
				OnPropertyChanged("HeSoCoVanHocTap");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTietQuyDoi
		{
			get
			{
				return this.entityData.SoTietQuyDoi; 
			}
			
			set
			{
				if (this.entityData.SoTietQuyDoi == value)
					return;
				
                OnPropertyChanging("SoTietQuyDoi");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.SoTietQuyDoi, this.entityData.SoTietQuyDoi);
				this.entityData.SoTietQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.SoTietQuyDoi, this.entityData.SoTietQuyDoi);
				OnPropertyChanged("SoTietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopSinhVien", "Ma Lop Sinh Vien", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenLopSinhVien", "Ten Lop Sinh Vien", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenMonHoc", "Ten Mon Hoc", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaBacDaoTao", "Ma Bac Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaDonVi", "Ma Don Vi", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DuTruGioGiangTruocLopHocPhan"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "MaLopSinhVien", "TenLopSinhVien", "MaMonHoc", "TenMonHoc", "SoTinChi", "LyThuyet", "ThucHanh", "SiSo", "MaBacDaoTao", "MaDonVi", "HeSoBacDaoTao", "HeSoLopDong", "HeSoMonThucTap", "HeSoCoVanHocTap", "SoTietQuyDoi", "NamHoc", "HocKy"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DuTruGioGiangTruocLopHocPhanEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DuTruGioGiangTruocLopHocPhan) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DuTruGioGiangTruocLopHocPhan>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DuTruGioGiangTruocLopHocPhan);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DuTruGioGiangTruocLopHocPhan Entity 
		///</summary>
		protected virtual DuTruGioGiangTruocLopHocPhan Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DuTruGioGiangTruocLopHocPhan copy = new DuTruGioGiangTruocLopHocPhan();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.MaLopSinhVien = this.MaLopSinhVien;
				copy.TenLopSinhVien = this.TenLopSinhVien;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.SoTinChi = this.SoTinChi;
				copy.LyThuyet = this.LyThuyet;
				copy.ThucHanh = this.ThucHanh;
				copy.SiSo = this.SiSo;
				copy.MaBacDaoTao = this.MaBacDaoTao;
				copy.MaDonVi = this.MaDonVi;
				copy.HeSoBacDaoTao = this.HeSoBacDaoTao;
				copy.HeSoLopDong = this.HeSoLopDong;
				copy.HeSoMonThucTap = this.HeSoMonThucTap;
				copy.HeSoCoVanHocTap = this.HeSoCoVanHocTap;
				copy.SoTietQuyDoi = this.SoTietQuyDoi;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DuTruGioGiangTruocLopHocPhan Entity 
		///</summary>
		public virtual DuTruGioGiangTruocLopHocPhan Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DuTruGioGiangTruocLopHocPhan Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DuTruGioGiangTruocLopHocPhan DeepCopy()
		{
			return EntityHelper.Clone<DuTruGioGiangTruocLopHocPhan>(this as DuTruGioGiangTruocLopHocPhan);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DuTruGioGiangTruocLopHocPhanEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DuTruGioGiangTruocLopHocPhanEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DuTruGioGiangTruocLopHocPhanEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DuTruGioGiangTruocLopHocPhanColumn column)
		{
			switch(column)
			{
					case DuTruGioGiangTruocLopHocPhanColumn.Id:
					return entityData.Id != _originalData.Id;
					case DuTruGioGiangTruocLopHocPhanColumn.MaLopSinhVien:
					return entityData.MaLopSinhVien != _originalData.MaLopSinhVien;
					case DuTruGioGiangTruocLopHocPhanColumn.TenLopSinhVien:
					return entityData.TenLopSinhVien != _originalData.TenLopSinhVien;
					case DuTruGioGiangTruocLopHocPhanColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case DuTruGioGiangTruocLopHocPhanColumn.TenMonHoc:
					return entityData.TenMonHoc != _originalData.TenMonHoc;
					case DuTruGioGiangTruocLopHocPhanColumn.SoTinChi:
					return entityData.SoTinChi != _originalData.SoTinChi;
					case DuTruGioGiangTruocLopHocPhanColumn.LyThuyet:
					return entityData.LyThuyet != _originalData.LyThuyet;
					case DuTruGioGiangTruocLopHocPhanColumn.ThucHanh:
					return entityData.ThucHanh != _originalData.ThucHanh;
					case DuTruGioGiangTruocLopHocPhanColumn.SiSo:
					return entityData.SiSo != _originalData.SiSo;
					case DuTruGioGiangTruocLopHocPhanColumn.MaBacDaoTao:
					return entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
					case DuTruGioGiangTruocLopHocPhanColumn.MaDonVi:
					return entityData.MaDonVi != _originalData.MaDonVi;
					case DuTruGioGiangTruocLopHocPhanColumn.HeSoBacDaoTao:
					return entityData.HeSoBacDaoTao != _originalData.HeSoBacDaoTao;
					case DuTruGioGiangTruocLopHocPhanColumn.HeSoLopDong:
					return entityData.HeSoLopDong != _originalData.HeSoLopDong;
					case DuTruGioGiangTruocLopHocPhanColumn.HeSoMonThucTap:
					return entityData.HeSoMonThucTap != _originalData.HeSoMonThucTap;
					case DuTruGioGiangTruocLopHocPhanColumn.HeSoCoVanHocTap:
					return entityData.HeSoCoVanHocTap != _originalData.HeSoCoVanHocTap;
					case DuTruGioGiangTruocLopHocPhanColumn.SoTietQuyDoi:
					return entityData.SoTietQuyDoi != _originalData.SoTietQuyDoi;
					case DuTruGioGiangTruocLopHocPhanColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case DuTruGioGiangTruocLopHocPhanColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DuTruGioGiangTruocLopHocPhanColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.MaLopSinhVien != _originalData.MaLopSinhVien;
			result = result || entityData.TenLopSinhVien != _originalData.TenLopSinhVien;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.TenMonHoc != _originalData.TenMonHoc;
			result = result || entityData.SoTinChi != _originalData.SoTinChi;
			result = result || entityData.LyThuyet != _originalData.LyThuyet;
			result = result || entityData.ThucHanh != _originalData.ThucHanh;
			result = result || entityData.SiSo != _originalData.SiSo;
			result = result || entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
			result = result || entityData.MaDonVi != _originalData.MaDonVi;
			result = result || entityData.HeSoBacDaoTao != _originalData.HeSoBacDaoTao;
			result = result || entityData.HeSoLopDong != _originalData.HeSoLopDong;
			result = result || entityData.HeSoMonThucTap != _originalData.HeSoMonThucTap;
			result = result || entityData.HeSoCoVanHocTap != _originalData.HeSoCoVanHocTap;
			result = result || entityData.SoTietQuyDoi != _originalData.SoTietQuyDoi;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			return result;
		}	
		
		///<summary>
		///  Returns a DuTruGioGiangTruocLopHocPhan Entity with the original data.
		///</summary>
		public DuTruGioGiangTruocLopHocPhan GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDuTruGioGiangTruocLopHocPhan(
				_originalData.MaLopSinhVien,
				_originalData.TenLopSinhVien,
				_originalData.MaMonHoc,
				_originalData.TenMonHoc,
				_originalData.SoTinChi,
				_originalData.LyThuyet,
				_originalData.ThucHanh,
				_originalData.SiSo,
				_originalData.MaBacDaoTao,
				_originalData.MaDonVi,
				_originalData.HeSoBacDaoTao,
				_originalData.HeSoLopDong,
				_originalData.HeSoMonThucTap,
				_originalData.HeSoCoVanHocTap,
				_originalData.SoTietQuyDoi,
				_originalData.NamHoc,
				_originalData.HocKy
				);
				
			return (DuTruGioGiangTruocLopHocPhan)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DuTruGioGiangTruocLopHocPhanBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DuTruGioGiangTruocLopHocPhanBase)
				return ValueEquals(this, (DuTruGioGiangTruocLopHocPhanBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DuTruGioGiangTruocLopHocPhanBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.MaLopSinhVien == null) ? string.Empty : this.MaLopSinhVien.ToString()).GetHashCode() ^ 
					((this.TenLopSinhVien == null) ? string.Empty : this.TenLopSinhVien.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString()).GetHashCode() ^ 
					((this.SoTinChi == null) ? string.Empty : this.SoTinChi.ToString()).GetHashCode() ^ 
					((this.LyThuyet == null) ? string.Empty : this.LyThuyet.ToString()).GetHashCode() ^ 
					((this.ThucHanh == null) ? string.Empty : this.ThucHanh.ToString()).GetHashCode() ^ 
					((this.SiSo == null) ? string.Empty : this.SiSo.ToString()).GetHashCode() ^ 
					((this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString()).GetHashCode() ^ 
					((this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString()).GetHashCode() ^ 
					((this.HeSoBacDaoTao == null) ? string.Empty : this.HeSoBacDaoTao.ToString()).GetHashCode() ^ 
					((this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString()).GetHashCode() ^ 
					((this.HeSoMonThucTap == null) ? string.Empty : this.HeSoMonThucTap.ToString()).GetHashCode() ^ 
					((this.HeSoCoVanHocTap == null) ? string.Empty : this.HeSoCoVanHocTap.ToString()).GetHashCode() ^ 
					((this.SoTietQuyDoi == null) ? string.Empty : this.SoTietQuyDoi.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DuTruGioGiangTruocLopHocPhanBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DuTruGioGiangTruocLopHocPhanBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DuTruGioGiangTruocLopHocPhanBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DuTruGioGiangTruocLopHocPhanBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DuTruGioGiangTruocLopHocPhanBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DuTruGioGiangTruocLopHocPhanBase Object1, DuTruGioGiangTruocLopHocPhanBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.MaLopSinhVien != null && Object2.MaLopSinhVien != null )
			{
				if (Object1.MaLopSinhVien != Object2.MaLopSinhVien)
					equal = false;
			}
			else if (Object1.MaLopSinhVien == null ^ Object2.MaLopSinhVien == null )
			{
				equal = false;
			}
			if ( Object1.TenLopSinhVien != null && Object2.TenLopSinhVien != null )
			{
				if (Object1.TenLopSinhVien != Object2.TenLopSinhVien)
					equal = false;
			}
			else if (Object1.TenLopSinhVien == null ^ Object2.TenLopSinhVien == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.TenMonHoc != null && Object2.TenMonHoc != null )
			{
				if (Object1.TenMonHoc != Object2.TenMonHoc)
					equal = false;
			}
			else if (Object1.TenMonHoc == null ^ Object2.TenMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.SoTinChi != null && Object2.SoTinChi != null )
			{
				if (Object1.SoTinChi != Object2.SoTinChi)
					equal = false;
			}
			else if (Object1.SoTinChi == null ^ Object2.SoTinChi == null )
			{
				equal = false;
			}
			if ( Object1.LyThuyet != null && Object2.LyThuyet != null )
			{
				if (Object1.LyThuyet != Object2.LyThuyet)
					equal = false;
			}
			else if (Object1.LyThuyet == null ^ Object2.LyThuyet == null )
			{
				equal = false;
			}
			if ( Object1.ThucHanh != null && Object2.ThucHanh != null )
			{
				if (Object1.ThucHanh != Object2.ThucHanh)
					equal = false;
			}
			else if (Object1.ThucHanh == null ^ Object2.ThucHanh == null )
			{
				equal = false;
			}
			if ( Object1.SiSo != null && Object2.SiSo != null )
			{
				if (Object1.SiSo != Object2.SiSo)
					equal = false;
			}
			else if (Object1.SiSo == null ^ Object2.SiSo == null )
			{
				equal = false;
			}
			if ( Object1.MaBacDaoTao != null && Object2.MaBacDaoTao != null )
			{
				if (Object1.MaBacDaoTao != Object2.MaBacDaoTao)
					equal = false;
			}
			else if (Object1.MaBacDaoTao == null ^ Object2.MaBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.MaDonVi != null && Object2.MaDonVi != null )
			{
				if (Object1.MaDonVi != Object2.MaDonVi)
					equal = false;
			}
			else if (Object1.MaDonVi == null ^ Object2.MaDonVi == null )
			{
				equal = false;
			}
			if ( Object1.HeSoBacDaoTao != null && Object2.HeSoBacDaoTao != null )
			{
				if (Object1.HeSoBacDaoTao != Object2.HeSoBacDaoTao)
					equal = false;
			}
			else if (Object1.HeSoBacDaoTao == null ^ Object2.HeSoBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.HeSoLopDong != null && Object2.HeSoLopDong != null )
			{
				if (Object1.HeSoLopDong != Object2.HeSoLopDong)
					equal = false;
			}
			else if (Object1.HeSoLopDong == null ^ Object2.HeSoLopDong == null )
			{
				equal = false;
			}
			if ( Object1.HeSoMonThucTap != null && Object2.HeSoMonThucTap != null )
			{
				if (Object1.HeSoMonThucTap != Object2.HeSoMonThucTap)
					equal = false;
			}
			else if (Object1.HeSoMonThucTap == null ^ Object2.HeSoMonThucTap == null )
			{
				equal = false;
			}
			if ( Object1.HeSoCoVanHocTap != null && Object2.HeSoCoVanHocTap != null )
			{
				if (Object1.HeSoCoVanHocTap != Object2.HeSoCoVanHocTap)
					equal = false;
			}
			else if (Object1.HeSoCoVanHocTap == null ^ Object2.HeSoCoVanHocTap == null )
			{
				equal = false;
			}
			if ( Object1.SoTietQuyDoi != null && Object2.SoTietQuyDoi != null )
			{
				if (Object1.SoTietQuyDoi != Object2.SoTietQuyDoi)
					equal = false;
			}
			else if (Object1.SoTietQuyDoi == null ^ Object2.SoTietQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DuTruGioGiangTruocLopHocPhanBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DuTruGioGiangTruocLopHocPhanComparer GetComparer()
        {
            return new DuTruGioGiangTruocLopHocPhanComparer();
        }
        */

        // Comparer delegates back to DuTruGioGiangTruocLopHocPhan
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DuTruGioGiangTruocLopHocPhan rhs, DuTruGioGiangTruocLopHocPhanColumn which)
        {
            switch (which)
            {
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.MaLopSinhVien:
            		return this.MaLopSinhVien.CompareTo(rhs.MaLopSinhVien);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.TenLopSinhVien:
            		return this.TenLopSinhVien.CompareTo(rhs.TenLopSinhVien);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.TenMonHoc:
            		return this.TenMonHoc.CompareTo(rhs.TenMonHoc);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.SoTinChi:
            		return this.SoTinChi.Value.CompareTo(rhs.SoTinChi.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.LyThuyet:
            		return this.LyThuyet.Value.CompareTo(rhs.LyThuyet.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.ThucHanh:
            		return this.ThucHanh.Value.CompareTo(rhs.ThucHanh.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.SiSo:
            		return this.SiSo.Value.CompareTo(rhs.SiSo.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.MaBacDaoTao:
            		return this.MaBacDaoTao.CompareTo(rhs.MaBacDaoTao);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.MaDonVi:
            		return this.MaDonVi.CompareTo(rhs.MaDonVi);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.HeSoBacDaoTao:
            		return this.HeSoBacDaoTao.Value.CompareTo(rhs.HeSoBacDaoTao.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.HeSoLopDong:
            		return this.HeSoLopDong.Value.CompareTo(rhs.HeSoLopDong.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.HeSoMonThucTap:
            		return this.HeSoMonThucTap.Value.CompareTo(rhs.HeSoMonThucTap.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.HeSoCoVanHocTap:
            		return this.HeSoCoVanHocTap.Value.CompareTo(rhs.HeSoCoVanHocTap.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.SoTietQuyDoi:
            		return this.SoTietQuyDoi.Value.CompareTo(rhs.SoTietQuyDoi.Value);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case DuTruGioGiangTruocLopHocPhanColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DuTruGioGiangTruocLopHocPhanKey> Members
		
		// member variable for the EntityId property
		private DuTruGioGiangTruocLopHocPhanKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DuTruGioGiangTruocLopHocPhanKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DuTruGioGiangTruocLopHocPhanKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DuTruGioGiangTruocLopHocPhan")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- Id: {0}{18}- MaLopSinhVien: {1}{18}- TenLopSinhVien: {2}{18}- MaMonHoc: {3}{18}- TenMonHoc: {4}{18}- SoTinChi: {5}{18}- LyThuyet: {6}{18}- ThucHanh: {7}{18}- SiSo: {8}{18}- MaBacDaoTao: {9}{18}- MaDonVi: {10}{18}- HeSoBacDaoTao: {11}{18}- HeSoLopDong: {12}{18}- HeSoMonThucTap: {13}{18}- HeSoCoVanHocTap: {14}{18}- SoTietQuyDoi: {15}{18}- NamHoc: {16}{18}- HocKy: {17}{18}{20}", 
				this.Id,
				(this.MaLopSinhVien == null) ? string.Empty : this.MaLopSinhVien.ToString(),
				(this.TenLopSinhVien == null) ? string.Empty : this.TenLopSinhVien.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString(),
				(this.SoTinChi == null) ? string.Empty : this.SoTinChi.ToString(),
				(this.LyThuyet == null) ? string.Empty : this.LyThuyet.ToString(),
				(this.ThucHanh == null) ? string.Empty : this.ThucHanh.ToString(),
				(this.SiSo == null) ? string.Empty : this.SiSo.ToString(),
				(this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString(),
				(this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString(),
				(this.HeSoBacDaoTao == null) ? string.Empty : this.HeSoBacDaoTao.ToString(),
				(this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString(),
				(this.HeSoMonThucTap == null) ? string.Empty : this.HeSoMonThucTap.ToString(),
				(this.HeSoCoVanHocTap == null) ? string.Empty : this.HeSoCoVanHocTap.ToString(),
				(this.SoTietQuyDoi == null) ? string.Empty : this.SoTietQuyDoi.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DuTruGioGiangTruocLopHocPhan' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DuTruGioGiangTruocLopHocPhanEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DuTruGioGiangTruocLopHocPhan"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaLopSinhVien : 
		/// </summary>
		public System.String MaLopSinhVien = null;
		
		/// <summary>
		/// TenLopSinhVien : 
		/// </summary>
		public System.String TenLopSinhVien = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		public System.String TenMonHoc = null;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		public System.Decimal? SoTinChi = null;
		
		/// <summary>
		/// LyThuyet : 
		/// </summary>
		public System.Decimal? LyThuyet = null;
		
		/// <summary>
		/// ThucHanh : 
		/// </summary>
		public System.Decimal? ThucHanh = null;
		
		/// <summary>
		/// SiSo : 
		/// </summary>
		public System.Int32? SiSo = null;
		
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		public System.String MaBacDaoTao = null;
		
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		public System.String MaDonVi = null;
		
		/// <summary>
		/// HeSoBacDaoTao : 
		/// </summary>
		public System.Decimal? HeSoBacDaoTao = null;
		
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		public System.Decimal? HeSoLopDong = null;
		
		/// <summary>
		/// HeSoMonThucTap : 
		/// </summary>
		public System.Decimal? HeSoMonThucTap = null;
		
		/// <summary>
		/// HeSoCoVanHocTap : 
		/// </summary>
		public System.Decimal? HeSoCoVanHocTap = null;
		
		/// <summary>
		/// SoTietQuyDoi : 
		/// </summary>
		public System.Decimal? SoTietQuyDoi = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DuTruGioGiangTruocLopHocPhanEntityData _tmp = new DuTruGioGiangTruocLopHocPhanEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaLopSinhVien = this.MaLopSinhVien;
			_tmp.TenLopSinhVien = this.TenLopSinhVien;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.SoTinChi = this.SoTinChi;
			_tmp.LyThuyet = this.LyThuyet;
			_tmp.ThucHanh = this.ThucHanh;
			_tmp.SiSo = this.SiSo;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaDonVi = this.MaDonVi;
			_tmp.HeSoBacDaoTao = this.HeSoBacDaoTao;
			_tmp.HeSoLopDong = this.HeSoLopDong;
			_tmp.HeSoMonThucTap = this.HeSoMonThucTap;
			_tmp.HeSoCoVanHocTap = this.HeSoCoVanHocTap;
			_tmp.SoTietQuyDoi = this.SoTietQuyDoi;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DuTruGioGiangTruocLopHocPhanEntityData _tmp = new DuTruGioGiangTruocLopHocPhanEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaLopSinhVien = this.MaLopSinhVien;
			_tmp.TenLopSinhVien = this.TenLopSinhVien;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.SoTinChi = this.SoTinChi;
			_tmp.LyThuyet = this.LyThuyet;
			_tmp.ThucHanh = this.ThucHanh;
			_tmp.SiSo = this.SiSo;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaDonVi = this.MaDonVi;
			_tmp.HeSoBacDaoTao = this.HeSoBacDaoTao;
			_tmp.HeSoLopDong = this.HeSoLopDong;
			_tmp.HeSoMonThucTap = this.HeSoMonThucTap;
			_tmp.HeSoCoVanHocTap = this.HeSoCoVanHocTap;
			_tmp.SoTietQuyDoi = this.SoTietQuyDoi;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DuTruGioGiangTruocLopHocPhanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DuTruGioGiangTruocLopHocPhanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DuTruGioGiangTruocLopHocPhanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DuTruGioGiangTruocLopHocPhanColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				DuTruGioGiangTruocLopHocPhanEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DuTruGioGiangTruocLopHocPhanEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DuTruGioGiangTruocLopHocPhanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DuTruGioGiangTruocLopHocPhanColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DuTruGioGiangTruocLopHocPhanEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DuTruGioGiangTruocLopHocPhanEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DuTruGioGiangTruocLopHocPhanEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DuTruGioGiangTruocLopHocPhan"/> object.
	/// </remarks>
	public class DuTruGioGiangTruocLopHocPhanEventArgs : System.EventArgs
	{
		private DuTruGioGiangTruocLopHocPhanColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DuTruGioGiangTruocLopHocPhanEventArgs class.
		///</summary>
		public DuTruGioGiangTruocLopHocPhanEventArgs(DuTruGioGiangTruocLopHocPhanColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DuTruGioGiangTruocLopHocPhanEventArgs class.
		///</summary>
		public DuTruGioGiangTruocLopHocPhanEventArgs(DuTruGioGiangTruocLopHocPhanColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DuTruGioGiangTruocLopHocPhanColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DuTruGioGiangTruocLopHocPhanColumn" />
		public DuTruGioGiangTruocLopHocPhanColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DuTruGioGiangTruocLopHocPhan related events.
	///</summary>
	public delegate void DuTruGioGiangTruocLopHocPhanEventHandler(object sender, DuTruGioGiangTruocLopHocPhanEventArgs e);
	
	#region DuTruGioGiangTruocLopHocPhanComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DuTruGioGiangTruocLopHocPhanComparer : System.Collections.Generic.IComparer<DuTruGioGiangTruocLopHocPhan>
	{
		DuTruGioGiangTruocLopHocPhanColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DuTruGioGiangTruocLopHocPhanComparer"/> class.
        /// </summary>
		public DuTruGioGiangTruocLopHocPhanComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DuTruGioGiangTruocLopHocPhanComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DuTruGioGiangTruocLopHocPhanComparer(DuTruGioGiangTruocLopHocPhanColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="DuTruGioGiangTruocLopHocPhan"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="DuTruGioGiangTruocLopHocPhan"/> to compare.</param>
        /// <param name="b">The second <c>DuTruGioGiangTruocLopHocPhan</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DuTruGioGiangTruocLopHocPhan a, DuTruGioGiangTruocLopHocPhan b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DuTruGioGiangTruocLopHocPhan entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DuTruGioGiangTruocLopHocPhan a, DuTruGioGiangTruocLopHocPhan b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DuTruGioGiangTruocLopHocPhanColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DuTruGioGiangTruocLopHocPhanKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DuTruGioGiangTruocLopHocPhan"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DuTruGioGiangTruocLopHocPhanKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanKey class.
		/// </summary>
		public DuTruGioGiangTruocLopHocPhanKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanKey class.
		/// </summary>
		public DuTruGioGiangTruocLopHocPhanKey(DuTruGioGiangTruocLopHocPhanBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanKey class.
		/// </summary>
		public DuTruGioGiangTruocLopHocPhanKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DuTruGioGiangTruocLopHocPhanBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DuTruGioGiangTruocLopHocPhanBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DuTruGioGiangTruocLopHocPhanColumn Enum
	
	/// <summary>
	/// Enumerate the DuTruGioGiangTruocLopHocPhan columns.
	/// </summary>
	[Serializable]
	public enum DuTruGioGiangTruocLopHocPhanColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// MaLopSinhVien : 
		/// </summary>
		[EnumTextValue("Ma Lop Sinh Vien")]
		[ColumnEnum("MaLopSinhVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaLopSinhVien = 2,
		/// <summary>
		/// TenLopSinhVien : 
		/// </summary>
		[EnumTextValue("Ten Lop Sinh Vien")]
		[ColumnEnum("TenLopSinhVien", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TenLopSinhVien = 3,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 4,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("Ten Mon Hoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TenMonHoc = 5,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("So Tin Chi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTinChi = 6,
		/// <summary>
		/// LyThuyet : 
		/// </summary>
		[EnumTextValue("Ly Thuyet")]
		[ColumnEnum("LyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LyThuyet = 7,
		/// <summary>
		/// ThucHanh : 
		/// </summary>
		[EnumTextValue("Thuc Hanh")]
		[ColumnEnum("ThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ThucHanh = 8,
		/// <summary>
		/// SiSo : 
		/// </summary>
		[EnumTextValue("Si So")]
		[ColumnEnum("SiSo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSo = 9,
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Bac Dao Tao")]
		[ColumnEnum("MaBacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaBacDaoTao = 10,
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		[EnumTextValue("Ma Don Vi")]
		[ColumnEnum("MaDonVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDonVi = 11,
		/// <summary>
		/// HeSoBacDaoTao : 
		/// </summary>
		[EnumTextValue("He So Bac Dao Tao")]
		[ColumnEnum("HeSoBacDaoTao", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoBacDaoTao = 12,
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		[EnumTextValue("He So Lop Dong")]
		[ColumnEnum("HeSoLopDong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLopDong = 13,
		/// <summary>
		/// HeSoMonThucTap : 
		/// </summary>
		[EnumTextValue("He So Mon Thuc Tap")]
		[ColumnEnum("HeSoMonThucTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoMonThucTap = 14,
		/// <summary>
		/// HeSoCoVanHocTap : 
		/// </summary>
		[EnumTextValue("He So Co Van Hoc Tap")]
		[ColumnEnum("HeSoCoVanHocTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoCoVanHocTap = 15,
		/// <summary>
		/// SoTietQuyDoi : 
		/// </summary>
		[EnumTextValue("So Tiet Quy Doi")]
		[ColumnEnum("SoTietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietQuyDoi = 16,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 17,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 18
	}//End enum

	#endregion DuTruGioGiangTruocLopHocPhanColumn Enum

} // end namespace
