
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThuLaoCoiThiChamBaiImport.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThuLaoCoiThiChamBaiImport' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThuLaoCoiThiChamBaiImportBase : EntityBase, IThuLaoCoiThiChamBaiImport, IEntityId<ThuLaoCoiThiChamBaiImportKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThuLaoCoiThiChamBaiImportEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThuLaoCoiThiChamBaiImportEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThuLaoCoiThiChamBaiImportEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThuLaoCoiThiChamBaiImport> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoCoiThiChamBaiImportEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoCoiThiChamBaiImportEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThuLaoCoiThiChamBaiImportBase"/> instance.
		///</summary>
		public ThuLaoCoiThiChamBaiImportBase()
		{
			this.entityData = new ThuLaoCoiThiChamBaiImportEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThuLaoCoiThiChamBaiImportBase"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_noiDungChi"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_soBaiQuaTrinh"></param>
		///<param name="_soBaiGiuaKy"></param>
		///<param name="_soBaiCuoiKy"></param>
		///<param name="_donGiaQuaTrinh"></param>
		///<param name="_donGiaGiuaKy"></param>
		///<param name="_donGiaCuoiKy"></param>
		///<param name="_thanhTien"></param>
		///<param name="_soTienCoiThi"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_bacDaoTao"></param>
		///<param name="_gioCoiThi"></param>
		///<param name="_gioChamThi"></param>
		///<param name="_gioRaDe"></param>
		///<param name="_gioToChucThi"></param>
		///<param name="_gioNhapDiem"></param>
		///<param name="_tongCong"></param>
		///<param name="_loaiHinHdaoTao"></param>
		public ThuLaoCoiThiChamBaiImportBase(System.String _namHoc, System.String _hocKy, 
			System.String _dotChiTra, System.String _maGiangVienQuanLy, System.String _hoTen, 
			System.String _noiDungChi, System.String _maMonHoc, System.String _tenMonHoc, 
			System.String _maLop, System.Int32? _soBaiQuaTrinh, System.Int32? _soBaiGiuaKy, 
			System.Int32? _soBaiCuoiKy, System.Int32? _donGiaQuaTrinh, System.Int32? _donGiaGiuaKy, 
			System.Int32? _donGiaCuoiKy, System.Int32? _thanhTien, System.Int32? _soTienCoiThi, 
			System.String _ngayCapNhat, System.String _nguoiCapNhat, System.String _bacDaoTao, 
			System.Decimal? _gioCoiThi, System.Decimal? _gioChamThi, System.Decimal? _gioRaDe, 
			System.Decimal? _gioToChucThi, System.Decimal? _gioNhapDiem, System.Decimal? _tongCong, 
			System.String _loaiHinHdaoTao)
		{
			this.entityData = new ThuLaoCoiThiChamBaiImportEntityData();
			this.backupData = null;

			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.DotChiTra = _dotChiTra;
			this.MaGiangVienQuanLy = _maGiangVienQuanLy;
			this.HoTen = _hoTen;
			this.NoiDungChi = _noiDungChi;
			this.MaMonHoc = _maMonHoc;
			this.TenMonHoc = _tenMonHoc;
			this.MaLop = _maLop;
			this.SoBaiQuaTrinh = _soBaiQuaTrinh;
			this.SoBaiGiuaKy = _soBaiGiuaKy;
			this.SoBaiCuoiKy = _soBaiCuoiKy;
			this.DonGiaQuaTrinh = _donGiaQuaTrinh;
			this.DonGiaGiuaKy = _donGiaGiuaKy;
			this.DonGiaCuoiKy = _donGiaCuoiKy;
			this.ThanhTien = _thanhTien;
			this.SoTienCoiThi = _soTienCoiThi;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.BacDaoTao = _bacDaoTao;
			this.GioCoiThi = _gioCoiThi;
			this.GioChamThi = _gioChamThi;
			this.GioRaDe = _gioRaDe;
			this.GioToChucThi = _gioToChucThi;
			this.GioNhapDiem = _gioNhapDiem;
			this.TongCong = _tongCong;
			this.LoaiHinHdaoTao = _loaiHinHdaoTao;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThuLaoCoiThiChamBaiImport"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_noiDungChi"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_soBaiQuaTrinh"></param>
		///<param name="_soBaiGiuaKy"></param>
		///<param name="_soBaiCuoiKy"></param>
		///<param name="_donGiaQuaTrinh"></param>
		///<param name="_donGiaGiuaKy"></param>
		///<param name="_donGiaCuoiKy"></param>
		///<param name="_thanhTien"></param>
		///<param name="_soTienCoiThi"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_bacDaoTao"></param>
		///<param name="_gioCoiThi"></param>
		///<param name="_gioChamThi"></param>
		///<param name="_gioRaDe"></param>
		///<param name="_gioToChucThi"></param>
		///<param name="_gioNhapDiem"></param>
		///<param name="_tongCong"></param>
		///<param name="_loaiHinHdaoTao"></param>
		public static ThuLaoCoiThiChamBaiImport CreateThuLaoCoiThiChamBaiImport(System.String _namHoc, System.String _hocKy, 
			System.String _dotChiTra, System.String _maGiangVienQuanLy, System.String _hoTen, 
			System.String _noiDungChi, System.String _maMonHoc, System.String _tenMonHoc, 
			System.String _maLop, System.Int32? _soBaiQuaTrinh, System.Int32? _soBaiGiuaKy, 
			System.Int32? _soBaiCuoiKy, System.Int32? _donGiaQuaTrinh, System.Int32? _donGiaGiuaKy, 
			System.Int32? _donGiaCuoiKy, System.Int32? _thanhTien, System.Int32? _soTienCoiThi, 
			System.String _ngayCapNhat, System.String _nguoiCapNhat, System.String _bacDaoTao, 
			System.Decimal? _gioCoiThi, System.Decimal? _gioChamThi, System.Decimal? _gioRaDe, 
			System.Decimal? _gioToChucThi, System.Decimal? _gioNhapDiem, System.Decimal? _tongCong, 
			System.String _loaiHinHdaoTao)
		{
			ThuLaoCoiThiChamBaiImport newThuLaoCoiThiChamBaiImport = new ThuLaoCoiThiChamBaiImport();
			newThuLaoCoiThiChamBaiImport.NamHoc = _namHoc;
			newThuLaoCoiThiChamBaiImport.HocKy = _hocKy;
			newThuLaoCoiThiChamBaiImport.DotChiTra = _dotChiTra;
			newThuLaoCoiThiChamBaiImport.MaGiangVienQuanLy = _maGiangVienQuanLy;
			newThuLaoCoiThiChamBaiImport.HoTen = _hoTen;
			newThuLaoCoiThiChamBaiImport.NoiDungChi = _noiDungChi;
			newThuLaoCoiThiChamBaiImport.MaMonHoc = _maMonHoc;
			newThuLaoCoiThiChamBaiImport.TenMonHoc = _tenMonHoc;
			newThuLaoCoiThiChamBaiImport.MaLop = _maLop;
			newThuLaoCoiThiChamBaiImport.SoBaiQuaTrinh = _soBaiQuaTrinh;
			newThuLaoCoiThiChamBaiImport.SoBaiGiuaKy = _soBaiGiuaKy;
			newThuLaoCoiThiChamBaiImport.SoBaiCuoiKy = _soBaiCuoiKy;
			newThuLaoCoiThiChamBaiImport.DonGiaQuaTrinh = _donGiaQuaTrinh;
			newThuLaoCoiThiChamBaiImport.DonGiaGiuaKy = _donGiaGiuaKy;
			newThuLaoCoiThiChamBaiImport.DonGiaCuoiKy = _donGiaCuoiKy;
			newThuLaoCoiThiChamBaiImport.ThanhTien = _thanhTien;
			newThuLaoCoiThiChamBaiImport.SoTienCoiThi = _soTienCoiThi;
			newThuLaoCoiThiChamBaiImport.NgayCapNhat = _ngayCapNhat;
			newThuLaoCoiThiChamBaiImport.NguoiCapNhat = _nguoiCapNhat;
			newThuLaoCoiThiChamBaiImport.BacDaoTao = _bacDaoTao;
			newThuLaoCoiThiChamBaiImport.GioCoiThi = _gioCoiThi;
			newThuLaoCoiThiChamBaiImport.GioChamThi = _gioChamThi;
			newThuLaoCoiThiChamBaiImport.GioRaDe = _gioRaDe;
			newThuLaoCoiThiChamBaiImport.GioToChucThi = _gioToChucThi;
			newThuLaoCoiThiChamBaiImport.GioNhapDiem = _gioNhapDiem;
			newThuLaoCoiThiChamBaiImport.TongCong = _tongCong;
			newThuLaoCoiThiChamBaiImport.LoaiHinHdaoTao = _loaiHinHdaoTao;
			return newThuLaoCoiThiChamBaiImport;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotChiTra property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String DotChiTra
		{
			get
			{
				return this.entityData.DotChiTra; 
			}
			
			set
			{
				if (this.entityData.DotChiTra == value)
					return;
				
                OnPropertyChanging("DotChiTra");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.DotChiTra, this.entityData.DotChiTra);
				this.entityData.DotChiTra = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.DotChiTra, this.entityData.DotChiTra);
				OnPropertyChanged("DotChiTra");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVienQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaGiangVienQuanLy
		{
			get
			{
				return this.entityData.MaGiangVienQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaGiangVienQuanLy == value)
					return;
				
                OnPropertyChanging("MaGiangVienQuanLy");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				this.entityData.MaGiangVienQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				OnPropertyChanged("MaGiangVienQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String HoTen
		{
			get
			{
				return this.entityData.HoTen; 
			}
			
			set
			{
				if (this.entityData.HoTen == value)
					return;
				
                OnPropertyChanging("HoTen");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.HoTen, this.entityData.HoTen);
				this.entityData.HoTen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.HoTen, this.entityData.HoTen);
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoiDungChi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String NoiDungChi
		{
			get
			{
				return this.entityData.NoiDungChi; 
			}
			
			set
			{
				if (this.entityData.NoiDungChi == value)
					return;
				
                OnPropertyChanging("NoiDungChi");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.NoiDungChi, this.entityData.NoiDungChi);
				this.entityData.NoiDungChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.NoiDungChi, this.entityData.NoiDungChi);
				OnPropertyChanged("NoiDungChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this.entityData.TenMonHoc; 
			}
			
			set
			{
				if (this.entityData.TenMonHoc == value)
					return;
				
                OnPropertyChanging("TenMonHoc");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.TenMonHoc, this.entityData.TenMonHoc);
				this.entityData.TenMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.TenMonHoc, this.entityData.TenMonHoc);
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2000)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
				
                OnPropertyChanging("MaLop");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoBaiQuaTrinh property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoBaiQuaTrinh
		{
			get
			{
				return this.entityData.SoBaiQuaTrinh; 
			}
			
			set
			{
				if (this.entityData.SoBaiQuaTrinh == value)
					return;
				
                OnPropertyChanging("SoBaiQuaTrinh");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.SoBaiQuaTrinh, this.entityData.SoBaiQuaTrinh);
				this.entityData.SoBaiQuaTrinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.SoBaiQuaTrinh, this.entityData.SoBaiQuaTrinh);
				OnPropertyChanged("SoBaiQuaTrinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoBaiGiuaKy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoBaiGiuaKy
		{
			get
			{
				return this.entityData.SoBaiGiuaKy; 
			}
			
			set
			{
				if (this.entityData.SoBaiGiuaKy == value)
					return;
				
                OnPropertyChanging("SoBaiGiuaKy");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.SoBaiGiuaKy, this.entityData.SoBaiGiuaKy);
				this.entityData.SoBaiGiuaKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.SoBaiGiuaKy, this.entityData.SoBaiGiuaKy);
				OnPropertyChanged("SoBaiGiuaKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoBaiCuoiKy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoBaiCuoiKy
		{
			get
			{
				return this.entityData.SoBaiCuoiKy; 
			}
			
			set
			{
				if (this.entityData.SoBaiCuoiKy == value)
					return;
				
                OnPropertyChanging("SoBaiCuoiKy");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.SoBaiCuoiKy, this.entityData.SoBaiCuoiKy);
				this.entityData.SoBaiCuoiKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.SoBaiCuoiKy, this.entityData.SoBaiCuoiKy);
				OnPropertyChanged("SoBaiCuoiKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaQuaTrinh property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DonGiaQuaTrinh
		{
			get
			{
				return this.entityData.DonGiaQuaTrinh; 
			}
			
			set
			{
				if (this.entityData.DonGiaQuaTrinh == value)
					return;
				
                OnPropertyChanging("DonGiaQuaTrinh");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.DonGiaQuaTrinh, this.entityData.DonGiaQuaTrinh);
				this.entityData.DonGiaQuaTrinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.DonGiaQuaTrinh, this.entityData.DonGiaQuaTrinh);
				OnPropertyChanged("DonGiaQuaTrinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaGiuaKy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DonGiaGiuaKy
		{
			get
			{
				return this.entityData.DonGiaGiuaKy; 
			}
			
			set
			{
				if (this.entityData.DonGiaGiuaKy == value)
					return;
				
                OnPropertyChanging("DonGiaGiuaKy");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.DonGiaGiuaKy, this.entityData.DonGiaGiuaKy);
				this.entityData.DonGiaGiuaKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.DonGiaGiuaKy, this.entityData.DonGiaGiuaKy);
				OnPropertyChanged("DonGiaGiuaKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaCuoiKy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DonGiaCuoiKy
		{
			get
			{
				return this.entityData.DonGiaCuoiKy; 
			}
			
			set
			{
				if (this.entityData.DonGiaCuoiKy == value)
					return;
				
                OnPropertyChanging("DonGiaCuoiKy");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.DonGiaCuoiKy, this.entityData.DonGiaCuoiKy);
				this.entityData.DonGiaCuoiKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.DonGiaCuoiKy, this.entityData.DonGiaCuoiKy);
				OnPropertyChanged("DonGiaCuoiKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThanhTien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ThanhTien
		{
			get
			{
				return this.entityData.ThanhTien; 
			}
			
			set
			{
				if (this.entityData.ThanhTien == value)
					return;
				
                OnPropertyChanging("ThanhTien");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.ThanhTien, this.entityData.ThanhTien);
				this.entityData.ThanhTien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.ThanhTien, this.entityData.ThanhTien);
				OnPropertyChanged("ThanhTien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTienCoiThi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoTienCoiThi
		{
			get
			{
				return this.entityData.SoTienCoiThi; 
			}
			
			set
			{
				if (this.entityData.SoTienCoiThi == value)
					return;
				
                OnPropertyChanging("SoTienCoiThi");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.SoTienCoiThi, this.entityData.SoTienCoiThi);
				this.entityData.SoTienCoiThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.SoTienCoiThi, this.entityData.SoTienCoiThi);
				OnPropertyChanged("SoTienCoiThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String BacDaoTao
		{
			get
			{
				return this.entityData.BacDaoTao; 
			}
			
			set
			{
				if (this.entityData.BacDaoTao == value)
					return;
				
                OnPropertyChanging("BacDaoTao");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.BacDaoTao, this.entityData.BacDaoTao);
				this.entityData.BacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.BacDaoTao, this.entityData.BacDaoTao);
				OnPropertyChanged("BacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioCoiThi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioCoiThi
		{
			get
			{
				return this.entityData.GioCoiThi; 
			}
			
			set
			{
				if (this.entityData.GioCoiThi == value)
					return;
				
                OnPropertyChanging("GioCoiThi");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.GioCoiThi, this.entityData.GioCoiThi);
				this.entityData.GioCoiThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.GioCoiThi, this.entityData.GioCoiThi);
				OnPropertyChanged("GioCoiThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioChamThi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioChamThi
		{
			get
			{
				return this.entityData.GioChamThi; 
			}
			
			set
			{
				if (this.entityData.GioChamThi == value)
					return;
				
                OnPropertyChanging("GioChamThi");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.GioChamThi, this.entityData.GioChamThi);
				this.entityData.GioChamThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.GioChamThi, this.entityData.GioChamThi);
				OnPropertyChanged("GioChamThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioRaDe property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioRaDe
		{
			get
			{
				return this.entityData.GioRaDe; 
			}
			
			set
			{
				if (this.entityData.GioRaDe == value)
					return;
				
                OnPropertyChanging("GioRaDe");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.GioRaDe, this.entityData.GioRaDe);
				this.entityData.GioRaDe = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.GioRaDe, this.entityData.GioRaDe);
				OnPropertyChanged("GioRaDe");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioToChucThi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioToChucThi
		{
			get
			{
				return this.entityData.GioToChucThi; 
			}
			
			set
			{
				if (this.entityData.GioToChucThi == value)
					return;
				
                OnPropertyChanging("GioToChucThi");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.GioToChucThi, this.entityData.GioToChucThi);
				this.entityData.GioToChucThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.GioToChucThi, this.entityData.GioToChucThi);
				OnPropertyChanged("GioToChucThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioNhapDiem property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GioNhapDiem
		{
			get
			{
				return this.entityData.GioNhapDiem; 
			}
			
			set
			{
				if (this.entityData.GioNhapDiem == value)
					return;
				
                OnPropertyChanging("GioNhapDiem");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.GioNhapDiem, this.entityData.GioNhapDiem);
				this.entityData.GioNhapDiem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.GioNhapDiem, this.entityData.GioNhapDiem);
				OnPropertyChanged("GioNhapDiem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongCong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongCong
		{
			get
			{
				return this.entityData.TongCong; 
			}
			
			set
			{
				if (this.entityData.TongCong == value)
					return;
				
                OnPropertyChanging("TongCong");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.TongCong, this.entityData.TongCong);
				this.entityData.TongCong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.TongCong, this.entityData.TongCong);
				OnPropertyChanged("TongCong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiHinHdaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String LoaiHinHdaoTao
		{
			get
			{
				return this.entityData.LoaiHinHdaoTao; 
			}
			
			set
			{
				if (this.entityData.LoaiHinHdaoTao == value)
					return;
				
                OnPropertyChanging("LoaiHinHdaoTao");                    
				OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn.LoaiHinHdaoTao, this.entityData.LoaiHinHdaoTao);
				this.entityData.LoaiHinHdaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn.LoaiHinHdaoTao, this.entityData.LoaiHinHdaoTao);
				OnPropertyChanged("LoaiHinHdaoTao");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DotChiTra", "Dot Chi Tra", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaGiangVienQuanLy", "Ma Giang Vien Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HoTen", "Ho Ten", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NoiDungChi", "Noi Dung Chi", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenMonHoc", "Ten Mon Hoc", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 2000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayCapNhat", "Ngay Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BacDaoTao", "Bac Dao Tao", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LoaiHinHdaoTao", "Loai Hin Hdao Tao", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThuLaoCoiThiChamBaiImport"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "NamHoc", "HocKy", "DotChiTra", "MaGiangVienQuanLy", "HoTen", "NoiDungChi", "MaMonHoc", "TenMonHoc", "MaLop", "SoBaiQuaTrinh", "SoBaiGiuaKy", "SoBaiCuoiKy", "DonGiaQuaTrinh", "DonGiaGiuaKy", "DonGiaCuoiKy", "ThanhTien", "SoTienCoiThi", "NgayCapNhat", "NguoiCapNhat", "BacDaoTao", "GioCoiThi", "GioChamThi", "GioRaDe", "GioToChucThi", "GioNhapDiem", "TongCong", "LoaiHinHDaoTao"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThuLaoCoiThiChamBaiImportEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThuLaoCoiThiChamBaiImport) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThuLaoCoiThiChamBaiImport>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThuLaoCoiThiChamBaiImport);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThuLaoCoiThiChamBaiImport Entity 
		///</summary>
		protected virtual ThuLaoCoiThiChamBaiImport Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThuLaoCoiThiChamBaiImport copy = new ThuLaoCoiThiChamBaiImport();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.DotChiTra = this.DotChiTra;
				copy.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
				copy.HoTen = this.HoTen;
				copy.NoiDungChi = this.NoiDungChi;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.MaLop = this.MaLop;
				copy.SoBaiQuaTrinh = this.SoBaiQuaTrinh;
				copy.SoBaiGiuaKy = this.SoBaiGiuaKy;
				copy.SoBaiCuoiKy = this.SoBaiCuoiKy;
				copy.DonGiaQuaTrinh = this.DonGiaQuaTrinh;
				copy.DonGiaGiuaKy = this.DonGiaGiuaKy;
				copy.DonGiaCuoiKy = this.DonGiaCuoiKy;
				copy.ThanhTien = this.ThanhTien;
				copy.SoTienCoiThi = this.SoTienCoiThi;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.BacDaoTao = this.BacDaoTao;
				copy.GioCoiThi = this.GioCoiThi;
				copy.GioChamThi = this.GioChamThi;
				copy.GioRaDe = this.GioRaDe;
				copy.GioToChucThi = this.GioToChucThi;
				copy.GioNhapDiem = this.GioNhapDiem;
				copy.TongCong = this.TongCong;
				copy.LoaiHinHdaoTao = this.LoaiHinHdaoTao;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThuLaoCoiThiChamBaiImport Entity 
		///</summary>
		public virtual ThuLaoCoiThiChamBaiImport Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThuLaoCoiThiChamBaiImport Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThuLaoCoiThiChamBaiImport DeepCopy()
		{
			return EntityHelper.Clone<ThuLaoCoiThiChamBaiImport>(this as ThuLaoCoiThiChamBaiImport);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThuLaoCoiThiChamBaiImportEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThuLaoCoiThiChamBaiImportEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThuLaoCoiThiChamBaiImportEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThuLaoCoiThiChamBaiImportColumn column)
		{
			switch(column)
			{
					case ThuLaoCoiThiChamBaiImportColumn.Id:
					return entityData.Id != _originalData.Id;
					case ThuLaoCoiThiChamBaiImportColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case ThuLaoCoiThiChamBaiImportColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case ThuLaoCoiThiChamBaiImportColumn.DotChiTra:
					return entityData.DotChiTra != _originalData.DotChiTra;
					case ThuLaoCoiThiChamBaiImportColumn.MaGiangVienQuanLy:
					return entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
					case ThuLaoCoiThiChamBaiImportColumn.HoTen:
					return entityData.HoTen != _originalData.HoTen;
					case ThuLaoCoiThiChamBaiImportColumn.NoiDungChi:
					return entityData.NoiDungChi != _originalData.NoiDungChi;
					case ThuLaoCoiThiChamBaiImportColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case ThuLaoCoiThiChamBaiImportColumn.TenMonHoc:
					return entityData.TenMonHoc != _originalData.TenMonHoc;
					case ThuLaoCoiThiChamBaiImportColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
					case ThuLaoCoiThiChamBaiImportColumn.SoBaiQuaTrinh:
					return entityData.SoBaiQuaTrinh != _originalData.SoBaiQuaTrinh;
					case ThuLaoCoiThiChamBaiImportColumn.SoBaiGiuaKy:
					return entityData.SoBaiGiuaKy != _originalData.SoBaiGiuaKy;
					case ThuLaoCoiThiChamBaiImportColumn.SoBaiCuoiKy:
					return entityData.SoBaiCuoiKy != _originalData.SoBaiCuoiKy;
					case ThuLaoCoiThiChamBaiImportColumn.DonGiaQuaTrinh:
					return entityData.DonGiaQuaTrinh != _originalData.DonGiaQuaTrinh;
					case ThuLaoCoiThiChamBaiImportColumn.DonGiaGiuaKy:
					return entityData.DonGiaGiuaKy != _originalData.DonGiaGiuaKy;
					case ThuLaoCoiThiChamBaiImportColumn.DonGiaCuoiKy:
					return entityData.DonGiaCuoiKy != _originalData.DonGiaCuoiKy;
					case ThuLaoCoiThiChamBaiImportColumn.ThanhTien:
					return entityData.ThanhTien != _originalData.ThanhTien;
					case ThuLaoCoiThiChamBaiImportColumn.SoTienCoiThi:
					return entityData.SoTienCoiThi != _originalData.SoTienCoiThi;
					case ThuLaoCoiThiChamBaiImportColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case ThuLaoCoiThiChamBaiImportColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case ThuLaoCoiThiChamBaiImportColumn.BacDaoTao:
					return entityData.BacDaoTao != _originalData.BacDaoTao;
					case ThuLaoCoiThiChamBaiImportColumn.GioCoiThi:
					return entityData.GioCoiThi != _originalData.GioCoiThi;
					case ThuLaoCoiThiChamBaiImportColumn.GioChamThi:
					return entityData.GioChamThi != _originalData.GioChamThi;
					case ThuLaoCoiThiChamBaiImportColumn.GioRaDe:
					return entityData.GioRaDe != _originalData.GioRaDe;
					case ThuLaoCoiThiChamBaiImportColumn.GioToChucThi:
					return entityData.GioToChucThi != _originalData.GioToChucThi;
					case ThuLaoCoiThiChamBaiImportColumn.GioNhapDiem:
					return entityData.GioNhapDiem != _originalData.GioNhapDiem;
					case ThuLaoCoiThiChamBaiImportColumn.TongCong:
					return entityData.TongCong != _originalData.TongCong;
					case ThuLaoCoiThiChamBaiImportColumn.LoaiHinHdaoTao:
					return entityData.LoaiHinHdaoTao != _originalData.LoaiHinHdaoTao;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThuLaoCoiThiChamBaiImportColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.DotChiTra != _originalData.DotChiTra;
			result = result || entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
			result = result || entityData.HoTen != _originalData.HoTen;
			result = result || entityData.NoiDungChi != _originalData.NoiDungChi;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.TenMonHoc != _originalData.TenMonHoc;
			result = result || entityData.MaLop != _originalData.MaLop;
			result = result || entityData.SoBaiQuaTrinh != _originalData.SoBaiQuaTrinh;
			result = result || entityData.SoBaiGiuaKy != _originalData.SoBaiGiuaKy;
			result = result || entityData.SoBaiCuoiKy != _originalData.SoBaiCuoiKy;
			result = result || entityData.DonGiaQuaTrinh != _originalData.DonGiaQuaTrinh;
			result = result || entityData.DonGiaGiuaKy != _originalData.DonGiaGiuaKy;
			result = result || entityData.DonGiaCuoiKy != _originalData.DonGiaCuoiKy;
			result = result || entityData.ThanhTien != _originalData.ThanhTien;
			result = result || entityData.SoTienCoiThi != _originalData.SoTienCoiThi;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.BacDaoTao != _originalData.BacDaoTao;
			result = result || entityData.GioCoiThi != _originalData.GioCoiThi;
			result = result || entityData.GioChamThi != _originalData.GioChamThi;
			result = result || entityData.GioRaDe != _originalData.GioRaDe;
			result = result || entityData.GioToChucThi != _originalData.GioToChucThi;
			result = result || entityData.GioNhapDiem != _originalData.GioNhapDiem;
			result = result || entityData.TongCong != _originalData.TongCong;
			result = result || entityData.LoaiHinHdaoTao != _originalData.LoaiHinHdaoTao;
			return result;
		}	
		
		///<summary>
		///  Returns a ThuLaoCoiThiChamBaiImport Entity with the original data.
		///</summary>
		public ThuLaoCoiThiChamBaiImport GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThuLaoCoiThiChamBaiImport(
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.DotChiTra,
				_originalData.MaGiangVienQuanLy,
				_originalData.HoTen,
				_originalData.NoiDungChi,
				_originalData.MaMonHoc,
				_originalData.TenMonHoc,
				_originalData.MaLop,
				_originalData.SoBaiQuaTrinh,
				_originalData.SoBaiGiuaKy,
				_originalData.SoBaiCuoiKy,
				_originalData.DonGiaQuaTrinh,
				_originalData.DonGiaGiuaKy,
				_originalData.DonGiaCuoiKy,
				_originalData.ThanhTien,
				_originalData.SoTienCoiThi,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.BacDaoTao,
				_originalData.GioCoiThi,
				_originalData.GioChamThi,
				_originalData.GioRaDe,
				_originalData.GioToChucThi,
				_originalData.GioNhapDiem,
				_originalData.TongCong,
				_originalData.LoaiHinHdaoTao
				);
				
			return (ThuLaoCoiThiChamBaiImport)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThuLaoCoiThiChamBaiImportBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThuLaoCoiThiChamBaiImportBase)
				return ValueEquals(this, (ThuLaoCoiThiChamBaiImportBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThuLaoCoiThiChamBaiImportBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.DotChiTra == null) ? string.Empty : this.DotChiTra.ToString()).GetHashCode() ^ 
					((this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString()).GetHashCode() ^ 
					((this.HoTen == null) ? string.Empty : this.HoTen.ToString()).GetHashCode() ^ 
					((this.NoiDungChi == null) ? string.Empty : this.NoiDungChi.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString()).GetHashCode() ^ 
					((this.MaLop == null) ? string.Empty : this.MaLop.ToString()).GetHashCode() ^ 
					((this.SoBaiQuaTrinh == null) ? string.Empty : this.SoBaiQuaTrinh.ToString()).GetHashCode() ^ 
					((this.SoBaiGiuaKy == null) ? string.Empty : this.SoBaiGiuaKy.ToString()).GetHashCode() ^ 
					((this.SoBaiCuoiKy == null) ? string.Empty : this.SoBaiCuoiKy.ToString()).GetHashCode() ^ 
					((this.DonGiaQuaTrinh == null) ? string.Empty : this.DonGiaQuaTrinh.ToString()).GetHashCode() ^ 
					((this.DonGiaGiuaKy == null) ? string.Empty : this.DonGiaGiuaKy.ToString()).GetHashCode() ^ 
					((this.DonGiaCuoiKy == null) ? string.Empty : this.DonGiaCuoiKy.ToString()).GetHashCode() ^ 
					((this.ThanhTien == null) ? string.Empty : this.ThanhTien.ToString()).GetHashCode() ^ 
					((this.SoTienCoiThi == null) ? string.Empty : this.SoTienCoiThi.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.BacDaoTao == null) ? string.Empty : this.BacDaoTao.ToString()).GetHashCode() ^ 
					((this.GioCoiThi == null) ? string.Empty : this.GioCoiThi.ToString()).GetHashCode() ^ 
					((this.GioChamThi == null) ? string.Empty : this.GioChamThi.ToString()).GetHashCode() ^ 
					((this.GioRaDe == null) ? string.Empty : this.GioRaDe.ToString()).GetHashCode() ^ 
					((this.GioToChucThi == null) ? string.Empty : this.GioToChucThi.ToString()).GetHashCode() ^ 
					((this.GioNhapDiem == null) ? string.Empty : this.GioNhapDiem.ToString()).GetHashCode() ^ 
					((this.TongCong == null) ? string.Empty : this.TongCong.ToString()).GetHashCode() ^ 
					((this.LoaiHinHdaoTao == null) ? string.Empty : this.LoaiHinHdaoTao.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThuLaoCoiThiChamBaiImportBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThuLaoCoiThiChamBaiImportBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThuLaoCoiThiChamBaiImportBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThuLaoCoiThiChamBaiImportBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThuLaoCoiThiChamBaiImportBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThuLaoCoiThiChamBaiImportBase Object1, ThuLaoCoiThiChamBaiImportBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.DotChiTra != null && Object2.DotChiTra != null )
			{
				if (Object1.DotChiTra != Object2.DotChiTra)
					equal = false;
			}
			else if (Object1.DotChiTra == null ^ Object2.DotChiTra == null )
			{
				equal = false;
			}
			if ( Object1.MaGiangVienQuanLy != null && Object2.MaGiangVienQuanLy != null )
			{
				if (Object1.MaGiangVienQuanLy != Object2.MaGiangVienQuanLy)
					equal = false;
			}
			else if (Object1.MaGiangVienQuanLy == null ^ Object2.MaGiangVienQuanLy == null )
			{
				equal = false;
			}
			if ( Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object2.HoTen == null )
			{
				equal = false;
			}
			if ( Object1.NoiDungChi != null && Object2.NoiDungChi != null )
			{
				if (Object1.NoiDungChi != Object2.NoiDungChi)
					equal = false;
			}
			else if (Object1.NoiDungChi == null ^ Object2.NoiDungChi == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.TenMonHoc != null && Object2.TenMonHoc != null )
			{
				if (Object1.TenMonHoc != Object2.TenMonHoc)
					equal = false;
			}
			else if (Object1.TenMonHoc == null ^ Object2.TenMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object2.MaLop == null )
			{
				equal = false;
			}
			if ( Object1.SoBaiQuaTrinh != null && Object2.SoBaiQuaTrinh != null )
			{
				if (Object1.SoBaiQuaTrinh != Object2.SoBaiQuaTrinh)
					equal = false;
			}
			else if (Object1.SoBaiQuaTrinh == null ^ Object2.SoBaiQuaTrinh == null )
			{
				equal = false;
			}
			if ( Object1.SoBaiGiuaKy != null && Object2.SoBaiGiuaKy != null )
			{
				if (Object1.SoBaiGiuaKy != Object2.SoBaiGiuaKy)
					equal = false;
			}
			else if (Object1.SoBaiGiuaKy == null ^ Object2.SoBaiGiuaKy == null )
			{
				equal = false;
			}
			if ( Object1.SoBaiCuoiKy != null && Object2.SoBaiCuoiKy != null )
			{
				if (Object1.SoBaiCuoiKy != Object2.SoBaiCuoiKy)
					equal = false;
			}
			else if (Object1.SoBaiCuoiKy == null ^ Object2.SoBaiCuoiKy == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaQuaTrinh != null && Object2.DonGiaQuaTrinh != null )
			{
				if (Object1.DonGiaQuaTrinh != Object2.DonGiaQuaTrinh)
					equal = false;
			}
			else if (Object1.DonGiaQuaTrinh == null ^ Object2.DonGiaQuaTrinh == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaGiuaKy != null && Object2.DonGiaGiuaKy != null )
			{
				if (Object1.DonGiaGiuaKy != Object2.DonGiaGiuaKy)
					equal = false;
			}
			else if (Object1.DonGiaGiuaKy == null ^ Object2.DonGiaGiuaKy == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaCuoiKy != null && Object2.DonGiaCuoiKy != null )
			{
				if (Object1.DonGiaCuoiKy != Object2.DonGiaCuoiKy)
					equal = false;
			}
			else if (Object1.DonGiaCuoiKy == null ^ Object2.DonGiaCuoiKy == null )
			{
				equal = false;
			}
			if ( Object1.ThanhTien != null && Object2.ThanhTien != null )
			{
				if (Object1.ThanhTien != Object2.ThanhTien)
					equal = false;
			}
			else if (Object1.ThanhTien == null ^ Object2.ThanhTien == null )
			{
				equal = false;
			}
			if ( Object1.SoTienCoiThi != null && Object2.SoTienCoiThi != null )
			{
				if (Object1.SoTienCoiThi != Object2.SoTienCoiThi)
					equal = false;
			}
			else if (Object1.SoTienCoiThi == null ^ Object2.SoTienCoiThi == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.BacDaoTao != null && Object2.BacDaoTao != null )
			{
				if (Object1.BacDaoTao != Object2.BacDaoTao)
					equal = false;
			}
			else if (Object1.BacDaoTao == null ^ Object2.BacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.GioCoiThi != null && Object2.GioCoiThi != null )
			{
				if (Object1.GioCoiThi != Object2.GioCoiThi)
					equal = false;
			}
			else if (Object1.GioCoiThi == null ^ Object2.GioCoiThi == null )
			{
				equal = false;
			}
			if ( Object1.GioChamThi != null && Object2.GioChamThi != null )
			{
				if (Object1.GioChamThi != Object2.GioChamThi)
					equal = false;
			}
			else if (Object1.GioChamThi == null ^ Object2.GioChamThi == null )
			{
				equal = false;
			}
			if ( Object1.GioRaDe != null && Object2.GioRaDe != null )
			{
				if (Object1.GioRaDe != Object2.GioRaDe)
					equal = false;
			}
			else if (Object1.GioRaDe == null ^ Object2.GioRaDe == null )
			{
				equal = false;
			}
			if ( Object1.GioToChucThi != null && Object2.GioToChucThi != null )
			{
				if (Object1.GioToChucThi != Object2.GioToChucThi)
					equal = false;
			}
			else if (Object1.GioToChucThi == null ^ Object2.GioToChucThi == null )
			{
				equal = false;
			}
			if ( Object1.GioNhapDiem != null && Object2.GioNhapDiem != null )
			{
				if (Object1.GioNhapDiem != Object2.GioNhapDiem)
					equal = false;
			}
			else if (Object1.GioNhapDiem == null ^ Object2.GioNhapDiem == null )
			{
				equal = false;
			}
			if ( Object1.TongCong != null && Object2.TongCong != null )
			{
				if (Object1.TongCong != Object2.TongCong)
					equal = false;
			}
			else if (Object1.TongCong == null ^ Object2.TongCong == null )
			{
				equal = false;
			}
			if ( Object1.LoaiHinHdaoTao != null && Object2.LoaiHinHdaoTao != null )
			{
				if (Object1.LoaiHinHdaoTao != Object2.LoaiHinHdaoTao)
					equal = false;
			}
			else if (Object1.LoaiHinHdaoTao == null ^ Object2.LoaiHinHdaoTao == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThuLaoCoiThiChamBaiImportBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThuLaoCoiThiChamBaiImportComparer GetComparer()
        {
            return new ThuLaoCoiThiChamBaiImportComparer();
        }
        */

        // Comparer delegates back to ThuLaoCoiThiChamBaiImport
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThuLaoCoiThiChamBaiImport rhs, ThuLaoCoiThiChamBaiImportColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.DotChiTra:
            		return this.DotChiTra.CompareTo(rhs.DotChiTra);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.MaGiangVienQuanLy:
            		return this.MaGiangVienQuanLy.CompareTo(rhs.MaGiangVienQuanLy);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.HoTen:
            		return this.HoTen.CompareTo(rhs.HoTen);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.NoiDungChi:
            		return this.NoiDungChi.CompareTo(rhs.NoiDungChi);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.TenMonHoc:
            		return this.TenMonHoc.CompareTo(rhs.TenMonHoc);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.SoBaiQuaTrinh:
            		return this.SoBaiQuaTrinh.Value.CompareTo(rhs.SoBaiQuaTrinh.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.SoBaiGiuaKy:
            		return this.SoBaiGiuaKy.Value.CompareTo(rhs.SoBaiGiuaKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.SoBaiCuoiKy:
            		return this.SoBaiCuoiKy.Value.CompareTo(rhs.SoBaiCuoiKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.DonGiaQuaTrinh:
            		return this.DonGiaQuaTrinh.Value.CompareTo(rhs.DonGiaQuaTrinh.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.DonGiaGiuaKy:
            		return this.DonGiaGiuaKy.Value.CompareTo(rhs.DonGiaGiuaKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.DonGiaCuoiKy:
            		return this.DonGiaCuoiKy.Value.CompareTo(rhs.DonGiaCuoiKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.ThanhTien:
            		return this.ThanhTien.Value.CompareTo(rhs.ThanhTien.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.SoTienCoiThi:
            		return this.SoTienCoiThi.Value.CompareTo(rhs.SoTienCoiThi.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.NgayCapNhat:
            		return this.NgayCapNhat.CompareTo(rhs.NgayCapNhat);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.BacDaoTao:
            		return this.BacDaoTao.CompareTo(rhs.BacDaoTao);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.GioCoiThi:
            		return this.GioCoiThi.Value.CompareTo(rhs.GioCoiThi.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.GioChamThi:
            		return this.GioChamThi.Value.CompareTo(rhs.GioChamThi.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.GioRaDe:
            		return this.GioRaDe.Value.CompareTo(rhs.GioRaDe.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.GioToChucThi:
            		return this.GioToChucThi.Value.CompareTo(rhs.GioToChucThi.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.GioNhapDiem:
            		return this.GioNhapDiem.Value.CompareTo(rhs.GioNhapDiem.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.TongCong:
            		return this.TongCong.Value.CompareTo(rhs.TongCong.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiChamBaiImportColumn.LoaiHinHdaoTao:
            		return this.LoaiHinHdaoTao.CompareTo(rhs.LoaiHinHdaoTao);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThuLaoCoiThiChamBaiImportKey> Members
		
		// member variable for the EntityId property
		private ThuLaoCoiThiChamBaiImportKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThuLaoCoiThiChamBaiImportKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThuLaoCoiThiChamBaiImportKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThuLaoCoiThiChamBaiImport")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{29}{28}- Id: {0}{28}- NamHoc: {1}{28}- HocKy: {2}{28}- DotChiTra: {3}{28}- MaGiangVienQuanLy: {4}{28}- HoTen: {5}{28}- NoiDungChi: {6}{28}- MaMonHoc: {7}{28}- TenMonHoc: {8}{28}- MaLop: {9}{28}- SoBaiQuaTrinh: {10}{28}- SoBaiGiuaKy: {11}{28}- SoBaiCuoiKy: {12}{28}- DonGiaQuaTrinh: {13}{28}- DonGiaGiuaKy: {14}{28}- DonGiaCuoiKy: {15}{28}- ThanhTien: {16}{28}- SoTienCoiThi: {17}{28}- NgayCapNhat: {18}{28}- NguoiCapNhat: {19}{28}- BacDaoTao: {20}{28}- GioCoiThi: {21}{28}- GioChamThi: {22}{28}- GioRaDe: {23}{28}- GioToChucThi: {24}{28}- GioNhapDiem: {25}{28}- TongCong: {26}{28}- LoaiHinHdaoTao: {27}{28}{30}", 
				this.Id,
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.DotChiTra == null) ? string.Empty : this.DotChiTra.ToString(),
				(this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString(),
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
				(this.NoiDungChi == null) ? string.Empty : this.NoiDungChi.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString(),
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
				(this.SoBaiQuaTrinh == null) ? string.Empty : this.SoBaiQuaTrinh.ToString(),
				(this.SoBaiGiuaKy == null) ? string.Empty : this.SoBaiGiuaKy.ToString(),
				(this.SoBaiCuoiKy == null) ? string.Empty : this.SoBaiCuoiKy.ToString(),
				(this.DonGiaQuaTrinh == null) ? string.Empty : this.DonGiaQuaTrinh.ToString(),
				(this.DonGiaGiuaKy == null) ? string.Empty : this.DonGiaGiuaKy.ToString(),
				(this.DonGiaCuoiKy == null) ? string.Empty : this.DonGiaCuoiKy.ToString(),
				(this.ThanhTien == null) ? string.Empty : this.ThanhTien.ToString(),
				(this.SoTienCoiThi == null) ? string.Empty : this.SoTienCoiThi.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.BacDaoTao == null) ? string.Empty : this.BacDaoTao.ToString(),
				(this.GioCoiThi == null) ? string.Empty : this.GioCoiThi.ToString(),
				(this.GioChamThi == null) ? string.Empty : this.GioChamThi.ToString(),
				(this.GioRaDe == null) ? string.Empty : this.GioRaDe.ToString(),
				(this.GioToChucThi == null) ? string.Empty : this.GioToChucThi.ToString(),
				(this.GioNhapDiem == null) ? string.Empty : this.GioNhapDiem.ToString(),
				(this.TongCong == null) ? string.Empty : this.TongCong.ToString(),
				(this.LoaiHinHdaoTao == null) ? string.Empty : this.LoaiHinHdaoTao.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThuLaoCoiThiChamBaiImport' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThuLaoCoiThiChamBaiImportEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThuLaoCoiThiChamBaiImport"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// DotChiTra : 
		/// </summary>
		public System.String DotChiTra = null;
		
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		public System.String MaGiangVienQuanLy = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		public System.String HoTen = null;
		
		/// <summary>
		/// NoiDungChi : 
		/// </summary>
		public System.String NoiDungChi = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		public System.String TenMonHoc = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String MaLop = null;
		
		/// <summary>
		/// SoBaiQuaTrinh : 
		/// </summary>
		public System.Int32? SoBaiQuaTrinh = null;
		
		/// <summary>
		/// SoBaiGiuaKy : 
		/// </summary>
		public System.Int32? SoBaiGiuaKy = null;
		
		/// <summary>
		/// SoBaiCuoiKy : 
		/// </summary>
		public System.Int32? SoBaiCuoiKy = null;
		
		/// <summary>
		/// DonGiaQuaTrinh : 
		/// </summary>
		public System.Int32? DonGiaQuaTrinh = null;
		
		/// <summary>
		/// DonGiaGiuaKy : 
		/// </summary>
		public System.Int32? DonGiaGiuaKy = null;
		
		/// <summary>
		/// DonGiaCuoiKy : 
		/// </summary>
		public System.Int32? DonGiaCuoiKy = null;
		
		/// <summary>
		/// ThanhTien : 
		/// </summary>
		public System.Int32? ThanhTien = null;
		
		/// <summary>
		/// SoTienCoiThi : 
		/// </summary>
		public System.Int32? SoTienCoiThi = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.String NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// BacDaoTao : 
		/// </summary>
		public System.String BacDaoTao = null;
		
		/// <summary>
		/// GioCoiThi : 
		/// </summary>
		public System.Decimal? GioCoiThi = null;
		
		/// <summary>
		/// GioChamThi : 
		/// </summary>
		public System.Decimal? GioChamThi = null;
		
		/// <summary>
		/// GioRaDe : 
		/// </summary>
		public System.Decimal? GioRaDe = null;
		
		/// <summary>
		/// GioToChucThi : 
		/// </summary>
		public System.Decimal? GioToChucThi = null;
		
		/// <summary>
		/// GioNhapDiem : 
		/// </summary>
		public System.Decimal? GioNhapDiem = null;
		
		/// <summary>
		/// TongCong : 
		/// </summary>
		public System.Decimal? TongCong = null;
		
		/// <summary>
		/// LoaiHinHDaoTao : 
		/// </summary>
		public System.String LoaiHinHdaoTao = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThuLaoCoiThiChamBaiImportEntityData _tmp = new ThuLaoCoiThiChamBaiImportEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.DotChiTra = this.DotChiTra;
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.HoTen = this.HoTen;
			_tmp.NoiDungChi = this.NoiDungChi;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.MaLop = this.MaLop;
			_tmp.SoBaiQuaTrinh = this.SoBaiQuaTrinh;
			_tmp.SoBaiGiuaKy = this.SoBaiGiuaKy;
			_tmp.SoBaiCuoiKy = this.SoBaiCuoiKy;
			_tmp.DonGiaQuaTrinh = this.DonGiaQuaTrinh;
			_tmp.DonGiaGiuaKy = this.DonGiaGiuaKy;
			_tmp.DonGiaCuoiKy = this.DonGiaCuoiKy;
			_tmp.ThanhTien = this.ThanhTien;
			_tmp.SoTienCoiThi = this.SoTienCoiThi;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.BacDaoTao = this.BacDaoTao;
			_tmp.GioCoiThi = this.GioCoiThi;
			_tmp.GioChamThi = this.GioChamThi;
			_tmp.GioRaDe = this.GioRaDe;
			_tmp.GioToChucThi = this.GioToChucThi;
			_tmp.GioNhapDiem = this.GioNhapDiem;
			_tmp.TongCong = this.TongCong;
			_tmp.LoaiHinHdaoTao = this.LoaiHinHdaoTao;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThuLaoCoiThiChamBaiImportEntityData _tmp = new ThuLaoCoiThiChamBaiImportEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.DotChiTra = this.DotChiTra;
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.HoTen = this.HoTen;
			_tmp.NoiDungChi = this.NoiDungChi;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.MaLop = this.MaLop;
			_tmp.SoBaiQuaTrinh = this.SoBaiQuaTrinh;
			_tmp.SoBaiGiuaKy = this.SoBaiGiuaKy;
			_tmp.SoBaiCuoiKy = this.SoBaiCuoiKy;
			_tmp.DonGiaQuaTrinh = this.DonGiaQuaTrinh;
			_tmp.DonGiaGiuaKy = this.DonGiaGiuaKy;
			_tmp.DonGiaCuoiKy = this.DonGiaCuoiKy;
			_tmp.ThanhTien = this.ThanhTien;
			_tmp.SoTienCoiThi = this.SoTienCoiThi;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.BacDaoTao = this.BacDaoTao;
			_tmp.GioCoiThi = this.GioCoiThi;
			_tmp.GioChamThi = this.GioChamThi;
			_tmp.GioRaDe = this.GioRaDe;
			_tmp.GioToChucThi = this.GioToChucThi;
			_tmp.GioNhapDiem = this.GioNhapDiem;
			_tmp.TongCong = this.TongCong;
			_tmp.LoaiHinHdaoTao = this.LoaiHinHdaoTao;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiChamBaiImportColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiChamBaiImportColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiChamBaiImportColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThuLaoCoiThiChamBaiImportColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThuLaoCoiThiChamBaiImportEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThuLaoCoiThiChamBaiImportEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiChamBaiImportColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThuLaoCoiThiChamBaiImportColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThuLaoCoiThiChamBaiImportEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThuLaoCoiThiChamBaiImportEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThuLaoCoiThiChamBaiImportEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThuLaoCoiThiChamBaiImport"/> object.
	/// </remarks>
	public class ThuLaoCoiThiChamBaiImportEventArgs : System.EventArgs
	{
		private ThuLaoCoiThiChamBaiImportColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoCoiThiChamBaiImportEventArgs class.
		///</summary>
		public ThuLaoCoiThiChamBaiImportEventArgs(ThuLaoCoiThiChamBaiImportColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoCoiThiChamBaiImportEventArgs class.
		///</summary>
		public ThuLaoCoiThiChamBaiImportEventArgs(ThuLaoCoiThiChamBaiImportColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThuLaoCoiThiChamBaiImportColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThuLaoCoiThiChamBaiImportColumn" />
		public ThuLaoCoiThiChamBaiImportColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThuLaoCoiThiChamBaiImport related events.
	///</summary>
	public delegate void ThuLaoCoiThiChamBaiImportEventHandler(object sender, ThuLaoCoiThiChamBaiImportEventArgs e);
	
	#region ThuLaoCoiThiChamBaiImportComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThuLaoCoiThiChamBaiImportComparer : System.Collections.Generic.IComparer<ThuLaoCoiThiChamBaiImport>
	{
		ThuLaoCoiThiChamBaiImportColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoCoiThiChamBaiImportComparer"/> class.
        /// </summary>
		public ThuLaoCoiThiChamBaiImportComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoCoiThiChamBaiImportComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThuLaoCoiThiChamBaiImportComparer(ThuLaoCoiThiChamBaiImportColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThuLaoCoiThiChamBaiImport"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThuLaoCoiThiChamBaiImport"/> to compare.</param>
        /// <param name="b">The second <c>ThuLaoCoiThiChamBaiImport</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThuLaoCoiThiChamBaiImport a, ThuLaoCoiThiChamBaiImport b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThuLaoCoiThiChamBaiImport entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThuLaoCoiThiChamBaiImport a, ThuLaoCoiThiChamBaiImport b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThuLaoCoiThiChamBaiImportColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThuLaoCoiThiChamBaiImportKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThuLaoCoiThiChamBaiImport"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThuLaoCoiThiChamBaiImportKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportKey class.
		/// </summary>
		public ThuLaoCoiThiChamBaiImportKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportKey class.
		/// </summary>
		public ThuLaoCoiThiChamBaiImportKey(ThuLaoCoiThiChamBaiImportBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportKey class.
		/// </summary>
		public ThuLaoCoiThiChamBaiImportKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThuLaoCoiThiChamBaiImportBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThuLaoCoiThiChamBaiImportBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThuLaoCoiThiChamBaiImportColumn Enum
	
	/// <summary>
	/// Enumerate the ThuLaoCoiThiChamBaiImport columns.
	/// </summary>
	[Serializable]
	public enum ThuLaoCoiThiChamBaiImportColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 2,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 3,
		/// <summary>
		/// DotChiTra : 
		/// </summary>
		[EnumTextValue("Dot Chi Tra")]
		[ColumnEnum("DotChiTra", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DotChiTra = 4,
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien Quan Ly")]
		[ColumnEnum("MaGiangVienQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGiangVienQuanLy = 5,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("Ho Ten")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		HoTen = 6,
		/// <summary>
		/// NoiDungChi : 
		/// </summary>
		[EnumTextValue("Noi Dung Chi")]
		[ColumnEnum("NoiDungChi", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		NoiDungChi = 7,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 8,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("Ten Mon Hoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TenMonHoc = 9,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("Ma Lop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 2000)]
		MaLop = 10,
		/// <summary>
		/// SoBaiQuaTrinh : 
		/// </summary>
		[EnumTextValue("So Bai Qua Trinh")]
		[ColumnEnum("SoBaiQuaTrinh", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoBaiQuaTrinh = 11,
		/// <summary>
		/// SoBaiGiuaKy : 
		/// </summary>
		[EnumTextValue("So Bai Giua Ky")]
		[ColumnEnum("SoBaiGiuaKy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoBaiGiuaKy = 12,
		/// <summary>
		/// SoBaiCuoiKy : 
		/// </summary>
		[EnumTextValue("So Bai Cuoi Ky")]
		[ColumnEnum("SoBaiCuoiKy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoBaiCuoiKy = 13,
		/// <summary>
		/// DonGiaQuaTrinh : 
		/// </summary>
		[EnumTextValue("Don Gia Qua Trinh")]
		[ColumnEnum("DonGiaQuaTrinh", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DonGiaQuaTrinh = 14,
		/// <summary>
		/// DonGiaGiuaKy : 
		/// </summary>
		[EnumTextValue("Don Gia Giua Ky")]
		[ColumnEnum("DonGiaGiuaKy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DonGiaGiuaKy = 15,
		/// <summary>
		/// DonGiaCuoiKy : 
		/// </summary>
		[EnumTextValue("Don Gia Cuoi Ky")]
		[ColumnEnum("DonGiaCuoiKy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DonGiaCuoiKy = 16,
		/// <summary>
		/// ThanhTien : 
		/// </summary>
		[EnumTextValue("Thanh Tien")]
		[ColumnEnum("ThanhTien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ThanhTien = 17,
		/// <summary>
		/// SoTienCoiThi : 
		/// </summary>
		[EnumTextValue("So Tien Coi Thi")]
		[ColumnEnum("SoTienCoiThi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTienCoiThi = 18,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgayCapNhat = 19,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 20,
		/// <summary>
		/// BacDaoTao : 
		/// </summary>
		[EnumTextValue("Bac Dao Tao")]
		[ColumnEnum("BacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		BacDaoTao = 21,
		/// <summary>
		/// GioCoiThi : 
		/// </summary>
		[EnumTextValue("Gio Coi Thi")]
		[ColumnEnum("GioCoiThi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioCoiThi = 22,
		/// <summary>
		/// GioChamThi : 
		/// </summary>
		[EnumTextValue("Gio Cham Thi")]
		[ColumnEnum("GioChamThi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioChamThi = 23,
		/// <summary>
		/// GioRaDe : 
		/// </summary>
		[EnumTextValue("Gio Ra De")]
		[ColumnEnum("GioRaDe", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioRaDe = 24,
		/// <summary>
		/// GioToChucThi : 
		/// </summary>
		[EnumTextValue("Gio To Chuc Thi")]
		[ColumnEnum("GioToChucThi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioToChucThi = 25,
		/// <summary>
		/// GioNhapDiem : 
		/// </summary>
		[EnumTextValue("Gio Nhap Diem")]
		[ColumnEnum("GioNhapDiem", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioNhapDiem = 26,
		/// <summary>
		/// TongCong : 
		/// </summary>
		[EnumTextValue("Tong Cong")]
		[ColumnEnum("TongCong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongCong = 27,
		/// <summary>
		/// LoaiHinHdaoTao : 
		/// </summary>
		[EnumTextValue("Loai Hin Hdao Tao")]
		[ColumnEnum("LoaiHinHDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		LoaiHinHdaoTao = 28
	}//End enum

	#endregion ThuLaoCoiThiChamBaiImportColumn Enum

} // end namespace
