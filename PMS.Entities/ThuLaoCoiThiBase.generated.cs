
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThuLaoCoiThi.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThuLaoCoiThi' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThuLaoCoiThiBase : EntityBase, IThuLaoCoiThi, IEntityId<ThuLaoCoiThiKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThuLaoCoiThiEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThuLaoCoiThiEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThuLaoCoiThiEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThuLaoCoiThi> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoCoiThiEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoCoiThiEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThuLaoCoiThiBase"/> instance.
		///</summary>
		public ThuLaoCoiThiBase()
		{
			this.entityData = new ThuLaoCoiThiEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThuLaoCoiThiBase"/> instance.
		///</summary>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_kyThi"></param>
		///<param name="_lanThi"></param>
		///<param name="_ngay"></param>
		///<param name="_ca"></param>
		///<param name="_phong"></param>
		///<param name="_soTien"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_noiDung"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_maCoSo"></param>
		///<param name="_tietbatDau"></param>
		///<param name="_thoiGianLamBai"></param>
		///<param name="_gioCoiThi"></param>
		///<param name="_soLuongSinhVien"></param>
		///<param name="_isSync"></param>
		///<param name="_chot"></param>
		public ThuLaoCoiThiBase(System.String _maGiangVienQuanLy, System.String _kyThi, System.String _lanThi, 
			System.DateTime? _ngay, System.String _ca, System.String _phong, System.Decimal? _soTien, 
			System.String _namHoc, System.String _hocKy, System.String _noiDung, System.String _maMonHoc, 
			System.String _maHocPhan, System.String _maLopHocPhan, System.DateTime? _ngayCapNhat, 
			System.String _nguoiCapNhat, System.String _dotChiTra, System.String _maCoSo, System.Int32? _tietbatDau, 
			System.Int32? _thoiGianLamBai, System.String _gioCoiThi, System.Int32? _soLuongSinhVien, 
			System.Boolean? _isSync, System.Boolean? _chot)
		{
			this.entityData = new ThuLaoCoiThiEntityData();
			this.backupData = null;

			this.MaGiangVienQuanLy = _maGiangVienQuanLy;
			this.KyThi = _kyThi;
			this.LanThi = _lanThi;
			this.Ngay = _ngay;
			this.Ca = _ca;
			this.Phong = _phong;
			this.SoTien = _soTien;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.NoiDung = _noiDung;
			this.MaMonHoc = _maMonHoc;
			this.MaHocPhan = _maHocPhan;
			this.MaLopHocPhan = _maLopHocPhan;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.DotChiTra = _dotChiTra;
			this.MaCoSo = _maCoSo;
			this.TietbatDau = _tietbatDau;
			this.ThoiGianLamBai = _thoiGianLamBai;
			this.GioCoiThi = _gioCoiThi;
			this.SoLuongSinhVien = _soLuongSinhVien;
			this.IsSync = _isSync;
			this.Chot = _chot;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThuLaoCoiThi"/> instance.
		///</summary>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_kyThi"></param>
		///<param name="_lanThi"></param>
		///<param name="_ngay"></param>
		///<param name="_ca"></param>
		///<param name="_phong"></param>
		///<param name="_soTien"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_noiDung"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_maCoSo"></param>
		///<param name="_tietbatDau"></param>
		///<param name="_thoiGianLamBai"></param>
		///<param name="_gioCoiThi"></param>
		///<param name="_soLuongSinhVien"></param>
		///<param name="_isSync"></param>
		///<param name="_chot"></param>
		public static ThuLaoCoiThi CreateThuLaoCoiThi(System.String _maGiangVienQuanLy, System.String _kyThi, System.String _lanThi, 
			System.DateTime? _ngay, System.String _ca, System.String _phong, System.Decimal? _soTien, 
			System.String _namHoc, System.String _hocKy, System.String _noiDung, System.String _maMonHoc, 
			System.String _maHocPhan, System.String _maLopHocPhan, System.DateTime? _ngayCapNhat, 
			System.String _nguoiCapNhat, System.String _dotChiTra, System.String _maCoSo, System.Int32? _tietbatDau, 
			System.Int32? _thoiGianLamBai, System.String _gioCoiThi, System.Int32? _soLuongSinhVien, 
			System.Boolean? _isSync, System.Boolean? _chot)
		{
			ThuLaoCoiThi newThuLaoCoiThi = new ThuLaoCoiThi();
			newThuLaoCoiThi.MaGiangVienQuanLy = _maGiangVienQuanLy;
			newThuLaoCoiThi.KyThi = _kyThi;
			newThuLaoCoiThi.LanThi = _lanThi;
			newThuLaoCoiThi.Ngay = _ngay;
			newThuLaoCoiThi.Ca = _ca;
			newThuLaoCoiThi.Phong = _phong;
			newThuLaoCoiThi.SoTien = _soTien;
			newThuLaoCoiThi.NamHoc = _namHoc;
			newThuLaoCoiThi.HocKy = _hocKy;
			newThuLaoCoiThi.NoiDung = _noiDung;
			newThuLaoCoiThi.MaMonHoc = _maMonHoc;
			newThuLaoCoiThi.MaHocPhan = _maHocPhan;
			newThuLaoCoiThi.MaLopHocPhan = _maLopHocPhan;
			newThuLaoCoiThi.NgayCapNhat = _ngayCapNhat;
			newThuLaoCoiThi.NguoiCapNhat = _nguoiCapNhat;
			newThuLaoCoiThi.DotChiTra = _dotChiTra;
			newThuLaoCoiThi.MaCoSo = _maCoSo;
			newThuLaoCoiThi.TietbatDau = _tietbatDau;
			newThuLaoCoiThi.ThoiGianLamBai = _thoiGianLamBai;
			newThuLaoCoiThi.GioCoiThi = _gioCoiThi;
			newThuLaoCoiThi.SoLuongSinhVien = _soLuongSinhVien;
			newThuLaoCoiThi.IsSync = _isSync;
			newThuLaoCoiThi.Chot = _chot;
			return newThuLaoCoiThi;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ThuLaoCoiThiColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVienQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaGiangVienQuanLy
		{
			get
			{
				return this.entityData.MaGiangVienQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaGiangVienQuanLy == value)
					return;
				
                OnPropertyChanging("MaGiangVienQuanLy");                    
				OnColumnChanging(ThuLaoCoiThiColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				this.entityData.MaGiangVienQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				OnPropertyChanged("MaGiangVienQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KyThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String KyThi
		{
			get
			{
				return this.entityData.KyThi; 
			}
			
			set
			{
				if (this.entityData.KyThi == value)
					return;
				
                OnPropertyChanging("KyThi");                    
				OnColumnChanging(ThuLaoCoiThiColumn.KyThi, this.entityData.KyThi);
				this.entityData.KyThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.KyThi, this.entityData.KyThi);
				OnPropertyChanged("KyThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String LanThi
		{
			get
			{
				return this.entityData.LanThi; 
			}
			
			set
			{
				if (this.entityData.LanThi == value)
					return;
				
                OnPropertyChanging("LanThi");                    
				OnColumnChanging(ThuLaoCoiThiColumn.LanThi, this.entityData.LanThi);
				this.entityData.LanThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.LanThi, this.entityData.LanThi);
				OnPropertyChanged("LanThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ngay property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Ngay
		{
			get
			{
				return this.entityData.Ngay; 
			}
			
			set
			{
				if (this.entityData.Ngay == value)
					return;
				
                OnPropertyChanging("Ngay");                    
				OnColumnChanging(ThuLaoCoiThiColumn.Ngay, this.entityData.Ngay);
				this.entityData.Ngay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.Ngay, this.entityData.Ngay);
				OnPropertyChanged("Ngay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ca property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Ca
		{
			get
			{
				return this.entityData.Ca; 
			}
			
			set
			{
				if (this.entityData.Ca == value)
					return;
				
                OnPropertyChanging("Ca");                    
				OnColumnChanging(ThuLaoCoiThiColumn.Ca, this.entityData.Ca);
				this.entityData.Ca = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.Ca, this.entityData.Ca);
				OnPropertyChanged("Ca");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Phong
		{
			get
			{
				return this.entityData.Phong; 
			}
			
			set
			{
				if (this.entityData.Phong == value)
					return;
				
                OnPropertyChanging("Phong");                    
				OnColumnChanging(ThuLaoCoiThiColumn.Phong, this.entityData.Phong);
				this.entityData.Phong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.Phong, this.entityData.Phong);
				OnPropertyChanged("Phong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTien property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTien
		{
			get
			{
				return this.entityData.SoTien; 
			}
			
			set
			{
				if (this.entityData.SoTien == value)
					return;
				
                OnPropertyChanging("SoTien");                    
				OnColumnChanging(ThuLaoCoiThiColumn.SoTien, this.entityData.SoTien);
				this.entityData.SoTien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.SoTien, this.entityData.SoTien);
				OnPropertyChanged("SoTien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(ThuLaoCoiThiColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(ThuLaoCoiThiColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoiDung property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String NoiDung
		{
			get
			{
				return this.entityData.NoiDung; 
			}
			
			set
			{
				if (this.entityData.NoiDung == value)
					return;
				
                OnPropertyChanging("NoiDung");                    
				OnColumnChanging(ThuLaoCoiThiColumn.NoiDung, this.entityData.NoiDung);
				this.entityData.NoiDung = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.NoiDung, this.entityData.NoiDung);
				OnPropertyChanged("NoiDung");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(ThuLaoCoiThiColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaHocPhan
		{
			get
			{
				return this.entityData.MaHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaHocPhan == value)
					return;
				
                OnPropertyChanging("MaHocPhan");                    
				OnColumnChanging(ThuLaoCoiThiColumn.MaHocPhan, this.entityData.MaHocPhan);
				this.entityData.MaHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.MaHocPhan, this.entityData.MaHocPhan);
				OnPropertyChanged("MaHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(ThuLaoCoiThiColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(ThuLaoCoiThiColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(ThuLaoCoiThiColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotChiTra property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String DotChiTra
		{
			get
			{
				return this.entityData.DotChiTra; 
			}
			
			set
			{
				if (this.entityData.DotChiTra == value)
					return;
				
                OnPropertyChanging("DotChiTra");                    
				OnColumnChanging(ThuLaoCoiThiColumn.DotChiTra, this.entityData.DotChiTra);
				this.entityData.DotChiTra = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.DotChiTra, this.entityData.DotChiTra);
				OnPropertyChanged("DotChiTra");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaCoSo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaCoSo
		{
			get
			{
				return this.entityData.MaCoSo; 
			}
			
			set
			{
				if (this.entityData.MaCoSo == value)
					return;
				
                OnPropertyChanging("MaCoSo");                    
				OnColumnChanging(ThuLaoCoiThiColumn.MaCoSo, this.entityData.MaCoSo);
				this.entityData.MaCoSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.MaCoSo, this.entityData.MaCoSo);
				OnPropertyChanged("MaCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietbatDau property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietbatDau
		{
			get
			{
				return this.entityData.TietbatDau; 
			}
			
			set
			{
				if (this.entityData.TietbatDau == value)
					return;
				
                OnPropertyChanging("TietbatDau");                    
				OnColumnChanging(ThuLaoCoiThiColumn.TietbatDau, this.entityData.TietbatDau);
				this.entityData.TietbatDau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.TietbatDau, this.entityData.TietbatDau);
				OnPropertyChanged("TietbatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThoiGianLamBai property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ThoiGianLamBai
		{
			get
			{
				return this.entityData.ThoiGianLamBai; 
			}
			
			set
			{
				if (this.entityData.ThoiGianLamBai == value)
					return;
				
                OnPropertyChanging("ThoiGianLamBai");                    
				OnColumnChanging(ThuLaoCoiThiColumn.ThoiGianLamBai, this.entityData.ThoiGianLamBai);
				this.entityData.ThoiGianLamBai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.ThoiGianLamBai, this.entityData.ThoiGianLamBai);
				OnPropertyChanged("ThoiGianLamBai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioCoiThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String GioCoiThi
		{
			get
			{
				return this.entityData.GioCoiThi; 
			}
			
			set
			{
				if (this.entityData.GioCoiThi == value)
					return;
				
                OnPropertyChanging("GioCoiThi");                    
				OnColumnChanging(ThuLaoCoiThiColumn.GioCoiThi, this.entityData.GioCoiThi);
				this.entityData.GioCoiThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.GioCoiThi, this.entityData.GioCoiThi);
				OnPropertyChanged("GioCoiThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoLuongSinhVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoLuongSinhVien
		{
			get
			{
				return this.entityData.SoLuongSinhVien; 
			}
			
			set
			{
				if (this.entityData.SoLuongSinhVien == value)
					return;
				
                OnPropertyChanging("SoLuongSinhVien");                    
				OnColumnChanging(ThuLaoCoiThiColumn.SoLuongSinhVien, this.entityData.SoLuongSinhVien);
				this.entityData.SoLuongSinhVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.SoLuongSinhVien, this.entityData.SoLuongSinhVien);
				OnPropertyChanged("SoLuongSinhVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsSync property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsSync
		{
			get
			{
				return this.entityData.IsSync; 
			}
			
			set
			{
				if (this.entityData.IsSync == value)
					return;
				
                OnPropertyChanging("IsSync");                    
				OnColumnChanging(ThuLaoCoiThiColumn.IsSync, this.entityData.IsSync);
				this.entityData.IsSync = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.IsSync, this.entityData.IsSync);
				OnPropertyChanged("IsSync");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Chot property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Chot
		{
			get
			{
				return this.entityData.Chot; 
			}
			
			set
			{
				if (this.entityData.Chot == value)
					return;
				
                OnPropertyChanging("Chot");                    
				OnColumnChanging(ThuLaoCoiThiColumn.Chot, this.entityData.Chot);
				this.entityData.Chot = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoCoiThiColumn.Chot, this.entityData.Chot);
				OnPropertyChanged("Chot");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaGiangVienQuanLy", "Ma Giang Vien Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KyThi", "Ky Thi", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LanThi", "Lan Thi", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Ca", "Ca", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phong", "Phong", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NoiDung", "Noi Dung", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaHocPhan", "Ma Hoc Phan", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DotChiTra", "Dot Chi Tra", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaCoSo", "Ma Co So", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GioCoiThi", "Gio Coi Thi", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThuLaoCoiThi"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "MaGiangVienQuanLy", "KyThi", "LanThi", "Ngay", "Ca", "Phong", "SoTien", "NamHoc", "HocKy", "NoiDung", "MaMonHoc", "MaHocPhan", "MaLopHocPhan", "NgayCapNhat", "NguoiCapNhat", "DotChiTra", "MaCoSo", "TietbatDau", "ThoiGianLamBai", "GioCoiThi", "SoLuongSinhVien", "IsSync", "Chot"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThuLaoCoiThiEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThuLaoCoiThi) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThuLaoCoiThi>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThuLaoCoiThi);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThuLaoCoiThi Entity 
		///</summary>
		protected virtual ThuLaoCoiThi Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThuLaoCoiThi copy = new ThuLaoCoiThi();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
				copy.KyThi = this.KyThi;
				copy.LanThi = this.LanThi;
				copy.Ngay = this.Ngay;
				copy.Ca = this.Ca;
				copy.Phong = this.Phong;
				copy.SoTien = this.SoTien;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.NoiDung = this.NoiDung;
				copy.MaMonHoc = this.MaMonHoc;
				copy.MaHocPhan = this.MaHocPhan;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.DotChiTra = this.DotChiTra;
				copy.MaCoSo = this.MaCoSo;
				copy.TietbatDau = this.TietbatDau;
				copy.ThoiGianLamBai = this.ThoiGianLamBai;
				copy.GioCoiThi = this.GioCoiThi;
				copy.SoLuongSinhVien = this.SoLuongSinhVien;
				copy.IsSync = this.IsSync;
				copy.Chot = this.Chot;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThuLaoCoiThi Entity 
		///</summary>
		public virtual ThuLaoCoiThi Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThuLaoCoiThi Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThuLaoCoiThi DeepCopy()
		{
			return EntityHelper.Clone<ThuLaoCoiThi>(this as ThuLaoCoiThi);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThuLaoCoiThiEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThuLaoCoiThiEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThuLaoCoiThiEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThuLaoCoiThiColumn column)
		{
			switch(column)
			{
					case ThuLaoCoiThiColumn.Id:
					return entityData.Id != _originalData.Id;
					case ThuLaoCoiThiColumn.MaGiangVienQuanLy:
					return entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
					case ThuLaoCoiThiColumn.KyThi:
					return entityData.KyThi != _originalData.KyThi;
					case ThuLaoCoiThiColumn.LanThi:
					return entityData.LanThi != _originalData.LanThi;
					case ThuLaoCoiThiColumn.Ngay:
					return entityData.Ngay != _originalData.Ngay;
					case ThuLaoCoiThiColumn.Ca:
					return entityData.Ca != _originalData.Ca;
					case ThuLaoCoiThiColumn.Phong:
					return entityData.Phong != _originalData.Phong;
					case ThuLaoCoiThiColumn.SoTien:
					return entityData.SoTien != _originalData.SoTien;
					case ThuLaoCoiThiColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case ThuLaoCoiThiColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case ThuLaoCoiThiColumn.NoiDung:
					return entityData.NoiDung != _originalData.NoiDung;
					case ThuLaoCoiThiColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case ThuLaoCoiThiColumn.MaHocPhan:
					return entityData.MaHocPhan != _originalData.MaHocPhan;
					case ThuLaoCoiThiColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case ThuLaoCoiThiColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case ThuLaoCoiThiColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case ThuLaoCoiThiColumn.DotChiTra:
					return entityData.DotChiTra != _originalData.DotChiTra;
					case ThuLaoCoiThiColumn.MaCoSo:
					return entityData.MaCoSo != _originalData.MaCoSo;
					case ThuLaoCoiThiColumn.TietbatDau:
					return entityData.TietbatDau != _originalData.TietbatDau;
					case ThuLaoCoiThiColumn.ThoiGianLamBai:
					return entityData.ThoiGianLamBai != _originalData.ThoiGianLamBai;
					case ThuLaoCoiThiColumn.GioCoiThi:
					return entityData.GioCoiThi != _originalData.GioCoiThi;
					case ThuLaoCoiThiColumn.SoLuongSinhVien:
					return entityData.SoLuongSinhVien != _originalData.SoLuongSinhVien;
					case ThuLaoCoiThiColumn.IsSync:
					return entityData.IsSync != _originalData.IsSync;
					case ThuLaoCoiThiColumn.Chot:
					return entityData.Chot != _originalData.Chot;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThuLaoCoiThiColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
			result = result || entityData.KyThi != _originalData.KyThi;
			result = result || entityData.LanThi != _originalData.LanThi;
			result = result || entityData.Ngay != _originalData.Ngay;
			result = result || entityData.Ca != _originalData.Ca;
			result = result || entityData.Phong != _originalData.Phong;
			result = result || entityData.SoTien != _originalData.SoTien;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.NoiDung != _originalData.NoiDung;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.MaHocPhan != _originalData.MaHocPhan;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.DotChiTra != _originalData.DotChiTra;
			result = result || entityData.MaCoSo != _originalData.MaCoSo;
			result = result || entityData.TietbatDau != _originalData.TietbatDau;
			result = result || entityData.ThoiGianLamBai != _originalData.ThoiGianLamBai;
			result = result || entityData.GioCoiThi != _originalData.GioCoiThi;
			result = result || entityData.SoLuongSinhVien != _originalData.SoLuongSinhVien;
			result = result || entityData.IsSync != _originalData.IsSync;
			result = result || entityData.Chot != _originalData.Chot;
			return result;
		}	
		
		///<summary>
		///  Returns a ThuLaoCoiThi Entity with the original data.
		///</summary>
		public ThuLaoCoiThi GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThuLaoCoiThi(
				_originalData.MaGiangVienQuanLy,
				_originalData.KyThi,
				_originalData.LanThi,
				_originalData.Ngay,
				_originalData.Ca,
				_originalData.Phong,
				_originalData.SoTien,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.NoiDung,
				_originalData.MaMonHoc,
				_originalData.MaHocPhan,
				_originalData.MaLopHocPhan,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.DotChiTra,
				_originalData.MaCoSo,
				_originalData.TietbatDau,
				_originalData.ThoiGianLamBai,
				_originalData.GioCoiThi,
				_originalData.SoLuongSinhVien,
				_originalData.IsSync,
				_originalData.Chot
				);
				
			return (ThuLaoCoiThi)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThuLaoCoiThiBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThuLaoCoiThiBase)
				return ValueEquals(this, (ThuLaoCoiThiBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThuLaoCoiThiBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString()).GetHashCode() ^ 
					((this.KyThi == null) ? string.Empty : this.KyThi.ToString()).GetHashCode() ^ 
					((this.LanThi == null) ? string.Empty : this.LanThi.ToString()).GetHashCode() ^ 
					((this.Ngay == null) ? string.Empty : this.Ngay.ToString()).GetHashCode() ^ 
					((this.Ca == null) ? string.Empty : this.Ca.ToString()).GetHashCode() ^ 
					((this.Phong == null) ? string.Empty : this.Phong.ToString()).GetHashCode() ^ 
					((this.SoTien == null) ? string.Empty : this.SoTien.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.NoiDung == null) ? string.Empty : this.NoiDung.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.MaHocPhan == null) ? string.Empty : this.MaHocPhan.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.DotChiTra == null) ? string.Empty : this.DotChiTra.ToString()).GetHashCode() ^ 
					((this.MaCoSo == null) ? string.Empty : this.MaCoSo.ToString()).GetHashCode() ^ 
					((this.TietbatDau == null) ? string.Empty : this.TietbatDau.ToString()).GetHashCode() ^ 
					((this.ThoiGianLamBai == null) ? string.Empty : this.ThoiGianLamBai.ToString()).GetHashCode() ^ 
					((this.GioCoiThi == null) ? string.Empty : this.GioCoiThi.ToString()).GetHashCode() ^ 
					((this.SoLuongSinhVien == null) ? string.Empty : this.SoLuongSinhVien.ToString()).GetHashCode() ^ 
					((this.IsSync == null) ? string.Empty : this.IsSync.ToString()).GetHashCode() ^ 
					((this.Chot == null) ? string.Empty : this.Chot.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThuLaoCoiThiBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThuLaoCoiThiBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThuLaoCoiThiBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThuLaoCoiThiBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThuLaoCoiThiBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThuLaoCoiThiBase Object1, ThuLaoCoiThiBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.MaGiangVienQuanLy != null && Object2.MaGiangVienQuanLy != null )
			{
				if (Object1.MaGiangVienQuanLy != Object2.MaGiangVienQuanLy)
					equal = false;
			}
			else if (Object1.MaGiangVienQuanLy == null ^ Object2.MaGiangVienQuanLy == null )
			{
				equal = false;
			}
			if ( Object1.KyThi != null && Object2.KyThi != null )
			{
				if (Object1.KyThi != Object2.KyThi)
					equal = false;
			}
			else if (Object1.KyThi == null ^ Object2.KyThi == null )
			{
				equal = false;
			}
			if ( Object1.LanThi != null && Object2.LanThi != null )
			{
				if (Object1.LanThi != Object2.LanThi)
					equal = false;
			}
			else if (Object1.LanThi == null ^ Object2.LanThi == null )
			{
				equal = false;
			}
			if ( Object1.Ngay != null && Object2.Ngay != null )
			{
				if (Object1.Ngay != Object2.Ngay)
					equal = false;
			}
			else if (Object1.Ngay == null ^ Object2.Ngay == null )
			{
				equal = false;
			}
			if ( Object1.Ca != null && Object2.Ca != null )
			{
				if (Object1.Ca != Object2.Ca)
					equal = false;
			}
			else if (Object1.Ca == null ^ Object2.Ca == null )
			{
				equal = false;
			}
			if ( Object1.Phong != null && Object2.Phong != null )
			{
				if (Object1.Phong != Object2.Phong)
					equal = false;
			}
			else if (Object1.Phong == null ^ Object2.Phong == null )
			{
				equal = false;
			}
			if ( Object1.SoTien != null && Object2.SoTien != null )
			{
				if (Object1.SoTien != Object2.SoTien)
					equal = false;
			}
			else if (Object1.SoTien == null ^ Object2.SoTien == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.NoiDung != null && Object2.NoiDung != null )
			{
				if (Object1.NoiDung != Object2.NoiDung)
					equal = false;
			}
			else if (Object1.NoiDung == null ^ Object2.NoiDung == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaHocPhan != null && Object2.MaHocPhan != null )
			{
				if (Object1.MaHocPhan != Object2.MaHocPhan)
					equal = false;
			}
			else if (Object1.MaHocPhan == null ^ Object2.MaHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.DotChiTra != null && Object2.DotChiTra != null )
			{
				if (Object1.DotChiTra != Object2.DotChiTra)
					equal = false;
			}
			else if (Object1.DotChiTra == null ^ Object2.DotChiTra == null )
			{
				equal = false;
			}
			if ( Object1.MaCoSo != null && Object2.MaCoSo != null )
			{
				if (Object1.MaCoSo != Object2.MaCoSo)
					equal = false;
			}
			else if (Object1.MaCoSo == null ^ Object2.MaCoSo == null )
			{
				equal = false;
			}
			if ( Object1.TietbatDau != null && Object2.TietbatDau != null )
			{
				if (Object1.TietbatDau != Object2.TietbatDau)
					equal = false;
			}
			else if (Object1.TietbatDau == null ^ Object2.TietbatDau == null )
			{
				equal = false;
			}
			if ( Object1.ThoiGianLamBai != null && Object2.ThoiGianLamBai != null )
			{
				if (Object1.ThoiGianLamBai != Object2.ThoiGianLamBai)
					equal = false;
			}
			else if (Object1.ThoiGianLamBai == null ^ Object2.ThoiGianLamBai == null )
			{
				equal = false;
			}
			if ( Object1.GioCoiThi != null && Object2.GioCoiThi != null )
			{
				if (Object1.GioCoiThi != Object2.GioCoiThi)
					equal = false;
			}
			else if (Object1.GioCoiThi == null ^ Object2.GioCoiThi == null )
			{
				equal = false;
			}
			if ( Object1.SoLuongSinhVien != null && Object2.SoLuongSinhVien != null )
			{
				if (Object1.SoLuongSinhVien != Object2.SoLuongSinhVien)
					equal = false;
			}
			else if (Object1.SoLuongSinhVien == null ^ Object2.SoLuongSinhVien == null )
			{
				equal = false;
			}
			if ( Object1.IsSync != null && Object2.IsSync != null )
			{
				if (Object1.IsSync != Object2.IsSync)
					equal = false;
			}
			else if (Object1.IsSync == null ^ Object2.IsSync == null )
			{
				equal = false;
			}
			if ( Object1.Chot != null && Object2.Chot != null )
			{
				if (Object1.Chot != Object2.Chot)
					equal = false;
			}
			else if (Object1.Chot == null ^ Object2.Chot == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThuLaoCoiThiBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThuLaoCoiThiComparer GetComparer()
        {
            return new ThuLaoCoiThiComparer();
        }
        */

        // Comparer delegates back to ThuLaoCoiThi
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThuLaoCoiThi rhs, ThuLaoCoiThiColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThuLaoCoiThiColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.MaGiangVienQuanLy:
            		return this.MaGiangVienQuanLy.CompareTo(rhs.MaGiangVienQuanLy);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.KyThi:
            		return this.KyThi.CompareTo(rhs.KyThi);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.LanThi:
            		return this.LanThi.CompareTo(rhs.LanThi);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.Ngay:
            		return this.Ngay.Value.CompareTo(rhs.Ngay.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.Ca:
            		return this.Ca.CompareTo(rhs.Ca);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.Phong:
            		return this.Phong.CompareTo(rhs.Phong);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.SoTien:
            		return this.SoTien.Value.CompareTo(rhs.SoTien.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.NoiDung:
            		return this.NoiDung.CompareTo(rhs.NoiDung);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.MaHocPhan:
            		return this.MaHocPhan.CompareTo(rhs.MaHocPhan);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.NgayCapNhat:
            		return this.NgayCapNhat.Value.CompareTo(rhs.NgayCapNhat.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.DotChiTra:
            		return this.DotChiTra.CompareTo(rhs.DotChiTra);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.MaCoSo:
            		return this.MaCoSo.CompareTo(rhs.MaCoSo);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.TietbatDau:
            		return this.TietbatDau.Value.CompareTo(rhs.TietbatDau.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.ThoiGianLamBai:
            		return this.ThoiGianLamBai.Value.CompareTo(rhs.ThoiGianLamBai.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.GioCoiThi:
            		return this.GioCoiThi.CompareTo(rhs.GioCoiThi);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.SoLuongSinhVien:
            		return this.SoLuongSinhVien.Value.CompareTo(rhs.SoLuongSinhVien.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.IsSync:
            		return this.IsSync.Value.CompareTo(rhs.IsSync.Value);
            		
            		                 
            	
            	
            	case ThuLaoCoiThiColumn.Chot:
            		return this.Chot.Value.CompareTo(rhs.Chot.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThuLaoCoiThiKey> Members
		
		// member variable for the EntityId property
		private ThuLaoCoiThiKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThuLaoCoiThiKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThuLaoCoiThiKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThuLaoCoiThi")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{25}{24}- Id: {0}{24}- MaGiangVienQuanLy: {1}{24}- KyThi: {2}{24}- LanThi: {3}{24}- Ngay: {4}{24}- Ca: {5}{24}- Phong: {6}{24}- SoTien: {7}{24}- NamHoc: {8}{24}- HocKy: {9}{24}- NoiDung: {10}{24}- MaMonHoc: {11}{24}- MaHocPhan: {12}{24}- MaLopHocPhan: {13}{24}- NgayCapNhat: {14}{24}- NguoiCapNhat: {15}{24}- DotChiTra: {16}{24}- MaCoSo: {17}{24}- TietbatDau: {18}{24}- ThoiGianLamBai: {19}{24}- GioCoiThi: {20}{24}- SoLuongSinhVien: {21}{24}- IsSync: {22}{24}- Chot: {23}{24}{26}", 
				this.Id,
				(this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString(),
				(this.KyThi == null) ? string.Empty : this.KyThi.ToString(),
				(this.LanThi == null) ? string.Empty : this.LanThi.ToString(),
				(this.Ngay == null) ? string.Empty : this.Ngay.ToString(),
				(this.Ca == null) ? string.Empty : this.Ca.ToString(),
				(this.Phong == null) ? string.Empty : this.Phong.ToString(),
				(this.SoTien == null) ? string.Empty : this.SoTien.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.NoiDung == null) ? string.Empty : this.NoiDung.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.MaHocPhan == null) ? string.Empty : this.MaHocPhan.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.DotChiTra == null) ? string.Empty : this.DotChiTra.ToString(),
				(this.MaCoSo == null) ? string.Empty : this.MaCoSo.ToString(),
				(this.TietbatDau == null) ? string.Empty : this.TietbatDau.ToString(),
				(this.ThoiGianLamBai == null) ? string.Empty : this.ThoiGianLamBai.ToString(),
				(this.GioCoiThi == null) ? string.Empty : this.GioCoiThi.ToString(),
				(this.SoLuongSinhVien == null) ? string.Empty : this.SoLuongSinhVien.ToString(),
				(this.IsSync == null) ? string.Empty : this.IsSync.ToString(),
				(this.Chot == null) ? string.Empty : this.Chot.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThuLaoCoiThi' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThuLaoCoiThiEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThuLaoCoiThi"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		public System.String MaGiangVienQuanLy = null;
		
		/// <summary>
		/// KyThi : 
		/// </summary>
		public System.String KyThi = null;
		
		/// <summary>
		/// LanThi : 
		/// </summary>
		public System.String LanThi = null;
		
		/// <summary>
		/// Ngay : 
		/// </summary>
		public System.DateTime? Ngay = null;
		
		/// <summary>
		/// Ca : 
		/// </summary>
		public System.String Ca = null;
		
		/// <summary>
		/// Phong : 
		/// </summary>
		public System.String Phong = null;
		
		/// <summary>
		/// SoTien : 
		/// </summary>
		public System.Decimal? SoTien = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// NoiDung : 
		/// </summary>
		public System.String NoiDung = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// MaHocPhan : 
		/// </summary>
		public System.String MaHocPhan = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.DateTime? NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// DotChiTra : 
		/// </summary>
		public System.String DotChiTra = null;
		
		/// <summary>
		/// MaCoSo : 
		/// </summary>
		public System.String MaCoSo = null;
		
		/// <summary>
		/// TietbatDau : 
		/// </summary>
		public System.Int32? TietbatDau = null;
		
		/// <summary>
		/// ThoiGianLamBai : 
		/// </summary>
		public System.Int32? ThoiGianLamBai = null;
		
		/// <summary>
		/// GioCoiThi : 
		/// </summary>
		public System.String GioCoiThi = null;
		
		/// <summary>
		/// SoLuongSinhVien : 
		/// </summary>
		public System.Int32? SoLuongSinhVien = null;
		
		/// <summary>
		/// IsSync : 
		/// </summary>
		public System.Boolean? IsSync = null;
		
		/// <summary>
		/// Chot : 
		/// </summary>
		public System.Boolean? Chot = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThuLaoCoiThiEntityData _tmp = new ThuLaoCoiThiEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.KyThi = this.KyThi;
			_tmp.LanThi = this.LanThi;
			_tmp.Ngay = this.Ngay;
			_tmp.Ca = this.Ca;
			_tmp.Phong = this.Phong;
			_tmp.SoTien = this.SoTien;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.NoiDung = this.NoiDung;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.MaHocPhan = this.MaHocPhan;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.DotChiTra = this.DotChiTra;
			_tmp.MaCoSo = this.MaCoSo;
			_tmp.TietbatDau = this.TietbatDau;
			_tmp.ThoiGianLamBai = this.ThoiGianLamBai;
			_tmp.GioCoiThi = this.GioCoiThi;
			_tmp.SoLuongSinhVien = this.SoLuongSinhVien;
			_tmp.IsSync = this.IsSync;
			_tmp.Chot = this.Chot;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThuLaoCoiThiEntityData _tmp = new ThuLaoCoiThiEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.KyThi = this.KyThi;
			_tmp.LanThi = this.LanThi;
			_tmp.Ngay = this.Ngay;
			_tmp.Ca = this.Ca;
			_tmp.Phong = this.Phong;
			_tmp.SoTien = this.SoTien;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.NoiDung = this.NoiDung;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.MaHocPhan = this.MaHocPhan;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.DotChiTra = this.DotChiTra;
			_tmp.MaCoSo = this.MaCoSo;
			_tmp.TietbatDau = this.TietbatDau;
			_tmp.ThoiGianLamBai = this.ThoiGianLamBai;
			_tmp.GioCoiThi = this.GioCoiThi;
			_tmp.SoLuongSinhVien = this.SoLuongSinhVien;
			_tmp.IsSync = this.IsSync;
			_tmp.Chot = this.Chot;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThuLaoCoiThiColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThuLaoCoiThiColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThuLaoCoiThiColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThuLaoCoiThiEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThuLaoCoiThiEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoCoiThiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThuLaoCoiThiColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThuLaoCoiThiEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThuLaoCoiThiEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThuLaoCoiThiEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThuLaoCoiThi"/> object.
	/// </remarks>
	public class ThuLaoCoiThiEventArgs : System.EventArgs
	{
		private ThuLaoCoiThiColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoCoiThiEventArgs class.
		///</summary>
		public ThuLaoCoiThiEventArgs(ThuLaoCoiThiColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoCoiThiEventArgs class.
		///</summary>
		public ThuLaoCoiThiEventArgs(ThuLaoCoiThiColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThuLaoCoiThiColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThuLaoCoiThiColumn" />
		public ThuLaoCoiThiColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThuLaoCoiThi related events.
	///</summary>
	public delegate void ThuLaoCoiThiEventHandler(object sender, ThuLaoCoiThiEventArgs e);
	
	#region ThuLaoCoiThiComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThuLaoCoiThiComparer : System.Collections.Generic.IComparer<ThuLaoCoiThi>
	{
		ThuLaoCoiThiColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoCoiThiComparer"/> class.
        /// </summary>
		public ThuLaoCoiThiComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoCoiThiComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThuLaoCoiThiComparer(ThuLaoCoiThiColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThuLaoCoiThi"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThuLaoCoiThi"/> to compare.</param>
        /// <param name="b">The second <c>ThuLaoCoiThi</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThuLaoCoiThi a, ThuLaoCoiThi b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThuLaoCoiThi entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThuLaoCoiThi a, ThuLaoCoiThi b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThuLaoCoiThiColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThuLaoCoiThiKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThuLaoCoiThi"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThuLaoCoiThiKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiKey class.
		/// </summary>
		public ThuLaoCoiThiKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiKey class.
		/// </summary>
		public ThuLaoCoiThiKey(ThuLaoCoiThiBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiKey class.
		/// </summary>
		public ThuLaoCoiThiKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThuLaoCoiThiBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThuLaoCoiThiBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThuLaoCoiThiColumn Enum
	
	/// <summary>
	/// Enumerate the ThuLaoCoiThi columns.
	/// </summary>
	[Serializable]
	public enum ThuLaoCoiThiColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien Quan Ly")]
		[ColumnEnum("MaGiangVienQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGiangVienQuanLy = 2,
		/// <summary>
		/// KyThi : 
		/// </summary>
		[EnumTextValue("Ky Thi")]
		[ColumnEnum("KyThi", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		KyThi = 3,
		/// <summary>
		/// LanThi : 
		/// </summary>
		[EnumTextValue("Lan Thi")]
		[ColumnEnum("LanThi", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		LanThi = 4,
		/// <summary>
		/// Ngay : 
		/// </summary>
		[EnumTextValue("Ngay")]
		[ColumnEnum("Ngay", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Ngay = 5,
		/// <summary>
		/// Ca : 
		/// </summary>
		[EnumTextValue("Ca")]
		[ColumnEnum("Ca", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Ca = 6,
		/// <summary>
		/// Phong : 
		/// </summary>
		[EnumTextValue("Phong")]
		[ColumnEnum("Phong", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Phong = 7,
		/// <summary>
		/// SoTien : 
		/// </summary>
		[EnumTextValue("So Tien")]
		[ColumnEnum("SoTien", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTien = 8,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 9,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 10,
		/// <summary>
		/// NoiDung : 
		/// </summary>
		[EnumTextValue("Noi Dung")]
		[ColumnEnum("NoiDung", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		NoiDung = 11,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 12,
		/// <summary>
		/// MaHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Hoc Phan")]
		[ColumnEnum("MaHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHocPhan = 13,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MaLopHocPhan = 14,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayCapNhat = 15,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 16,
		/// <summary>
		/// DotChiTra : 
		/// </summary>
		[EnumTextValue("Dot Chi Tra")]
		[ColumnEnum("DotChiTra", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		DotChiTra = 17,
		/// <summary>
		/// MaCoSo : 
		/// </summary>
		[EnumTextValue("Ma Co So")]
		[ColumnEnum("MaCoSo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaCoSo = 18,
		/// <summary>
		/// TietbatDau : 
		/// </summary>
		[EnumTextValue("Tietbat Dau")]
		[ColumnEnum("TietbatDau", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietbatDau = 19,
		/// <summary>
		/// ThoiGianLamBai : 
		/// </summary>
		[EnumTextValue("Thoi Gian Lam Bai")]
		[ColumnEnum("ThoiGianLamBai", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ThoiGianLamBai = 20,
		/// <summary>
		/// GioCoiThi : 
		/// </summary>
		[EnumTextValue("Gio Coi Thi")]
		[ColumnEnum("GioCoiThi", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		GioCoiThi = 21,
		/// <summary>
		/// SoLuongSinhVien : 
		/// </summary>
		[EnumTextValue("So Luong Sinh Vien")]
		[ColumnEnum("SoLuongSinhVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuongSinhVien = 22,
		/// <summary>
		/// IsSync : 
		/// </summary>
		[EnumTextValue("Is Sync")]
		[ColumnEnum("IsSync", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsSync = 23,
		/// <summary>
		/// Chot : 
		/// </summary>
		[EnumTextValue("Chot")]
		[ColumnEnum("Chot", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Chot = 24
	}//End enum

	#endregion ThuLaoCoiThiColumn Enum

} // end namespace
