/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ViewPhuTroiNamHoc.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_PhuTroi_NamHoc' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewPhuTroiNamHocBase")]
	public abstract partial class ViewPhuTroiNamHocBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.String		  _maGiangVien = null;
		
		/// <summary>
		/// TietThucDay : 
		/// </summary>
		private System.Decimal?		  _tietThucDay = null;
		
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		private System.Decimal?		  _tietQuyDoi = null;
		
		/// <summary>
		/// MaChucVu : 
		/// </summary>
		private System.Int32?		  _maChucVu = null;
		
		/// <summary>
		/// TenChucVu : 
		/// </summary>
		private System.String		  _tenChucVu = null;
		
		/// <summary>
		/// TietNghiaVu : 
		/// </summary>
		private System.Decimal?		  _tietNghiaVu = null;
		
		/// <summary>
		/// Nckh : 
		/// </summary>
		private System.Decimal?		  _nckh = null;
		
		/// <summary>
		/// NhiemVuKhac : 
		/// </summary>
		private System.Decimal?		  _nhiemVuKhac = null;
		
		/// <summary>
		/// GioChuan : 
		/// </summary>
		private System.Decimal?		  _gioChuan = null;
		
		/// <summary>
		/// HoLot : 
		/// </summary>
		private System.String		  _hoLot = null;
		
		/// <summary>
		/// Ten : 
		/// </summary>
		private System.String		  _ten = string.Empty;
		
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		private System.String		  _maDonVi = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewPhuTroiNamHocBase"/> instance.
		///</summary>
		public ViewPhuTroiNamHocBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewPhuTroiNamHocBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_tietThucDay"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_maChucVu"></param>
		///<param name="_tenChucVu"></param>
		///<param name="_tietNghiaVu"></param>
		///<param name="_nckh"></param>
		///<param name="_nhiemVuKhac"></param>
		///<param name="_gioChuan"></param>
		///<param name="_hoLot"></param>
		///<param name="_ten"></param>
		///<param name="_maDonVi"></param>
		public ViewPhuTroiNamHocBase(System.String _maGiangVien, System.Decimal? _tietThucDay, System.Decimal? _tietQuyDoi, System.Int32? _maChucVu, System.String _tenChucVu, System.Decimal? _tietNghiaVu, System.Decimal? _nckh, System.Decimal? _nhiemVuKhac, System.Decimal? _gioChuan, System.String _hoLot, System.String _ten, System.String _maDonVi)
		{
			this._maGiangVien = _maGiangVien;
			this._tietThucDay = _tietThucDay;
			this._tietQuyDoi = _tietQuyDoi;
			this._maChucVu = _maChucVu;
			this._tenChucVu = _tenChucVu;
			this._tietNghiaVu = _tietNghiaVu;
			this._nckh = _nckh;
			this._nhiemVuKhac = _nhiemVuKhac;
			this._gioChuan = _gioChuan;
			this._hoLot = _hoLot;
			this._ten = _ten;
			this._maDonVi = _maDonVi;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewPhuTroiNamHoc"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_tietThucDay"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_maChucVu"></param>
		///<param name="_tenChucVu"></param>
		///<param name="_tietNghiaVu"></param>
		///<param name="_nckh"></param>
		///<param name="_nhiemVuKhac"></param>
		///<param name="_gioChuan"></param>
		///<param name="_hoLot"></param>
		///<param name="_ten"></param>
		///<param name="_maDonVi"></param>
		public static ViewPhuTroiNamHoc CreateViewPhuTroiNamHoc(System.String _maGiangVien, System.Decimal? _tietThucDay, System.Decimal? _tietQuyDoi, System.Int32? _maChucVu, System.String _tenChucVu, System.Decimal? _tietNghiaVu, System.Decimal? _nckh, System.Decimal? _nhiemVuKhac, System.Decimal? _gioChuan, System.String _hoLot, System.String _ten, System.String _maDonVi)
		{
			ViewPhuTroiNamHoc newViewPhuTroiNamHoc = new ViewPhuTroiNamHoc();
			newViewPhuTroiNamHoc.MaGiangVien = _maGiangVien;
			newViewPhuTroiNamHoc.TietThucDay = _tietThucDay;
			newViewPhuTroiNamHoc.TietQuyDoi = _tietQuyDoi;
			newViewPhuTroiNamHoc.MaChucVu = _maChucVu;
			newViewPhuTroiNamHoc.TenChucVu = _tenChucVu;
			newViewPhuTroiNamHoc.TietNghiaVu = _tietNghiaVu;
			newViewPhuTroiNamHoc.Nckh = _nckh;
			newViewPhuTroiNamHoc.NhiemVuKhac = _nhiemVuKhac;
			newViewPhuTroiNamHoc.GioChuan = _gioChuan;
			newViewPhuTroiNamHoc.HoLot = _hoLot;
			newViewPhuTroiNamHoc.Ten = _ten;
			newViewPhuTroiNamHoc.MaDonVi = _maDonVi;
			return newViewPhuTroiNamHoc;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value)
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietThucDay property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietThucDayNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietThucDay
		{
			get
			{
				return this._tietThucDay; 
			}
			set
			{
				if (_tietThucDay == value && TietThucDay != null )
					return;
					
				this._tietThucDay = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietThucDay");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietQuyDoiNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietQuyDoi
		{
			get
			{
				return this._tietQuyDoi; 
			}
			set
			{
				if (_tietQuyDoi == value && TietQuyDoi != null )
					return;
					
				this._tietQuyDoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaChucVu property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaChucVuNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaChucVu
		{
			get
			{
				return this._maChucVu; 
			}
			set
			{
				if (_maChucVu == value && MaChucVu != null )
					return;
					
				this._maChucVu = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaChucVu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenChucVu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenChucVu
		{
			get
			{
				return this._tenChucVu; 
			}
			set
			{
				if (_tenChucVu == value)
					return;
					
				this._tenChucVu = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenChucVu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietNghiaVu property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietNghiaVuNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietNghiaVu
		{
			get
			{
				return this._tietNghiaVu; 
			}
			set
			{
				if (_tietNghiaVu == value && TietNghiaVu != null )
					return;
					
				this._tietNghiaVu = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietNghiaVu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nckh property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNckhNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Nckh
		{
			get
			{
				return this._nckh; 
			}
			set
			{
				if (_nckh == value && Nckh != null )
					return;
					
				this._nckh = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nckh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NhiemVuKhac property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNhiemVuKhacNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? NhiemVuKhac
		{
			get
			{
				return this._nhiemVuKhac; 
			}
			set
			{
				if (_nhiemVuKhac == value && NhiemVuKhac != null )
					return;
					
				this._nhiemVuKhac = value;
				this._isDirty = true;
				
				OnPropertyChanged("NhiemVuKhac");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GioChuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGioChuanNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? GioChuan
		{
			get
			{
				return this._gioChuan; 
			}
			set
			{
				if (_gioChuan == value && GioChuan != null )
					return;
					
				this._gioChuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("GioChuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoLot property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoLot
		{
			get
			{
				return this._hoLot; 
			}
			set
			{
				if (_hoLot == value)
					return;
					
				this._hoLot = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoLot");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ten property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ten
		{
			get
			{
				return this._ten; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Ten does not allow null values.");
				if (_ten == value)
					return;
					
				this._ten = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ten");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaDonVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaDonVi
		{
			get
			{
				return this._maDonVi; 
			}
			set
			{
				if (_maDonVi == value)
					return;
					
				this._maDonVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaDonVi");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_PhuTroi_NamHoc"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewPhuTroiNamHocBase Entity 
		///</summary>
		public virtual ViewPhuTroiNamHocBase Copy()
		{
			//shallow copy entity
			ViewPhuTroiNamHoc copy = new ViewPhuTroiNamHoc();
				copy.MaGiangVien = this.MaGiangVien;
				copy.TietThucDay = this.TietThucDay;
				copy.TietQuyDoi = this.TietQuyDoi;
				copy.MaChucVu = this.MaChucVu;
				copy.TenChucVu = this.TenChucVu;
				copy.TietNghiaVu = this.TietNghiaVu;
				copy.Nckh = this.Nckh;
				copy.NhiemVuKhac = this.NhiemVuKhac;
				copy.GioChuan = this.GioChuan;
				copy.HoLot = this.HoLot;
				copy.Ten = this.Ten;
				copy.MaDonVi = this.MaDonVi;
			copy.AcceptChanges();
			return (ViewPhuTroiNamHoc)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewPhuTroiNamHocBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewPhuTroiNamHocBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewPhuTroiNamHocBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewPhuTroiNamHocBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewPhuTroiNamHocBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewPhuTroiNamHocBase Object1, ViewPhuTroiNamHocBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object1.MaGiangVien == null )
			{
				equal = false;
			}
			if (Object1.TietThucDay != null && Object2.TietThucDay != null )
			{
				if (Object1.TietThucDay != Object2.TietThucDay)
					equal = false;
			}
			else if (Object1.TietThucDay == null ^ Object1.TietThucDay == null )
			{
				equal = false;
			}
			if (Object1.TietQuyDoi != null && Object2.TietQuyDoi != null )
			{
				if (Object1.TietQuyDoi != Object2.TietQuyDoi)
					equal = false;
			}
			else if (Object1.TietQuyDoi == null ^ Object1.TietQuyDoi == null )
			{
				equal = false;
			}
			if (Object1.MaChucVu != null && Object2.MaChucVu != null )
			{
				if (Object1.MaChucVu != Object2.MaChucVu)
					equal = false;
			}
			else if (Object1.MaChucVu == null ^ Object1.MaChucVu == null )
			{
				equal = false;
			}
			if (Object1.TenChucVu != null && Object2.TenChucVu != null )
			{
				if (Object1.TenChucVu != Object2.TenChucVu)
					equal = false;
			}
			else if (Object1.TenChucVu == null ^ Object1.TenChucVu == null )
			{
				equal = false;
			}
			if (Object1.TietNghiaVu != null && Object2.TietNghiaVu != null )
			{
				if (Object1.TietNghiaVu != Object2.TietNghiaVu)
					equal = false;
			}
			else if (Object1.TietNghiaVu == null ^ Object1.TietNghiaVu == null )
			{
				equal = false;
			}
			if (Object1.Nckh != null && Object2.Nckh != null )
			{
				if (Object1.Nckh != Object2.Nckh)
					equal = false;
			}
			else if (Object1.Nckh == null ^ Object1.Nckh == null )
			{
				equal = false;
			}
			if (Object1.NhiemVuKhac != null && Object2.NhiemVuKhac != null )
			{
				if (Object1.NhiemVuKhac != Object2.NhiemVuKhac)
					equal = false;
			}
			else if (Object1.NhiemVuKhac == null ^ Object1.NhiemVuKhac == null )
			{
				equal = false;
			}
			if (Object1.GioChuan != null && Object2.GioChuan != null )
			{
				if (Object1.GioChuan != Object2.GioChuan)
					equal = false;
			}
			else if (Object1.GioChuan == null ^ Object1.GioChuan == null )
			{
				equal = false;
			}
			if (Object1.HoLot != null && Object2.HoLot != null )
			{
				if (Object1.HoLot != Object2.HoLot)
					equal = false;
			}
			else if (Object1.HoLot == null ^ Object1.HoLot == null )
			{
				equal = false;
			}
			if (Object1.Ten != Object2.Ten)
				equal = false;
			if (Object1.MaDonVi != null && Object2.MaDonVi != null )
			{
				if (Object1.MaDonVi != Object2.MaDonVi)
					equal = false;
			}
			else if (Object1.MaDonVi == null ^ Object1.MaDonVi == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewPhuTroiNamHoc entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "TietThucDay":
					return entity.TietThucDay;
				case "TietQuyDoi":
					return entity.TietQuyDoi;
				case "MaChucVu":
					return entity.MaChucVu;
				case "TenChucVu":
					return entity.TenChucVu;
				case "TietNghiaVu":
					return entity.TietNghiaVu;
				case "Nckh":
					return entity.Nckh;
				case "NhiemVuKhac":
					return entity.NhiemVuKhac;
				case "GioChuan":
					return entity.GioChuan;
				case "HoLot":
					return entity.HoLot;
				case "Ten":
					return entity.Ten;
				case "MaDonVi":
					return entity.MaDonVi;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewPhuTroiNamHoc, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- MaGiangVien: {0}{12}- TietThucDay: {1}{12}- TietQuyDoi: {2}{12}- MaChucVu: {3}{12}- TenChucVu: {4}{12}- TietNghiaVu: {5}{12}- Nckh: {6}{12}- NhiemVuKhac: {7}{12}- GioChuan: {8}{12}- HoLot: {9}{12}- Ten: {10}{12}- MaDonVi: {11}{12}", 
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
			     
				(this.TietThucDay == null) ? string.Empty : this.TietThucDay.ToString(),
			     
				(this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString(),
			     
				(this.MaChucVu == null) ? string.Empty : this.MaChucVu.ToString(),
			     
				(this.TenChucVu == null) ? string.Empty : this.TenChucVu.ToString(),
			     
				(this.TietNghiaVu == null) ? string.Empty : this.TietNghiaVu.ToString(),
			     
				(this.Nckh == null) ? string.Empty : this.Nckh.ToString(),
			     
				(this.NhiemVuKhac == null) ? string.Empty : this.NhiemVuKhac.ToString(),
			     
				(this.GioChuan == null) ? string.Empty : this.GioChuan.ToString(),
			     
				(this.HoLot == null) ? string.Empty : this.HoLot.ToString(),
			     
				this.Ten,
				(this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewPhuTroiNamHoc columns.
	/// </summary>
	[Serializable]
	public enum ViewPhuTroiNamHocColumn
	{
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		MaGiangVien,
		/// <summary>
		/// TietThucDay : 
		/// </summary>
		[EnumTextValue("TietThucDay")]
		[ColumnEnum("TietThucDay", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietThucDay,
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		[EnumTextValue("TietQuyDoi")]
		[ColumnEnum("TietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietQuyDoi,
		/// <summary>
		/// MaChucVu : 
		/// </summary>
		[EnumTextValue("MaChucVu")]
		[ColumnEnum("MaChucVu", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaChucVu,
		/// <summary>
		/// TenChucVu : 
		/// </summary>
		[EnumTextValue("TenChucVu")]
		[ColumnEnum("TenChucVu", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenChucVu,
		/// <summary>
		/// TietNghiaVu : 
		/// </summary>
		[EnumTextValue("TietNghiaVu")]
		[ColumnEnum("TietNghiaVu", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietNghiaVu,
		/// <summary>
		/// Nckh : 
		/// </summary>
		[EnumTextValue("Nckh")]
		[ColumnEnum("Nckh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Nckh,
		/// <summary>
		/// NhiemVuKhac : 
		/// </summary>
		[EnumTextValue("NhiemVuKhac")]
		[ColumnEnum("NhiemVuKhac", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NhiemVuKhac,
		/// <summary>
		/// GioChuan : 
		/// </summary>
		[EnumTextValue("GioChuan")]
		[ColumnEnum("GioChuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GioChuan,
		/// <summary>
		/// HoLot : 
		/// </summary>
		[EnumTextValue("HoLot")]
		[ColumnEnum("HoLot", typeof(System.String), System.Data.DbType.String, false, false, true, 101)]
		HoLot,
		/// <summary>
		/// Ten : 
		/// </summary>
		[EnumTextValue("Ten")]
		[ColumnEnum("Ten", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Ten,
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		[EnumTextValue("MaDonVi")]
		[ColumnEnum("MaDonVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDonVi
	}//End enum

} // end namespace
