/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VTheoDoiLichGiang.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'v_TheoDoi_LichGiang' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VTheoDoiLichGiangBase")]
	public abstract partial class VTheoDoiLichGiangBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.Int32		  _maGiangVien = (int)0;
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		private System.String		  _maQuanLy = string.Empty;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// MaPhong : 
		/// </summary>
		private System.String		  _maPhong = null;
		
		/// <summary>
		/// MaToaNha : 
		/// </summary>
		private System.String		  _maToaNha = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = string.Empty;
		
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		private System.String		  _maKhoaHoc = string.Empty;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// NgayHoc : 
		/// </summary>
		private System.DateTime?		  _ngayHoc = null;
		
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		private System.DateTime?		  _ngayBatDau = null;
		
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		private System.DateTime?		  _ngayKetThuc = null;
		
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		private System.Int32?		  _tietBatDau = null;
		
		/// <summary>
		/// TietKetThuc : 
		/// </summary>
		private System.Int32?		  _tietKetThuc = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Int32?		  _soTiet = null;
		
		/// <summary>
		/// Ngay : 
		/// </summary>
		private System.Int32?		  _ngay = null;
		
		/// <summary>
		/// Tuan : 
		/// </summary>
		private System.Int32?		  _tuan = null;
		
		/// <summary>
		/// Nam : 
		/// </summary>
		private System.Int32?		  _nam = null;
		
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		private System.String		  _maBacLoaiHinh = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VTheoDoiLichGiangBase"/> instance.
		///</summary>
		public VTheoDoiLichGiangBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VTheoDoiLichGiangBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_maPhong"></param>
		///<param name="_maToaNha"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_ngayHoc"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_tietKetThuc"></param>
		///<param name="_soTiet"></param>
		///<param name="_ngay"></param>
		///<param name="_tuan"></param>
		///<param name="_nam"></param>
		///<param name="_maBacLoaiHinh"></param>
		public VTheoDoiLichGiangBase(System.Int32 _maGiangVien, System.String _maQuanLy, System.String _hoTen, System.String _maPhong, System.String _maToaNha, System.String _maLopHocPhan, System.String _maKhoaHoc, System.String _maMonHoc, System.String _tenMonHoc, System.DateTime? _ngayHoc, System.DateTime? _ngayBatDau, System.DateTime? _ngayKetThuc, System.Int32? _tietBatDau, System.Int32? _tietKetThuc, System.Int32? _soTiet, System.Int32? _ngay, System.Int32? _tuan, System.Int32? _nam, System.String _maBacLoaiHinh)
		{
			this._maGiangVien = _maGiangVien;
			this._maQuanLy = _maQuanLy;
			this._hoTen = _hoTen;
			this._maPhong = _maPhong;
			this._maToaNha = _maToaNha;
			this._maLopHocPhan = _maLopHocPhan;
			this._maKhoaHoc = _maKhoaHoc;
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._ngayHoc = _ngayHoc;
			this._ngayBatDau = _ngayBatDau;
			this._ngayKetThuc = _ngayKetThuc;
			this._tietBatDau = _tietBatDau;
			this._tietKetThuc = _tietKetThuc;
			this._soTiet = _soTiet;
			this._ngay = _ngay;
			this._tuan = _tuan;
			this._nam = _nam;
			this._maBacLoaiHinh = _maBacLoaiHinh;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VTheoDoiLichGiang"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_maPhong"></param>
		///<param name="_maToaNha"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_ngayHoc"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_tietKetThuc"></param>
		///<param name="_soTiet"></param>
		///<param name="_ngay"></param>
		///<param name="_tuan"></param>
		///<param name="_nam"></param>
		///<param name="_maBacLoaiHinh"></param>
		public static VTheoDoiLichGiang CreateVTheoDoiLichGiang(System.Int32 _maGiangVien, System.String _maQuanLy, System.String _hoTen, System.String _maPhong, System.String _maToaNha, System.String _maLopHocPhan, System.String _maKhoaHoc, System.String _maMonHoc, System.String _tenMonHoc, System.DateTime? _ngayHoc, System.DateTime? _ngayBatDau, System.DateTime? _ngayKetThuc, System.Int32? _tietBatDau, System.Int32? _tietKetThuc, System.Int32? _soTiet, System.Int32? _ngay, System.Int32? _tuan, System.Int32? _nam, System.String _maBacLoaiHinh)
		{
			VTheoDoiLichGiang newVTheoDoiLichGiang = new VTheoDoiLichGiang();
			newVTheoDoiLichGiang.MaGiangVien = _maGiangVien;
			newVTheoDoiLichGiang.MaQuanLy = _maQuanLy;
			newVTheoDoiLichGiang.HoTen = _hoTen;
			newVTheoDoiLichGiang.MaPhong = _maPhong;
			newVTheoDoiLichGiang.MaToaNha = _maToaNha;
			newVTheoDoiLichGiang.MaLopHocPhan = _maLopHocPhan;
			newVTheoDoiLichGiang.MaKhoaHoc = _maKhoaHoc;
			newVTheoDoiLichGiang.MaMonHoc = _maMonHoc;
			newVTheoDoiLichGiang.TenMonHoc = _tenMonHoc;
			newVTheoDoiLichGiang.NgayHoc = _ngayHoc;
			newVTheoDoiLichGiang.NgayBatDau = _ngayBatDau;
			newVTheoDoiLichGiang.NgayKetThuc = _ngayKetThuc;
			newVTheoDoiLichGiang.TietBatDau = _tietBatDau;
			newVTheoDoiLichGiang.TietKetThuc = _tietKetThuc;
			newVTheoDoiLichGiang.SoTiet = _soTiet;
			newVTheoDoiLichGiang.Ngay = _ngay;
			newVTheoDoiLichGiang.Tuan = _tuan;
			newVTheoDoiLichGiang.Nam = _nam;
			newVTheoDoiLichGiang.MaBacLoaiHinh = _maBacLoaiHinh;
			return newVTheoDoiLichGiang;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value)
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this._maQuanLy; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaQuanLy does not allow null values.");
				if (_maQuanLy == value)
					return;
					
				this._maQuanLy = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaPhong property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaPhong
		{
			get
			{
				return this._maPhong; 
			}
			set
			{
				if (_maPhong == value)
					return;
					
				this._maPhong = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaToaNha property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaToaNha
		{
			get
			{
				return this._maToaNha; 
			}
			set
			{
				if (_maToaNha == value)
					return;
					
				this._maToaNha = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaToaNha");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLopHocPhan does not allow null values.");
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaKhoaHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaKhoaHoc
		{
			get
			{
				return this._maKhoaHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaKhoaHoc does not allow null values.");
				if (_maKhoaHoc == value)
					return;
					
				this._maKhoaHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaKhoaHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayHoc property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayHocNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayHoc
		{
			get
			{
				return this._ngayHoc; 
			}
			set
			{
				if (_ngayHoc == value && NgayHoc != null )
					return;
					
				this._ngayHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayBatDau property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayBatDauNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayBatDau
		{
			get
			{
				return this._ngayBatDau; 
			}
			set
			{
				if (_ngayBatDau == value && NgayBatDau != null )
					return;
					
				this._ngayBatDau = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayKetThuc property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayKetThucNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayKetThuc
		{
			get
			{
				return this._ngayKetThuc; 
			}
			set
			{
				if (_ngayKetThuc == value && NgayKetThuc != null )
					return;
					
				this._ngayKetThuc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayKetThuc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietBatDau property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTietBatDauNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TietBatDau
		{
			get
			{
				return this._tietBatDau; 
			}
			set
			{
				if (_tietBatDau == value && TietBatDau != null )
					return;
					
				this._tietBatDau = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietKetThuc property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTietKetThucNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TietKetThuc
		{
			get
			{
				return this._tietKetThuc; 
			}
			set
			{
				if (_tietKetThuc == value && TietKetThuc != null )
					return;
					
				this._tietKetThuc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietKetThuc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value && SoTiet != null )
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ngay property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNgayNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Ngay
		{
			get
			{
				return this._ngay; 
			}
			set
			{
				if (_ngay == value && Ngay != null )
					return;
					
				this._ngay = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ngay");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Tuan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTuanNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Tuan
		{
			get
			{
				return this._tuan; 
			}
			set
			{
				if (_tuan == value && Tuan != null )
					return;
					
				this._tuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("Tuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nam property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNamNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Nam
		{
			get
			{
				return this._nam; 
			}
			set
			{
				if (_nam == value && Nam != null )
					return;
					
				this._nam = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBacLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaBacLoaiHinh
		{
			get
			{
				return this._maBacLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaBacLoaiHinh does not allow null values.");
				if (_maBacLoaiHinh == value)
					return;
					
				this._maBacLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBacLoaiHinh");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "v_TheoDoi_LichGiang"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VTheoDoiLichGiangBase Entity 
		///</summary>
		public virtual VTheoDoiLichGiangBase Copy()
		{
			//shallow copy entity
			VTheoDoiLichGiang copy = new VTheoDoiLichGiang();
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaQuanLy = this.MaQuanLy;
				copy.HoTen = this.HoTen;
				copy.MaPhong = this.MaPhong;
				copy.MaToaNha = this.MaToaNha;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaKhoaHoc = this.MaKhoaHoc;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.NgayHoc = this.NgayHoc;
				copy.NgayBatDau = this.NgayBatDau;
				copy.NgayKetThuc = this.NgayKetThuc;
				copy.TietBatDau = this.TietBatDau;
				copy.TietKetThuc = this.TietKetThuc;
				copy.SoTiet = this.SoTiet;
				copy.Ngay = this.Ngay;
				copy.Tuan = this.Tuan;
				copy.Nam = this.Nam;
				copy.MaBacLoaiHinh = this.MaBacLoaiHinh;
			copy.AcceptChanges();
			return (VTheoDoiLichGiang)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VTheoDoiLichGiangBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VTheoDoiLichGiangBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VTheoDoiLichGiangBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VTheoDoiLichGiangBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VTheoDoiLichGiangBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VTheoDoiLichGiangBase Object1, VTheoDoiLichGiangBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaGiangVien != Object2.MaGiangVien)
				equal = false;
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.MaPhong != null && Object2.MaPhong != null )
			{
				if (Object1.MaPhong != Object2.MaPhong)
					equal = false;
			}
			else if (Object1.MaPhong == null ^ Object1.MaPhong == null )
			{
				equal = false;
			}
			if (Object1.MaToaNha != null && Object2.MaToaNha != null )
			{
				if (Object1.MaToaNha != Object2.MaToaNha)
					equal = false;
			}
			else if (Object1.MaToaNha == null ^ Object1.MaToaNha == null )
			{
				equal = false;
			}
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if (Object1.MaKhoaHoc != Object2.MaKhoaHoc)
				equal = false;
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.NgayHoc != null && Object2.NgayHoc != null )
			{
				if (Object1.NgayHoc != Object2.NgayHoc)
					equal = false;
			}
			else if (Object1.NgayHoc == null ^ Object1.NgayHoc == null )
			{
				equal = false;
			}
			if (Object1.NgayBatDau != null && Object2.NgayBatDau != null )
			{
				if (Object1.NgayBatDau != Object2.NgayBatDau)
					equal = false;
			}
			else if (Object1.NgayBatDau == null ^ Object1.NgayBatDau == null )
			{
				equal = false;
			}
			if (Object1.NgayKetThuc != null && Object2.NgayKetThuc != null )
			{
				if (Object1.NgayKetThuc != Object2.NgayKetThuc)
					equal = false;
			}
			else if (Object1.NgayKetThuc == null ^ Object1.NgayKetThuc == null )
			{
				equal = false;
			}
			if (Object1.TietBatDau != null && Object2.TietBatDau != null )
			{
				if (Object1.TietBatDau != Object2.TietBatDau)
					equal = false;
			}
			else if (Object1.TietBatDau == null ^ Object1.TietBatDau == null )
			{
				equal = false;
			}
			if (Object1.TietKetThuc != null && Object2.TietKetThuc != null )
			{
				if (Object1.TietKetThuc != Object2.TietKetThuc)
					equal = false;
			}
			else if (Object1.TietKetThuc == null ^ Object1.TietKetThuc == null )
			{
				equal = false;
			}
			if (Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object1.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.Ngay != null && Object2.Ngay != null )
			{
				if (Object1.Ngay != Object2.Ngay)
					equal = false;
			}
			else if (Object1.Ngay == null ^ Object1.Ngay == null )
			{
				equal = false;
			}
			if (Object1.Tuan != null && Object2.Tuan != null )
			{
				if (Object1.Tuan != Object2.Tuan)
					equal = false;
			}
			else if (Object1.Tuan == null ^ Object1.Tuan == null )
			{
				equal = false;
			}
			if (Object1.Nam != null && Object2.Nam != null )
			{
				if (Object1.Nam != Object2.Nam)
					equal = false;
			}
			else if (Object1.Nam == null ^ Object1.Nam == null )
			{
				equal = false;
			}
			if (Object1.MaBacLoaiHinh != Object2.MaBacLoaiHinh)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VTheoDoiLichGiang entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "MaQuanLy":
					return entity.MaQuanLy;
				case "HoTen":
					return entity.HoTen;
				case "MaPhong":
					return entity.MaPhong;
				case "MaToaNha":
					return entity.MaToaNha;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "MaKhoaHoc":
					return entity.MaKhoaHoc;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "NgayHoc":
					return entity.NgayHoc;
				case "NgayBatDau":
					return entity.NgayBatDau;
				case "NgayKetThuc":
					return entity.NgayKetThuc;
				case "TietBatDau":
					return entity.TietBatDau;
				case "TietKetThuc":
					return entity.TietKetThuc;
				case "SoTiet":
					return entity.SoTiet;
				case "Ngay":
					return entity.Ngay;
				case "Tuan":
					return entity.Tuan;
				case "Nam":
					return entity.Nam;
				case "MaBacLoaiHinh":
					return entity.MaBacLoaiHinh;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VTheoDoiLichGiang, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- MaGiangVien: {0}{19}- MaQuanLy: {1}{19}- HoTen: {2}{19}- MaPhong: {3}{19}- MaToaNha: {4}{19}- MaLopHocPhan: {5}{19}- MaKhoaHoc: {6}{19}- MaMonHoc: {7}{19}- TenMonHoc: {8}{19}- NgayHoc: {9}{19}- NgayBatDau: {10}{19}- NgayKetThuc: {11}{19}- TietBatDau: {12}{19}- TietKetThuc: {13}{19}- SoTiet: {14}{19}- Ngay: {15}{19}- Tuan: {16}{19}- Nam: {17}{19}- MaBacLoaiHinh: {18}{19}", 
				this.MaGiangVien,
				this.MaQuanLy,
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				(this.MaPhong == null) ? string.Empty : this.MaPhong.ToString(),
			     
				(this.MaToaNha == null) ? string.Empty : this.MaToaNha.ToString(),
			     
				this.MaLopHocPhan,
				this.MaKhoaHoc,
				this.MaMonHoc,
				this.TenMonHoc,
				(this.NgayHoc == null) ? string.Empty : this.NgayHoc.ToString(),
			     
				(this.NgayBatDau == null) ? string.Empty : this.NgayBatDau.ToString(),
			     
				(this.NgayKetThuc == null) ? string.Empty : this.NgayKetThuc.ToString(),
			     
				(this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString(),
			     
				(this.TietKetThuc == null) ? string.Empty : this.TietKetThuc.ToString(),
			     
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
			     
				(this.Ngay == null) ? string.Empty : this.Ngay.ToString(),
			     
				(this.Tuan == null) ? string.Empty : this.Tuan.ToString(),
			     
				(this.Nam == null) ? string.Empty : this.Nam.ToString(),
			     
				this.MaBacLoaiHinh,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VTheoDoiLichGiang columns.
	/// </summary>
	[Serializable]
	public enum VTheoDoiLichGiangColumn
	{
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaGiangVien,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("MaQuanLy")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaQuanLy,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		HoTen,
		/// <summary>
		/// MaPhong : 
		/// </summary>
		[EnumTextValue("MaPhong")]
		[ColumnEnum("MaPhong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaPhong,
		/// <summary>
		/// MaToaNha : 
		/// </summary>
		[EnumTextValue("MaToaNha")]
		[ColumnEnum("MaToaNha", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaToaNha,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaLopHocPhan,
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		[EnumTextValue("MaKhoaHoc")]
		[ColumnEnum("MaKhoaHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaKhoaHoc,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc,
		/// <summary>
		/// NgayHoc : 
		/// </summary>
		[EnumTextValue("NgayHoc")]
		[ColumnEnum("NgayHoc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayHoc,
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		[EnumTextValue("NgayBatDau")]
		[ColumnEnum("NgayBatDau", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayBatDau,
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		[EnumTextValue("NgayKetThuc")]
		[ColumnEnum("NgayKetThuc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKetThuc,
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		[EnumTextValue("TietBatDau")]
		[ColumnEnum("TietBatDau", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietBatDau,
		/// <summary>
		/// TietKetThuc : 
		/// </summary>
		[EnumTextValue("TietKetThuc")]
		[ColumnEnum("TietKetThuc", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietKetThuc,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet,
		/// <summary>
		/// Ngay : 
		/// </summary>
		[EnumTextValue("Ngay")]
		[ColumnEnum("Ngay", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Ngay,
		/// <summary>
		/// Tuan : 
		/// </summary>
		[EnumTextValue("Tuan")]
		[ColumnEnum("Tuan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Tuan,
		/// <summary>
		/// Nam : 
		/// </summary>
		[EnumTextValue("Nam")]
		[ColumnEnum("Nam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Nam,
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		[EnumTextValue("MaBacLoaiHinh")]
		[ColumnEnum("MaBacLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 33)]
		MaBacLoaiHinh
	}//End enum

} // end namespace
