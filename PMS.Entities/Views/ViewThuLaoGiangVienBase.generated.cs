/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ViewThuLaoGiangVien.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_ThuLao_GiangVien' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewThuLaoGiangVienBase")]
	public abstract partial class ViewThuLaoGiangVienBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ProfessorID : 
		/// </summary>
		private System.String		  _professorId = string.Empty;
		
		/// <summary>
		/// GraduateLevelID : 
		/// </summary>
		private System.String		  _graduateLevelId = string.Empty;
		
		/// <summary>
		/// StudyTypeID : 
		/// </summary>
		private System.String		  _studyTypeId = string.Empty;
		
		/// <summary>
		/// TeachingRoleID : 
		/// </summary>
		private System.String		  _teachingRoleId = string.Empty;
		
		/// <summary>
		/// StandardPayment : 
		/// </summary>
		private System.Decimal?		  _standardPayment = null;
		
		/// <summary>
		/// StandardCoefficientPayment : 
		/// </summary>
		private System.Decimal?		  _standardCoefficientPayment = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewThuLaoGiangVienBase"/> instance.
		///</summary>
		public ViewThuLaoGiangVienBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewThuLaoGiangVienBase"/> instance.
		///</summary>
		///<param name="_professorId"></param>
		///<param name="_graduateLevelId"></param>
		///<param name="_studyTypeId"></param>
		///<param name="_teachingRoleId"></param>
		///<param name="_standardPayment"></param>
		///<param name="_standardCoefficientPayment"></param>
		public ViewThuLaoGiangVienBase(System.String _professorId, System.String _graduateLevelId, System.String _studyTypeId, System.String _teachingRoleId, System.Decimal? _standardPayment, System.Decimal? _standardCoefficientPayment)
		{
			this._professorId = _professorId;
			this._graduateLevelId = _graduateLevelId;
			this._studyTypeId = _studyTypeId;
			this._teachingRoleId = _teachingRoleId;
			this._standardPayment = _standardPayment;
			this._standardCoefficientPayment = _standardCoefficientPayment;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewThuLaoGiangVien"/> instance.
		///</summary>
		///<param name="_professorId"></param>
		///<param name="_graduateLevelId"></param>
		///<param name="_studyTypeId"></param>
		///<param name="_teachingRoleId"></param>
		///<param name="_standardPayment"></param>
		///<param name="_standardCoefficientPayment"></param>
		public static ViewThuLaoGiangVien CreateViewThuLaoGiangVien(System.String _professorId, System.String _graduateLevelId, System.String _studyTypeId, System.String _teachingRoleId, System.Decimal? _standardPayment, System.Decimal? _standardCoefficientPayment)
		{
			ViewThuLaoGiangVien newViewThuLaoGiangVien = new ViewThuLaoGiangVien();
			newViewThuLaoGiangVien.ProfessorId = _professorId;
			newViewThuLaoGiangVien.GraduateLevelId = _graduateLevelId;
			newViewThuLaoGiangVien.StudyTypeId = _studyTypeId;
			newViewThuLaoGiangVien.TeachingRoleId = _teachingRoleId;
			newViewThuLaoGiangVien.StandardPayment = _standardPayment;
			newViewThuLaoGiangVien.StandardCoefficientPayment = _standardCoefficientPayment;
			return newViewThuLaoGiangVien;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ProfessorID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ProfessorId
		{
			get
			{
				return this._professorId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ProfessorId does not allow null values.");
				if (_professorId == value)
					return;
					
				this._professorId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProfessorId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GraduateLevelID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GraduateLevelId
		{
			get
			{
				return this._graduateLevelId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "GraduateLevelId does not allow null values.");
				if (_graduateLevelId == value)
					return;
					
				this._graduateLevelId = value;
				this._isDirty = true;
				
				OnPropertyChanged("GraduateLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StudyTypeID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StudyTypeId
		{
			get
			{
				return this._studyTypeId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "StudyTypeId does not allow null values.");
				if (_studyTypeId == value)
					return;
					
				this._studyTypeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("StudyTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TeachingRoleID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TeachingRoleId
		{
			get
			{
				return this._teachingRoleId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TeachingRoleId does not allow null values.");
				if (_teachingRoleId == value)
					return;
					
				this._teachingRoleId = value;
				this._isDirty = true;
				
				OnPropertyChanged("TeachingRoleId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StandardPayment property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsStandardPaymentNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? StandardPayment
		{
			get
			{
				return this._standardPayment; 
			}
			set
			{
				if (_standardPayment == value && StandardPayment != null )
					return;
					
				this._standardPayment = value;
				this._isDirty = true;
				
				OnPropertyChanged("StandardPayment");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StandardCoefficientPayment property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsStandardCoefficientPaymentNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? StandardCoefficientPayment
		{
			get
			{
				return this._standardCoefficientPayment; 
			}
			set
			{
				if (_standardCoefficientPayment == value && StandardCoefficientPayment != null )
					return;
					
				this._standardCoefficientPayment = value;
				this._isDirty = true;
				
				OnPropertyChanged("StandardCoefficientPayment");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_ThuLao_GiangVien"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewThuLaoGiangVienBase Entity 
		///</summary>
		public virtual ViewThuLaoGiangVienBase Copy()
		{
			//shallow copy entity
			ViewThuLaoGiangVien copy = new ViewThuLaoGiangVien();
				copy.ProfessorId = this.ProfessorId;
				copy.GraduateLevelId = this.GraduateLevelId;
				copy.StudyTypeId = this.StudyTypeId;
				copy.TeachingRoleId = this.TeachingRoleId;
				copy.StandardPayment = this.StandardPayment;
				copy.StandardCoefficientPayment = this.StandardCoefficientPayment;
			copy.AcceptChanges();
			return (ViewThuLaoGiangVien)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewThuLaoGiangVienBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewThuLaoGiangVienBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewThuLaoGiangVienBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewThuLaoGiangVienBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewThuLaoGiangVienBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewThuLaoGiangVienBase Object1, ViewThuLaoGiangVienBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.ProfessorId != Object2.ProfessorId)
				equal = false;
			if (Object1.GraduateLevelId != Object2.GraduateLevelId)
				equal = false;
			if (Object1.StudyTypeId != Object2.StudyTypeId)
				equal = false;
			if (Object1.TeachingRoleId != Object2.TeachingRoleId)
				equal = false;
			if (Object1.StandardPayment != null && Object2.StandardPayment != null )
			{
				if (Object1.StandardPayment != Object2.StandardPayment)
					equal = false;
			}
			else if (Object1.StandardPayment == null ^ Object1.StandardPayment == null )
			{
				equal = false;
			}
			if (Object1.StandardCoefficientPayment != null && Object2.StandardCoefficientPayment != null )
			{
				if (Object1.StandardCoefficientPayment != Object2.StandardCoefficientPayment)
					equal = false;
			}
			else if (Object1.StandardCoefficientPayment == null ^ Object1.StandardCoefficientPayment == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewThuLaoGiangVien entity, string propertyName)
		{
			switch (propertyName)
			{
				case "ProfessorId":
					return entity.ProfessorId;
				case "GraduateLevelId":
					return entity.GraduateLevelId;
				case "StudyTypeId":
					return entity.StudyTypeId;
				case "TeachingRoleId":
					return entity.TeachingRoleId;
				case "StandardPayment":
					return entity.StandardPayment;
				case "StandardCoefficientPayment":
					return entity.StandardCoefficientPayment;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewThuLaoGiangVien, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- ProfessorId: {0}{6}- GraduateLevelId: {1}{6}- StudyTypeId: {2}{6}- TeachingRoleId: {3}{6}- StandardPayment: {4}{6}- StandardCoefficientPayment: {5}{6}", 
				this.ProfessorId,
				this.GraduateLevelId,
				this.StudyTypeId,
				this.TeachingRoleId,
				(this.StandardPayment == null) ? string.Empty : this.StandardPayment.ToString(),
			     
				(this.StandardCoefficientPayment == null) ? string.Empty : this.StandardCoefficientPayment.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewThuLaoGiangVien columns.
	/// </summary>
	[Serializable]
	public enum ViewThuLaoGiangVienColumn
	{
		/// <summary>
		/// ProfessorID : 
		/// </summary>
		[EnumTextValue("ProfessorID")]
		[ColumnEnum("ProfessorID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		ProfessorId,
		/// <summary>
		/// GraduateLevelID : 
		/// </summary>
		[EnumTextValue("GraduateLevelID")]
		[ColumnEnum("GraduateLevelID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		GraduateLevelId,
		/// <summary>
		/// StudyTypeID : 
		/// </summary>
		[EnumTextValue("StudyTypeID")]
		[ColumnEnum("StudyTypeID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		StudyTypeId,
		/// <summary>
		/// TeachingRoleID : 
		/// </summary>
		[EnumTextValue("TeachingRoleID")]
		[ColumnEnum("TeachingRoleID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		TeachingRoleId,
		/// <summary>
		/// StandardPayment : 
		/// </summary>
		[EnumTextValue("StandardPayment")]
		[ColumnEnum("StandardPayment", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		StandardPayment,
		/// <summary>
		/// StandardCoefficientPayment : 
		/// </summary>
		[EnumTextValue("StandardCoefficientPayment")]
		[ColumnEnum("StandardCoefficientPayment", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		StandardCoefficientPayment
	}//End enum

} // end namespace
