/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewThoiKhoaBieu.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_ThoiKhoaBieu' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewThoiKhoaBieuBase")]
	public abstract partial class ViewThoiKhoaBieuBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		private System.Int32		  _maLichHoc = (int)0;
		
		/// <summary>
		/// MaGocLopHocPhan : 
		/// </summary>
		private System.String		  _maGocLopHocPhan = string.Empty;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = null;
		
		/// <summary>
		/// MaHocPhan : 
		/// </summary>
		private System.String		  _maHocPhan = string.Empty;
		
		/// <summary>
		/// TenHocPhan : 
		/// </summary>
		private System.String		  _tenHocPhan = string.Empty;
		
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		private System.String		  _loaiHocPhan = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = null;
		
		/// <summary>
		/// Ngay : 
		/// </summary>
		private System.String		  _ngay = null;
		
		/// <summary>
		/// Thu : 
		/// </summary>
		private System.String		  _thu = null;
		
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		private System.Int32?		  _tietBatDau = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Int32?		  _soTiet = null;
		
		/// <summary>
		/// Phong : 
		/// </summary>
		private System.String		  _phong = null;
		
		/// <summary>
		/// Khoa : 
		/// </summary>
		private System.String		  _khoa = null;
		
		/// <summary>
		/// MaCanBoGiangDay : 
		/// </summary>
		private System.String		  _maCanBoGiangDay = string.Empty;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// TienDo : 
		/// </summary>
		private System.String		  _tienDo = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewThoiKhoaBieuBase"/> instance.
		///</summary>
		public ViewThoiKhoaBieuBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewThoiKhoaBieuBase"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGocLopHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_tenHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_ngay"></param>
		///<param name="_thu"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_phong"></param>
		///<param name="_khoa"></param>
		///<param name="_maCanBoGiangDay"></param>
		///<param name="_hoTen"></param>
		///<param name="_tienDo"></param>
		public ViewThoiKhoaBieuBase(System.Int32 _maLichHoc, System.String _maGocLopHocPhan, System.String _maLopHocPhan, System.String _maHocPhan, System.String _tenHocPhan, System.String _loaiHocPhan, System.String _maLop, System.String _ngay, System.String _thu, System.Int32? _tietBatDau, System.Int32? _soTiet, System.String _phong, System.String _khoa, System.String _maCanBoGiangDay, System.String _hoTen, System.String _tienDo)
		{
			this._maLichHoc = _maLichHoc;
			this._maGocLopHocPhan = _maGocLopHocPhan;
			this._maLopHocPhan = _maLopHocPhan;
			this._maHocPhan = _maHocPhan;
			this._tenHocPhan = _tenHocPhan;
			this._loaiHocPhan = _loaiHocPhan;
			this._maLop = _maLop;
			this._ngay = _ngay;
			this._thu = _thu;
			this._tietBatDau = _tietBatDau;
			this._soTiet = _soTiet;
			this._phong = _phong;
			this._khoa = _khoa;
			this._maCanBoGiangDay = _maCanBoGiangDay;
			this._hoTen = _hoTen;
			this._tienDo = _tienDo;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewThoiKhoaBieu"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGocLopHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_tenHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_ngay"></param>
		///<param name="_thu"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_phong"></param>
		///<param name="_khoa"></param>
		///<param name="_maCanBoGiangDay"></param>
		///<param name="_hoTen"></param>
		///<param name="_tienDo"></param>
		public static ViewThoiKhoaBieu CreateViewThoiKhoaBieu(System.Int32 _maLichHoc, System.String _maGocLopHocPhan, System.String _maLopHocPhan, System.String _maHocPhan, System.String _tenHocPhan, System.String _loaiHocPhan, System.String _maLop, System.String _ngay, System.String _thu, System.Int32? _tietBatDau, System.Int32? _soTiet, System.String _phong, System.String _khoa, System.String _maCanBoGiangDay, System.String _hoTen, System.String _tienDo)
		{
			ViewThoiKhoaBieu newViewThoiKhoaBieu = new ViewThoiKhoaBieu();
			newViewThoiKhoaBieu.MaLichHoc = _maLichHoc;
			newViewThoiKhoaBieu.MaGocLopHocPhan = _maGocLopHocPhan;
			newViewThoiKhoaBieu.MaLopHocPhan = _maLopHocPhan;
			newViewThoiKhoaBieu.MaHocPhan = _maHocPhan;
			newViewThoiKhoaBieu.TenHocPhan = _tenHocPhan;
			newViewThoiKhoaBieu.LoaiHocPhan = _loaiHocPhan;
			newViewThoiKhoaBieu.MaLop = _maLop;
			newViewThoiKhoaBieu.Ngay = _ngay;
			newViewThoiKhoaBieu.Thu = _thu;
			newViewThoiKhoaBieu.TietBatDau = _tietBatDau;
			newViewThoiKhoaBieu.SoTiet = _soTiet;
			newViewThoiKhoaBieu.Phong = _phong;
			newViewThoiKhoaBieu.Khoa = _khoa;
			newViewThoiKhoaBieu.MaCanBoGiangDay = _maCanBoGiangDay;
			newViewThoiKhoaBieu.HoTen = _hoTen;
			newViewThoiKhoaBieu.TienDo = _tienDo;
			return newViewThoiKhoaBieu;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaLichHoc property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaLichHoc
		{
			get
			{
				return this._maLichHoc; 
			}
			set
			{
				if (_maLichHoc == value)
					return;
					
				this._maLichHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLichHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaGocLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaGocLopHocPhan
		{
			get
			{
				return this._maGocLopHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaGocLopHocPhan does not allow null values.");
				if (_maGocLopHocPhan == value)
					return;
					
				this._maGocLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGocLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaHocPhan
		{
			get
			{
				return this._maHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaHocPhan does not allow null values.");
				if (_maHocPhan == value)
					return;
					
				this._maHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocPhan
		{
			get
			{
				return this._tenHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenHocPhan does not allow null values.");
				if (_tenHocPhan == value)
					return;
					
				this._tenHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LoaiHocPhan
		{
			get
			{
				return this._loaiHocPhan; 
			}
			set
			{
				if (_loaiHocPhan == value)
					return;
					
				this._loaiHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("LoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ngay property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ngay
		{
			get
			{
				return this._ngay; 
			}
			set
			{
				if (_ngay == value)
					return;
					
				this._ngay = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ngay");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Thu property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Thu
		{
			get
			{
				return this._thu; 
			}
			set
			{
				if (_thu == value)
					return;
					
				this._thu = value;
				this._isDirty = true;
				
				OnPropertyChanged("Thu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietBatDau property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTietBatDauNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TietBatDau
		{
			get
			{
				return this._tietBatDau; 
			}
			set
			{
				if (_tietBatDau == value && TietBatDau != null )
					return;
					
				this._tietBatDau = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value && SoTiet != null )
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Phong property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Phong
		{
			get
			{
				return this._phong; 
			}
			set
			{
				if (_phong == value)
					return;
					
				this._phong = value;
				this._isDirty = true;
				
				OnPropertyChanged("Phong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Khoa property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Khoa
		{
			get
			{
				return this._khoa; 
			}
			set
			{
				if (_khoa == value)
					return;
					
				this._khoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("Khoa");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaCanBoGiangDay property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaCanBoGiangDay
		{
			get
			{
				return this._maCanBoGiangDay; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaCanBoGiangDay does not allow null values.");
				if (_maCanBoGiangDay == value)
					return;
					
				this._maCanBoGiangDay = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaCanBoGiangDay");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TienDo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TienDo
		{
			get
			{
				return this._tienDo; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TienDo does not allow null values.");
				if (_tienDo == value)
					return;
					
				this._tienDo = value;
				this._isDirty = true;
				
				OnPropertyChanged("TienDo");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_ThoiKhoaBieu"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewThoiKhoaBieuBase Entity 
		///</summary>
		public virtual ViewThoiKhoaBieuBase Copy()
		{
			//shallow copy entity
			ViewThoiKhoaBieu copy = new ViewThoiKhoaBieu();
				copy.MaLichHoc = this.MaLichHoc;
				copy.MaGocLopHocPhan = this.MaGocLopHocPhan;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaHocPhan = this.MaHocPhan;
				copy.TenHocPhan = this.TenHocPhan;
				copy.LoaiHocPhan = this.LoaiHocPhan;
				copy.MaLop = this.MaLop;
				copy.Ngay = this.Ngay;
				copy.Thu = this.Thu;
				copy.TietBatDau = this.TietBatDau;
				copy.SoTiet = this.SoTiet;
				copy.Phong = this.Phong;
				copy.Khoa = this.Khoa;
				copy.MaCanBoGiangDay = this.MaCanBoGiangDay;
				copy.HoTen = this.HoTen;
				copy.TienDo = this.TienDo;
			copy.AcceptChanges();
			return (ViewThoiKhoaBieu)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewThoiKhoaBieuBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewThoiKhoaBieuBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewThoiKhoaBieuBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewThoiKhoaBieuBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewThoiKhoaBieuBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewThoiKhoaBieuBase Object1, ViewThoiKhoaBieuBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaLichHoc != Object2.MaLichHoc)
				equal = false;
			if (Object1.MaGocLopHocPhan != Object2.MaGocLopHocPhan)
				equal = false;
			if (Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object1.MaLopHocPhan == null )
			{
				equal = false;
			}
			if (Object1.MaHocPhan != Object2.MaHocPhan)
				equal = false;
			if (Object1.TenHocPhan != Object2.TenHocPhan)
				equal = false;
			if (Object1.LoaiHocPhan != null && Object2.LoaiHocPhan != null )
			{
				if (Object1.LoaiHocPhan != Object2.LoaiHocPhan)
					equal = false;
			}
			else if (Object1.LoaiHocPhan == null ^ Object1.LoaiHocPhan == null )
			{
				equal = false;
			}
			if (Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object1.MaLop == null )
			{
				equal = false;
			}
			if (Object1.Ngay != null && Object2.Ngay != null )
			{
				if (Object1.Ngay != Object2.Ngay)
					equal = false;
			}
			else if (Object1.Ngay == null ^ Object1.Ngay == null )
			{
				equal = false;
			}
			if (Object1.Thu != null && Object2.Thu != null )
			{
				if (Object1.Thu != Object2.Thu)
					equal = false;
			}
			else if (Object1.Thu == null ^ Object1.Thu == null )
			{
				equal = false;
			}
			if (Object1.TietBatDau != null && Object2.TietBatDau != null )
			{
				if (Object1.TietBatDau != Object2.TietBatDau)
					equal = false;
			}
			else if (Object1.TietBatDau == null ^ Object1.TietBatDau == null )
			{
				equal = false;
			}
			if (Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object1.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.Phong != null && Object2.Phong != null )
			{
				if (Object1.Phong != Object2.Phong)
					equal = false;
			}
			else if (Object1.Phong == null ^ Object1.Phong == null )
			{
				equal = false;
			}
			if (Object1.Khoa != null && Object2.Khoa != null )
			{
				if (Object1.Khoa != Object2.Khoa)
					equal = false;
			}
			else if (Object1.Khoa == null ^ Object1.Khoa == null )
			{
				equal = false;
			}
			if (Object1.MaCanBoGiangDay != Object2.MaCanBoGiangDay)
				equal = false;
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.TienDo != Object2.TienDo)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewThoiKhoaBieu entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaLichHoc":
					return entity.MaLichHoc;
				case "MaGocLopHocPhan":
					return entity.MaGocLopHocPhan;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "MaHocPhan":
					return entity.MaHocPhan;
				case "TenHocPhan":
					return entity.TenHocPhan;
				case "LoaiHocPhan":
					return entity.LoaiHocPhan;
				case "MaLop":
					return entity.MaLop;
				case "Ngay":
					return entity.Ngay;
				case "Thu":
					return entity.Thu;
				case "TietBatDau":
					return entity.TietBatDau;
				case "SoTiet":
					return entity.SoTiet;
				case "Phong":
					return entity.Phong;
				case "Khoa":
					return entity.Khoa;
				case "MaCanBoGiangDay":
					return entity.MaCanBoGiangDay;
				case "HoTen":
					return entity.HoTen;
				case "TienDo":
					return entity.TienDo;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewThoiKhoaBieu, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- MaLichHoc: {0}{16}- MaGocLopHocPhan: {1}{16}- MaLopHocPhan: {2}{16}- MaHocPhan: {3}{16}- TenHocPhan: {4}{16}- LoaiHocPhan: {5}{16}- MaLop: {6}{16}- Ngay: {7}{16}- Thu: {8}{16}- TietBatDau: {9}{16}- SoTiet: {10}{16}- Phong: {11}{16}- Khoa: {12}{16}- MaCanBoGiangDay: {13}{16}- HoTen: {14}{16}- TienDo: {15}{16}", 
				this.MaLichHoc,
				this.MaGocLopHocPhan,
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
			     
				this.MaHocPhan,
				this.TenHocPhan,
				(this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString(),
			     
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
			     
				(this.Ngay == null) ? string.Empty : this.Ngay.ToString(),
			     
				(this.Thu == null) ? string.Empty : this.Thu.ToString(),
			     
				(this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString(),
			     
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
			     
				(this.Phong == null) ? string.Empty : this.Phong.ToString(),
			     
				(this.Khoa == null) ? string.Empty : this.Khoa.ToString(),
			     
				this.MaCanBoGiangDay,
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				this.TienDo,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewThoiKhoaBieu columns.
	/// </summary>
	[Serializable]
	public enum ViewThoiKhoaBieuColumn
	{
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		[EnumTextValue("MaLichHoc")]
		[ColumnEnum("MaLichHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaLichHoc,
		/// <summary>
		/// MaGocLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaGocLopHocPhan")]
		[ColumnEnum("MaGocLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		MaGocLopHocPhan,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		MaLopHocPhan,
		/// <summary>
		/// MaHocPhan : 
		/// </summary>
		[EnumTextValue("MaHocPhan")]
		[ColumnEnum("MaHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaHocPhan,
		/// <summary>
		/// TenHocPhan : 
		/// </summary>
		[EnumTextValue("TenHocPhan")]
		[ColumnEnum("TenHocPhan", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenHocPhan,
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		[EnumTextValue("LoaiHocPhan")]
		[ColumnEnum("LoaiHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		LoaiHocPhan,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 2000)]
		MaLop,
		/// <summary>
		/// Ngay : 
		/// </summary>
		[EnumTextValue("Ngay")]
		[ColumnEnum("Ngay", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		Ngay,
		/// <summary>
		/// Thu : 
		/// </summary>
		[EnumTextValue("Thu")]
		[ColumnEnum("Thu", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		Thu,
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		[EnumTextValue("TietBatDau")]
		[ColumnEnum("TietBatDau", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietBatDau,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet,
		/// <summary>
		/// Phong : 
		/// </summary>
		[EnumTextValue("Phong")]
		[ColumnEnum("Phong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Phong,
		/// <summary>
		/// Khoa : 
		/// </summary>
		[EnumTextValue("Khoa")]
		[ColumnEnum("Khoa", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Khoa,
		/// <summary>
		/// MaCanBoGiangDay : 
		/// </summary>
		[EnumTextValue("MaCanBoGiangDay")]
		[ColumnEnum("MaCanBoGiangDay", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaCanBoGiangDay,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 602)]
		HoTen,
		/// <summary>
		/// TienDo : 
		/// </summary>
		[EnumTextValue("TienDo")]
		[ColumnEnum("TienDo", typeof(System.String), System.Data.DbType.String, false, false, false, 3)]
		TienDo
	}//End enum

} // end namespace
