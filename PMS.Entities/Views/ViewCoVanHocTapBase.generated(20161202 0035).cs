/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewCoVanHocTap.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_CoVanHocTap' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewCoVanHocTapBase")]
	public abstract partial class ViewCoVanHocTapBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = null;
		
		/// <summary>
		/// SiSo : 
		/// </summary>
		private System.Int32?		  _siSo = null;
		
		/// <summary>
		/// DepartmentID : 
		/// </summary>
		private System.String		  _departmentId = null;
		
		/// <summary>
		/// DepartmentName : 
		/// </summary>
		private System.String		  _departmentName = null;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.Int32?		  _maGiangVien = null;
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		private System.String		  _maQuanLy = null;
		
		/// <summary>
		/// Ho : 
		/// </summary>
		private System.String		  _ho = null;
		
		/// <summary>
		/// Ten : 
		/// </summary>
		private System.String		  _ten = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Int32?		  _soTiet = null;
		
		/// <summary>
		/// SoTien : 
		/// </summary>
		private System.Decimal?		  _soTien = null;
		
		/// <summary>
		/// NgayTao : 
		/// </summary>
		private System.DateTime?		  _ngayTao = null;
		
		/// <summary>
		/// TrangThai : 
		/// </summary>
		private System.Boolean?		  _trangThai = null;
		
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		private System.String		  _maKhoaHoc = null;
		
		/// <summary>
		/// MaCoVan : 
		/// </summary>
		private System.Int32		  _maCoVan = (int)0;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewCoVanHocTapBase"/> instance.
		///</summary>
		public ViewCoVanHocTapBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewCoVanHocTapBase"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maLop"></param>
		///<param name="_siSo"></param>
		///<param name="_departmentId"></param>
		///<param name="_departmentName"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_hoTen"></param>
		///<param name="_soTiet"></param>
		///<param name="_soTien"></param>
		///<param name="_ngayTao"></param>
		///<param name="_trangThai"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_maCoVan"></param>
		public ViewCoVanHocTapBase(System.String _namHoc, System.String _hocKy, System.String _maLop, System.Int32? _siSo, System.String _departmentId, System.String _departmentName, System.Int32? _maGiangVien, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _hoTen, System.Int32? _soTiet, System.Decimal? _soTien, System.DateTime? _ngayTao, System.Boolean? _trangThai, System.String _maKhoaHoc, System.Int32 _maCoVan)
		{
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._maLop = _maLop;
			this._siSo = _siSo;
			this._departmentId = _departmentId;
			this._departmentName = _departmentName;
			this._maGiangVien = _maGiangVien;
			this._maQuanLy = _maQuanLy;
			this._ho = _ho;
			this._ten = _ten;
			this._hoTen = _hoTen;
			this._soTiet = _soTiet;
			this._soTien = _soTien;
			this._ngayTao = _ngayTao;
			this._trangThai = _trangThai;
			this._maKhoaHoc = _maKhoaHoc;
			this._maCoVan = _maCoVan;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewCoVanHocTap"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maLop"></param>
		///<param name="_siSo"></param>
		///<param name="_departmentId"></param>
		///<param name="_departmentName"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_hoTen"></param>
		///<param name="_soTiet"></param>
		///<param name="_soTien"></param>
		///<param name="_ngayTao"></param>
		///<param name="_trangThai"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_maCoVan"></param>
		public static ViewCoVanHocTap CreateViewCoVanHocTap(System.String _namHoc, System.String _hocKy, System.String _maLop, System.Int32? _siSo, System.String _departmentId, System.String _departmentName, System.Int32? _maGiangVien, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _hoTen, System.Int32? _soTiet, System.Decimal? _soTien, System.DateTime? _ngayTao, System.Boolean? _trangThai, System.String _maKhoaHoc, System.Int32 _maCoVan)
		{
			ViewCoVanHocTap newViewCoVanHocTap = new ViewCoVanHocTap();
			newViewCoVanHocTap.NamHoc = _namHoc;
			newViewCoVanHocTap.HocKy = _hocKy;
			newViewCoVanHocTap.MaLop = _maLop;
			newViewCoVanHocTap.SiSo = _siSo;
			newViewCoVanHocTap.DepartmentId = _departmentId;
			newViewCoVanHocTap.DepartmentName = _departmentName;
			newViewCoVanHocTap.MaGiangVien = _maGiangVien;
			newViewCoVanHocTap.MaQuanLy = _maQuanLy;
			newViewCoVanHocTap.Ho = _ho;
			newViewCoVanHocTap.Ten = _ten;
			newViewCoVanHocTap.HoTen = _hoTen;
			newViewCoVanHocTap.SoTiet = _soTiet;
			newViewCoVanHocTap.SoTien = _soTien;
			newViewCoVanHocTap.NgayTao = _ngayTao;
			newViewCoVanHocTap.TrangThai = _trangThai;
			newViewCoVanHocTap.MaKhoaHoc = _maKhoaHoc;
			newViewCoVanHocTap.MaCoVan = _maCoVan;
			return newViewCoVanHocTap;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiSo property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiSoNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SiSo
		{
			get
			{
				return this._siSo; 
			}
			set
			{
				if (_siSo == value && SiSo != null )
					return;
					
				this._siSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DepartmentID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DepartmentId
		{
			get
			{
				return this._departmentId; 
			}
			set
			{
				if (_departmentId == value)
					return;
					
				this._departmentId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DepartmentId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DepartmentName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DepartmentName
		{
			get
			{
				return this._departmentName; 
			}
			set
			{
				if (_departmentName == value)
					return;
					
				this._departmentName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DepartmentName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaGiangVienNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value && MaGiangVien != null )
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this._maQuanLy; 
			}
			set
			{
				if (_maQuanLy == value)
					return;
					
				this._maQuanLy = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ho property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ho
		{
			get
			{
				return this._ho; 
			}
			set
			{
				if (_ho == value)
					return;
					
				this._ho = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ho");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ten property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ten
		{
			get
			{
				return this._ten; 
			}
			set
			{
				if (_ten == value)
					return;
					
				this._ten = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ten");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value && SoTiet != null )
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTien property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTienNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTien
		{
			get
			{
				return this._soTien; 
			}
			set
			{
				if (_soTien == value && SoTien != null )
					return;
					
				this._soTien = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayTao property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayTaoNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayTao
		{
			get
			{
				return this._ngayTao; 
			}
			set
			{
				if (_ngayTao == value && NgayTao != null )
					return;
					
				this._ngayTao = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayTao");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TrangThai property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTrangThaiNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? TrangThai
		{
			get
			{
				return this._trangThai; 
			}
			set
			{
				if (_trangThai == value && TrangThai != null )
					return;
					
				this._trangThai = value;
				this._isDirty = true;
				
				OnPropertyChanged("TrangThai");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaKhoaHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaKhoaHoc
		{
			get
			{
				return this._maKhoaHoc; 
			}
			set
			{
				if (_maKhoaHoc == value)
					return;
					
				this._maKhoaHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaKhoaHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaCoVan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaCoVan
		{
			get
			{
				return this._maCoVan; 
			}
			set
			{
				if (_maCoVan == value)
					return;
					
				this._maCoVan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaCoVan");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_CoVanHocTap"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewCoVanHocTapBase Entity 
		///</summary>
		public virtual ViewCoVanHocTapBase Copy()
		{
			//shallow copy entity
			ViewCoVanHocTap copy = new ViewCoVanHocTap();
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaLop = this.MaLop;
				copy.SiSo = this.SiSo;
				copy.DepartmentId = this.DepartmentId;
				copy.DepartmentName = this.DepartmentName;
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaQuanLy = this.MaQuanLy;
				copy.Ho = this.Ho;
				copy.Ten = this.Ten;
				copy.HoTen = this.HoTen;
				copy.SoTiet = this.SoTiet;
				copy.SoTien = this.SoTien;
				copy.NgayTao = this.NgayTao;
				copy.TrangThai = this.TrangThai;
				copy.MaKhoaHoc = this.MaKhoaHoc;
				copy.MaCoVan = this.MaCoVan;
			copy.AcceptChanges();
			return (ViewCoVanHocTap)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewCoVanHocTapBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewCoVanHocTapBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewCoVanHocTapBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewCoVanHocTapBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewCoVanHocTapBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewCoVanHocTapBase Object1, ViewCoVanHocTapBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object1.NamHoc == null )
			{
				equal = false;
			}
			if (Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object1.HocKy == null )
			{
				equal = false;
			}
			if (Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object1.MaLop == null )
			{
				equal = false;
			}
			if (Object1.SiSo != null && Object2.SiSo != null )
			{
				if (Object1.SiSo != Object2.SiSo)
					equal = false;
			}
			else if (Object1.SiSo == null ^ Object1.SiSo == null )
			{
				equal = false;
			}
			if (Object1.DepartmentId != null && Object2.DepartmentId != null )
			{
				if (Object1.DepartmentId != Object2.DepartmentId)
					equal = false;
			}
			else if (Object1.DepartmentId == null ^ Object1.DepartmentId == null )
			{
				equal = false;
			}
			if (Object1.DepartmentName != null && Object2.DepartmentName != null )
			{
				if (Object1.DepartmentName != Object2.DepartmentName)
					equal = false;
			}
			else if (Object1.DepartmentName == null ^ Object1.DepartmentName == null )
			{
				equal = false;
			}
			if (Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object1.MaGiangVien == null )
			{
				equal = false;
			}
			if (Object1.MaQuanLy != null && Object2.MaQuanLy != null )
			{
				if (Object1.MaQuanLy != Object2.MaQuanLy)
					equal = false;
			}
			else if (Object1.MaQuanLy == null ^ Object1.MaQuanLy == null )
			{
				equal = false;
			}
			if (Object1.Ho != null && Object2.Ho != null )
			{
				if (Object1.Ho != Object2.Ho)
					equal = false;
			}
			else if (Object1.Ho == null ^ Object1.Ho == null )
			{
				equal = false;
			}
			if (Object1.Ten != null && Object2.Ten != null )
			{
				if (Object1.Ten != Object2.Ten)
					equal = false;
			}
			else if (Object1.Ten == null ^ Object1.Ten == null )
			{
				equal = false;
			}
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object1.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.SoTien != null && Object2.SoTien != null )
			{
				if (Object1.SoTien != Object2.SoTien)
					equal = false;
			}
			else if (Object1.SoTien == null ^ Object1.SoTien == null )
			{
				equal = false;
			}
			if (Object1.NgayTao != null && Object2.NgayTao != null )
			{
				if (Object1.NgayTao != Object2.NgayTao)
					equal = false;
			}
			else if (Object1.NgayTao == null ^ Object1.NgayTao == null )
			{
				equal = false;
			}
			if (Object1.TrangThai != null && Object2.TrangThai != null )
			{
				if (Object1.TrangThai != Object2.TrangThai)
					equal = false;
			}
			else if (Object1.TrangThai == null ^ Object1.TrangThai == null )
			{
				equal = false;
			}
			if (Object1.MaKhoaHoc != null && Object2.MaKhoaHoc != null )
			{
				if (Object1.MaKhoaHoc != Object2.MaKhoaHoc)
					equal = false;
			}
			else if (Object1.MaKhoaHoc == null ^ Object1.MaKhoaHoc == null )
			{
				equal = false;
			}
			if (Object1.MaCoVan != Object2.MaCoVan)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewCoVanHocTap entity, string propertyName)
		{
			switch (propertyName)
			{
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "MaLop":
					return entity.MaLop;
				case "SiSo":
					return entity.SiSo;
				case "DepartmentId":
					return entity.DepartmentId;
				case "DepartmentName":
					return entity.DepartmentName;
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "MaQuanLy":
					return entity.MaQuanLy;
				case "Ho":
					return entity.Ho;
				case "Ten":
					return entity.Ten;
				case "HoTen":
					return entity.HoTen;
				case "SoTiet":
					return entity.SoTiet;
				case "SoTien":
					return entity.SoTien;
				case "NgayTao":
					return entity.NgayTao;
				case "TrangThai":
					return entity.TrangThai;
				case "MaKhoaHoc":
					return entity.MaKhoaHoc;
				case "MaCoVan":
					return entity.MaCoVan;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewCoVanHocTap, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- NamHoc: {0}{17}- HocKy: {1}{17}- MaLop: {2}{17}- SiSo: {3}{17}- DepartmentId: {4}{17}- DepartmentName: {5}{17}- MaGiangVien: {6}{17}- MaQuanLy: {7}{17}- Ho: {8}{17}- Ten: {9}{17}- HoTen: {10}{17}- SoTiet: {11}{17}- SoTien: {12}{17}- NgayTao: {13}{17}- TrangThai: {14}{17}- MaKhoaHoc: {15}{17}- MaCoVan: {16}{17}", 
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
			     
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
			     
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
			     
				(this.SiSo == null) ? string.Empty : this.SiSo.ToString(),
			     
				(this.DepartmentId == null) ? string.Empty : this.DepartmentId.ToString(),
			     
				(this.DepartmentName == null) ? string.Empty : this.DepartmentName.ToString(),
			     
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
			     
				(this.MaQuanLy == null) ? string.Empty : this.MaQuanLy.ToString(),
			     
				(this.Ho == null) ? string.Empty : this.Ho.ToString(),
			     
				(this.Ten == null) ? string.Empty : this.Ten.ToString(),
			     
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
			     
				(this.SoTien == null) ? string.Empty : this.SoTien.ToString(),
			     
				(this.NgayTao == null) ? string.Empty : this.NgayTao.ToString(),
			     
				(this.TrangThai == null) ? string.Empty : this.TrangThai.ToString(),
			     
				(this.MaKhoaHoc == null) ? string.Empty : this.MaKhoaHoc.ToString(),
			     
				this.MaCoVan,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewCoVanHocTap columns.
	/// </summary>
	[Serializable]
	public enum ViewCoVanHocTapColumn
	{
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaLop,
		/// <summary>
		/// SiSo : 
		/// </summary>
		[EnumTextValue("SiSo")]
		[ColumnEnum("SiSo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSo,
		/// <summary>
		/// DepartmentID : 
		/// </summary>
		[EnumTextValue("DepartmentID")]
		[ColumnEnum("DepartmentID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		DepartmentId,
		/// <summary>
		/// DepartmentName : 
		/// </summary>
		[EnumTextValue("DepartmentName")]
		[ColumnEnum("DepartmentName", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		DepartmentName,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("MaQuanLy")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaQuanLy,
		/// <summary>
		/// Ho : 
		/// </summary>
		[EnumTextValue("Ho")]
		[ColumnEnum("Ho", typeof(System.String), System.Data.DbType.String, false, false, true, 101)]
		Ho,
		/// <summary>
		/// Ten : 
		/// </summary>
		[EnumTextValue("Ten")]
		[ColumnEnum("Ten", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Ten,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		HoTen,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet,
		/// <summary>
		/// SoTien : 
		/// </summary>
		[EnumTextValue("SoTien")]
		[ColumnEnum("SoTien", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTien,
		/// <summary>
		/// NgayTao : 
		/// </summary>
		[EnumTextValue("NgayTao")]
		[ColumnEnum("NgayTao", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayTao,
		/// <summary>
		/// TrangThai : 
		/// </summary>
		[EnumTextValue("TrangThai")]
		[ColumnEnum("TrangThai", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TrangThai,
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		[EnumTextValue("MaKhoaHoc")]
		[ColumnEnum("MaKhoaHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaKhoaHoc,
		/// <summary>
		/// MaCoVan : 
		/// </summary>
		[EnumTextValue("MaCoVan")]
		[ColumnEnum("MaCoVan", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaCoVan
	}//End enum

} // end namespace
