/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewHeSoLuongHocHamHocVi.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_HeSoLuong_HocHamHocVi' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewHeSoLuongHocHamHocViBase")]
	public abstract partial class ViewHeSoLuongHocHamHocViBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaHeSoLuong : 
		/// </summary>
		private System.String		  _maHeSoLuong = string.Empty;
		
		/// <summary>
		/// TenHeSoLuong : 
		/// </summary>
		private System.String		  _tenHeSoLuong = string.Empty;
		
		/// <summary>
		/// HeSoLuong : 
		/// </summary>
		private System.Decimal		  _heSoLuong = 0.0m;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		private System.String		  _maHocVi = null;
		
		/// <summary>
		/// TenHocVi : 
		/// </summary>
		private System.String		  _tenHocVi = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		private System.String		  _maHocHam = null;
		
		/// <summary>
		/// TenHocHam : 
		/// </summary>
		private System.String		  _tenHocHam = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewHeSoLuongHocHamHocViBase"/> instance.
		///</summary>
		public ViewHeSoLuongHocHamHocViBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewHeSoLuongHocHamHocViBase"/> instance.
		///</summary>
		///<param name="_maHeSoLuong"></param>
		///<param name="_tenHeSoLuong"></param>
		///<param name="_heSoLuong"></param>
		///<param name="_maHocVi"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_maHocHam"></param>
		///<param name="_tenHocHam"></param>
		public ViewHeSoLuongHocHamHocViBase(System.String _maHeSoLuong, System.String _tenHeSoLuong, System.Decimal _heSoLuong, System.String _maHocVi, System.String _tenHocVi, System.String _maHocHam, System.String _tenHocHam)
		{
			this._maHeSoLuong = _maHeSoLuong;
			this._tenHeSoLuong = _tenHeSoLuong;
			this._heSoLuong = _heSoLuong;
			this._maHocVi = _maHocVi;
			this._tenHocVi = _tenHocVi;
			this._maHocHam = _maHocHam;
			this._tenHocHam = _tenHocHam;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewHeSoLuongHocHamHocVi"/> instance.
		///</summary>
		///<param name="_maHeSoLuong"></param>
		///<param name="_tenHeSoLuong"></param>
		///<param name="_heSoLuong"></param>
		///<param name="_maHocVi"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_maHocHam"></param>
		///<param name="_tenHocHam"></param>
		public static ViewHeSoLuongHocHamHocVi CreateViewHeSoLuongHocHamHocVi(System.String _maHeSoLuong, System.String _tenHeSoLuong, System.Decimal _heSoLuong, System.String _maHocVi, System.String _tenHocVi, System.String _maHocHam, System.String _tenHocHam)
		{
			ViewHeSoLuongHocHamHocVi newViewHeSoLuongHocHamHocVi = new ViewHeSoLuongHocHamHocVi();
			newViewHeSoLuongHocHamHocVi.MaHeSoLuong = _maHeSoLuong;
			newViewHeSoLuongHocHamHocVi.TenHeSoLuong = _tenHeSoLuong;
			newViewHeSoLuongHocHamHocVi.HeSoLuong = _heSoLuong;
			newViewHeSoLuongHocHamHocVi.MaHocVi = _maHocVi;
			newViewHeSoLuongHocHamHocVi.TenHocVi = _tenHocVi;
			newViewHeSoLuongHocHamHocVi.MaHocHam = _maHocHam;
			newViewHeSoLuongHocHamHocVi.TenHocHam = _tenHocHam;
			return newViewHeSoLuongHocHamHocVi;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaHeSoLuong property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaHeSoLuong
		{
			get
			{
				return this._maHeSoLuong; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaHeSoLuong does not allow null values.");
				if (_maHeSoLuong == value)
					return;
					
				this._maHeSoLuong = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHeSoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHeSoLuong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHeSoLuong
		{
			get
			{
				return this._tenHeSoLuong; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenHeSoLuong does not allow null values.");
				if (_tenHeSoLuong == value)
					return;
					
				this._tenHeSoLuong = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHeSoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSoLuong property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal HeSoLuong
		{
			get
			{
				return this._heSoLuong; 
			}
			set
			{
				if (_heSoLuong == value)
					return;
					
				this._heSoLuong = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaHocVi
		{
			get
			{
				return this._maHocVi; 
			}
			set
			{
				if (_maHocVi == value)
					return;
					
				this._maHocVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocVi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocVi
		{
			get
			{
				return this._tenHocVi; 
			}
			set
			{
				if (_tenHocVi == value)
					return;
					
				this._tenHocVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaHocHam
		{
			get
			{
				return this._maHocHam; 
			}
			set
			{
				if (_maHocHam == value)
					return;
					
				this._maHocHam = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocHam property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocHam
		{
			get
			{
				return this._tenHocHam; 
			}
			set
			{
				if (_tenHocHam == value)
					return;
					
				this._tenHocHam = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocHam");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_HeSoLuong_HocHamHocVi"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewHeSoLuongHocHamHocViBase Entity 
		///</summary>
		public virtual ViewHeSoLuongHocHamHocViBase Copy()
		{
			//shallow copy entity
			ViewHeSoLuongHocHamHocVi copy = new ViewHeSoLuongHocHamHocVi();
				copy.MaHeSoLuong = this.MaHeSoLuong;
				copy.TenHeSoLuong = this.TenHeSoLuong;
				copy.HeSoLuong = this.HeSoLuong;
				copy.MaHocVi = this.MaHocVi;
				copy.TenHocVi = this.TenHocVi;
				copy.MaHocHam = this.MaHocHam;
				copy.TenHocHam = this.TenHocHam;
			copy.AcceptChanges();
			return (ViewHeSoLuongHocHamHocVi)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewHeSoLuongHocHamHocViBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewHeSoLuongHocHamHocViBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewHeSoLuongHocHamHocViBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewHeSoLuongHocHamHocViBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewHeSoLuongHocHamHocViBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewHeSoLuongHocHamHocViBase Object1, ViewHeSoLuongHocHamHocViBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaHeSoLuong != Object2.MaHeSoLuong)
				equal = false;
			if (Object1.TenHeSoLuong != Object2.TenHeSoLuong)
				equal = false;
			if (Object1.HeSoLuong != Object2.HeSoLuong)
				equal = false;
			if (Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object1.MaHocVi == null )
			{
				equal = false;
			}
			if (Object1.TenHocVi != null && Object2.TenHocVi != null )
			{
				if (Object1.TenHocVi != Object2.TenHocVi)
					equal = false;
			}
			else if (Object1.TenHocVi == null ^ Object1.TenHocVi == null )
			{
				equal = false;
			}
			if (Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object1.MaHocHam == null )
			{
				equal = false;
			}
			if (Object1.TenHocHam != null && Object2.TenHocHam != null )
			{
				if (Object1.TenHocHam != Object2.TenHocHam)
					equal = false;
			}
			else if (Object1.TenHocHam == null ^ Object1.TenHocHam == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewHeSoLuongHocHamHocVi entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaHeSoLuong":
					return entity.MaHeSoLuong;
				case "TenHeSoLuong":
					return entity.TenHeSoLuong;
				case "HeSoLuong":
					return entity.HeSoLuong;
				case "MaHocVi":
					return entity.MaHocVi;
				case "TenHocVi":
					return entity.TenHocVi;
				case "MaHocHam":
					return entity.MaHocHam;
				case "TenHocHam":
					return entity.TenHocHam;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewHeSoLuongHocHamHocVi, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- MaHeSoLuong: {0}{7}- TenHeSoLuong: {1}{7}- HeSoLuong: {2}{7}- MaHocVi: {3}{7}- TenHocVi: {4}{7}- MaHocHam: {5}{7}- TenHocHam: {6}{7}", 
				this.MaHeSoLuong,
				this.TenHeSoLuong,
				this.HeSoLuong,
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
			     
				(this.TenHocVi == null) ? string.Empty : this.TenHocVi.ToString(),
			     
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
			     
				(this.TenHocHam == null) ? string.Empty : this.TenHocHam.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewHeSoLuongHocHamHocVi columns.
	/// </summary>
	[Serializable]
	public enum ViewHeSoLuongHocHamHocViColumn
	{
		/// <summary>
		/// MaHeSoLuong : 
		/// </summary>
		[EnumTextValue("MaHeSoLuong")]
		[ColumnEnum("MaHeSoLuong", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaHeSoLuong,
		/// <summary>
		/// TenHeSoLuong : 
		/// </summary>
		[EnumTextValue("TenHeSoLuong")]
		[ColumnEnum("TenHeSoLuong", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		TenHeSoLuong,
		/// <summary>
		/// HeSoLuong : 
		/// </summary>
		[EnumTextValue("HeSoLuong")]
		[ColumnEnum("HeSoLuong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HeSoLuong,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("MaHocVi")]
		[ColumnEnum("MaHocVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHocVi,
		/// <summary>
		/// TenHocVi : 
		/// </summary>
		[EnumTextValue("TenHocVi")]
		[ColumnEnum("TenHocVi", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenHocVi,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("MaHocHam")]
		[ColumnEnum("MaHocHam", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHocHam,
		/// <summary>
		/// TenHocHam : 
		/// </summary>
		[EnumTextValue("TenHocHam")]
		[ColumnEnum("TenHocHam", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenHocHam
	}//End enum

} // end namespace
