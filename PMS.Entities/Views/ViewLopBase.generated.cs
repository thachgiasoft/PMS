/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewLop.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_Lop' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewLopBase")]
	public abstract partial class ViewLopBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		private System.String		  _maBacDaoTao = string.Empty;
		
		/// <summary>
		/// MaLoaiHinh : 
		/// </summary>
		private System.String		  _maLoaiHinh = string.Empty;
		
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		private System.String		  _maBacLoaiHinh = string.Empty;
		
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		private System.String		  _maKhoaHoc = string.Empty;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = null;
		
		/// <summary>
		/// TenLop : 
		/// </summary>
		private System.String		  _tenLop = string.Empty;
		
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		private System.String		  _maKhoa = string.Empty;
		
		/// <summary>
		/// TenKhoa : 
		/// </summary>
		private System.String		  _tenKhoa = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewLopBase"/> instance.
		///</summary>
		public ViewLopBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewLopBase"/> instance.
		///</summary>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinh"></param>
		///<param name="_maBacLoaiHinh"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tenLop"></param>
		///<param name="_maKhoa"></param>
		///<param name="_tenKhoa"></param>
		public ViewLopBase(System.String _maBacDaoTao, System.String _maLoaiHinh, System.String _maBacLoaiHinh, System.String _maKhoaHoc, System.String _maLop, System.String _tenLop, System.String _maKhoa, System.String _tenKhoa)
		{
			this._maBacDaoTao = _maBacDaoTao;
			this._maLoaiHinh = _maLoaiHinh;
			this._maBacLoaiHinh = _maBacLoaiHinh;
			this._maKhoaHoc = _maKhoaHoc;
			this._maLop = _maLop;
			this._tenLop = _tenLop;
			this._maKhoa = _maKhoa;
			this._tenKhoa = _tenKhoa;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewLop"/> instance.
		///</summary>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinh"></param>
		///<param name="_maBacLoaiHinh"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tenLop"></param>
		///<param name="_maKhoa"></param>
		///<param name="_tenKhoa"></param>
		public static ViewLop CreateViewLop(System.String _maBacDaoTao, System.String _maLoaiHinh, System.String _maBacLoaiHinh, System.String _maKhoaHoc, System.String _maLop, System.String _tenLop, System.String _maKhoa, System.String _tenKhoa)
		{
			ViewLop newViewLop = new ViewLop();
			newViewLop.MaBacDaoTao = _maBacDaoTao;
			newViewLop.MaLoaiHinh = _maLoaiHinh;
			newViewLop.MaBacLoaiHinh = _maBacLoaiHinh;
			newViewLop.MaKhoaHoc = _maKhoaHoc;
			newViewLop.MaLop = _maLop;
			newViewLop.TenLop = _tenLop;
			newViewLop.MaKhoa = _maKhoa;
			newViewLop.TenKhoa = _tenKhoa;
			return newViewLop;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaBacDaoTao
		{
			get
			{
				return this._maBacDaoTao; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaBacDaoTao does not allow null values.");
				if (_maBacDaoTao == value)
					return;
					
				this._maBacDaoTao = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLoaiHinh
		{
			get
			{
				return this._maLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLoaiHinh does not allow null values.");
				if (_maLoaiHinh == value)
					return;
					
				this._maLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiHinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBacLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaBacLoaiHinh
		{
			get
			{
				return this._maBacLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaBacLoaiHinh does not allow null values.");
				if (_maBacLoaiHinh == value)
					return;
					
				this._maBacLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBacLoaiHinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaKhoaHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaKhoaHoc
		{
			get
			{
				return this._maKhoaHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaKhoaHoc does not allow null values.");
				if (_maKhoaHoc == value)
					return;
					
				this._maKhoaHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaKhoaHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenLop
		{
			get
			{
				return this._tenLop; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenLop does not allow null values.");
				if (_tenLop == value)
					return;
					
				this._tenLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaKhoa property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaKhoa
		{
			get
			{
				return this._maKhoa; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaKhoa does not allow null values.");
				if (_maKhoa == value)
					return;
					
				this._maKhoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaKhoa");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenKhoa property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenKhoa
		{
			get
			{
				return this._tenKhoa; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenKhoa does not allow null values.");
				if (_tenKhoa == value)
					return;
					
				this._tenKhoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenKhoa");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_Lop"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewLopBase Entity 
		///</summary>
		public virtual ViewLopBase Copy()
		{
			//shallow copy entity
			ViewLop copy = new ViewLop();
				copy.MaBacDaoTao = this.MaBacDaoTao;
				copy.MaLoaiHinh = this.MaLoaiHinh;
				copy.MaBacLoaiHinh = this.MaBacLoaiHinh;
				copy.MaKhoaHoc = this.MaKhoaHoc;
				copy.MaLop = this.MaLop;
				copy.TenLop = this.TenLop;
				copy.MaKhoa = this.MaKhoa;
				copy.TenKhoa = this.TenKhoa;
			copy.AcceptChanges();
			return (ViewLop)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewLopBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewLopBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewLopBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewLopBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewLopBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewLopBase Object1, ViewLopBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaBacDaoTao != Object2.MaBacDaoTao)
				equal = false;
			if (Object1.MaLoaiHinh != Object2.MaLoaiHinh)
				equal = false;
			if (Object1.MaBacLoaiHinh != Object2.MaBacLoaiHinh)
				equal = false;
			if (Object1.MaKhoaHoc != Object2.MaKhoaHoc)
				equal = false;
			if (Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object1.MaLop == null )
			{
				equal = false;
			}
			if (Object1.TenLop != Object2.TenLop)
				equal = false;
			if (Object1.MaKhoa != Object2.MaKhoa)
				equal = false;
			if (Object1.TenKhoa != Object2.TenKhoa)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewLop entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaBacDaoTao":
					return entity.MaBacDaoTao;
				case "MaLoaiHinh":
					return entity.MaLoaiHinh;
				case "MaBacLoaiHinh":
					return entity.MaBacLoaiHinh;
				case "MaKhoaHoc":
					return entity.MaKhoaHoc;
				case "MaLop":
					return entity.MaLop;
				case "TenLop":
					return entity.TenLop;
				case "MaKhoa":
					return entity.MaKhoa;
				case "TenKhoa":
					return entity.TenKhoa;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewLop, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- MaBacDaoTao: {0}{8}- MaLoaiHinh: {1}{8}- MaBacLoaiHinh: {2}{8}- MaKhoaHoc: {3}{8}- MaLop: {4}{8}- TenLop: {5}{8}- MaKhoa: {6}{8}- TenKhoa: {7}{8}", 
				this.MaBacDaoTao,
				this.MaLoaiHinh,
				this.MaBacLoaiHinh,
				this.MaKhoaHoc,
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
			     
				this.TenLop,
				this.MaKhoa,
				this.TenKhoa,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewLop columns.
	/// </summary>
	[Serializable]
	public enum ViewLopColumn
	{
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		[EnumTextValue("MaBacDaoTao")]
		[ColumnEnum("MaBacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaBacDaoTao,
		/// <summary>
		/// MaLoaiHinh : 
		/// </summary>
		[EnumTextValue("MaLoaiHinh")]
		[ColumnEnum("MaLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaLoaiHinh,
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		[EnumTextValue("MaBacLoaiHinh")]
		[ColumnEnum("MaBacLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 41)]
		MaBacLoaiHinh,
		/// <summary>
		/// MaKhoaHoc : 
		/// </summary>
		[EnumTextValue("MaKhoaHoc")]
		[ColumnEnum("MaKhoaHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaKhoaHoc,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaLop,
		/// <summary>
		/// TenLop : 
		/// </summary>
		[EnumTextValue("TenLop")]
		[ColumnEnum("TenLop", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		TenLop,
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		[EnumTextValue("MaKhoa")]
		[ColumnEnum("MaKhoa", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaKhoa,
		/// <summary>
		/// TenKhoa : 
		/// </summary>
		[EnumTextValue("TenKhoa")]
		[ColumnEnum("TenKhoa", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenKhoa
	}//End enum

} // end namespace
