/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewCoSo.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_CoSo' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewCoSoBase")]
	public abstract partial class ViewCoSoBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaCoSo : 
		/// </summary>
		private System.String		  _maCoSo = string.Empty;
		
		/// <summary>
		/// TenCoSo : 
		/// </summary>
		private System.String		  _tenCoSo = string.Empty;
		
		/// <summary>
		/// DiaChi : 
		/// </summary>
		private System.String		  _diaChi = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewCoSoBase"/> instance.
		///</summary>
		public ViewCoSoBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewCoSoBase"/> instance.
		///</summary>
		///<param name="_maCoSo"></param>
		///<param name="_tenCoSo"></param>
		///<param name="_diaChi"></param>
		public ViewCoSoBase(System.String _maCoSo, System.String _tenCoSo, System.String _diaChi)
		{
			this._maCoSo = _maCoSo;
			this._tenCoSo = _tenCoSo;
			this._diaChi = _diaChi;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewCoSo"/> instance.
		///</summary>
		///<param name="_maCoSo"></param>
		///<param name="_tenCoSo"></param>
		///<param name="_diaChi"></param>
		public static ViewCoSo CreateViewCoSo(System.String _maCoSo, System.String _tenCoSo, System.String _diaChi)
		{
			ViewCoSo newViewCoSo = new ViewCoSo();
			newViewCoSo.MaCoSo = _maCoSo;
			newViewCoSo.TenCoSo = _tenCoSo;
			newViewCoSo.DiaChi = _diaChi;
			return newViewCoSo;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaCoSo property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaCoSo
		{
			get
			{
				return this._maCoSo; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaCoSo does not allow null values.");
				if (_maCoSo == value)
					return;
					
				this._maCoSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenCoSo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenCoSo
		{
			get
			{
				return this._tenCoSo; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenCoSo does not allow null values.");
				if (_tenCoSo == value)
					return;
					
				this._tenCoSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DiaChi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DiaChi
		{
			get
			{
				return this._diaChi; 
			}
			set
			{
				if (_diaChi == value)
					return;
					
				this._diaChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("DiaChi");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_CoSo"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewCoSoBase Entity 
		///</summary>
		public virtual ViewCoSoBase Copy()
		{
			//shallow copy entity
			ViewCoSo copy = new ViewCoSo();
				copy.MaCoSo = this.MaCoSo;
				copy.TenCoSo = this.TenCoSo;
				copy.DiaChi = this.DiaChi;
			copy.AcceptChanges();
			return (ViewCoSo)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewCoSoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewCoSoBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewCoSoBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewCoSoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewCoSoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewCoSoBase Object1, ViewCoSoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaCoSo != Object2.MaCoSo)
				equal = false;
			if (Object1.TenCoSo != Object2.TenCoSo)
				equal = false;
			if (Object1.DiaChi != null && Object2.DiaChi != null )
			{
				if (Object1.DiaChi != Object2.DiaChi)
					equal = false;
			}
			else if (Object1.DiaChi == null ^ Object1.DiaChi == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewCoSo entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaCoSo":
					return entity.MaCoSo;
				case "TenCoSo":
					return entity.TenCoSo;
				case "DiaChi":
					return entity.DiaChi;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewCoSo, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{4}{3}- MaCoSo: {0}{3}- TenCoSo: {1}{3}- DiaChi: {2}{3}", 
				this.MaCoSo,
				this.TenCoSo,
				(this.DiaChi == null) ? string.Empty : this.DiaChi.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewCoSo columns.
	/// </summary>
	[Serializable]
	public enum ViewCoSoColumn
	{
		/// <summary>
		/// MaCoSo : 
		/// </summary>
		[EnumTextValue("MaCoSo")]
		[ColumnEnum("MaCoSo", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaCoSo,
		/// <summary>
		/// TenCoSo : 
		/// </summary>
		[EnumTextValue("TenCoSo")]
		[ColumnEnum("TenCoSo", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		TenCoSo,
		/// <summary>
		/// DiaChi : 
		/// </summary>
		[EnumTextValue("DiaChi")]
		[ColumnEnum("DiaChi", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		DiaChi
	}//End enum

} // end namespace
