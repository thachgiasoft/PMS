/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewKcqUteKhoiLuongGiangDay.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_KcqUte_KhoiLuongGiangDay' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewKcqUteKhoiLuongGiangDayBase")]
	public abstract partial class ViewKcqUteKhoiLuongGiangDayBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.Int32		  _maGiangVien = (int)0;
		
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		private System.String		  _maGiangVienQuanLy = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = null;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = null;
		
		/// <summary>
		/// MaDot : 
		/// </summary>
		private System.String		  _maDot = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = null;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		private System.Int32?		  _soTinChi = null;
		
		/// <summary>
		/// SiSo : 
		/// </summary>
		private System.Int32?		  _siSo = null;
		
		/// <summary>
		/// LopClc : 
		/// </summary>
		private System.Boolean?		  _lopClc = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Decimal?		  _soTiet = null;
		
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		private System.Int32?		  _maLoaiHocPhan = null;
		
		/// <summary>
		/// MaLoaiHocPhanGanMoi : 
		/// </summary>
		private System.String		  _maLoaiHocPhanGanMoi = string.Empty;
		
		/// <summary>
		/// Chon : 
		/// </summary>
		private System.Boolean?		  _chon = null;
		
		/// <summary>
		/// Nhom : 
		/// </summary>
		private System.String		  _nhom = null;
		
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		private System.String		  _maKhoa = string.Empty;
		
		/// <summary>
		/// TenKhoa : 
		/// </summary>
		private System.String		  _tenKhoa = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewKcqUteKhoiLuongGiangDayBase"/> instance.
		///</summary>
		public ViewKcqUteKhoiLuongGiangDayBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewKcqUteKhoiLuongGiangDayBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maDot"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_soTinChi"></param>
		///<param name="_siSo"></param>
		///<param name="_lopClc"></param>
		///<param name="_soTiet"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_maLoaiHocPhanGanMoi"></param>
		///<param name="_chon"></param>
		///<param name="_nhom"></param>
		///<param name="_maKhoa"></param>
		///<param name="_tenKhoa"></param>
		public ViewKcqUteKhoiLuongGiangDayBase(System.Int32 _maGiangVien, System.String _maGiangVienQuanLy, System.String _hoTen, System.String _maMonHoc, System.String _tenMonHoc, System.String _namHoc, System.String _hocKy, System.String _maDot, System.String _maLopHocPhan, System.String _maLop, System.Int32? _soTinChi, System.Int32? _siSo, System.Boolean? _lopClc, System.Decimal? _soTiet, System.Int32? _maLoaiHocPhan, System.String _maLoaiHocPhanGanMoi, System.Boolean? _chon, System.String _nhom, System.String _maKhoa, System.String _tenKhoa)
		{
			this._maGiangVien = _maGiangVien;
			this._maGiangVienQuanLy = _maGiangVienQuanLy;
			this._hoTen = _hoTen;
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._maDot = _maDot;
			this._maLopHocPhan = _maLopHocPhan;
			this._maLop = _maLop;
			this._soTinChi = _soTinChi;
			this._siSo = _siSo;
			this._lopClc = _lopClc;
			this._soTiet = _soTiet;
			this._maLoaiHocPhan = _maLoaiHocPhan;
			this._maLoaiHocPhanGanMoi = _maLoaiHocPhanGanMoi;
			this._chon = _chon;
			this._nhom = _nhom;
			this._maKhoa = _maKhoa;
			this._tenKhoa = _tenKhoa;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewKcqUteKhoiLuongGiangDay"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maDot"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_soTinChi"></param>
		///<param name="_siSo"></param>
		///<param name="_lopClc"></param>
		///<param name="_soTiet"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_maLoaiHocPhanGanMoi"></param>
		///<param name="_chon"></param>
		///<param name="_nhom"></param>
		///<param name="_maKhoa"></param>
		///<param name="_tenKhoa"></param>
		public static ViewKcqUteKhoiLuongGiangDay CreateViewKcqUteKhoiLuongGiangDay(System.Int32 _maGiangVien, System.String _maGiangVienQuanLy, System.String _hoTen, System.String _maMonHoc, System.String _tenMonHoc, System.String _namHoc, System.String _hocKy, System.String _maDot, System.String _maLopHocPhan, System.String _maLop, System.Int32? _soTinChi, System.Int32? _siSo, System.Boolean? _lopClc, System.Decimal? _soTiet, System.Int32? _maLoaiHocPhan, System.String _maLoaiHocPhanGanMoi, System.Boolean? _chon, System.String _nhom, System.String _maKhoa, System.String _tenKhoa)
		{
			ViewKcqUteKhoiLuongGiangDay newViewKcqUteKhoiLuongGiangDay = new ViewKcqUteKhoiLuongGiangDay();
			newViewKcqUteKhoiLuongGiangDay.MaGiangVien = _maGiangVien;
			newViewKcqUteKhoiLuongGiangDay.MaGiangVienQuanLy = _maGiangVienQuanLy;
			newViewKcqUteKhoiLuongGiangDay.HoTen = _hoTen;
			newViewKcqUteKhoiLuongGiangDay.MaMonHoc = _maMonHoc;
			newViewKcqUteKhoiLuongGiangDay.TenMonHoc = _tenMonHoc;
			newViewKcqUteKhoiLuongGiangDay.NamHoc = _namHoc;
			newViewKcqUteKhoiLuongGiangDay.HocKy = _hocKy;
			newViewKcqUteKhoiLuongGiangDay.MaDot = _maDot;
			newViewKcqUteKhoiLuongGiangDay.MaLopHocPhan = _maLopHocPhan;
			newViewKcqUteKhoiLuongGiangDay.MaLop = _maLop;
			newViewKcqUteKhoiLuongGiangDay.SoTinChi = _soTinChi;
			newViewKcqUteKhoiLuongGiangDay.SiSo = _siSo;
			newViewKcqUteKhoiLuongGiangDay.LopClc = _lopClc;
			newViewKcqUteKhoiLuongGiangDay.SoTiet = _soTiet;
			newViewKcqUteKhoiLuongGiangDay.MaLoaiHocPhan = _maLoaiHocPhan;
			newViewKcqUteKhoiLuongGiangDay.MaLoaiHocPhanGanMoi = _maLoaiHocPhanGanMoi;
			newViewKcqUteKhoiLuongGiangDay.Chon = _chon;
			newViewKcqUteKhoiLuongGiangDay.Nhom = _nhom;
			newViewKcqUteKhoiLuongGiangDay.MaKhoa = _maKhoa;
			newViewKcqUteKhoiLuongGiangDay.TenKhoa = _tenKhoa;
			return newViewKcqUteKhoiLuongGiangDay;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value)
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaGiangVienQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaGiangVienQuanLy
		{
			get
			{
				return this._maGiangVienQuanLy; 
			}
			set
			{
				if (_maGiangVienQuanLy == value)
					return;
					
				this._maGiangVienQuanLy = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVienQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaDot property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaDot
		{
			get
			{
				return this._maDot; 
			}
			set
			{
				if (_maDot == value)
					return;
					
				this._maDot = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaDot");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoTinChiNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoTinChi
		{
			get
			{
				return this._soTinChi; 
			}
			set
			{
				if (_soTinChi == value && SoTinChi != null )
					return;
					
				this._soTinChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiSo property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiSoNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SiSo
		{
			get
			{
				return this._siSo; 
			}
			set
			{
				if (_siSo == value && SiSo != null )
					return;
					
				this._siSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LopClc property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsLopClcNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? LopClc
		{
			get
			{
				return this._lopClc; 
			}
			set
			{
				if (_lopClc == value && LopClc != null )
					return;
					
				this._lopClc = value;
				this._isDirty = true;
				
				OnPropertyChanged("LopClc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value && SoTiet != null )
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaLoaiHocPhanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaLoaiHocPhan
		{
			get
			{
				return this._maLoaiHocPhan; 
			}
			set
			{
				if (_maLoaiHocPhan == value && MaLoaiHocPhan != null )
					return;
					
				this._maLoaiHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLoaiHocPhanGanMoi property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLoaiHocPhanGanMoi
		{
			get
			{
				return this._maLoaiHocPhanGanMoi; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLoaiHocPhanGanMoi does not allow null values.");
				if (_maLoaiHocPhanGanMoi == value)
					return;
					
				this._maLoaiHocPhanGanMoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiHocPhanGanMoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Chon property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsChonNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? Chon
		{
			get
			{
				return this._chon; 
			}
			set
			{
				if (_chon == value && Chon != null )
					return;
					
				this._chon = value;
				this._isDirty = true;
				
				OnPropertyChanged("Chon");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nhom property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Nhom
		{
			get
			{
				return this._nhom; 
			}
			set
			{
				if (_nhom == value)
					return;
					
				this._nhom = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nhom");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaKhoa property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaKhoa
		{
			get
			{
				return this._maKhoa; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaKhoa does not allow null values.");
				if (_maKhoa == value)
					return;
					
				this._maKhoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaKhoa");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenKhoa property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenKhoa
		{
			get
			{
				return this._tenKhoa; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenKhoa does not allow null values.");
				if (_tenKhoa == value)
					return;
					
				this._tenKhoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenKhoa");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_KcqUte_KhoiLuongGiangDay"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewKcqUteKhoiLuongGiangDayBase Entity 
		///</summary>
		public virtual ViewKcqUteKhoiLuongGiangDayBase Copy()
		{
			//shallow copy entity
			ViewKcqUteKhoiLuongGiangDay copy = new ViewKcqUteKhoiLuongGiangDay();
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
				copy.HoTen = this.HoTen;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaDot = this.MaDot;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaLop = this.MaLop;
				copy.SoTinChi = this.SoTinChi;
				copy.SiSo = this.SiSo;
				copy.LopClc = this.LopClc;
				copy.SoTiet = this.SoTiet;
				copy.MaLoaiHocPhan = this.MaLoaiHocPhan;
				copy.MaLoaiHocPhanGanMoi = this.MaLoaiHocPhanGanMoi;
				copy.Chon = this.Chon;
				copy.Nhom = this.Nhom;
				copy.MaKhoa = this.MaKhoa;
				copy.TenKhoa = this.TenKhoa;
			copy.AcceptChanges();
			return (ViewKcqUteKhoiLuongGiangDay)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewKcqUteKhoiLuongGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewKcqUteKhoiLuongGiangDayBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewKcqUteKhoiLuongGiangDayBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewKcqUteKhoiLuongGiangDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewKcqUteKhoiLuongGiangDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewKcqUteKhoiLuongGiangDayBase Object1, ViewKcqUteKhoiLuongGiangDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaGiangVien != Object2.MaGiangVien)
				equal = false;
			if (Object1.MaGiangVienQuanLy != null && Object2.MaGiangVienQuanLy != null )
			{
				if (Object1.MaGiangVienQuanLy != Object2.MaGiangVienQuanLy)
					equal = false;
			}
			else if (Object1.MaGiangVienQuanLy == null ^ Object1.MaGiangVienQuanLy == null )
			{
				equal = false;
			}
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object1.MaMonHoc == null )
			{
				equal = false;
			}
			if (Object1.TenMonHoc != null && Object2.TenMonHoc != null )
			{
				if (Object1.TenMonHoc != Object2.TenMonHoc)
					equal = false;
			}
			else if (Object1.TenMonHoc == null ^ Object1.TenMonHoc == null )
			{
				equal = false;
			}
			if (Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object1.NamHoc == null )
			{
				equal = false;
			}
			if (Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object1.HocKy == null )
			{
				equal = false;
			}
			if (Object1.MaDot != null && Object2.MaDot != null )
			{
				if (Object1.MaDot != Object2.MaDot)
					equal = false;
			}
			else if (Object1.MaDot == null ^ Object1.MaDot == null )
			{
				equal = false;
			}
			if (Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object1.MaLopHocPhan == null )
			{
				equal = false;
			}
			if (Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object1.MaLop == null )
			{
				equal = false;
			}
			if (Object1.SoTinChi != null && Object2.SoTinChi != null )
			{
				if (Object1.SoTinChi != Object2.SoTinChi)
					equal = false;
			}
			else if (Object1.SoTinChi == null ^ Object1.SoTinChi == null )
			{
				equal = false;
			}
			if (Object1.SiSo != null && Object2.SiSo != null )
			{
				if (Object1.SiSo != Object2.SiSo)
					equal = false;
			}
			else if (Object1.SiSo == null ^ Object1.SiSo == null )
			{
				equal = false;
			}
			if (Object1.LopClc != null && Object2.LopClc != null )
			{
				if (Object1.LopClc != Object2.LopClc)
					equal = false;
			}
			else if (Object1.LopClc == null ^ Object1.LopClc == null )
			{
				equal = false;
			}
			if (Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object1.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.MaLoaiHocPhan != null && Object2.MaLoaiHocPhan != null )
			{
				if (Object1.MaLoaiHocPhan != Object2.MaLoaiHocPhan)
					equal = false;
			}
			else if (Object1.MaLoaiHocPhan == null ^ Object1.MaLoaiHocPhan == null )
			{
				equal = false;
			}
			if (Object1.MaLoaiHocPhanGanMoi != Object2.MaLoaiHocPhanGanMoi)
				equal = false;
			if (Object1.Chon != null && Object2.Chon != null )
			{
				if (Object1.Chon != Object2.Chon)
					equal = false;
			}
			else if (Object1.Chon == null ^ Object1.Chon == null )
			{
				equal = false;
			}
			if (Object1.Nhom != null && Object2.Nhom != null )
			{
				if (Object1.Nhom != Object2.Nhom)
					equal = false;
			}
			else if (Object1.Nhom == null ^ Object1.Nhom == null )
			{
				equal = false;
			}
			if (Object1.MaKhoa != Object2.MaKhoa)
				equal = false;
			if (Object1.TenKhoa != Object2.TenKhoa)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewKcqUteKhoiLuongGiangDay entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "MaGiangVienQuanLy":
					return entity.MaGiangVienQuanLy;
				case "HoTen":
					return entity.HoTen;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "MaDot":
					return entity.MaDot;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "MaLop":
					return entity.MaLop;
				case "SoTinChi":
					return entity.SoTinChi;
				case "SiSo":
					return entity.SiSo;
				case "LopClc":
					return entity.LopClc;
				case "SoTiet":
					return entity.SoTiet;
				case "MaLoaiHocPhan":
					return entity.MaLoaiHocPhan;
				case "MaLoaiHocPhanGanMoi":
					return entity.MaLoaiHocPhanGanMoi;
				case "Chon":
					return entity.Chon;
				case "Nhom":
					return entity.Nhom;
				case "MaKhoa":
					return entity.MaKhoa;
				case "TenKhoa":
					return entity.TenKhoa;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewKcqUteKhoiLuongGiangDay, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- MaGiangVien: {0}{20}- MaGiangVienQuanLy: {1}{20}- HoTen: {2}{20}- MaMonHoc: {3}{20}- TenMonHoc: {4}{20}- NamHoc: {5}{20}- HocKy: {6}{20}- MaDot: {7}{20}- MaLopHocPhan: {8}{20}- MaLop: {9}{20}- SoTinChi: {10}{20}- SiSo: {11}{20}- LopClc: {12}{20}- SoTiet: {13}{20}- MaLoaiHocPhan: {14}{20}- MaLoaiHocPhanGanMoi: {15}{20}- Chon: {16}{20}- Nhom: {17}{20}- MaKhoa: {18}{20}- TenKhoa: {19}{20}", 
				this.MaGiangVien,
				(this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString(),
			     
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
			     
				(this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString(),
			     
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
			     
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
			     
				(this.MaDot == null) ? string.Empty : this.MaDot.ToString(),
			     
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
			     
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
			     
				(this.SoTinChi == null) ? string.Empty : this.SoTinChi.ToString(),
			     
				(this.SiSo == null) ? string.Empty : this.SiSo.ToString(),
			     
				(this.LopClc == null) ? string.Empty : this.LopClc.ToString(),
			     
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
			     
				(this.MaLoaiHocPhan == null) ? string.Empty : this.MaLoaiHocPhan.ToString(),
			     
				this.MaLoaiHocPhanGanMoi,
				(this.Chon == null) ? string.Empty : this.Chon.ToString(),
			     
				(this.Nhom == null) ? string.Empty : this.Nhom.ToString(),
			     
				this.MaKhoa,
				this.TenKhoa,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewKcqUteKhoiLuongGiangDay columns.
	/// </summary>
	[Serializable]
	public enum ViewKcqUteKhoiLuongGiangDayColumn
	{
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaGiangVien,
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		[EnumTextValue("MaGiangVienQuanLy")]
		[ColumnEnum("MaGiangVienQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGiangVienQuanLy,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		HoTen,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenMonHoc,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy,
		/// <summary>
		/// MaDot : 
		/// </summary>
		[EnumTextValue("MaDot")]
		[ColumnEnum("MaDot", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MaDot,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaLopHocPhan,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		MaLop,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("SoTinChi")]
		[ColumnEnum("SoTinChi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTinChi,
		/// <summary>
		/// SiSo : 
		/// </summary>
		[EnumTextValue("SiSo")]
		[ColumnEnum("SiSo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSo,
		/// <summary>
		/// LopClc : 
		/// </summary>
		[EnumTextValue("LopClc")]
		[ColumnEnum("LopClc", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		LopClc,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet,
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		[EnumTextValue("MaLoaiHocPhan")]
		[ColumnEnum("MaLoaiHocPhan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiHocPhan,
		/// <summary>
		/// MaLoaiHocPhanGanMoi : 
		/// </summary>
		[EnumTextValue("MaLoaiHocPhanGanMoi")]
		[ColumnEnum("MaLoaiHocPhanGanMoi", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaLoaiHocPhanGanMoi,
		/// <summary>
		/// Chon : 
		/// </summary>
		[EnumTextValue("Chon")]
		[ColumnEnum("Chon", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Chon,
		/// <summary>
		/// Nhom : 
		/// </summary>
		[EnumTextValue("Nhom")]
		[ColumnEnum("Nhom", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Nhom,
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		[EnumTextValue("MaKhoa")]
		[ColumnEnum("MaKhoa", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaKhoa,
		/// <summary>
		/// TenKhoa : 
		/// </summary>
		[EnumTextValue("TenKhoa")]
		[ColumnEnum("TenKhoa", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenKhoa
	}//End enum

} // end namespace
