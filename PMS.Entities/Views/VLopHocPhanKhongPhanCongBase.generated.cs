/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file VLopHocPhanKhongPhanCong.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'v_LopHocPhan_KhongPhanCong' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VLopHocPhanKhongPhanCongBase")]
	public abstract partial class VLopHocPhanKhongPhanCongBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		private System.Int32?		  _maLoaiGiangVien = null;
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		private System.String		  _maQuanLy = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// ChucDanh : 
		/// </summary>
		private System.String		  _chucDanh = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// MaNhom : 
		/// </summary>
		private System.String		  _maNhom = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = string.Empty;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		private System.Decimal		  _soTinChi = 0.0m;
		
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		private System.Int32?		  _siSoLop = null;
		
		/// <summary>
		/// TrongGio : 
		/// </summary>
		private System.Int32?		  _trongGio = null;
		
		/// <summary>
		/// NgoaiGio : 
		/// </summary>
		private System.Int32?		  _ngoaiGio = null;
		
		/// <summary>
		/// GiangHe : 
		/// </summary>
		private System.Int32?		  _giangHe = null;
		
		/// <summary>
		/// HeSoCoSo : 
		/// </summary>
		private System.Decimal?		  _heSoCoSo = null;
		
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		private System.DateTime?		  _ngayBatDau = null;
		
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		private System.DateTime?		  _ngayKetThuc = null;
		
		/// <summary>
		/// ThoiGianGiang : 
		/// </summary>
		private System.String		  _thoiGianGiang = null;
		
		/// <summary>
		/// MaDiaDiem : 
		/// </summary>
		private System.String		  _maDiaDiem = null;
		
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		private System.String		  _maBacLoaiHinh = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VLopHocPhanKhongPhanCongBase"/> instance.
		///</summary>
		public VLopHocPhanKhongPhanCongBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VLopHocPhanKhongPhanCongBase"/> instance.
		///</summary>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_chucDanh"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maNhom"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_soTinChi"></param>
		///<param name="_siSoLop"></param>
		///<param name="_trongGio"></param>
		///<param name="_ngoaiGio"></param>
		///<param name="_giangHe"></param>
		///<param name="_heSoCoSo"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_thoiGianGiang"></param>
		///<param name="_maDiaDiem"></param>
		///<param name="_maBacLoaiHinh"></param>
		public VLopHocPhanKhongPhanCongBase(System.Int32? _maLoaiGiangVien, System.String _maQuanLy, System.String _hoTen, System.String _chucDanh, System.String _maMonHoc, System.String _tenMonHoc, System.String _maNhom, System.String _maLopHocPhan, System.Decimal _soTinChi, System.Int32? _siSoLop, System.Int32? _trongGio, System.Int32? _ngoaiGio, System.Int32? _giangHe, System.Decimal? _heSoCoSo, System.DateTime? _ngayBatDau, System.DateTime? _ngayKetThuc, System.String _thoiGianGiang, System.String _maDiaDiem, System.String _maBacLoaiHinh)
		{
			this._maLoaiGiangVien = _maLoaiGiangVien;
			this._maQuanLy = _maQuanLy;
			this._hoTen = _hoTen;
			this._chucDanh = _chucDanh;
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._maNhom = _maNhom;
			this._maLopHocPhan = _maLopHocPhan;
			this._soTinChi = _soTinChi;
			this._siSoLop = _siSoLop;
			this._trongGio = _trongGio;
			this._ngoaiGio = _ngoaiGio;
			this._giangHe = _giangHe;
			this._heSoCoSo = _heSoCoSo;
			this._ngayBatDau = _ngayBatDau;
			this._ngayKetThuc = _ngayKetThuc;
			this._thoiGianGiang = _thoiGianGiang;
			this._maDiaDiem = _maDiaDiem;
			this._maBacLoaiHinh = _maBacLoaiHinh;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VLopHocPhanKhongPhanCong"/> instance.
		///</summary>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_chucDanh"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maNhom"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_soTinChi"></param>
		///<param name="_siSoLop"></param>
		///<param name="_trongGio"></param>
		///<param name="_ngoaiGio"></param>
		///<param name="_giangHe"></param>
		///<param name="_heSoCoSo"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_thoiGianGiang"></param>
		///<param name="_maDiaDiem"></param>
		///<param name="_maBacLoaiHinh"></param>
		public static VLopHocPhanKhongPhanCong CreateVLopHocPhanKhongPhanCong(System.Int32? _maLoaiGiangVien, System.String _maQuanLy, System.String _hoTen, System.String _chucDanh, System.String _maMonHoc, System.String _tenMonHoc, System.String _maNhom, System.String _maLopHocPhan, System.Decimal _soTinChi, System.Int32? _siSoLop, System.Int32? _trongGio, System.Int32? _ngoaiGio, System.Int32? _giangHe, System.Decimal? _heSoCoSo, System.DateTime? _ngayBatDau, System.DateTime? _ngayKetThuc, System.String _thoiGianGiang, System.String _maDiaDiem, System.String _maBacLoaiHinh)
		{
			VLopHocPhanKhongPhanCong newVLopHocPhanKhongPhanCong = new VLopHocPhanKhongPhanCong();
			newVLopHocPhanKhongPhanCong.MaLoaiGiangVien = _maLoaiGiangVien;
			newVLopHocPhanKhongPhanCong.MaQuanLy = _maQuanLy;
			newVLopHocPhanKhongPhanCong.HoTen = _hoTen;
			newVLopHocPhanKhongPhanCong.ChucDanh = _chucDanh;
			newVLopHocPhanKhongPhanCong.MaMonHoc = _maMonHoc;
			newVLopHocPhanKhongPhanCong.TenMonHoc = _tenMonHoc;
			newVLopHocPhanKhongPhanCong.MaNhom = _maNhom;
			newVLopHocPhanKhongPhanCong.MaLopHocPhan = _maLopHocPhan;
			newVLopHocPhanKhongPhanCong.SoTinChi = _soTinChi;
			newVLopHocPhanKhongPhanCong.SiSoLop = _siSoLop;
			newVLopHocPhanKhongPhanCong.TrongGio = _trongGio;
			newVLopHocPhanKhongPhanCong.NgoaiGio = _ngoaiGio;
			newVLopHocPhanKhongPhanCong.GiangHe = _giangHe;
			newVLopHocPhanKhongPhanCong.HeSoCoSo = _heSoCoSo;
			newVLopHocPhanKhongPhanCong.NgayBatDau = _ngayBatDau;
			newVLopHocPhanKhongPhanCong.NgayKetThuc = _ngayKetThuc;
			newVLopHocPhanKhongPhanCong.ThoiGianGiang = _thoiGianGiang;
			newVLopHocPhanKhongPhanCong.MaDiaDiem = _maDiaDiem;
			newVLopHocPhanKhongPhanCong.MaBacLoaiHinh = _maBacLoaiHinh;
			return newVLopHocPhanKhongPhanCong;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaLoaiGiangVienNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this._maLoaiGiangVien; 
			}
			set
			{
				if (_maLoaiGiangVien == value && MaLoaiGiangVien != null )
					return;
					
				this._maLoaiGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this._maQuanLy; 
			}
			set
			{
				if (_maQuanLy == value)
					return;
					
				this._maQuanLy = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ChucDanh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ChucDanh
		{
			get
			{
				return this._chucDanh; 
			}
			set
			{
				if (_chucDanh == value)
					return;
					
				this._chucDanh = value;
				this._isDirty = true;
				
				OnPropertyChanged("ChucDanh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaNhom property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaNhom
		{
			get
			{
				return this._maNhom; 
			}
			set
			{
				if (_maNhom == value)
					return;
					
				this._maNhom = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaNhom");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLopHocPhan does not allow null values.");
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal SoTinChi
		{
			get
			{
				return this._soTinChi; 
			}
			set
			{
				if (_soTinChi == value)
					return;
					
				this._soTinChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiSoLop property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiSoLopNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SiSoLop
		{
			get
			{
				return this._siSoLop; 
			}
			set
			{
				if (_siSoLop == value && SiSoLop != null )
					return;
					
				this._siSoLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiSoLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TrongGio property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTrongGioNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TrongGio
		{
			get
			{
				return this._trongGio; 
			}
			set
			{
				if (_trongGio == value && TrongGio != null )
					return;
					
				this._trongGio = value;
				this._isDirty = true;
				
				OnPropertyChanged("TrongGio");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgoaiGio property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNgoaiGioNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? NgoaiGio
		{
			get
			{
				return this._ngoaiGio; 
			}
			set
			{
				if (_ngoaiGio == value && NgoaiGio != null )
					return;
					
				this._ngoaiGio = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgoaiGio");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GiangHe property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGiangHeNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? GiangHe
		{
			get
			{
				return this._giangHe; 
			}
			set
			{
				if (_giangHe == value && GiangHe != null )
					return;
					
				this._giangHe = value;
				this._isDirty = true;
				
				OnPropertyChanged("GiangHe");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSoCoSo property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHeSoCoSoNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? HeSoCoSo
		{
			get
			{
				return this._heSoCoSo; 
			}
			set
			{
				if (_heSoCoSo == value && HeSoCoSo != null )
					return;
					
				this._heSoCoSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSoCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayBatDau property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayBatDauNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayBatDau
		{
			get
			{
				return this._ngayBatDau; 
			}
			set
			{
				if (_ngayBatDau == value && NgayBatDau != null )
					return;
					
				this._ngayBatDau = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayKetThuc property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayKetThucNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayKetThuc
		{
			get
			{
				return this._ngayKetThuc; 
			}
			set
			{
				if (_ngayKetThuc == value && NgayKetThuc != null )
					return;
					
				this._ngayKetThuc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayKetThuc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ThoiGianGiang property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ThoiGianGiang
		{
			get
			{
				return this._thoiGianGiang; 
			}
			set
			{
				if (_thoiGianGiang == value)
					return;
					
				this._thoiGianGiang = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThoiGianGiang");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaDiaDiem property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaDiaDiem
		{
			get
			{
				return this._maDiaDiem; 
			}
			set
			{
				if (_maDiaDiem == value)
					return;
					
				this._maDiaDiem = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaDiaDiem");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBacLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaBacLoaiHinh
		{
			get
			{
				return this._maBacLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaBacLoaiHinh does not allow null values.");
				if (_maBacLoaiHinh == value)
					return;
					
				this._maBacLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBacLoaiHinh");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "v_LopHocPhan_KhongPhanCong"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VLopHocPhanKhongPhanCongBase Entity 
		///</summary>
		public virtual VLopHocPhanKhongPhanCongBase Copy()
		{
			//shallow copy entity
			VLopHocPhanKhongPhanCong copy = new VLopHocPhanKhongPhanCong();
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.MaQuanLy = this.MaQuanLy;
				copy.HoTen = this.HoTen;
				copy.ChucDanh = this.ChucDanh;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.MaNhom = this.MaNhom;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.SoTinChi = this.SoTinChi;
				copy.SiSoLop = this.SiSoLop;
				copy.TrongGio = this.TrongGio;
				copy.NgoaiGio = this.NgoaiGio;
				copy.GiangHe = this.GiangHe;
				copy.HeSoCoSo = this.HeSoCoSo;
				copy.NgayBatDau = this.NgayBatDau;
				copy.NgayKetThuc = this.NgayKetThuc;
				copy.ThoiGianGiang = this.ThoiGianGiang;
				copy.MaDiaDiem = this.MaDiaDiem;
				copy.MaBacLoaiHinh = this.MaBacLoaiHinh;
			copy.AcceptChanges();
			return (VLopHocPhanKhongPhanCong)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VLopHocPhanKhongPhanCongBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VLopHocPhanKhongPhanCongBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VLopHocPhanKhongPhanCongBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VLopHocPhanKhongPhanCongBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VLopHocPhanKhongPhanCongBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VLopHocPhanKhongPhanCongBase Object1, VLopHocPhanKhongPhanCongBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object1.MaLoaiGiangVien == null )
			{
				equal = false;
			}
			if (Object1.MaQuanLy != null && Object2.MaQuanLy != null )
			{
				if (Object1.MaQuanLy != Object2.MaQuanLy)
					equal = false;
			}
			else if (Object1.MaQuanLy == null ^ Object1.MaQuanLy == null )
			{
				equal = false;
			}
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.ChucDanh != null && Object2.ChucDanh != null )
			{
				if (Object1.ChucDanh != Object2.ChucDanh)
					equal = false;
			}
			else if (Object1.ChucDanh == null ^ Object1.ChucDanh == null )
			{
				equal = false;
			}
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.MaNhom != null && Object2.MaNhom != null )
			{
				if (Object1.MaNhom != Object2.MaNhom)
					equal = false;
			}
			else if (Object1.MaNhom == null ^ Object1.MaNhom == null )
			{
				equal = false;
			}
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if (Object1.SoTinChi != Object2.SoTinChi)
				equal = false;
			if (Object1.SiSoLop != null && Object2.SiSoLop != null )
			{
				if (Object1.SiSoLop != Object2.SiSoLop)
					equal = false;
			}
			else if (Object1.SiSoLop == null ^ Object1.SiSoLop == null )
			{
				equal = false;
			}
			if (Object1.TrongGio != null && Object2.TrongGio != null )
			{
				if (Object1.TrongGio != Object2.TrongGio)
					equal = false;
			}
			else if (Object1.TrongGio == null ^ Object1.TrongGio == null )
			{
				equal = false;
			}
			if (Object1.NgoaiGio != null && Object2.NgoaiGio != null )
			{
				if (Object1.NgoaiGio != Object2.NgoaiGio)
					equal = false;
			}
			else if (Object1.NgoaiGio == null ^ Object1.NgoaiGio == null )
			{
				equal = false;
			}
			if (Object1.GiangHe != null && Object2.GiangHe != null )
			{
				if (Object1.GiangHe != Object2.GiangHe)
					equal = false;
			}
			else if (Object1.GiangHe == null ^ Object1.GiangHe == null )
			{
				equal = false;
			}
			if (Object1.HeSoCoSo != null && Object2.HeSoCoSo != null )
			{
				if (Object1.HeSoCoSo != Object2.HeSoCoSo)
					equal = false;
			}
			else if (Object1.HeSoCoSo == null ^ Object1.HeSoCoSo == null )
			{
				equal = false;
			}
			if (Object1.NgayBatDau != null && Object2.NgayBatDau != null )
			{
				if (Object1.NgayBatDau != Object2.NgayBatDau)
					equal = false;
			}
			else if (Object1.NgayBatDau == null ^ Object1.NgayBatDau == null )
			{
				equal = false;
			}
			if (Object1.NgayKetThuc != null && Object2.NgayKetThuc != null )
			{
				if (Object1.NgayKetThuc != Object2.NgayKetThuc)
					equal = false;
			}
			else if (Object1.NgayKetThuc == null ^ Object1.NgayKetThuc == null )
			{
				equal = false;
			}
			if (Object1.ThoiGianGiang != null && Object2.ThoiGianGiang != null )
			{
				if (Object1.ThoiGianGiang != Object2.ThoiGianGiang)
					equal = false;
			}
			else if (Object1.ThoiGianGiang == null ^ Object1.ThoiGianGiang == null )
			{
				equal = false;
			}
			if (Object1.MaDiaDiem != null && Object2.MaDiaDiem != null )
			{
				if (Object1.MaDiaDiem != Object2.MaDiaDiem)
					equal = false;
			}
			else if (Object1.MaDiaDiem == null ^ Object1.MaDiaDiem == null )
			{
				equal = false;
			}
			if (Object1.MaBacLoaiHinh != Object2.MaBacLoaiHinh)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VLopHocPhanKhongPhanCong entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaLoaiGiangVien":
					return entity.MaLoaiGiangVien;
				case "MaQuanLy":
					return entity.MaQuanLy;
				case "HoTen":
					return entity.HoTen;
				case "ChucDanh":
					return entity.ChucDanh;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "MaNhom":
					return entity.MaNhom;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "SoTinChi":
					return entity.SoTinChi;
				case "SiSoLop":
					return entity.SiSoLop;
				case "TrongGio":
					return entity.TrongGio;
				case "NgoaiGio":
					return entity.NgoaiGio;
				case "GiangHe":
					return entity.GiangHe;
				case "HeSoCoSo":
					return entity.HeSoCoSo;
				case "NgayBatDau":
					return entity.NgayBatDau;
				case "NgayKetThuc":
					return entity.NgayKetThuc;
				case "ThoiGianGiang":
					return entity.ThoiGianGiang;
				case "MaDiaDiem":
					return entity.MaDiaDiem;
				case "MaBacLoaiHinh":
					return entity.MaBacLoaiHinh;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VLopHocPhanKhongPhanCong, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- MaLoaiGiangVien: {0}{19}- MaQuanLy: {1}{19}- HoTen: {2}{19}- ChucDanh: {3}{19}- MaMonHoc: {4}{19}- TenMonHoc: {5}{19}- MaNhom: {6}{19}- MaLopHocPhan: {7}{19}- SoTinChi: {8}{19}- SiSoLop: {9}{19}- TrongGio: {10}{19}- NgoaiGio: {11}{19}- GiangHe: {12}{19}- HeSoCoSo: {13}{19}- NgayBatDau: {14}{19}- NgayKetThuc: {15}{19}- ThoiGianGiang: {16}{19}- MaDiaDiem: {17}{19}- MaBacLoaiHinh: {18}{19}", 
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
			     
				(this.MaQuanLy == null) ? string.Empty : this.MaQuanLy.ToString(),
			     
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				(this.ChucDanh == null) ? string.Empty : this.ChucDanh.ToString(),
			     
				this.MaMonHoc,
				this.TenMonHoc,
				(this.MaNhom == null) ? string.Empty : this.MaNhom.ToString(),
			     
				this.MaLopHocPhan,
				this.SoTinChi,
				(this.SiSoLop == null) ? string.Empty : this.SiSoLop.ToString(),
			     
				(this.TrongGio == null) ? string.Empty : this.TrongGio.ToString(),
			     
				(this.NgoaiGio == null) ? string.Empty : this.NgoaiGio.ToString(),
			     
				(this.GiangHe == null) ? string.Empty : this.GiangHe.ToString(),
			     
				(this.HeSoCoSo == null) ? string.Empty : this.HeSoCoSo.ToString(),
			     
				(this.NgayBatDau == null) ? string.Empty : this.NgayBatDau.ToString(),
			     
				(this.NgayKetThuc == null) ? string.Empty : this.NgayKetThuc.ToString(),
			     
				(this.ThoiGianGiang == null) ? string.Empty : this.ThoiGianGiang.ToString(),
			     
				(this.MaDiaDiem == null) ? string.Empty : this.MaDiaDiem.ToString(),
			     
				this.MaBacLoaiHinh,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VLopHocPhanKhongPhanCong columns.
	/// </summary>
	[Serializable]
	public enum VLopHocPhanKhongPhanCongColumn
	{
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("MaLoaiGiangVien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("MaQuanLy")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaQuanLy,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		HoTen,
		/// <summary>
		/// ChucDanh : 
		/// </summary>
		[EnumTextValue("ChucDanh")]
		[ColumnEnum("ChucDanh", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		ChucDanh,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc,
		/// <summary>
		/// MaNhom : 
		/// </summary>
		[EnumTextValue("MaNhom")]
		[ColumnEnum("MaNhom", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaNhom,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		MaLopHocPhan,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("SoTinChi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SoTinChi,
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		[EnumTextValue("SiSoLop")]
		[ColumnEnum("SiSoLop", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSoLop,
		/// <summary>
		/// TrongGio : 
		/// </summary>
		[EnumTextValue("TrongGio")]
		[ColumnEnum("TrongGio", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TrongGio,
		/// <summary>
		/// NgoaiGio : 
		/// </summary>
		[EnumTextValue("NgoaiGio")]
		[ColumnEnum("NgoaiGio", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NgoaiGio,
		/// <summary>
		/// GiangHe : 
		/// </summary>
		[EnumTextValue("GiangHe")]
		[ColumnEnum("GiangHe", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GiangHe,
		/// <summary>
		/// HeSoCoSo : 
		/// </summary>
		[EnumTextValue("HeSoCoSo")]
		[ColumnEnum("HeSoCoSo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoCoSo,
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		[EnumTextValue("NgayBatDau")]
		[ColumnEnum("NgayBatDau", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayBatDau,
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		[EnumTextValue("NgayKetThuc")]
		[ColumnEnum("NgayKetThuc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKetThuc,
		/// <summary>
		/// ThoiGianGiang : 
		/// </summary>
		[EnumTextValue("ThoiGianGiang")]
		[ColumnEnum("ThoiGianGiang", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 31)]
		ThoiGianGiang,
		/// <summary>
		/// MaDiaDiem : 
		/// </summary>
		[EnumTextValue("MaDiaDiem")]
		[ColumnEnum("MaDiaDiem", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDiaDiem,
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		[EnumTextValue("MaBacLoaiHinh")]
		[ColumnEnum("MaBacLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 43)]
		MaBacLoaiHinh
	}//End enum

} // end namespace
