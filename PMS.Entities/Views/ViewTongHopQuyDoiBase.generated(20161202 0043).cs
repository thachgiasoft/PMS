/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewTongHopQuyDoi.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_TongHop_QuyDoi' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewTongHopQuyDoiBase")]
	public abstract partial class ViewTongHopQuyDoiBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		private System.String		  _maKhoa = null;
		
		/// <summary>
		/// TenKhoa : 
		/// </summary>
		private System.String		  _tenKhoa = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = null;
		
		/// <summary>
		/// SoTiet1 : 
		/// </summary>
		private System.Decimal?		  _soTiet1 = null;
		
		/// <summary>
		/// TietDoAn1 : 
		/// </summary>
		private System.Decimal?		  _tietDoAn1 = null;
		
		/// <summary>
		/// SoTiet2 : 
		/// </summary>
		private System.Decimal?		  _soTiet2 = null;
		
		/// <summary>
		/// TietDoAn2 : 
		/// </summary>
		private System.Decimal?		  _tietDoAn2 = null;
		
		/// <summary>
		/// TietLyThuyet : 
		/// </summary>
		private System.Decimal?		  _tietLyThuyet = null;
		
		/// <summary>
		/// TietThucHanh : 
		/// </summary>
		private System.Decimal?		  _tietThucHanh = null;
		
		/// <summary>
		/// TietThiNghiem : 
		/// </summary>
		private System.Decimal?		  _tietThiNghiem = null;
		
		/// <summary>
		/// TietThucTap : 
		/// </summary>
		private System.Decimal?		  _tietThucTap = null;
		
		/// <summary>
		/// TietDoAn : 
		/// </summary>
		private System.Decimal?		  _tietDoAn = null;
		
		/// <summary>
		/// TongCong : 
		/// </summary>
		private System.Decimal?		  _tongCong = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewTongHopQuyDoiBase"/> instance.
		///</summary>
		public ViewTongHopQuyDoiBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewTongHopQuyDoiBase"/> instance.
		///</summary>
		///<param name="_maKhoa"></param>
		///<param name="_tenKhoa"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_soTiet1"></param>
		///<param name="_tietDoAn1"></param>
		///<param name="_soTiet2"></param>
		///<param name="_tietDoAn2"></param>
		///<param name="_tietLyThuyet"></param>
		///<param name="_tietThucHanh"></param>
		///<param name="_tietThiNghiem"></param>
		///<param name="_tietThucTap"></param>
		///<param name="_tietDoAn"></param>
		///<param name="_tongCong"></param>
		public ViewTongHopQuyDoiBase(System.String _maKhoa, System.String _tenKhoa, System.String _namHoc, System.String _hocKy, System.Decimal? _soTiet1, System.Decimal? _tietDoAn1, System.Decimal? _soTiet2, System.Decimal? _tietDoAn2, System.Decimal? _tietLyThuyet, System.Decimal? _tietThucHanh, System.Decimal? _tietThiNghiem, System.Decimal? _tietThucTap, System.Decimal? _tietDoAn, System.Decimal? _tongCong)
		{
			this._maKhoa = _maKhoa;
			this._tenKhoa = _tenKhoa;
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._soTiet1 = _soTiet1;
			this._tietDoAn1 = _tietDoAn1;
			this._soTiet2 = _soTiet2;
			this._tietDoAn2 = _tietDoAn2;
			this._tietLyThuyet = _tietLyThuyet;
			this._tietThucHanh = _tietThucHanh;
			this._tietThiNghiem = _tietThiNghiem;
			this._tietThucTap = _tietThucTap;
			this._tietDoAn = _tietDoAn;
			this._tongCong = _tongCong;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewTongHopQuyDoi"/> instance.
		///</summary>
		///<param name="_maKhoa"></param>
		///<param name="_tenKhoa"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_soTiet1"></param>
		///<param name="_tietDoAn1"></param>
		///<param name="_soTiet2"></param>
		///<param name="_tietDoAn2"></param>
		///<param name="_tietLyThuyet"></param>
		///<param name="_tietThucHanh"></param>
		///<param name="_tietThiNghiem"></param>
		///<param name="_tietThucTap"></param>
		///<param name="_tietDoAn"></param>
		///<param name="_tongCong"></param>
		public static ViewTongHopQuyDoi CreateViewTongHopQuyDoi(System.String _maKhoa, System.String _tenKhoa, System.String _namHoc, System.String _hocKy, System.Decimal? _soTiet1, System.Decimal? _tietDoAn1, System.Decimal? _soTiet2, System.Decimal? _tietDoAn2, System.Decimal? _tietLyThuyet, System.Decimal? _tietThucHanh, System.Decimal? _tietThiNghiem, System.Decimal? _tietThucTap, System.Decimal? _tietDoAn, System.Decimal? _tongCong)
		{
			ViewTongHopQuyDoi newViewTongHopQuyDoi = new ViewTongHopQuyDoi();
			newViewTongHopQuyDoi.MaKhoa = _maKhoa;
			newViewTongHopQuyDoi.TenKhoa = _tenKhoa;
			newViewTongHopQuyDoi.NamHoc = _namHoc;
			newViewTongHopQuyDoi.HocKy = _hocKy;
			newViewTongHopQuyDoi.SoTiet1 = _soTiet1;
			newViewTongHopQuyDoi.TietDoAn1 = _tietDoAn1;
			newViewTongHopQuyDoi.SoTiet2 = _soTiet2;
			newViewTongHopQuyDoi.TietDoAn2 = _tietDoAn2;
			newViewTongHopQuyDoi.TietLyThuyet = _tietLyThuyet;
			newViewTongHopQuyDoi.TietThucHanh = _tietThucHanh;
			newViewTongHopQuyDoi.TietThiNghiem = _tietThiNghiem;
			newViewTongHopQuyDoi.TietThucTap = _tietThucTap;
			newViewTongHopQuyDoi.TietDoAn = _tietDoAn;
			newViewTongHopQuyDoi.TongCong = _tongCong;
			return newViewTongHopQuyDoi;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaKhoa property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaKhoa
		{
			get
			{
				return this._maKhoa; 
			}
			set
			{
				if (_maKhoa == value)
					return;
					
				this._maKhoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaKhoa");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenKhoa property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenKhoa
		{
			get
			{
				return this._tenKhoa; 
			}
			set
			{
				if (_tenKhoa == value)
					return;
					
				this._tenKhoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenKhoa");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet1 property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTiet1Null() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTiet1
		{
			get
			{
				return this._soTiet1; 
			}
			set
			{
				if (_soTiet1 == value && SoTiet1 != null )
					return;
					
				this._soTiet1 = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet1");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietDoAn1 property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietDoAn1Null() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietDoAn1
		{
			get
			{
				return this._tietDoAn1; 
			}
			set
			{
				if (_tietDoAn1 == value && TietDoAn1 != null )
					return;
					
				this._tietDoAn1 = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietDoAn1");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet2 property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTiet2Null() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTiet2
		{
			get
			{
				return this._soTiet2; 
			}
			set
			{
				if (_soTiet2 == value && SoTiet2 != null )
					return;
					
				this._soTiet2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietDoAn2 property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietDoAn2Null() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietDoAn2
		{
			get
			{
				return this._tietDoAn2; 
			}
			set
			{
				if (_tietDoAn2 == value && TietDoAn2 != null )
					return;
					
				this._tietDoAn2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietDoAn2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietLyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietLyThuyetNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietLyThuyet
		{
			get
			{
				return this._tietLyThuyet; 
			}
			set
			{
				if (_tietLyThuyet == value && TietLyThuyet != null )
					return;
					
				this._tietLyThuyet = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietLyThuyet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietThucHanhNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietThucHanh
		{
			get
			{
				return this._tietThucHanh; 
			}
			set
			{
				if (_tietThucHanh == value && TietThucHanh != null )
					return;
					
				this._tietThucHanh = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietThiNghiem property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietThiNghiemNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietThiNghiem
		{
			get
			{
				return this._tietThiNghiem; 
			}
			set
			{
				if (_tietThiNghiem == value && TietThiNghiem != null )
					return;
					
				this._tietThiNghiem = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietThiNghiem");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietThucTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietThucTapNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietThucTap
		{
			get
			{
				return this._tietThucTap; 
			}
			set
			{
				if (_tietThucTap == value && TietThucTap != null )
					return;
					
				this._tietThucTap = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietThucTap");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietDoAn property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietDoAnNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietDoAn
		{
			get
			{
				return this._tietDoAn; 
			}
			set
			{
				if (_tietDoAn == value && TietDoAn != null )
					return;
					
				this._tietDoAn = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietDoAn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TongCong property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTongCongNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TongCong
		{
			get
			{
				return this._tongCong; 
			}
			set
			{
				if (_tongCong == value && TongCong != null )
					return;
					
				this._tongCong = value;
				this._isDirty = true;
				
				OnPropertyChanged("TongCong");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_TongHop_QuyDoi"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewTongHopQuyDoiBase Entity 
		///</summary>
		public virtual ViewTongHopQuyDoiBase Copy()
		{
			//shallow copy entity
			ViewTongHopQuyDoi copy = new ViewTongHopQuyDoi();
				copy.MaKhoa = this.MaKhoa;
				copy.TenKhoa = this.TenKhoa;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.SoTiet1 = this.SoTiet1;
				copy.TietDoAn1 = this.TietDoAn1;
				copy.SoTiet2 = this.SoTiet2;
				copy.TietDoAn2 = this.TietDoAn2;
				copy.TietLyThuyet = this.TietLyThuyet;
				copy.TietThucHanh = this.TietThucHanh;
				copy.TietThiNghiem = this.TietThiNghiem;
				copy.TietThucTap = this.TietThucTap;
				copy.TietDoAn = this.TietDoAn;
				copy.TongCong = this.TongCong;
			copy.AcceptChanges();
			return (ViewTongHopQuyDoi)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewTongHopQuyDoiBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewTongHopQuyDoiBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewTongHopQuyDoiBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewTongHopQuyDoiBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewTongHopQuyDoiBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewTongHopQuyDoiBase Object1, ViewTongHopQuyDoiBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaKhoa != null && Object2.MaKhoa != null )
			{
				if (Object1.MaKhoa != Object2.MaKhoa)
					equal = false;
			}
			else if (Object1.MaKhoa == null ^ Object1.MaKhoa == null )
			{
				equal = false;
			}
			if (Object1.TenKhoa != null && Object2.TenKhoa != null )
			{
				if (Object1.TenKhoa != Object2.TenKhoa)
					equal = false;
			}
			else if (Object1.TenKhoa == null ^ Object1.TenKhoa == null )
			{
				equal = false;
			}
			if (Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object1.NamHoc == null )
			{
				equal = false;
			}
			if (Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object1.HocKy == null )
			{
				equal = false;
			}
			if (Object1.SoTiet1 != null && Object2.SoTiet1 != null )
			{
				if (Object1.SoTiet1 != Object2.SoTiet1)
					equal = false;
			}
			else if (Object1.SoTiet1 == null ^ Object1.SoTiet1 == null )
			{
				equal = false;
			}
			if (Object1.TietDoAn1 != null && Object2.TietDoAn1 != null )
			{
				if (Object1.TietDoAn1 != Object2.TietDoAn1)
					equal = false;
			}
			else if (Object1.TietDoAn1 == null ^ Object1.TietDoAn1 == null )
			{
				equal = false;
			}
			if (Object1.SoTiet2 != null && Object2.SoTiet2 != null )
			{
				if (Object1.SoTiet2 != Object2.SoTiet2)
					equal = false;
			}
			else if (Object1.SoTiet2 == null ^ Object1.SoTiet2 == null )
			{
				equal = false;
			}
			if (Object1.TietDoAn2 != null && Object2.TietDoAn2 != null )
			{
				if (Object1.TietDoAn2 != Object2.TietDoAn2)
					equal = false;
			}
			else if (Object1.TietDoAn2 == null ^ Object1.TietDoAn2 == null )
			{
				equal = false;
			}
			if (Object1.TietLyThuyet != null && Object2.TietLyThuyet != null )
			{
				if (Object1.TietLyThuyet != Object2.TietLyThuyet)
					equal = false;
			}
			else if (Object1.TietLyThuyet == null ^ Object1.TietLyThuyet == null )
			{
				equal = false;
			}
			if (Object1.TietThucHanh != null && Object2.TietThucHanh != null )
			{
				if (Object1.TietThucHanh != Object2.TietThucHanh)
					equal = false;
			}
			else if (Object1.TietThucHanh == null ^ Object1.TietThucHanh == null )
			{
				equal = false;
			}
			if (Object1.TietThiNghiem != null && Object2.TietThiNghiem != null )
			{
				if (Object1.TietThiNghiem != Object2.TietThiNghiem)
					equal = false;
			}
			else if (Object1.TietThiNghiem == null ^ Object1.TietThiNghiem == null )
			{
				equal = false;
			}
			if (Object1.TietThucTap != null && Object2.TietThucTap != null )
			{
				if (Object1.TietThucTap != Object2.TietThucTap)
					equal = false;
			}
			else if (Object1.TietThucTap == null ^ Object1.TietThucTap == null )
			{
				equal = false;
			}
			if (Object1.TietDoAn != null && Object2.TietDoAn != null )
			{
				if (Object1.TietDoAn != Object2.TietDoAn)
					equal = false;
			}
			else if (Object1.TietDoAn == null ^ Object1.TietDoAn == null )
			{
				equal = false;
			}
			if (Object1.TongCong != null && Object2.TongCong != null )
			{
				if (Object1.TongCong != Object2.TongCong)
					equal = false;
			}
			else if (Object1.TongCong == null ^ Object1.TongCong == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewTongHopQuyDoi entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaKhoa":
					return entity.MaKhoa;
				case "TenKhoa":
					return entity.TenKhoa;
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "SoTiet1":
					return entity.SoTiet1;
				case "TietDoAn1":
					return entity.TietDoAn1;
				case "SoTiet2":
					return entity.SoTiet2;
				case "TietDoAn2":
					return entity.TietDoAn2;
				case "TietLyThuyet":
					return entity.TietLyThuyet;
				case "TietThucHanh":
					return entity.TietThucHanh;
				case "TietThiNghiem":
					return entity.TietThiNghiem;
				case "TietThucTap":
					return entity.TietThucTap;
				case "TietDoAn":
					return entity.TietDoAn;
				case "TongCong":
					return entity.TongCong;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewTongHopQuyDoi, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- MaKhoa: {0}{14}- TenKhoa: {1}{14}- NamHoc: {2}{14}- HocKy: {3}{14}- SoTiet1: {4}{14}- TietDoAn1: {5}{14}- SoTiet2: {6}{14}- TietDoAn2: {7}{14}- TietLyThuyet: {8}{14}- TietThucHanh: {9}{14}- TietThiNghiem: {10}{14}- TietThucTap: {11}{14}- TietDoAn: {12}{14}- TongCong: {13}{14}", 
				(this.MaKhoa == null) ? string.Empty : this.MaKhoa.ToString(),
			     
				(this.TenKhoa == null) ? string.Empty : this.TenKhoa.ToString(),
			     
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
			     
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
			     
				(this.SoTiet1 == null) ? string.Empty : this.SoTiet1.ToString(),
			     
				(this.TietDoAn1 == null) ? string.Empty : this.TietDoAn1.ToString(),
			     
				(this.SoTiet2 == null) ? string.Empty : this.SoTiet2.ToString(),
			     
				(this.TietDoAn2 == null) ? string.Empty : this.TietDoAn2.ToString(),
			     
				(this.TietLyThuyet == null) ? string.Empty : this.TietLyThuyet.ToString(),
			     
				(this.TietThucHanh == null) ? string.Empty : this.TietThucHanh.ToString(),
			     
				(this.TietThiNghiem == null) ? string.Empty : this.TietThiNghiem.ToString(),
			     
				(this.TietThucTap == null) ? string.Empty : this.TietThucTap.ToString(),
			     
				(this.TietDoAn == null) ? string.Empty : this.TietDoAn.ToString(),
			     
				(this.TongCong == null) ? string.Empty : this.TongCong.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewTongHopQuyDoi columns.
	/// </summary>
	[Serializable]
	public enum ViewTongHopQuyDoiColumn
	{
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		[EnumTextValue("MaKhoa")]
		[ColumnEnum("MaKhoa", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaKhoa,
		/// <summary>
		/// TenKhoa : 
		/// </summary>
		[EnumTextValue("TenKhoa")]
		[ColumnEnum("TenKhoa", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenKhoa,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy,
		/// <summary>
		/// SoTiet1 : 
		/// </summary>
		[EnumTextValue("SoTiet1")]
		[ColumnEnum("SoTiet1", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet1,
		/// <summary>
		/// TietDoAn1 : 
		/// </summary>
		[EnumTextValue("TietDoAn1")]
		[ColumnEnum("TietDoAn1", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietDoAn1,
		/// <summary>
		/// SoTiet2 : 
		/// </summary>
		[EnumTextValue("SoTiet2")]
		[ColumnEnum("SoTiet2", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet2,
		/// <summary>
		/// TietDoAn2 : 
		/// </summary>
		[EnumTextValue("TietDoAn2")]
		[ColumnEnum("TietDoAn2", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietDoAn2,
		/// <summary>
		/// TietLyThuyet : 
		/// </summary>
		[EnumTextValue("TietLyThuyet")]
		[ColumnEnum("TietLyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietLyThuyet,
		/// <summary>
		/// TietThucHanh : 
		/// </summary>
		[EnumTextValue("TietThucHanh")]
		[ColumnEnum("TietThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietThucHanh,
		/// <summary>
		/// TietThiNghiem : 
		/// </summary>
		[EnumTextValue("TietThiNghiem")]
		[ColumnEnum("TietThiNghiem", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietThiNghiem,
		/// <summary>
		/// TietThucTap : 
		/// </summary>
		[EnumTextValue("TietThucTap")]
		[ColumnEnum("TietThucTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietThucTap,
		/// <summary>
		/// TietDoAn : 
		/// </summary>
		[EnumTextValue("TietDoAn")]
		[ColumnEnum("TietDoAn", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietDoAn,
		/// <summary>
		/// TongCong : 
		/// </summary>
		[EnumTextValue("TongCong")]
		[ColumnEnum("TongCong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongCong
	}//End enum

} // end namespace
