/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewQuyetDinhDoiHocHamHocVi.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'view_QuyetDinhDoiHocHamHocVi' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewQuyetDinhDoiHocHamHocViBase")]
	public abstract partial class ViewQuyetDinhDoiHocHamHocViBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.Int32?		  _maGiangVien = null;
		
		/// <summary>
		/// MaCu : 
		/// </summary>
		private System.Int32?		  _maCu = null;
		
		/// <summary>
		/// MaMoi : 
		/// </summary>
		private System.Int32?		  _maMoi = null;
		
		/// <summary>
		/// TenCu : 
		/// </summary>
		private System.String		  _tenCu = null;
		
		/// <summary>
		/// TenMoi : 
		/// </summary>
		private System.String		  _tenMoi = null;
		
		/// <summary>
		/// NgayHieuLuc : 
		/// </summary>
		private System.DateTime?		  _ngayHieuLuc = null;
		
		/// <summary>
		/// LoaiQuyetDinh : 
		/// </summary>
		private System.String		  _loaiQuyetDinh = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewQuyetDinhDoiHocHamHocViBase"/> instance.
		///</summary>
		public ViewQuyetDinhDoiHocHamHocViBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewQuyetDinhDoiHocHamHocViBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maCu"></param>
		///<param name="_maMoi"></param>
		///<param name="_tenCu"></param>
		///<param name="_tenMoi"></param>
		///<param name="_ngayHieuLuc"></param>
		///<param name="_loaiQuyetDinh"></param>
		public ViewQuyetDinhDoiHocHamHocViBase(System.Int32? _maGiangVien, System.Int32? _maCu, System.Int32? _maMoi, System.String _tenCu, System.String _tenMoi, System.DateTime? _ngayHieuLuc, System.String _loaiQuyetDinh)
		{
			this._maGiangVien = _maGiangVien;
			this._maCu = _maCu;
			this._maMoi = _maMoi;
			this._tenCu = _tenCu;
			this._tenMoi = _tenMoi;
			this._ngayHieuLuc = _ngayHieuLuc;
			this._loaiQuyetDinh = _loaiQuyetDinh;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewQuyetDinhDoiHocHamHocVi"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maCu"></param>
		///<param name="_maMoi"></param>
		///<param name="_tenCu"></param>
		///<param name="_tenMoi"></param>
		///<param name="_ngayHieuLuc"></param>
		///<param name="_loaiQuyetDinh"></param>
		public static ViewQuyetDinhDoiHocHamHocVi CreateViewQuyetDinhDoiHocHamHocVi(System.Int32? _maGiangVien, System.Int32? _maCu, System.Int32? _maMoi, System.String _tenCu, System.String _tenMoi, System.DateTime? _ngayHieuLuc, System.String _loaiQuyetDinh)
		{
			ViewQuyetDinhDoiHocHamHocVi newViewQuyetDinhDoiHocHamHocVi = new ViewQuyetDinhDoiHocHamHocVi();
			newViewQuyetDinhDoiHocHamHocVi.MaGiangVien = _maGiangVien;
			newViewQuyetDinhDoiHocHamHocVi.MaCu = _maCu;
			newViewQuyetDinhDoiHocHamHocVi.MaMoi = _maMoi;
			newViewQuyetDinhDoiHocHamHocVi.TenCu = _tenCu;
			newViewQuyetDinhDoiHocHamHocVi.TenMoi = _tenMoi;
			newViewQuyetDinhDoiHocHamHocVi.NgayHieuLuc = _ngayHieuLuc;
			newViewQuyetDinhDoiHocHamHocVi.LoaiQuyetDinh = _loaiQuyetDinh;
			return newViewQuyetDinhDoiHocHamHocVi;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaGiangVienNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value && MaGiangVien != null )
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaCu property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaCuNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaCu
		{
			get
			{
				return this._maCu; 
			}
			set
			{
				if (_maCu == value && MaCu != null )
					return;
					
				this._maCu = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaCu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMoi property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaMoiNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaMoi
		{
			get
			{
				return this._maMoi; 
			}
			set
			{
				if (_maMoi == value && MaMoi != null )
					return;
					
				this._maMoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenCu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenCu
		{
			get
			{
				return this._tenCu; 
			}
			set
			{
				if (_tenCu == value)
					return;
					
				this._tenCu = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenCu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMoi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMoi
		{
			get
			{
				return this._tenMoi; 
			}
			set
			{
				if (_tenMoi == value)
					return;
					
				this._tenMoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayHieuLuc property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayHieuLucNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayHieuLuc
		{
			get
			{
				return this._ngayHieuLuc; 
			}
			set
			{
				if (_ngayHieuLuc == value && NgayHieuLuc != null )
					return;
					
				this._ngayHieuLuc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayHieuLuc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LoaiQuyetDinh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LoaiQuyetDinh
		{
			get
			{
				return this._loaiQuyetDinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "LoaiQuyetDinh does not allow null values.");
				if (_loaiQuyetDinh == value)
					return;
					
				this._loaiQuyetDinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("LoaiQuyetDinh");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "view_QuyetDinhDoiHocHamHocVi"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewQuyetDinhDoiHocHamHocViBase Entity 
		///</summary>
		public virtual ViewQuyetDinhDoiHocHamHocViBase Copy()
		{
			//shallow copy entity
			ViewQuyetDinhDoiHocHamHocVi copy = new ViewQuyetDinhDoiHocHamHocVi();
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaCu = this.MaCu;
				copy.MaMoi = this.MaMoi;
				copy.TenCu = this.TenCu;
				copy.TenMoi = this.TenMoi;
				copy.NgayHieuLuc = this.NgayHieuLuc;
				copy.LoaiQuyetDinh = this.LoaiQuyetDinh;
			copy.AcceptChanges();
			return (ViewQuyetDinhDoiHocHamHocVi)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewQuyetDinhDoiHocHamHocViBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewQuyetDinhDoiHocHamHocViBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewQuyetDinhDoiHocHamHocViBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewQuyetDinhDoiHocHamHocViBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewQuyetDinhDoiHocHamHocViBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewQuyetDinhDoiHocHamHocViBase Object1, ViewQuyetDinhDoiHocHamHocViBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object1.MaGiangVien == null )
			{
				equal = false;
			}
			if (Object1.MaCu != null && Object2.MaCu != null )
			{
				if (Object1.MaCu != Object2.MaCu)
					equal = false;
			}
			else if (Object1.MaCu == null ^ Object1.MaCu == null )
			{
				equal = false;
			}
			if (Object1.MaMoi != null && Object2.MaMoi != null )
			{
				if (Object1.MaMoi != Object2.MaMoi)
					equal = false;
			}
			else if (Object1.MaMoi == null ^ Object1.MaMoi == null )
			{
				equal = false;
			}
			if (Object1.TenCu != null && Object2.TenCu != null )
			{
				if (Object1.TenCu != Object2.TenCu)
					equal = false;
			}
			else if (Object1.TenCu == null ^ Object1.TenCu == null )
			{
				equal = false;
			}
			if (Object1.TenMoi != null && Object2.TenMoi != null )
			{
				if (Object1.TenMoi != Object2.TenMoi)
					equal = false;
			}
			else if (Object1.TenMoi == null ^ Object1.TenMoi == null )
			{
				equal = false;
			}
			if (Object1.NgayHieuLuc != null && Object2.NgayHieuLuc != null )
			{
				if (Object1.NgayHieuLuc != Object2.NgayHieuLuc)
					equal = false;
			}
			else if (Object1.NgayHieuLuc == null ^ Object1.NgayHieuLuc == null )
			{
				equal = false;
			}
			if (Object1.LoaiQuyetDinh != Object2.LoaiQuyetDinh)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewQuyetDinhDoiHocHamHocVi entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "MaCu":
					return entity.MaCu;
				case "MaMoi":
					return entity.MaMoi;
				case "TenCu":
					return entity.TenCu;
				case "TenMoi":
					return entity.TenMoi;
				case "NgayHieuLuc":
					return entity.NgayHieuLuc;
				case "LoaiQuyetDinh":
					return entity.LoaiQuyetDinh;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewQuyetDinhDoiHocHamHocVi, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- MaGiangVien: {0}{7}- MaCu: {1}{7}- MaMoi: {2}{7}- TenCu: {3}{7}- TenMoi: {4}{7}- NgayHieuLuc: {5}{7}- LoaiQuyetDinh: {6}{7}", 
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
			     
				(this.MaCu == null) ? string.Empty : this.MaCu.ToString(),
			     
				(this.MaMoi == null) ? string.Empty : this.MaMoi.ToString(),
			     
				(this.TenCu == null) ? string.Empty : this.TenCu.ToString(),
			     
				(this.TenMoi == null) ? string.Empty : this.TenMoi.ToString(),
			     
				(this.NgayHieuLuc == null) ? string.Empty : this.NgayHieuLuc.ToString(),
			     
				this.LoaiQuyetDinh,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewQuyetDinhDoiHocHamHocVi columns.
	/// </summary>
	[Serializable]
	public enum ViewQuyetDinhDoiHocHamHocViColumn
	{
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien,
		/// <summary>
		/// MaCu : 
		/// </summary>
		[EnumTextValue("MaCu")]
		[ColumnEnum("MaCu", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaCu,
		/// <summary>
		/// MaMoi : 
		/// </summary>
		[EnumTextValue("MaMoi")]
		[ColumnEnum("MaMoi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaMoi,
		/// <summary>
		/// TenCu : 
		/// </summary>
		[EnumTextValue("TenCu")]
		[ColumnEnum("TenCu", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenCu,
		/// <summary>
		/// TenMoi : 
		/// </summary>
		[EnumTextValue("TenMoi")]
		[ColumnEnum("TenMoi", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenMoi,
		/// <summary>
		/// NgayHieuLuc : 
		/// </summary>
		[EnumTextValue("NgayHieuLuc")]
		[ColumnEnum("NgayHieuLuc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayHieuLuc,
		/// <summary>
		/// LoaiQuyetDinh : 
		/// </summary>
		[EnumTextValue("LoaiQuyetDinh")]
		[ColumnEnum("LoaiQuyetDinh", typeof(System.String), System.Data.DbType.String, false, false, false, 19)]
		LoaiQuyetDinh
	}//End enum

} // end namespace
