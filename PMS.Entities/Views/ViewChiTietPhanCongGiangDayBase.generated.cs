/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewChiTietPhanCongGiangDay.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_ChiTiet_PhanCongGiangDay' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewChiTietPhanCongGiangDayBase")]
	public abstract partial class ViewChiTietPhanCongGiangDayBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaLHPGoc : 
		/// </summary>
		private System.String		  _maLhpGoc = string.Empty;
		
		/// <summary>
		/// MaLHP : 
		/// </summary>
		private System.String		  _maLhp = null;
		
		/// <summary>
		/// MaHP : 
		/// </summary>
		private System.String		  _maHp = string.Empty;
		
		/// <summary>
		/// TenLHP : 
		/// </summary>
		private System.String		  _tenLhp = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// MaNhom : 
		/// </summary>
		private System.String		  _maNhom = null;
		
		/// <summary>
		/// TenNhom : 
		/// </summary>
		private System.String		  _tenNhom = string.Empty;
		
		/// <summary>
		/// TenLoaiHP : 
		/// </summary>
		private System.String		  _tenLoaiHp = string.Empty;
		
		/// <summary>
		/// MaLich : 
		/// </summary>
		private System.Int32		  _maLich = (int)0;
		
		/// <summary>
		/// Nam : 
		/// </summary>
		private System.Int32?		  _nam = null;
		
		/// <summary>
		/// Tuan : 
		/// </summary>
		private System.Int32?		  _tuan = null;
		
		/// <summary>
		/// TuanHienThi : 
		/// </summary>
		private System.Int32		  _tuanHienThi = (int)0;
		
		/// <summary>
		/// MaNgayTrongTuan : 
		/// </summary>
		private System.Int32?		  _maNgayTrongTuan = null;
		
		/// <summary>
		/// NgayTrongTuan : 
		/// </summary>
		private System.String		  _ngayTrongTuan = null;
		
		/// <summary>
		/// MaTiet : 
		/// </summary>
		private System.Int32?		  _maTiet = null;
		
		/// <summary>
		/// KhoanTiet : 
		/// </summary>
		private System.String		  _khoanTiet = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Int32?		  _soTiet = null;
		
		/// <summary>
		/// MaPhong : 
		/// </summary>
		private System.String		  _maPhong = null;
		
		/// <summary>
		/// TenPhong : 
		/// </summary>
		private System.String		  _tenPhong = string.Empty;
		
		/// <summary>
		/// NgayDay : 
		/// </summary>
		private System.String		  _ngayDay = null;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.String		  _maGiangVien = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = string.Empty;
		
		/// <summary>
		/// DanhSachLop : 
		/// </summary>
		private System.String		  _danhSachLop = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewChiTietPhanCongGiangDayBase"/> instance.
		///</summary>
		public ViewChiTietPhanCongGiangDayBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewChiTietPhanCongGiangDayBase"/> instance.
		///</summary>
		///<param name="_maLhpGoc"></param>
		///<param name="_maLhp"></param>
		///<param name="_maHp"></param>
		///<param name="_tenLhp"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maNhom"></param>
		///<param name="_tenNhom"></param>
		///<param name="_tenLoaiHp"></param>
		///<param name="_maLich"></param>
		///<param name="_nam"></param>
		///<param name="_tuan"></param>
		///<param name="_tuanHienThi"></param>
		///<param name="_maNgayTrongTuan"></param>
		///<param name="_ngayTrongTuan"></param>
		///<param name="_maTiet"></param>
		///<param name="_khoanTiet"></param>
		///<param name="_soTiet"></param>
		///<param name="_maPhong"></param>
		///<param name="_tenPhong"></param>
		///<param name="_ngayDay"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_danhSachLop"></param>
		public ViewChiTietPhanCongGiangDayBase(System.String _maLhpGoc, System.String _maLhp, System.String _maHp, System.String _tenLhp, System.String _maMonHoc, System.String _maNhom, System.String _tenNhom, System.String _tenLoaiHp, System.Int32 _maLich, System.Int32? _nam, System.Int32? _tuan, System.Int32 _tuanHienThi, System.Int32? _maNgayTrongTuan, System.String _ngayTrongTuan, System.Int32? _maTiet, System.String _khoanTiet, System.Int32? _soTiet, System.String _maPhong, System.String _tenPhong, System.String _ngayDay, System.String _maGiangVien, System.String _hoTen, System.String _danhSachLop)
		{
			this._maLhpGoc = _maLhpGoc;
			this._maLhp = _maLhp;
			this._maHp = _maHp;
			this._tenLhp = _tenLhp;
			this._maMonHoc = _maMonHoc;
			this._maNhom = _maNhom;
			this._tenNhom = _tenNhom;
			this._tenLoaiHp = _tenLoaiHp;
			this._maLich = _maLich;
			this._nam = _nam;
			this._tuan = _tuan;
			this._tuanHienThi = _tuanHienThi;
			this._maNgayTrongTuan = _maNgayTrongTuan;
			this._ngayTrongTuan = _ngayTrongTuan;
			this._maTiet = _maTiet;
			this._khoanTiet = _khoanTiet;
			this._soTiet = _soTiet;
			this._maPhong = _maPhong;
			this._tenPhong = _tenPhong;
			this._ngayDay = _ngayDay;
			this._maGiangVien = _maGiangVien;
			this._hoTen = _hoTen;
			this._danhSachLop = _danhSachLop;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewChiTietPhanCongGiangDay"/> instance.
		///</summary>
		///<param name="_maLhpGoc"></param>
		///<param name="_maLhp"></param>
		///<param name="_maHp"></param>
		///<param name="_tenLhp"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maNhom"></param>
		///<param name="_tenNhom"></param>
		///<param name="_tenLoaiHp"></param>
		///<param name="_maLich"></param>
		///<param name="_nam"></param>
		///<param name="_tuan"></param>
		///<param name="_tuanHienThi"></param>
		///<param name="_maNgayTrongTuan"></param>
		///<param name="_ngayTrongTuan"></param>
		///<param name="_maTiet"></param>
		///<param name="_khoanTiet"></param>
		///<param name="_soTiet"></param>
		///<param name="_maPhong"></param>
		///<param name="_tenPhong"></param>
		///<param name="_ngayDay"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_danhSachLop"></param>
		public static ViewChiTietPhanCongGiangDay CreateViewChiTietPhanCongGiangDay(System.String _maLhpGoc, System.String _maLhp, System.String _maHp, System.String _tenLhp, System.String _maMonHoc, System.String _maNhom, System.String _tenNhom, System.String _tenLoaiHp, System.Int32 _maLich, System.Int32? _nam, System.Int32? _tuan, System.Int32 _tuanHienThi, System.Int32? _maNgayTrongTuan, System.String _ngayTrongTuan, System.Int32? _maTiet, System.String _khoanTiet, System.Int32? _soTiet, System.String _maPhong, System.String _tenPhong, System.String _ngayDay, System.String _maGiangVien, System.String _hoTen, System.String _danhSachLop)
		{
			ViewChiTietPhanCongGiangDay newViewChiTietPhanCongGiangDay = new ViewChiTietPhanCongGiangDay();
			newViewChiTietPhanCongGiangDay.MaLhpGoc = _maLhpGoc;
			newViewChiTietPhanCongGiangDay.MaLhp = _maLhp;
			newViewChiTietPhanCongGiangDay.MaHp = _maHp;
			newViewChiTietPhanCongGiangDay.TenLhp = _tenLhp;
			newViewChiTietPhanCongGiangDay.MaMonHoc = _maMonHoc;
			newViewChiTietPhanCongGiangDay.MaNhom = _maNhom;
			newViewChiTietPhanCongGiangDay.TenNhom = _tenNhom;
			newViewChiTietPhanCongGiangDay.TenLoaiHp = _tenLoaiHp;
			newViewChiTietPhanCongGiangDay.MaLich = _maLich;
			newViewChiTietPhanCongGiangDay.Nam = _nam;
			newViewChiTietPhanCongGiangDay.Tuan = _tuan;
			newViewChiTietPhanCongGiangDay.TuanHienThi = _tuanHienThi;
			newViewChiTietPhanCongGiangDay.MaNgayTrongTuan = _maNgayTrongTuan;
			newViewChiTietPhanCongGiangDay.NgayTrongTuan = _ngayTrongTuan;
			newViewChiTietPhanCongGiangDay.MaTiet = _maTiet;
			newViewChiTietPhanCongGiangDay.KhoanTiet = _khoanTiet;
			newViewChiTietPhanCongGiangDay.SoTiet = _soTiet;
			newViewChiTietPhanCongGiangDay.MaPhong = _maPhong;
			newViewChiTietPhanCongGiangDay.TenPhong = _tenPhong;
			newViewChiTietPhanCongGiangDay.NgayDay = _ngayDay;
			newViewChiTietPhanCongGiangDay.MaGiangVien = _maGiangVien;
			newViewChiTietPhanCongGiangDay.HoTen = _hoTen;
			newViewChiTietPhanCongGiangDay.DanhSachLop = _danhSachLop;
			return newViewChiTietPhanCongGiangDay;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaLHPGoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLhpGoc
		{
			get
			{
				return this._maLhpGoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLhpGoc does not allow null values.");
				if (_maLhpGoc == value)
					return;
					
				this._maLhpGoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLhpGoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLHP property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLhp
		{
			get
			{
				return this._maLhp; 
			}
			set
			{
				if (_maLhp == value)
					return;
					
				this._maLhp = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLhp");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHP property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaHp
		{
			get
			{
				return this._maHp; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaHp does not allow null values.");
				if (_maHp == value)
					return;
					
				this._maHp = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHp");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenLHP property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenLhp
		{
			get
			{
				return this._tenLhp; 
			}
			set
			{
				if (_tenLhp == value)
					return;
					
				this._tenLhp = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenLhp");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaNhom property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaNhom
		{
			get
			{
				return this._maNhom; 
			}
			set
			{
				if (_maNhom == value)
					return;
					
				this._maNhom = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaNhom");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenNhom property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenNhom
		{
			get
			{
				return this._tenNhom; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenNhom does not allow null values.");
				if (_tenNhom == value)
					return;
					
				this._tenNhom = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenNhom");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenLoaiHP property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenLoaiHp
		{
			get
			{
				return this._tenLoaiHp; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenLoaiHp does not allow null values.");
				if (_tenLoaiHp == value)
					return;
					
				this._tenLoaiHp = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenLoaiHp");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLich property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaLich
		{
			get
			{
				return this._maLich; 
			}
			set
			{
				if (_maLich == value)
					return;
					
				this._maLich = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLich");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nam property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNamNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Nam
		{
			get
			{
				return this._nam; 
			}
			set
			{
				if (_nam == value && Nam != null )
					return;
					
				this._nam = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Tuan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTuanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Tuan
		{
			get
			{
				return this._tuan; 
			}
			set
			{
				if (_tuan == value && Tuan != null )
					return;
					
				this._tuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("Tuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TuanHienThi property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 TuanHienThi
		{
			get
			{
				return this._tuanHienThi; 
			}
			set
			{
				if (_tuanHienThi == value)
					return;
					
				this._tuanHienThi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TuanHienThi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaNgayTrongTuan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaNgayTrongTuanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaNgayTrongTuan
		{
			get
			{
				return this._maNgayTrongTuan; 
			}
			set
			{
				if (_maNgayTrongTuan == value && MaNgayTrongTuan != null )
					return;
					
				this._maNgayTrongTuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaNgayTrongTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayTrongTuan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NgayTrongTuan
		{
			get
			{
				return this._ngayTrongTuan; 
			}
			set
			{
				if (_ngayTrongTuan == value)
					return;
					
				this._ngayTrongTuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayTrongTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaTiet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaTietNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaTiet
		{
			get
			{
				return this._maTiet; 
			}
			set
			{
				if (_maTiet == value && MaTiet != null )
					return;
					
				this._maTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the KhoanTiet property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String KhoanTiet
		{
			get
			{
				return this._khoanTiet; 
			}
			set
			{
				if (_khoanTiet == value)
					return;
					
				this._khoanTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("KhoanTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value && SoTiet != null )
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaPhong property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaPhong
		{
			get
			{
				return this._maPhong; 
			}
			set
			{
				if (_maPhong == value)
					return;
					
				this._maPhong = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenPhong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenPhong
		{
			get
			{
				return this._tenPhong; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenPhong does not allow null values.");
				if (_tenPhong == value)
					return;
					
				this._tenPhong = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayDay property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NgayDay
		{
			get
			{
				return this._ngayDay; 
			}
			set
			{
				if (_ngayDay == value)
					return;
					
				this._ngayDay = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayDay");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value)
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "HoTen does not allow null values.");
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DanhSachLop property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DanhSachLop
		{
			get
			{
				return this._danhSachLop; 
			}
			set
			{
				if (_danhSachLop == value)
					return;
					
				this._danhSachLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("DanhSachLop");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_ChiTiet_PhanCongGiangDay"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewChiTietPhanCongGiangDayBase Entity 
		///</summary>
		public virtual ViewChiTietPhanCongGiangDayBase Copy()
		{
			//shallow copy entity
			ViewChiTietPhanCongGiangDay copy = new ViewChiTietPhanCongGiangDay();
				copy.MaLhpGoc = this.MaLhpGoc;
				copy.MaLhp = this.MaLhp;
				copy.MaHp = this.MaHp;
				copy.TenLhp = this.TenLhp;
				copy.MaMonHoc = this.MaMonHoc;
				copy.MaNhom = this.MaNhom;
				copy.TenNhom = this.TenNhom;
				copy.TenLoaiHp = this.TenLoaiHp;
				copy.MaLich = this.MaLich;
				copy.Nam = this.Nam;
				copy.Tuan = this.Tuan;
				copy.TuanHienThi = this.TuanHienThi;
				copy.MaNgayTrongTuan = this.MaNgayTrongTuan;
				copy.NgayTrongTuan = this.NgayTrongTuan;
				copy.MaTiet = this.MaTiet;
				copy.KhoanTiet = this.KhoanTiet;
				copy.SoTiet = this.SoTiet;
				copy.MaPhong = this.MaPhong;
				copy.TenPhong = this.TenPhong;
				copy.NgayDay = this.NgayDay;
				copy.MaGiangVien = this.MaGiangVien;
				copy.HoTen = this.HoTen;
				copy.DanhSachLop = this.DanhSachLop;
			copy.AcceptChanges();
			return (ViewChiTietPhanCongGiangDay)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewChiTietPhanCongGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewChiTietPhanCongGiangDayBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewChiTietPhanCongGiangDayBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewChiTietPhanCongGiangDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewChiTietPhanCongGiangDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewChiTietPhanCongGiangDayBase Object1, ViewChiTietPhanCongGiangDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaLhpGoc != Object2.MaLhpGoc)
				equal = false;
			if (Object1.MaLhp != null && Object2.MaLhp != null )
			{
				if (Object1.MaLhp != Object2.MaLhp)
					equal = false;
			}
			else if (Object1.MaLhp == null ^ Object1.MaLhp == null )
			{
				equal = false;
			}
			if (Object1.MaHp != Object2.MaHp)
				equal = false;
			if (Object1.TenLhp != null && Object2.TenLhp != null )
			{
				if (Object1.TenLhp != Object2.TenLhp)
					equal = false;
			}
			else if (Object1.TenLhp == null ^ Object1.TenLhp == null )
			{
				equal = false;
			}
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.MaNhom != null && Object2.MaNhom != null )
			{
				if (Object1.MaNhom != Object2.MaNhom)
					equal = false;
			}
			else if (Object1.MaNhom == null ^ Object1.MaNhom == null )
			{
				equal = false;
			}
			if (Object1.TenNhom != Object2.TenNhom)
				equal = false;
			if (Object1.TenLoaiHp != Object2.TenLoaiHp)
				equal = false;
			if (Object1.MaLich != Object2.MaLich)
				equal = false;
			if (Object1.Nam != null && Object2.Nam != null )
			{
				if (Object1.Nam != Object2.Nam)
					equal = false;
			}
			else if (Object1.Nam == null ^ Object1.Nam == null )
			{
				equal = false;
			}
			if (Object1.Tuan != null && Object2.Tuan != null )
			{
				if (Object1.Tuan != Object2.Tuan)
					equal = false;
			}
			else if (Object1.Tuan == null ^ Object1.Tuan == null )
			{
				equal = false;
			}
			if (Object1.TuanHienThi != Object2.TuanHienThi)
				equal = false;
			if (Object1.MaNgayTrongTuan != null && Object2.MaNgayTrongTuan != null )
			{
				if (Object1.MaNgayTrongTuan != Object2.MaNgayTrongTuan)
					equal = false;
			}
			else if (Object1.MaNgayTrongTuan == null ^ Object1.MaNgayTrongTuan == null )
			{
				equal = false;
			}
			if (Object1.NgayTrongTuan != null && Object2.NgayTrongTuan != null )
			{
				if (Object1.NgayTrongTuan != Object2.NgayTrongTuan)
					equal = false;
			}
			else if (Object1.NgayTrongTuan == null ^ Object1.NgayTrongTuan == null )
			{
				equal = false;
			}
			if (Object1.MaTiet != null && Object2.MaTiet != null )
			{
				if (Object1.MaTiet != Object2.MaTiet)
					equal = false;
			}
			else if (Object1.MaTiet == null ^ Object1.MaTiet == null )
			{
				equal = false;
			}
			if (Object1.KhoanTiet != null && Object2.KhoanTiet != null )
			{
				if (Object1.KhoanTiet != Object2.KhoanTiet)
					equal = false;
			}
			else if (Object1.KhoanTiet == null ^ Object1.KhoanTiet == null )
			{
				equal = false;
			}
			if (Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object1.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.MaPhong != null && Object2.MaPhong != null )
			{
				if (Object1.MaPhong != Object2.MaPhong)
					equal = false;
			}
			else if (Object1.MaPhong == null ^ Object1.MaPhong == null )
			{
				equal = false;
			}
			if (Object1.TenPhong != Object2.TenPhong)
				equal = false;
			if (Object1.NgayDay != null && Object2.NgayDay != null )
			{
				if (Object1.NgayDay != Object2.NgayDay)
					equal = false;
			}
			else if (Object1.NgayDay == null ^ Object1.NgayDay == null )
			{
				equal = false;
			}
			if (Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object1.MaGiangVien == null )
			{
				equal = false;
			}
			if (Object1.HoTen != Object2.HoTen)
				equal = false;
			if (Object1.DanhSachLop != null && Object2.DanhSachLop != null )
			{
				if (Object1.DanhSachLop != Object2.DanhSachLop)
					equal = false;
			}
			else if (Object1.DanhSachLop == null ^ Object1.DanhSachLop == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewChiTietPhanCongGiangDay entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaLhpGoc":
					return entity.MaLhpGoc;
				case "MaLhp":
					return entity.MaLhp;
				case "MaHp":
					return entity.MaHp;
				case "TenLhp":
					return entity.TenLhp;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "MaNhom":
					return entity.MaNhom;
				case "TenNhom":
					return entity.TenNhom;
				case "TenLoaiHp":
					return entity.TenLoaiHp;
				case "MaLich":
					return entity.MaLich;
				case "Nam":
					return entity.Nam;
				case "Tuan":
					return entity.Tuan;
				case "TuanHienThi":
					return entity.TuanHienThi;
				case "MaNgayTrongTuan":
					return entity.MaNgayTrongTuan;
				case "NgayTrongTuan":
					return entity.NgayTrongTuan;
				case "MaTiet":
					return entity.MaTiet;
				case "KhoanTiet":
					return entity.KhoanTiet;
				case "SoTiet":
					return entity.SoTiet;
				case "MaPhong":
					return entity.MaPhong;
				case "TenPhong":
					return entity.TenPhong;
				case "NgayDay":
					return entity.NgayDay;
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "HoTen":
					return entity.HoTen;
				case "DanhSachLop":
					return entity.DanhSachLop;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewChiTietPhanCongGiangDay, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- MaLhpGoc: {0}{23}- MaLhp: {1}{23}- MaHp: {2}{23}- TenLhp: {3}{23}- MaMonHoc: {4}{23}- MaNhom: {5}{23}- TenNhom: {6}{23}- TenLoaiHp: {7}{23}- MaLich: {8}{23}- Nam: {9}{23}- Tuan: {10}{23}- TuanHienThi: {11}{23}- MaNgayTrongTuan: {12}{23}- NgayTrongTuan: {13}{23}- MaTiet: {14}{23}- KhoanTiet: {15}{23}- SoTiet: {16}{23}- MaPhong: {17}{23}- TenPhong: {18}{23}- NgayDay: {19}{23}- MaGiangVien: {20}{23}- HoTen: {21}{23}- DanhSachLop: {22}{23}", 
				this.MaLhpGoc,
				(this.MaLhp == null) ? string.Empty : this.MaLhp.ToString(),
			     
				this.MaHp,
				(this.TenLhp == null) ? string.Empty : this.TenLhp.ToString(),
			     
				this.MaMonHoc,
				(this.MaNhom == null) ? string.Empty : this.MaNhom.ToString(),
			     
				this.TenNhom,
				this.TenLoaiHp,
				this.MaLich,
				(this.Nam == null) ? string.Empty : this.Nam.ToString(),
			     
				(this.Tuan == null) ? string.Empty : this.Tuan.ToString(),
			     
				this.TuanHienThi,
				(this.MaNgayTrongTuan == null) ? string.Empty : this.MaNgayTrongTuan.ToString(),
			     
				(this.NgayTrongTuan == null) ? string.Empty : this.NgayTrongTuan.ToString(),
			     
				(this.MaTiet == null) ? string.Empty : this.MaTiet.ToString(),
			     
				(this.KhoanTiet == null) ? string.Empty : this.KhoanTiet.ToString(),
			     
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
			     
				(this.MaPhong == null) ? string.Empty : this.MaPhong.ToString(),
			     
				this.TenPhong,
				(this.NgayDay == null) ? string.Empty : this.NgayDay.ToString(),
			     
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
			     
				this.HoTen,
				(this.DanhSachLop == null) ? string.Empty : this.DanhSachLop.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewChiTietPhanCongGiangDay columns.
	/// </summary>
	[Serializable]
	public enum ViewChiTietPhanCongGiangDayColumn
	{
		/// <summary>
		/// MaLHPGoc : 
		/// </summary>
		[EnumTextValue("MaLHPGoc")]
		[ColumnEnum("MaLHPGoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		MaLhpGoc,
		/// <summary>
		/// MaLHP : 
		/// </summary>
		[EnumTextValue("MaLHP")]
		[ColumnEnum("MaLHP", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		MaLhp,
		/// <summary>
		/// MaHP : 
		/// </summary>
		[EnumTextValue("MaHP")]
		[ColumnEnum("MaHP", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaHp,
		/// <summary>
		/// TenLHP : 
		/// </summary>
		[EnumTextValue("TenLHP")]
		[ColumnEnum("TenLHP", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		TenLhp,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// MaNhom : 
		/// </summary>
		[EnumTextValue("MaNhom")]
		[ColumnEnum("MaNhom", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaNhom,
		/// <summary>
		/// TenNhom : 
		/// </summary>
		[EnumTextValue("TenNhom")]
		[ColumnEnum("TenNhom", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenNhom,
		/// <summary>
		/// TenLoaiHP : 
		/// </summary>
		[EnumTextValue("TenLoaiHP")]
		[ColumnEnum("TenLoaiHP", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		TenLoaiHp,
		/// <summary>
		/// MaLich : 
		/// </summary>
		[EnumTextValue("MaLich")]
		[ColumnEnum("MaLich", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaLich,
		/// <summary>
		/// Nam : 
		/// </summary>
		[EnumTextValue("Nam")]
		[ColumnEnum("Nam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Nam,
		/// <summary>
		/// Tuan : 
		/// </summary>
		[EnumTextValue("Tuan")]
		[ColumnEnum("Tuan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Tuan,
		/// <summary>
		/// TuanHienThi : 
		/// </summary>
		[EnumTextValue("TuanHienThi")]
		[ColumnEnum("TuanHienThi", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TuanHienThi,
		/// <summary>
		/// MaNgayTrongTuan : 
		/// </summary>
		[EnumTextValue("MaNgayTrongTuan")]
		[ColumnEnum("MaNgayTrongTuan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaNgayTrongTuan,
		/// <summary>
		/// NgayTrongTuan : 
		/// </summary>
		[EnumTextValue("NgayTrongTuan")]
		[ColumnEnum("NgayTrongTuan", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		NgayTrongTuan,
		/// <summary>
		/// MaTiet : 
		/// </summary>
		[EnumTextValue("MaTiet")]
		[ColumnEnum("MaTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaTiet,
		/// <summary>
		/// KhoanTiet : 
		/// </summary>
		[EnumTextValue("KhoanTiet")]
		[ColumnEnum("KhoanTiet", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 21)]
		KhoanTiet,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet,
		/// <summary>
		/// MaPhong : 
		/// </summary>
		[EnumTextValue("MaPhong")]
		[ColumnEnum("MaPhong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaPhong,
		/// <summary>
		/// TenPhong : 
		/// </summary>
		[EnumTextValue("TenPhong")]
		[ColumnEnum("TenPhong", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		TenPhong,
		/// <summary>
		/// NgayDay : 
		/// </summary>
		[EnumTextValue("NgayDay")]
		[ColumnEnum("NgayDay", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NgayDay,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGiangVien,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, false, 602)]
		HoTen,
		/// <summary>
		/// DanhSachLop : 
		/// </summary>
		[EnumTextValue("DanhSachLop")]
		[ColumnEnum("DanhSachLop", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DanhSachLop
	}//End enum

} // end namespace
