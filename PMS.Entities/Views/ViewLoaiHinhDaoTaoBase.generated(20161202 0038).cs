/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewLoaiHinhDaoTao.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_LoaiHinhDaoTao' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewLoaiHinhDaoTaoBase")]
	public abstract partial class ViewLoaiHinhDaoTaoBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaLoaiHinh : 
		/// </summary>
		private System.String		  _maLoaiHinh = string.Empty;
		
		/// <summary>
		/// TenLoaiHinh : 
		/// </summary>
		private System.String		  _tenLoaiHinh = string.Empty;
		
		/// <summary>
		/// Level : 
		/// </summary>
		private System.Byte?		  _level = null;
		
		/// <summary>
		/// StudyUnitCode : 
		/// </summary>
		private System.String		  _studyUnitCode = null;
		
		/// <summary>
		/// Locked : 
		/// </summary>
		private System.Boolean?		  _locked = null;
		
		/// <summary>
		/// Abbreviation : 
		/// </summary>
		private System.String		  _abbreviation = null;
		
		/// <summary>
		/// PrintAbbreviation : 
		/// </summary>
		private System.String		  _printAbbreviation = null;
		
		/// <summary>
		/// StudyTypeEngName : 
		/// </summary>
		private System.String		  _studyTypeEngName = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewLoaiHinhDaoTaoBase"/> instance.
		///</summary>
		public ViewLoaiHinhDaoTaoBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewLoaiHinhDaoTaoBase"/> instance.
		///</summary>
		///<param name="_maLoaiHinh"></param>
		///<param name="_tenLoaiHinh"></param>
		///<param name="_level"></param>
		///<param name="_studyUnitCode"></param>
		///<param name="_locked"></param>
		///<param name="_abbreviation"></param>
		///<param name="_printAbbreviation"></param>
		///<param name="_studyTypeEngName"></param>
		public ViewLoaiHinhDaoTaoBase(System.String _maLoaiHinh, System.String _tenLoaiHinh, System.Byte? _level, System.String _studyUnitCode, System.Boolean? _locked, System.String _abbreviation, System.String _printAbbreviation, System.String _studyTypeEngName)
		{
			this._maLoaiHinh = _maLoaiHinh;
			this._tenLoaiHinh = _tenLoaiHinh;
			this._level = _level;
			this._studyUnitCode = _studyUnitCode;
			this._locked = _locked;
			this._abbreviation = _abbreviation;
			this._printAbbreviation = _printAbbreviation;
			this._studyTypeEngName = _studyTypeEngName;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewLoaiHinhDaoTao"/> instance.
		///</summary>
		///<param name="_maLoaiHinh"></param>
		///<param name="_tenLoaiHinh"></param>
		///<param name="_level"></param>
		///<param name="_studyUnitCode"></param>
		///<param name="_locked"></param>
		///<param name="_abbreviation"></param>
		///<param name="_printAbbreviation"></param>
		///<param name="_studyTypeEngName"></param>
		public static ViewLoaiHinhDaoTao CreateViewLoaiHinhDaoTao(System.String _maLoaiHinh, System.String _tenLoaiHinh, System.Byte? _level, System.String _studyUnitCode, System.Boolean? _locked, System.String _abbreviation, System.String _printAbbreviation, System.String _studyTypeEngName)
		{
			ViewLoaiHinhDaoTao newViewLoaiHinhDaoTao = new ViewLoaiHinhDaoTao();
			newViewLoaiHinhDaoTao.MaLoaiHinh = _maLoaiHinh;
			newViewLoaiHinhDaoTao.TenLoaiHinh = _tenLoaiHinh;
			newViewLoaiHinhDaoTao.Level = _level;
			newViewLoaiHinhDaoTao.StudyUnitCode = _studyUnitCode;
			newViewLoaiHinhDaoTao.Locked = _locked;
			newViewLoaiHinhDaoTao.Abbreviation = _abbreviation;
			newViewLoaiHinhDaoTao.PrintAbbreviation = _printAbbreviation;
			newViewLoaiHinhDaoTao.StudyTypeEngName = _studyTypeEngName;
			return newViewLoaiHinhDaoTao;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLoaiHinh
		{
			get
			{
				return this._maLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLoaiHinh does not allow null values.");
				if (_maLoaiHinh == value)
					return;
					
				this._maLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiHinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenLoaiHinh
		{
			get
			{
				return this._tenLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenLoaiHinh does not allow null values.");
				if (_tenLoaiHinh == value)
					return;
					
				this._tenLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenLoaiHinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Level property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (byte)0. It is up to the developer
		/// to check the value of IsLevelNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte? Level
		{
			get
			{
				return this._level; 
			}
			set
			{
				if (_level == value && Level != null )
					return;
					
				this._level = value;
				this._isDirty = true;
				
				OnPropertyChanged("Level");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StudyUnitCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StudyUnitCode
		{
			get
			{
				return this._studyUnitCode; 
			}
			set
			{
				if (_studyUnitCode == value)
					return;
					
				this._studyUnitCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("StudyUnitCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Locked property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsLockedNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? Locked
		{
			get
			{
				return this._locked; 
			}
			set
			{
				if (_locked == value && Locked != null )
					return;
					
				this._locked = value;
				this._isDirty = true;
				
				OnPropertyChanged("Locked");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Abbreviation property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Abbreviation
		{
			get
			{
				return this._abbreviation; 
			}
			set
			{
				if (_abbreviation == value)
					return;
					
				this._abbreviation = value;
				this._isDirty = true;
				
				OnPropertyChanged("Abbreviation");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PrintAbbreviation property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PrintAbbreviation
		{
			get
			{
				return this._printAbbreviation; 
			}
			set
			{
				if (_printAbbreviation == value)
					return;
					
				this._printAbbreviation = value;
				this._isDirty = true;
				
				OnPropertyChanged("PrintAbbreviation");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StudyTypeEngName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StudyTypeEngName
		{
			get
			{
				return this._studyTypeEngName; 
			}
			set
			{
				if (_studyTypeEngName == value)
					return;
					
				this._studyTypeEngName = value;
				this._isDirty = true;
				
				OnPropertyChanged("StudyTypeEngName");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_LoaiHinhDaoTao"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewLoaiHinhDaoTaoBase Entity 
		///</summary>
		public virtual ViewLoaiHinhDaoTaoBase Copy()
		{
			//shallow copy entity
			ViewLoaiHinhDaoTao copy = new ViewLoaiHinhDaoTao();
				copy.MaLoaiHinh = this.MaLoaiHinh;
				copy.TenLoaiHinh = this.TenLoaiHinh;
				copy.Level = this.Level;
				copy.StudyUnitCode = this.StudyUnitCode;
				copy.Locked = this.Locked;
				copy.Abbreviation = this.Abbreviation;
				copy.PrintAbbreviation = this.PrintAbbreviation;
				copy.StudyTypeEngName = this.StudyTypeEngName;
			copy.AcceptChanges();
			return (ViewLoaiHinhDaoTao)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewLoaiHinhDaoTaoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewLoaiHinhDaoTaoBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewLoaiHinhDaoTaoBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewLoaiHinhDaoTaoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewLoaiHinhDaoTaoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewLoaiHinhDaoTaoBase Object1, ViewLoaiHinhDaoTaoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaLoaiHinh != Object2.MaLoaiHinh)
				equal = false;
			if (Object1.TenLoaiHinh != Object2.TenLoaiHinh)
				equal = false;
			if (Object1.Level != null && Object2.Level != null )
			{
				if (Object1.Level != Object2.Level)
					equal = false;
			}
			else if (Object1.Level == null ^ Object1.Level == null )
			{
				equal = false;
			}
			if (Object1.StudyUnitCode != null && Object2.StudyUnitCode != null )
			{
				if (Object1.StudyUnitCode != Object2.StudyUnitCode)
					equal = false;
			}
			else if (Object1.StudyUnitCode == null ^ Object1.StudyUnitCode == null )
			{
				equal = false;
			}
			if (Object1.Locked != null && Object2.Locked != null )
			{
				if (Object1.Locked != Object2.Locked)
					equal = false;
			}
			else if (Object1.Locked == null ^ Object1.Locked == null )
			{
				equal = false;
			}
			if (Object1.Abbreviation != null && Object2.Abbreviation != null )
			{
				if (Object1.Abbreviation != Object2.Abbreviation)
					equal = false;
			}
			else if (Object1.Abbreviation == null ^ Object1.Abbreviation == null )
			{
				equal = false;
			}
			if (Object1.PrintAbbreviation != null && Object2.PrintAbbreviation != null )
			{
				if (Object1.PrintAbbreviation != Object2.PrintAbbreviation)
					equal = false;
			}
			else if (Object1.PrintAbbreviation == null ^ Object1.PrintAbbreviation == null )
			{
				equal = false;
			}
			if (Object1.StudyTypeEngName != null && Object2.StudyTypeEngName != null )
			{
				if (Object1.StudyTypeEngName != Object2.StudyTypeEngName)
					equal = false;
			}
			else if (Object1.StudyTypeEngName == null ^ Object1.StudyTypeEngName == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewLoaiHinhDaoTao entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaLoaiHinh":
					return entity.MaLoaiHinh;
				case "TenLoaiHinh":
					return entity.TenLoaiHinh;
				case "Level":
					return entity.Level;
				case "StudyUnitCode":
					return entity.StudyUnitCode;
				case "Locked":
					return entity.Locked;
				case "Abbreviation":
					return entity.Abbreviation;
				case "PrintAbbreviation":
					return entity.PrintAbbreviation;
				case "StudyTypeEngName":
					return entity.StudyTypeEngName;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewLoaiHinhDaoTao, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- MaLoaiHinh: {0}{8}- TenLoaiHinh: {1}{8}- Level: {2}{8}- StudyUnitCode: {3}{8}- Locked: {4}{8}- Abbreviation: {5}{8}- PrintAbbreviation: {6}{8}- StudyTypeEngName: {7}{8}", 
				this.MaLoaiHinh,
				this.TenLoaiHinh,
				(this.Level == null) ? string.Empty : this.Level.ToString(),
			     
				(this.StudyUnitCode == null) ? string.Empty : this.StudyUnitCode.ToString(),
			     
				(this.Locked == null) ? string.Empty : this.Locked.ToString(),
			     
				(this.Abbreviation == null) ? string.Empty : this.Abbreviation.ToString(),
			     
				(this.PrintAbbreviation == null) ? string.Empty : this.PrintAbbreviation.ToString(),
			     
				(this.StudyTypeEngName == null) ? string.Empty : this.StudyTypeEngName.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewLoaiHinhDaoTao columns.
	/// </summary>
	[Serializable]
	public enum ViewLoaiHinhDaoTaoColumn
	{
		/// <summary>
		/// MaLoaiHinh : 
		/// </summary>
		[EnumTextValue("MaLoaiHinh")]
		[ColumnEnum("MaLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaLoaiHinh,
		/// <summary>
		/// TenLoaiHinh : 
		/// </summary>
		[EnumTextValue("TenLoaiHinh")]
		[ColumnEnum("TenLoaiHinh", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		TenLoaiHinh,
		/// <summary>
		/// Level : 
		/// </summary>
		[EnumTextValue("Level")]
		[ColumnEnum("Level", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		Level,
		/// <summary>
		/// StudyUnitCode : 
		/// </summary>
		[EnumTextValue("StudyUnitCode")]
		[ColumnEnum("StudyUnitCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		StudyUnitCode,
		/// <summary>
		/// Locked : 
		/// </summary>
		[EnumTextValue("Locked")]
		[ColumnEnum("Locked", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Locked,
		/// <summary>
		/// Abbreviation : 
		/// </summary>
		[EnumTextValue("Abbreviation")]
		[ColumnEnum("Abbreviation", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Abbreviation,
		/// <summary>
		/// PrintAbbreviation : 
		/// </summary>
		[EnumTextValue("PrintAbbreviation")]
		[ColumnEnum("PrintAbbreviation", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		PrintAbbreviation,
		/// <summary>
		/// StudyTypeEngName : 
		/// </summary>
		[EnumTextValue("StudyTypeEngName")]
		[ColumnEnum("StudyTypeEngName", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		StudyTypeEngName
	}//End enum

} // end namespace
