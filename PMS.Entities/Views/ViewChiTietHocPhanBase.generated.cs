/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewChiTietHocPhan.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_ChiTiet_HocPhan' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewChiTietHocPhanBase")]
	public abstract partial class ViewChiTietHocPhanBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		private System.Int32		  _maLichHoc = (int)0;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.String		  _maGiangVien = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = string.Empty;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = string.Empty;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = string.Empty;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		private System.Decimal?		  _soTinChi = null;
		
		/// <summary>
		/// SoLuong : 
		/// </summary>
		private System.Int32?		  _soLuong = null;
		
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		private System.Byte		  _maLoaiHocPhan = (byte)0;
		
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		private System.String		  _loaiHocPhan = null;
		
		/// <summary>
		/// Nam : 
		/// </summary>
		private System.Int32?		  _nam = null;
		
		/// <summary>
		/// Tuan : 
		/// </summary>
		private System.Int32?		  _tuan = null;
		
		/// <summary>
		/// MaPhong : 
		/// </summary>
		private System.String		  _maPhong = null;
		
		/// <summary>
		/// MaToaNha : 
		/// </summary>
		private System.String		  _maToaNha = null;
		
		/// <summary>
		/// DonViTinh : 
		/// </summary>
		private System.String		  _donViTinh = null;
		
		/// <summary>
		/// MaCoSo : 
		/// </summary>
		private System.String		  _maCoSo = string.Empty;
		
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		private System.Int32?		  _maBuoiHoc = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = null;
		
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		private System.Int32?		  _tietBatDau = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Int32?		  _soTiet = null;
		
		/// <summary>
		/// LoaiHocKy : 
		/// </summary>
		private System.Byte?		  _loaiHocKy = null;
		
		/// <summary>
		/// HeSoCoSo : 
		/// </summary>
		private System.Decimal		  _heSoCoSo = 0.0m;
		
		/// <summary>
		/// HeSoHocKy : 
		/// </summary>
		private System.Decimal		  _heSoHocKy = 0.0m;
		
		/// <summary>
		/// TinhTrang : 
		/// </summary>
		private System.Int32		  _tinhTrang = (int)0;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewChiTietHocPhanBase"/> instance.
		///</summary>
		public ViewChiTietHocPhanBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewChiTietHocPhanBase"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTinChi"></param>
		///<param name="_soLuong"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_nam"></param>
		///<param name="_tuan"></param>
		///<param name="_maPhong"></param>
		///<param name="_maToaNha"></param>
		///<param name="_donViTinh"></param>
		///<param name="_maCoSo"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_loaiHocKy"></param>
		///<param name="_heSoCoSo"></param>
		///<param name="_heSoHocKy"></param>
		///<param name="_tinhTrang"></param>
		public ViewChiTietHocPhanBase(System.Int32 _maLichHoc, System.String _maGiangVien, System.String _maLopHocPhan, System.String _namHoc, System.String _hocKy, System.String _maMonHoc, System.String _tenMonHoc, System.Decimal? _soTinChi, System.Int32? _soLuong, System.Byte _maLoaiHocPhan, System.String _loaiHocPhan, System.Int32? _nam, System.Int32? _tuan, System.String _maPhong, System.String _maToaNha, System.String _donViTinh, System.String _maCoSo, System.Int32? _maBuoiHoc, System.String _maLop, System.Int32? _tietBatDau, System.Int32? _soTiet, System.Byte? _loaiHocKy, System.Decimal _heSoCoSo, System.Decimal _heSoHocKy, System.Int32 _tinhTrang)
		{
			this._maLichHoc = _maLichHoc;
			this._maGiangVien = _maGiangVien;
			this._maLopHocPhan = _maLopHocPhan;
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._soTinChi = _soTinChi;
			this._soLuong = _soLuong;
			this._maLoaiHocPhan = _maLoaiHocPhan;
			this._loaiHocPhan = _loaiHocPhan;
			this._nam = _nam;
			this._tuan = _tuan;
			this._maPhong = _maPhong;
			this._maToaNha = _maToaNha;
			this._donViTinh = _donViTinh;
			this._maCoSo = _maCoSo;
			this._maBuoiHoc = _maBuoiHoc;
			this._maLop = _maLop;
			this._tietBatDau = _tietBatDau;
			this._soTiet = _soTiet;
			this._loaiHocKy = _loaiHocKy;
			this._heSoCoSo = _heSoCoSo;
			this._heSoHocKy = _heSoHocKy;
			this._tinhTrang = _tinhTrang;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewChiTietHocPhan"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTinChi"></param>
		///<param name="_soLuong"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_nam"></param>
		///<param name="_tuan"></param>
		///<param name="_maPhong"></param>
		///<param name="_maToaNha"></param>
		///<param name="_donViTinh"></param>
		///<param name="_maCoSo"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_loaiHocKy"></param>
		///<param name="_heSoCoSo"></param>
		///<param name="_heSoHocKy"></param>
		///<param name="_tinhTrang"></param>
		public static ViewChiTietHocPhan CreateViewChiTietHocPhan(System.Int32 _maLichHoc, System.String _maGiangVien, System.String _maLopHocPhan, System.String _namHoc, System.String _hocKy, System.String _maMonHoc, System.String _tenMonHoc, System.Decimal? _soTinChi, System.Int32? _soLuong, System.Byte _maLoaiHocPhan, System.String _loaiHocPhan, System.Int32? _nam, System.Int32? _tuan, System.String _maPhong, System.String _maToaNha, System.String _donViTinh, System.String _maCoSo, System.Int32? _maBuoiHoc, System.String _maLop, System.Int32? _tietBatDau, System.Int32? _soTiet, System.Byte? _loaiHocKy, System.Decimal _heSoCoSo, System.Decimal _heSoHocKy, System.Int32 _tinhTrang)
		{
			ViewChiTietHocPhan newViewChiTietHocPhan = new ViewChiTietHocPhan();
			newViewChiTietHocPhan.MaLichHoc = _maLichHoc;
			newViewChiTietHocPhan.MaGiangVien = _maGiangVien;
			newViewChiTietHocPhan.MaLopHocPhan = _maLopHocPhan;
			newViewChiTietHocPhan.NamHoc = _namHoc;
			newViewChiTietHocPhan.HocKy = _hocKy;
			newViewChiTietHocPhan.MaMonHoc = _maMonHoc;
			newViewChiTietHocPhan.TenMonHoc = _tenMonHoc;
			newViewChiTietHocPhan.SoTinChi = _soTinChi;
			newViewChiTietHocPhan.SoLuong = _soLuong;
			newViewChiTietHocPhan.MaLoaiHocPhan = _maLoaiHocPhan;
			newViewChiTietHocPhan.LoaiHocPhan = _loaiHocPhan;
			newViewChiTietHocPhan.Nam = _nam;
			newViewChiTietHocPhan.Tuan = _tuan;
			newViewChiTietHocPhan.MaPhong = _maPhong;
			newViewChiTietHocPhan.MaToaNha = _maToaNha;
			newViewChiTietHocPhan.DonViTinh = _donViTinh;
			newViewChiTietHocPhan.MaCoSo = _maCoSo;
			newViewChiTietHocPhan.MaBuoiHoc = _maBuoiHoc;
			newViewChiTietHocPhan.MaLop = _maLop;
			newViewChiTietHocPhan.TietBatDau = _tietBatDau;
			newViewChiTietHocPhan.SoTiet = _soTiet;
			newViewChiTietHocPhan.LoaiHocKy = _loaiHocKy;
			newViewChiTietHocPhan.HeSoCoSo = _heSoCoSo;
			newViewChiTietHocPhan.HeSoHocKy = _heSoHocKy;
			newViewChiTietHocPhan.TinhTrang = _tinhTrang;
			return newViewChiTietHocPhan;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaLichHoc property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaLichHoc
		{
			get
			{
				return this._maLichHoc; 
			}
			set
			{
				if (_maLichHoc == value)
					return;
					
				this._maLichHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLichHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value)
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLopHocPhan does not allow null values.");
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "NamHoc does not allow null values.");
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "HocKy does not allow null values.");
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTinChiNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTinChi
		{
			get
			{
				return this._soTinChi; 
			}
			set
			{
				if (_soTinChi == value && SoTinChi != null )
					return;
					
				this._soTinChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoLuong property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoLuongNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoLuong
		{
			get
			{
				return this._soLuong; 
			}
			set
			{
				if (_soLuong == value && SoLuong != null )
					return;
					
				this._soLuong = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte MaLoaiHocPhan
		{
			get
			{
				return this._maLoaiHocPhan; 
			}
			set
			{
				if (_maLoaiHocPhan == value)
					return;
					
				this._maLoaiHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LoaiHocPhan
		{
			get
			{
				return this._loaiHocPhan; 
			}
			set
			{
				if (_loaiHocPhan == value)
					return;
					
				this._loaiHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("LoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nam property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNamNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Nam
		{
			get
			{
				return this._nam; 
			}
			set
			{
				if (_nam == value && Nam != null )
					return;
					
				this._nam = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Tuan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTuanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Tuan
		{
			get
			{
				return this._tuan; 
			}
			set
			{
				if (_tuan == value && Tuan != null )
					return;
					
				this._tuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("Tuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaPhong property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaPhong
		{
			get
			{
				return this._maPhong; 
			}
			set
			{
				if (_maPhong == value)
					return;
					
				this._maPhong = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaToaNha property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaToaNha
		{
			get
			{
				return this._maToaNha; 
			}
			set
			{
				if (_maToaNha == value)
					return;
					
				this._maToaNha = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaToaNha");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DonViTinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DonViTinh
		{
			get
			{
				return this._donViTinh; 
			}
			set
			{
				if (_donViTinh == value)
					return;
					
				this._donViTinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("DonViTinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaCoSo property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaCoSo
		{
			get
			{
				return this._maCoSo; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaCoSo does not allow null values.");
				if (_maCoSo == value)
					return;
					
				this._maCoSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBuoiHoc property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaBuoiHocNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaBuoiHoc
		{
			get
			{
				return this._maBuoiHoc; 
			}
			set
			{
				if (_maBuoiHoc == value && MaBuoiHoc != null )
					return;
					
				this._maBuoiHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBuoiHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietBatDau property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTietBatDauNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TietBatDau
		{
			get
			{
				return this._tietBatDau; 
			}
			set
			{
				if (_tietBatDau == value && TietBatDau != null )
					return;
					
				this._tietBatDau = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value && SoTiet != null )
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LoaiHocKy property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (byte)0. It is up to the developer
		/// to check the value of IsLoaiHocKyNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte? LoaiHocKy
		{
			get
			{
				return this._loaiHocKy; 
			}
			set
			{
				if (_loaiHocKy == value && LoaiHocKy != null )
					return;
					
				this._loaiHocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("LoaiHocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSoCoSo property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal HeSoCoSo
		{
			get
			{
				return this._heSoCoSo; 
			}
			set
			{
				if (_heSoCoSo == value)
					return;
					
				this._heSoCoSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSoCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSoHocKy property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal HeSoHocKy
		{
			get
			{
				return this._heSoHocKy; 
			}
			set
			{
				if (_heSoHocKy == value)
					return;
					
				this._heSoHocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSoHocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TinhTrang property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 TinhTrang
		{
			get
			{
				return this._tinhTrang; 
			}
			set
			{
				if (_tinhTrang == value)
					return;
					
				this._tinhTrang = value;
				this._isDirty = true;
				
				OnPropertyChanged("TinhTrang");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_ChiTiet_HocPhan"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewChiTietHocPhanBase Entity 
		///</summary>
		public virtual ViewChiTietHocPhanBase Copy()
		{
			//shallow copy entity
			ViewChiTietHocPhan copy = new ViewChiTietHocPhan();
				copy.MaLichHoc = this.MaLichHoc;
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.SoTinChi = this.SoTinChi;
				copy.SoLuong = this.SoLuong;
				copy.MaLoaiHocPhan = this.MaLoaiHocPhan;
				copy.LoaiHocPhan = this.LoaiHocPhan;
				copy.Nam = this.Nam;
				copy.Tuan = this.Tuan;
				copy.MaPhong = this.MaPhong;
				copy.MaToaNha = this.MaToaNha;
				copy.DonViTinh = this.DonViTinh;
				copy.MaCoSo = this.MaCoSo;
				copy.MaBuoiHoc = this.MaBuoiHoc;
				copy.MaLop = this.MaLop;
				copy.TietBatDau = this.TietBatDau;
				copy.SoTiet = this.SoTiet;
				copy.LoaiHocKy = this.LoaiHocKy;
				copy.HeSoCoSo = this.HeSoCoSo;
				copy.HeSoHocKy = this.HeSoHocKy;
				copy.TinhTrang = this.TinhTrang;
			copy.AcceptChanges();
			return (ViewChiTietHocPhan)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewChiTietHocPhanBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewChiTietHocPhanBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewChiTietHocPhanBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewChiTietHocPhanBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewChiTietHocPhanBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewChiTietHocPhanBase Object1, ViewChiTietHocPhanBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaLichHoc != Object2.MaLichHoc)
				equal = false;
			if (Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object1.MaGiangVien == null )
			{
				equal = false;
			}
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if (Object1.NamHoc != Object2.NamHoc)
				equal = false;
			if (Object1.HocKy != Object2.HocKy)
				equal = false;
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.SoTinChi != null && Object2.SoTinChi != null )
			{
				if (Object1.SoTinChi != Object2.SoTinChi)
					equal = false;
			}
			else if (Object1.SoTinChi == null ^ Object1.SoTinChi == null )
			{
				equal = false;
			}
			if (Object1.SoLuong != null && Object2.SoLuong != null )
			{
				if (Object1.SoLuong != Object2.SoLuong)
					equal = false;
			}
			else if (Object1.SoLuong == null ^ Object1.SoLuong == null )
			{
				equal = false;
			}
			if (Object1.MaLoaiHocPhan != Object2.MaLoaiHocPhan)
				equal = false;
			if (Object1.LoaiHocPhan != null && Object2.LoaiHocPhan != null )
			{
				if (Object1.LoaiHocPhan != Object2.LoaiHocPhan)
					equal = false;
			}
			else if (Object1.LoaiHocPhan == null ^ Object1.LoaiHocPhan == null )
			{
				equal = false;
			}
			if (Object1.Nam != null && Object2.Nam != null )
			{
				if (Object1.Nam != Object2.Nam)
					equal = false;
			}
			else if (Object1.Nam == null ^ Object1.Nam == null )
			{
				equal = false;
			}
			if (Object1.Tuan != null && Object2.Tuan != null )
			{
				if (Object1.Tuan != Object2.Tuan)
					equal = false;
			}
			else if (Object1.Tuan == null ^ Object1.Tuan == null )
			{
				equal = false;
			}
			if (Object1.MaPhong != null && Object2.MaPhong != null )
			{
				if (Object1.MaPhong != Object2.MaPhong)
					equal = false;
			}
			else if (Object1.MaPhong == null ^ Object1.MaPhong == null )
			{
				equal = false;
			}
			if (Object1.MaToaNha != null && Object2.MaToaNha != null )
			{
				if (Object1.MaToaNha != Object2.MaToaNha)
					equal = false;
			}
			else if (Object1.MaToaNha == null ^ Object1.MaToaNha == null )
			{
				equal = false;
			}
			if (Object1.DonViTinh != null && Object2.DonViTinh != null )
			{
				if (Object1.DonViTinh != Object2.DonViTinh)
					equal = false;
			}
			else if (Object1.DonViTinh == null ^ Object1.DonViTinh == null )
			{
				equal = false;
			}
			if (Object1.MaCoSo != Object2.MaCoSo)
				equal = false;
			if (Object1.MaBuoiHoc != null && Object2.MaBuoiHoc != null )
			{
				if (Object1.MaBuoiHoc != Object2.MaBuoiHoc)
					equal = false;
			}
			else if (Object1.MaBuoiHoc == null ^ Object1.MaBuoiHoc == null )
			{
				equal = false;
			}
			if (Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object1.MaLop == null )
			{
				equal = false;
			}
			if (Object1.TietBatDau != null && Object2.TietBatDau != null )
			{
				if (Object1.TietBatDau != Object2.TietBatDau)
					equal = false;
			}
			else if (Object1.TietBatDau == null ^ Object1.TietBatDau == null )
			{
				equal = false;
			}
			if (Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object1.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.LoaiHocKy != null && Object2.LoaiHocKy != null )
			{
				if (Object1.LoaiHocKy != Object2.LoaiHocKy)
					equal = false;
			}
			else if (Object1.LoaiHocKy == null ^ Object1.LoaiHocKy == null )
			{
				equal = false;
			}
			if (Object1.HeSoCoSo != Object2.HeSoCoSo)
				equal = false;
			if (Object1.HeSoHocKy != Object2.HeSoHocKy)
				equal = false;
			if (Object1.TinhTrang != Object2.TinhTrang)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewChiTietHocPhan entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaLichHoc":
					return entity.MaLichHoc;
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "SoTinChi":
					return entity.SoTinChi;
				case "SoLuong":
					return entity.SoLuong;
				case "MaLoaiHocPhan":
					return entity.MaLoaiHocPhan;
				case "LoaiHocPhan":
					return entity.LoaiHocPhan;
				case "Nam":
					return entity.Nam;
				case "Tuan":
					return entity.Tuan;
				case "MaPhong":
					return entity.MaPhong;
				case "MaToaNha":
					return entity.MaToaNha;
				case "DonViTinh":
					return entity.DonViTinh;
				case "MaCoSo":
					return entity.MaCoSo;
				case "MaBuoiHoc":
					return entity.MaBuoiHoc;
				case "MaLop":
					return entity.MaLop;
				case "TietBatDau":
					return entity.TietBatDau;
				case "SoTiet":
					return entity.SoTiet;
				case "LoaiHocKy":
					return entity.LoaiHocKy;
				case "HeSoCoSo":
					return entity.HeSoCoSo;
				case "HeSoHocKy":
					return entity.HeSoHocKy;
				case "TinhTrang":
					return entity.TinhTrang;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewChiTietHocPhan, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{26}{25}- MaLichHoc: {0}{25}- MaGiangVien: {1}{25}- MaLopHocPhan: {2}{25}- NamHoc: {3}{25}- HocKy: {4}{25}- MaMonHoc: {5}{25}- TenMonHoc: {6}{25}- SoTinChi: {7}{25}- SoLuong: {8}{25}- MaLoaiHocPhan: {9}{25}- LoaiHocPhan: {10}{25}- Nam: {11}{25}- Tuan: {12}{25}- MaPhong: {13}{25}- MaToaNha: {14}{25}- DonViTinh: {15}{25}- MaCoSo: {16}{25}- MaBuoiHoc: {17}{25}- MaLop: {18}{25}- TietBatDau: {19}{25}- SoTiet: {20}{25}- LoaiHocKy: {21}{25}- HeSoCoSo: {22}{25}- HeSoHocKy: {23}{25}- TinhTrang: {24}{25}", 
				this.MaLichHoc,
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
			     
				this.MaLopHocPhan,
				this.NamHoc,
				this.HocKy,
				this.MaMonHoc,
				this.TenMonHoc,
				(this.SoTinChi == null) ? string.Empty : this.SoTinChi.ToString(),
			     
				(this.SoLuong == null) ? string.Empty : this.SoLuong.ToString(),
			     
				this.MaLoaiHocPhan,
				(this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString(),
			     
				(this.Nam == null) ? string.Empty : this.Nam.ToString(),
			     
				(this.Tuan == null) ? string.Empty : this.Tuan.ToString(),
			     
				(this.MaPhong == null) ? string.Empty : this.MaPhong.ToString(),
			     
				(this.MaToaNha == null) ? string.Empty : this.MaToaNha.ToString(),
			     
				(this.DonViTinh == null) ? string.Empty : this.DonViTinh.ToString(),
			     
				this.MaCoSo,
				(this.MaBuoiHoc == null) ? string.Empty : this.MaBuoiHoc.ToString(),
			     
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
			     
				(this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString(),
			     
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
			     
				(this.LoaiHocKy == null) ? string.Empty : this.LoaiHocKy.ToString(),
			     
				this.HeSoCoSo,
				this.HeSoHocKy,
				this.TinhTrang,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewChiTietHocPhan columns.
	/// </summary>
	[Serializable]
	public enum ViewChiTietHocPhanColumn
	{
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		[EnumTextValue("MaLichHoc")]
		[ColumnEnum("MaLichHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaLichHoc,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGiangVien,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		MaLopHocPhan,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		HocKy,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		TenMonHoc,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("SoTinChi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTinChi,
		/// <summary>
		/// SoLuong : 
		/// </summary>
		[EnumTextValue("SoLuong")]
		[ColumnEnum("SoLuong", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuong,
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		[EnumTextValue("MaLoaiHocPhan")]
		[ColumnEnum("MaLoaiHocPhan", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		MaLoaiHocPhan,
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		[EnumTextValue("LoaiHocPhan")]
		[ColumnEnum("LoaiHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		LoaiHocPhan,
		/// <summary>
		/// Nam : 
		/// </summary>
		[EnumTextValue("Nam")]
		[ColumnEnum("Nam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Nam,
		/// <summary>
		/// Tuan : 
		/// </summary>
		[EnumTextValue("Tuan")]
		[ColumnEnum("Tuan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Tuan,
		/// <summary>
		/// MaPhong : 
		/// </summary>
		[EnumTextValue("MaPhong")]
		[ColumnEnum("MaPhong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaPhong,
		/// <summary>
		/// MaToaNha : 
		/// </summary>
		[EnumTextValue("MaToaNha")]
		[ColumnEnum("MaToaNha", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaToaNha,
		/// <summary>
		/// DonViTinh : 
		/// </summary>
		[EnumTextValue("DonViTinh")]
		[ColumnEnum("DonViTinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		DonViTinh,
		/// <summary>
		/// MaCoSo : 
		/// </summary>
		[EnumTextValue("MaCoSo")]
		[ColumnEnum("MaCoSo", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaCoSo,
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		[EnumTextValue("MaBuoiHoc")]
		[ColumnEnum("MaBuoiHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaBuoiHoc,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaLop,
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		[EnumTextValue("TietBatDau")]
		[ColumnEnum("TietBatDau", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietBatDau,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet,
		/// <summary>
		/// LoaiHocKy : 
		/// </summary>
		[EnumTextValue("LoaiHocKy")]
		[ColumnEnum("LoaiHocKy", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		LoaiHocKy,
		/// <summary>
		/// HeSoCoSo : 
		/// </summary>
		[EnumTextValue("HeSoCoSo")]
		[ColumnEnum("HeSoCoSo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HeSoCoSo,
		/// <summary>
		/// HeSoHocKy : 
		/// </summary>
		[EnumTextValue("HeSoHocKy")]
		[ColumnEnum("HeSoHocKy", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HeSoHocKy,
		/// <summary>
		/// TinhTrang : 
		/// </summary>
		[EnumTextValue("TinhTrang")]
		[ColumnEnum("TinhTrang", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TinhTrang
	}//End enum

} // end namespace
