/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewHeSoLopDongHbu.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_HeSoLopDong_HBU' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewHeSoLopDongHbuBase")]
	public abstract partial class ViewHeSoLopDongHbuBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaNhomMonHoc : 
		/// </summary>
		private System.String		  _maNhomMonHoc = null;
		
		/// <summary>
		/// TenNhomMon : 
		/// </summary>
		private System.String		  _tenNhomMon = null;
		
		/// <summary>
		/// TuKhoan : 
		/// </summary>
		private System.Int32?		  _tuKhoan = null;
		
		/// <summary>
		/// DenKhoan : 
		/// </summary>
		private System.Int32?		  _denKhoan = null;
		
		/// <summary>
		/// HeSo : 
		/// </summary>
		private System.Decimal?		  _heSo = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		private System.String		  _ngayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		private System.String		  _nguoiCapNhat = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewHeSoLopDongHbuBase"/> instance.
		///</summary>
		public ViewHeSoLopDongHbuBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewHeSoLopDongHbuBase"/> instance.
		///</summary>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_tenNhomMon"></param>
		///<param name="_tuKhoan"></param>
		///<param name="_denKhoan"></param>
		///<param name="_heSo"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		public ViewHeSoLopDongHbuBase(System.String _maNhomMonHoc, System.String _tenNhomMon, System.Int32? _tuKhoan, System.Int32? _denKhoan, System.Decimal? _heSo, System.String _ngayCapNhat, System.String _nguoiCapNhat)
		{
			this._maNhomMonHoc = _maNhomMonHoc;
			this._tenNhomMon = _tenNhomMon;
			this._tuKhoan = _tuKhoan;
			this._denKhoan = _denKhoan;
			this._heSo = _heSo;
			this._ngayCapNhat = _ngayCapNhat;
			this._nguoiCapNhat = _nguoiCapNhat;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewHeSoLopDongHbu"/> instance.
		///</summary>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_tenNhomMon"></param>
		///<param name="_tuKhoan"></param>
		///<param name="_denKhoan"></param>
		///<param name="_heSo"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		public static ViewHeSoLopDongHbu CreateViewHeSoLopDongHbu(System.String _maNhomMonHoc, System.String _tenNhomMon, System.Int32? _tuKhoan, System.Int32? _denKhoan, System.Decimal? _heSo, System.String _ngayCapNhat, System.String _nguoiCapNhat)
		{
			ViewHeSoLopDongHbu newViewHeSoLopDongHbu = new ViewHeSoLopDongHbu();
			newViewHeSoLopDongHbu.MaNhomMonHoc = _maNhomMonHoc;
			newViewHeSoLopDongHbu.TenNhomMon = _tenNhomMon;
			newViewHeSoLopDongHbu.TuKhoan = _tuKhoan;
			newViewHeSoLopDongHbu.DenKhoan = _denKhoan;
			newViewHeSoLopDongHbu.HeSo = _heSo;
			newViewHeSoLopDongHbu.NgayCapNhat = _ngayCapNhat;
			newViewHeSoLopDongHbu.NguoiCapNhat = _nguoiCapNhat;
			return newViewHeSoLopDongHbu;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaNhomMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaNhomMonHoc
		{
			get
			{
				return this._maNhomMonHoc; 
			}
			set
			{
				if (_maNhomMonHoc == value)
					return;
					
				this._maNhomMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaNhomMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenNhomMon property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenNhomMon
		{
			get
			{
				return this._tenNhomMon; 
			}
			set
			{
				if (_tenNhomMon == value)
					return;
					
				this._tenNhomMon = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenNhomMon");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TuKhoan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTuKhoanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TuKhoan
		{
			get
			{
				return this._tuKhoan; 
			}
			set
			{
				if (_tuKhoan == value && TuKhoan != null )
					return;
					
				this._tuKhoan = value;
				this._isDirty = true;
				
				OnPropertyChanged("TuKhoan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DenKhoan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDenKhoanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? DenKhoan
		{
			get
			{
				return this._denKhoan; 
			}
			set
			{
				if (_denKhoan == value && DenKhoan != null )
					return;
					
				this._denKhoan = value;
				this._isDirty = true;
				
				OnPropertyChanged("DenKhoan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSo property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHeSoNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? HeSo
		{
			get
			{
				return this._heSo; 
			}
			set
			{
				if (_heSo == value && HeSo != null )
					return;
					
				this._heSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this._ngayCapNhat; 
			}
			set
			{
				if (_ngayCapNhat == value)
					return;
					
				this._ngayCapNhat = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this._nguoiCapNhat; 
			}
			set
			{
				if (_nguoiCapNhat == value)
					return;
					
				this._nguoiCapNhat = value;
				this._isDirty = true;
				
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_HeSoLopDong_HBU"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewHeSoLopDongHbuBase Entity 
		///</summary>
		public virtual ViewHeSoLopDongHbuBase Copy()
		{
			//shallow copy entity
			ViewHeSoLopDongHbu copy = new ViewHeSoLopDongHbu();
				copy.MaNhomMonHoc = this.MaNhomMonHoc;
				copy.TenNhomMon = this.TenNhomMon;
				copy.TuKhoan = this.TuKhoan;
				copy.DenKhoan = this.DenKhoan;
				copy.HeSo = this.HeSo;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
			copy.AcceptChanges();
			return (ViewHeSoLopDongHbu)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewHeSoLopDongHbuBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewHeSoLopDongHbuBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewHeSoLopDongHbuBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewHeSoLopDongHbuBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewHeSoLopDongHbuBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewHeSoLopDongHbuBase Object1, ViewHeSoLopDongHbuBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaNhomMonHoc != null && Object2.MaNhomMonHoc != null )
			{
				if (Object1.MaNhomMonHoc != Object2.MaNhomMonHoc)
					equal = false;
			}
			else if (Object1.MaNhomMonHoc == null ^ Object1.MaNhomMonHoc == null )
			{
				equal = false;
			}
			if (Object1.TenNhomMon != null && Object2.TenNhomMon != null )
			{
				if (Object1.TenNhomMon != Object2.TenNhomMon)
					equal = false;
			}
			else if (Object1.TenNhomMon == null ^ Object1.TenNhomMon == null )
			{
				equal = false;
			}
			if (Object1.TuKhoan != null && Object2.TuKhoan != null )
			{
				if (Object1.TuKhoan != Object2.TuKhoan)
					equal = false;
			}
			else if (Object1.TuKhoan == null ^ Object1.TuKhoan == null )
			{
				equal = false;
			}
			if (Object1.DenKhoan != null && Object2.DenKhoan != null )
			{
				if (Object1.DenKhoan != Object2.DenKhoan)
					equal = false;
			}
			else if (Object1.DenKhoan == null ^ Object1.DenKhoan == null )
			{
				equal = false;
			}
			if (Object1.HeSo != null && Object2.HeSo != null )
			{
				if (Object1.HeSo != Object2.HeSo)
					equal = false;
			}
			else if (Object1.HeSo == null ^ Object1.HeSo == null )
			{
				equal = false;
			}
			if (Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object1.NgayCapNhat == null )
			{
				equal = false;
			}
			if (Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object1.NguoiCapNhat == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewHeSoLopDongHbu entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaNhomMonHoc":
					return entity.MaNhomMonHoc;
				case "TenNhomMon":
					return entity.TenNhomMon;
				case "TuKhoan":
					return entity.TuKhoan;
				case "DenKhoan":
					return entity.DenKhoan;
				case "HeSo":
					return entity.HeSo;
				case "NgayCapNhat":
					return entity.NgayCapNhat;
				case "NguoiCapNhat":
					return entity.NguoiCapNhat;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewHeSoLopDongHbu, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- MaNhomMonHoc: {0}{7}- TenNhomMon: {1}{7}- TuKhoan: {2}{7}- DenKhoan: {3}{7}- HeSo: {4}{7}- NgayCapNhat: {5}{7}- NguoiCapNhat: {6}{7}", 
				(this.MaNhomMonHoc == null) ? string.Empty : this.MaNhomMonHoc.ToString(),
			     
				(this.TenNhomMon == null) ? string.Empty : this.TenNhomMon.ToString(),
			     
				(this.TuKhoan == null) ? string.Empty : this.TuKhoan.ToString(),
			     
				(this.DenKhoan == null) ? string.Empty : this.DenKhoan.ToString(),
			     
				(this.HeSo == null) ? string.Empty : this.HeSo.ToString(),
			     
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
			     
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewHeSoLopDongHbu columns.
	/// </summary>
	[Serializable]
	public enum ViewHeSoLopDongHbuColumn
	{
		/// <summary>
		/// MaNhomMonHoc : 
		/// </summary>
		[EnumTextValue("MaNhomMonHoc")]
		[ColumnEnum("MaNhomMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaNhomMonHoc,
		/// <summary>
		/// TenNhomMon : 
		/// </summary>
		[EnumTextValue("TenNhomMon")]
		[ColumnEnum("TenNhomMon", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenNhomMon,
		/// <summary>
		/// TuKhoan : 
		/// </summary>
		[EnumTextValue("TuKhoan")]
		[ColumnEnum("TuKhoan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TuKhoan,
		/// <summary>
		/// DenKhoan : 
		/// </summary>
		[EnumTextValue("DenKhoan")]
		[ColumnEnum("DenKhoan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DenKhoan,
		/// <summary>
		/// HeSo : 
		/// </summary>
		[EnumTextValue("HeSo")]
		[ColumnEnum("HeSo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSo,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("NgayCapNhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		NgayCapNhat,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("NguoiCapNhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat
	}//End enum

} // end namespace
