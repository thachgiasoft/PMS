/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewGiangVien.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_GiangVien' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewGiangVienBase")]
	public abstract partial class ViewGiangVienBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ThuTu : 
		/// </summary>
		private System.Int64?		  _thuTu = null;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.Int32		  _maGiangVien = (int)0;
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		private System.String		  _maQuanLy = string.Empty;
		
		/// <summary>
		/// Ho : 
		/// </summary>
		private System.String		  _ho = null;
		
		/// <summary>
		/// Ten : 
		/// </summary>
		private System.String		  _ten = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// GioiTinh : 
		/// </summary>
		private System.String		  _gioiTinh = string.Empty;
		
		/// <summary>
		/// NgaySinh : 
		/// </summary>
		private System.String		  _ngaySinh = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		private System.Int32?		  _maHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		private System.Int32?		  _maHocVi = null;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		private System.Int32?		  _maLoaiGiangVien = null;
		
		/// <summary>
		/// TenHocHam : 
		/// </summary>
		private System.String		  _tenHocHam = null;
		
		/// <summary>
		/// TenHocVi : 
		/// </summary>
		private System.String		  _tenHocVi = null;
		
		/// <summary>
		/// TenLoaiGiangVien : 
		/// </summary>
		private System.String		  _tenLoaiGiangVien = null;
		
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		private System.String		  _maDonVi = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		private System.Decimal		  _donGia = 0.0m;
		
		/// <summary>
		/// TenDonVi : 
		/// </summary>
		private System.String		  _tenDonVi = string.Empty;
		
		/// <summary>
		/// KhoaTaiKhoan : 
		/// </summary>
		private System.Boolean?		  _khoaTaiKhoan = null;
		
		/// <summary>
		/// Cmnd : 
		/// </summary>
		private System.String		  _cmnd = null;
		
		/// <summary>
		/// ChuyenNganh : 
		/// </summary>
		private System.String		  _chuyenNganh = null;
		
		/// <summary>
		/// MaSoThue : 
		/// </summary>
		private System.String		  _maSoThue = null;
		
		/// <summary>
		/// NoiLamViec : 
		/// </summary>
		private System.String		  _noiLamViec = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewGiangVienBase"/> instance.
		///</summary>
		public ViewGiangVienBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewGiangVienBase"/> instance.
		///</summary>
		///<param name="_thuTu"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_hoTen"></param>
		///<param name="_gioiTinh"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_tenLoaiGiangVien"></param>
		///<param name="_maDonVi"></param>
		///<param name="_donGia"></param>
		///<param name="_tenDonVi"></param>
		///<param name="_khoaTaiKhoan"></param>
		///<param name="_cmnd"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maSoThue"></param>
		///<param name="_noiLamViec"></param>
		public ViewGiangVienBase(System.Int64? _thuTu, System.Int32 _maGiangVien, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _hoTen, System.String _gioiTinh, System.String _ngaySinh, System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien, System.String _tenHocHam, System.String _tenHocVi, System.String _tenLoaiGiangVien, System.String _maDonVi, System.Decimal _donGia, System.String _tenDonVi, System.Boolean? _khoaTaiKhoan, System.String _cmnd, System.String _chuyenNganh, System.String _maSoThue, System.String _noiLamViec)
		{
			this._thuTu = _thuTu;
			this._maGiangVien = _maGiangVien;
			this._maQuanLy = _maQuanLy;
			this._ho = _ho;
			this._ten = _ten;
			this._hoTen = _hoTen;
			this._gioiTinh = _gioiTinh;
			this._ngaySinh = _ngaySinh;
			this._maHocHam = _maHocHam;
			this._maHocVi = _maHocVi;
			this._maLoaiGiangVien = _maLoaiGiangVien;
			this._tenHocHam = _tenHocHam;
			this._tenHocVi = _tenHocVi;
			this._tenLoaiGiangVien = _tenLoaiGiangVien;
			this._maDonVi = _maDonVi;
			this._donGia = _donGia;
			this._tenDonVi = _tenDonVi;
			this._khoaTaiKhoan = _khoaTaiKhoan;
			this._cmnd = _cmnd;
			this._chuyenNganh = _chuyenNganh;
			this._maSoThue = _maSoThue;
			this._noiLamViec = _noiLamViec;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewGiangVien"/> instance.
		///</summary>
		///<param name="_thuTu"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_hoTen"></param>
		///<param name="_gioiTinh"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_tenLoaiGiangVien"></param>
		///<param name="_maDonVi"></param>
		///<param name="_donGia"></param>
		///<param name="_tenDonVi"></param>
		///<param name="_khoaTaiKhoan"></param>
		///<param name="_cmnd"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maSoThue"></param>
		///<param name="_noiLamViec"></param>
		public static ViewGiangVien CreateViewGiangVien(System.Int64? _thuTu, System.Int32 _maGiangVien, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _hoTen, System.String _gioiTinh, System.String _ngaySinh, System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien, System.String _tenHocHam, System.String _tenHocVi, System.String _tenLoaiGiangVien, System.String _maDonVi, System.Decimal _donGia, System.String _tenDonVi, System.Boolean? _khoaTaiKhoan, System.String _cmnd, System.String _chuyenNganh, System.String _maSoThue, System.String _noiLamViec)
		{
			ViewGiangVien newViewGiangVien = new ViewGiangVien();
			newViewGiangVien.ThuTu = _thuTu;
			newViewGiangVien.MaGiangVien = _maGiangVien;
			newViewGiangVien.MaQuanLy = _maQuanLy;
			newViewGiangVien.Ho = _ho;
			newViewGiangVien.Ten = _ten;
			newViewGiangVien.HoTen = _hoTen;
			newViewGiangVien.GioiTinh = _gioiTinh;
			newViewGiangVien.NgaySinh = _ngaySinh;
			newViewGiangVien.MaHocHam = _maHocHam;
			newViewGiangVien.MaHocVi = _maHocVi;
			newViewGiangVien.MaLoaiGiangVien = _maLoaiGiangVien;
			newViewGiangVien.TenHocHam = _tenHocHam;
			newViewGiangVien.TenHocVi = _tenHocVi;
			newViewGiangVien.TenLoaiGiangVien = _tenLoaiGiangVien;
			newViewGiangVien.MaDonVi = _maDonVi;
			newViewGiangVien.DonGia = _donGia;
			newViewGiangVien.TenDonVi = _tenDonVi;
			newViewGiangVien.KhoaTaiKhoan = _khoaTaiKhoan;
			newViewGiangVien.Cmnd = _cmnd;
			newViewGiangVien.ChuyenNganh = _chuyenNganh;
			newViewGiangVien.MaSoThue = _maSoThue;
			newViewGiangVien.NoiLamViec = _noiLamViec;
			return newViewGiangVien;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ThuTu property. 
		///		
		/// </summary>
		/// <value>This type is bigint</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsThuTuNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int64? ThuTu
		{
			get
			{
				return this._thuTu; 
			}
			set
			{
				if (_thuTu == value && ThuTu != null )
					return;
					
				this._thuTu = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThuTu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value)
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this._maQuanLy; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaQuanLy does not allow null values.");
				if (_maQuanLy == value)
					return;
					
				this._maQuanLy = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ho property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ho
		{
			get
			{
				return this._ho; 
			}
			set
			{
				if (_ho == value)
					return;
					
				this._ho = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ho");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ten property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ten
		{
			get
			{
				return this._ten; 
			}
			set
			{
				if (_ten == value)
					return;
					
				this._ten = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ten");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GioiTinh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GioiTinh
		{
			get
			{
				return this._gioiTinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "GioiTinh does not allow null values.");
				if (_gioiTinh == value)
					return;
					
				this._gioiTinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("GioiTinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgaySinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NgaySinh
		{
			get
			{
				return this._ngaySinh; 
			}
			set
			{
				if (_ngaySinh == value)
					return;
					
				this._ngaySinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgaySinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaHocHamNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this._maHocHam; 
			}
			set
			{
				if (_maHocHam == value && MaHocHam != null )
					return;
					
				this._maHocHam = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaHocViNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this._maHocVi; 
			}
			set
			{
				if (_maHocVi == value && MaHocVi != null )
					return;
					
				this._maHocVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaLoaiGiangVienNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this._maLoaiGiangVien; 
			}
			set
			{
				if (_maLoaiGiangVien == value && MaLoaiGiangVien != null )
					return;
					
				this._maLoaiGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocHam property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocHam
		{
			get
			{
				return this._tenHocHam; 
			}
			set
			{
				if (_tenHocHam == value)
					return;
					
				this._tenHocHam = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocVi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocVi
		{
			get
			{
				return this._tenHocVi; 
			}
			set
			{
				if (_tenHocVi == value)
					return;
					
				this._tenHocVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenLoaiGiangVien
		{
			get
			{
				return this._tenLoaiGiangVien; 
			}
			set
			{
				if (_tenLoaiGiangVien == value)
					return;
					
				this._tenLoaiGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaDonVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaDonVi
		{
			get
			{
				return this._maDonVi; 
			}
			set
			{
				if (_maDonVi == value)
					return;
					
				this._maDonVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal DonGia
		{
			get
			{
				return this._donGia; 
			}
			set
			{
				if (_donGia == value)
					return;
					
				this._donGia = value;
				this._isDirty = true;
				
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenDonVi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenDonVi
		{
			get
			{
				return this._tenDonVi; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenDonVi does not allow null values.");
				if (_tenDonVi == value)
					return;
					
				this._tenDonVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the KhoaTaiKhoan property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsKhoaTaiKhoanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? KhoaTaiKhoan
		{
			get
			{
				return this._khoaTaiKhoan; 
			}
			set
			{
				if (_khoaTaiKhoan == value && KhoaTaiKhoan != null )
					return;
					
				this._khoaTaiKhoan = value;
				this._isDirty = true;
				
				OnPropertyChanged("KhoaTaiKhoan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Cmnd property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Cmnd
		{
			get
			{
				return this._cmnd; 
			}
			set
			{
				if (_cmnd == value)
					return;
					
				this._cmnd = value;
				this._isDirty = true;
				
				OnPropertyChanged("Cmnd");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ChuyenNganh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ChuyenNganh
		{
			get
			{
				return this._chuyenNganh; 
			}
			set
			{
				if (_chuyenNganh == value)
					return;
					
				this._chuyenNganh = value;
				this._isDirty = true;
				
				OnPropertyChanged("ChuyenNganh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaSoThue property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaSoThue
		{
			get
			{
				return this._maSoThue; 
			}
			set
			{
				if (_maSoThue == value)
					return;
					
				this._maSoThue = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaSoThue");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NoiLamViec property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NoiLamViec
		{
			get
			{
				return this._noiLamViec; 
			}
			set
			{
				if (_noiLamViec == value)
					return;
					
				this._noiLamViec = value;
				this._isDirty = true;
				
				OnPropertyChanged("NoiLamViec");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_GiangVien"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewGiangVienBase Entity 
		///</summary>
		public virtual ViewGiangVienBase Copy()
		{
			//shallow copy entity
			ViewGiangVien copy = new ViewGiangVien();
				copy.ThuTu = this.ThuTu;
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaQuanLy = this.MaQuanLy;
				copy.Ho = this.Ho;
				copy.Ten = this.Ten;
				copy.HoTen = this.HoTen;
				copy.GioiTinh = this.GioiTinh;
				copy.NgaySinh = this.NgaySinh;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.TenHocHam = this.TenHocHam;
				copy.TenHocVi = this.TenHocVi;
				copy.TenLoaiGiangVien = this.TenLoaiGiangVien;
				copy.MaDonVi = this.MaDonVi;
				copy.DonGia = this.DonGia;
				copy.TenDonVi = this.TenDonVi;
				copy.KhoaTaiKhoan = this.KhoaTaiKhoan;
				copy.Cmnd = this.Cmnd;
				copy.ChuyenNganh = this.ChuyenNganh;
				copy.MaSoThue = this.MaSoThue;
				copy.NoiLamViec = this.NoiLamViec;
			copy.AcceptChanges();
			return (ViewGiangVien)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewGiangVienBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewGiangVienBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewGiangVienBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewGiangVienBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewGiangVienBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewGiangVienBase Object1, ViewGiangVienBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.ThuTu != null && Object2.ThuTu != null )
			{
				if (Object1.ThuTu != Object2.ThuTu)
					equal = false;
			}
			else if (Object1.ThuTu == null ^ Object1.ThuTu == null )
			{
				equal = false;
			}
			if (Object1.MaGiangVien != Object2.MaGiangVien)
				equal = false;
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if (Object1.Ho != null && Object2.Ho != null )
			{
				if (Object1.Ho != Object2.Ho)
					equal = false;
			}
			else if (Object1.Ho == null ^ Object1.Ho == null )
			{
				equal = false;
			}
			if (Object1.Ten != null && Object2.Ten != null )
			{
				if (Object1.Ten != Object2.Ten)
					equal = false;
			}
			else if (Object1.Ten == null ^ Object1.Ten == null )
			{
				equal = false;
			}
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.GioiTinh != Object2.GioiTinh)
				equal = false;
			if (Object1.NgaySinh != null && Object2.NgaySinh != null )
			{
				if (Object1.NgaySinh != Object2.NgaySinh)
					equal = false;
			}
			else if (Object1.NgaySinh == null ^ Object1.NgaySinh == null )
			{
				equal = false;
			}
			if (Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object1.MaHocHam == null )
			{
				equal = false;
			}
			if (Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object1.MaHocVi == null )
			{
				equal = false;
			}
			if (Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object1.MaLoaiGiangVien == null )
			{
				equal = false;
			}
			if (Object1.TenHocHam != null && Object2.TenHocHam != null )
			{
				if (Object1.TenHocHam != Object2.TenHocHam)
					equal = false;
			}
			else if (Object1.TenHocHam == null ^ Object1.TenHocHam == null )
			{
				equal = false;
			}
			if (Object1.TenHocVi != null && Object2.TenHocVi != null )
			{
				if (Object1.TenHocVi != Object2.TenHocVi)
					equal = false;
			}
			else if (Object1.TenHocVi == null ^ Object1.TenHocVi == null )
			{
				equal = false;
			}
			if (Object1.TenLoaiGiangVien != null && Object2.TenLoaiGiangVien != null )
			{
				if (Object1.TenLoaiGiangVien != Object2.TenLoaiGiangVien)
					equal = false;
			}
			else if (Object1.TenLoaiGiangVien == null ^ Object1.TenLoaiGiangVien == null )
			{
				equal = false;
			}
			if (Object1.MaDonVi != null && Object2.MaDonVi != null )
			{
				if (Object1.MaDonVi != Object2.MaDonVi)
					equal = false;
			}
			else if (Object1.MaDonVi == null ^ Object1.MaDonVi == null )
			{
				equal = false;
			}
			if (Object1.DonGia != Object2.DonGia)
				equal = false;
			if (Object1.TenDonVi != Object2.TenDonVi)
				equal = false;
			if (Object1.KhoaTaiKhoan != null && Object2.KhoaTaiKhoan != null )
			{
				if (Object1.KhoaTaiKhoan != Object2.KhoaTaiKhoan)
					equal = false;
			}
			else if (Object1.KhoaTaiKhoan == null ^ Object1.KhoaTaiKhoan == null )
			{
				equal = false;
			}
			if (Object1.Cmnd != null && Object2.Cmnd != null )
			{
				if (Object1.Cmnd != Object2.Cmnd)
					equal = false;
			}
			else if (Object1.Cmnd == null ^ Object1.Cmnd == null )
			{
				equal = false;
			}
			if (Object1.ChuyenNganh != null && Object2.ChuyenNganh != null )
			{
				if (Object1.ChuyenNganh != Object2.ChuyenNganh)
					equal = false;
			}
			else if (Object1.ChuyenNganh == null ^ Object1.ChuyenNganh == null )
			{
				equal = false;
			}
			if (Object1.MaSoThue != null && Object2.MaSoThue != null )
			{
				if (Object1.MaSoThue != Object2.MaSoThue)
					equal = false;
			}
			else if (Object1.MaSoThue == null ^ Object1.MaSoThue == null )
			{
				equal = false;
			}
			if (Object1.NoiLamViec != null && Object2.NoiLamViec != null )
			{
				if (Object1.NoiLamViec != Object2.NoiLamViec)
					equal = false;
			}
			else if (Object1.NoiLamViec == null ^ Object1.NoiLamViec == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewGiangVien entity, string propertyName)
		{
			switch (propertyName)
			{
				case "ThuTu":
					return entity.ThuTu;
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "MaQuanLy":
					return entity.MaQuanLy;
				case "Ho":
					return entity.Ho;
				case "Ten":
					return entity.Ten;
				case "HoTen":
					return entity.HoTen;
				case "GioiTinh":
					return entity.GioiTinh;
				case "NgaySinh":
					return entity.NgaySinh;
				case "MaHocHam":
					return entity.MaHocHam;
				case "MaHocVi":
					return entity.MaHocVi;
				case "MaLoaiGiangVien":
					return entity.MaLoaiGiangVien;
				case "TenHocHam":
					return entity.TenHocHam;
				case "TenHocVi":
					return entity.TenHocVi;
				case "TenLoaiGiangVien":
					return entity.TenLoaiGiangVien;
				case "MaDonVi":
					return entity.MaDonVi;
				case "DonGia":
					return entity.DonGia;
				case "TenDonVi":
					return entity.TenDonVi;
				case "KhoaTaiKhoan":
					return entity.KhoaTaiKhoan;
				case "Cmnd":
					return entity.Cmnd;
				case "ChuyenNganh":
					return entity.ChuyenNganh;
				case "MaSoThue":
					return entity.MaSoThue;
				case "NoiLamViec":
					return entity.NoiLamViec;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewGiangVien, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- ThuTu: {0}{22}- MaGiangVien: {1}{22}- MaQuanLy: {2}{22}- Ho: {3}{22}- Ten: {4}{22}- HoTen: {5}{22}- GioiTinh: {6}{22}- NgaySinh: {7}{22}- MaHocHam: {8}{22}- MaHocVi: {9}{22}- MaLoaiGiangVien: {10}{22}- TenHocHam: {11}{22}- TenHocVi: {12}{22}- TenLoaiGiangVien: {13}{22}- MaDonVi: {14}{22}- DonGia: {15}{22}- TenDonVi: {16}{22}- KhoaTaiKhoan: {17}{22}- Cmnd: {18}{22}- ChuyenNganh: {19}{22}- MaSoThue: {20}{22}- NoiLamViec: {21}{22}", 
				(this.ThuTu == null) ? string.Empty : this.ThuTu.ToString(),
			     
				this.MaGiangVien,
				this.MaQuanLy,
				(this.Ho == null) ? string.Empty : this.Ho.ToString(),
			     
				(this.Ten == null) ? string.Empty : this.Ten.ToString(),
			     
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				this.GioiTinh,
				(this.NgaySinh == null) ? string.Empty : this.NgaySinh.ToString(),
			     
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
			     
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
			     
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
			     
				(this.TenHocHam == null) ? string.Empty : this.TenHocHam.ToString(),
			     
				(this.TenHocVi == null) ? string.Empty : this.TenHocVi.ToString(),
			     
				(this.TenLoaiGiangVien == null) ? string.Empty : this.TenLoaiGiangVien.ToString(),
			     
				(this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString(),
			     
				this.DonGia,
				this.TenDonVi,
				(this.KhoaTaiKhoan == null) ? string.Empty : this.KhoaTaiKhoan.ToString(),
			     
				(this.Cmnd == null) ? string.Empty : this.Cmnd.ToString(),
			     
				(this.ChuyenNganh == null) ? string.Empty : this.ChuyenNganh.ToString(),
			     
				(this.MaSoThue == null) ? string.Empty : this.MaSoThue.ToString(),
			     
				(this.NoiLamViec == null) ? string.Empty : this.NoiLamViec.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewGiangVien columns.
	/// </summary>
	[Serializable]
	public enum ViewGiangVienColumn
	{
		/// <summary>
		/// ThuTu : 
		/// </summary>
		[EnumTextValue("ThuTu")]
		[ColumnEnum("ThuTu", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ThuTu,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaGiangVien,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("MaQuanLy")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaQuanLy,
		/// <summary>
		/// Ho : 
		/// </summary>
		[EnumTextValue("Ho")]
		[ColumnEnum("Ho", typeof(System.String), System.Data.DbType.String, false, false, true, 101)]
		Ho,
		/// <summary>
		/// Ten : 
		/// </summary>
		[EnumTextValue("Ten")]
		[ColumnEnum("Ten", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Ten,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		HoTen,
		/// <summary>
		/// GioiTinh : 
		/// </summary>
		[EnumTextValue("GioiTinh")]
		[ColumnEnum("GioiTinh", typeof(System.String), System.Data.DbType.String, false, false, false, 3)]
		GioiTinh,
		/// <summary>
		/// NgaySinh : 
		/// </summary>
		[EnumTextValue("NgaySinh")]
		[ColumnEnum("NgaySinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		NgaySinh,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("MaHocHam")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("MaHocVi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("MaLoaiGiangVien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien,
		/// <summary>
		/// TenHocHam : 
		/// </summary>
		[EnumTextValue("TenHocHam")]
		[ColumnEnum("TenHocHam", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenHocHam,
		/// <summary>
		/// TenHocVi : 
		/// </summary>
		[EnumTextValue("TenHocVi")]
		[ColumnEnum("TenHocVi", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenHocVi,
		/// <summary>
		/// TenLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("TenLoaiGiangVien")]
		[ColumnEnum("TenLoaiGiangVien", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TenLoaiGiangVien,
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		[EnumTextValue("MaDonVi")]
		[ColumnEnum("MaDonVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDonVi,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("DonGia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DonGia,
		/// <summary>
		/// TenDonVi : 
		/// </summary>
		[EnumTextValue("TenDonVi")]
		[ColumnEnum("TenDonVi", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenDonVi,
		/// <summary>
		/// KhoaTaiKhoan : 
		/// </summary>
		[EnumTextValue("KhoaTaiKhoan")]
		[ColumnEnum("KhoaTaiKhoan", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		KhoaTaiKhoan,
		/// <summary>
		/// Cmnd : 
		/// </summary>
		[EnumTextValue("Cmnd")]
		[ColumnEnum("Cmnd", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Cmnd,
		/// <summary>
		/// ChuyenNganh : 
		/// </summary>
		[EnumTextValue("ChuyenNganh")]
		[ColumnEnum("ChuyenNganh", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		ChuyenNganh,
		/// <summary>
		/// MaSoThue : 
		/// </summary>
		[EnumTextValue("MaSoThue")]
		[ColumnEnum("MaSoThue", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaSoThue,
		/// <summary>
		/// NoiLamViec : 
		/// </summary>
		[EnumTextValue("NoiLamViec")]
		[ColumnEnum("NoiLamViec", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		NoiLamViec
	}//End enum

} // end namespace
