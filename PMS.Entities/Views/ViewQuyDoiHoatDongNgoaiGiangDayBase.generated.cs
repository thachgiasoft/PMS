/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewQuyDoiHoatDongNgoaiGiangDay.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'view_QuyDoiHoatDongNgoaiGiangDay' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewQuyDoiHoatDongNgoaiGiangDayBase")]
	public abstract partial class ViewQuyDoiHoatDongNgoaiGiangDayBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = null;
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		private System.String		  _maQuanLy = string.Empty;
		
		/// <summary>
		/// Ho : 
		/// </summary>
		private System.String		  _ho = null;
		
		/// <summary>
		/// Ten : 
		/// </summary>
		private System.String		  _ten = null;
		
		/// <summary>
		/// TenHoatDong : 
		/// </summary>
		private System.String		  _tenHoatDong = null;
		
		/// <summary>
		/// SoLuong : 
		/// </summary>
		private System.Decimal?		  _soLuong = null;
		
		/// <summary>
		/// MucQuyDoi : 
		/// </summary>
		private System.Decimal?		  _mucQuyDoi = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		private System.Decimal?		  _donGia = null;
		
		/// <summary>
		/// SoTietQuyDoi : 
		/// </summary>
		private System.Decimal?		  _soTietQuyDoi = null;
		
		/// <summary>
		/// SoTien : 
		/// </summary>
		private System.Decimal?		  _soTien = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewQuyDoiHoatDongNgoaiGiangDayBase"/> instance.
		///</summary>
		public ViewQuyDoiHoatDongNgoaiGiangDayBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewQuyDoiHoatDongNgoaiGiangDayBase"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_tenHoatDong"></param>
		///<param name="_soLuong"></param>
		///<param name="_mucQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_soTietQuyDoi"></param>
		///<param name="_soTien"></param>
		///<param name="_maLop"></param>
		public ViewQuyDoiHoatDongNgoaiGiangDayBase(System.String _namHoc, System.String _hocKy, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _tenHoatDong, System.Decimal? _soLuong, System.Decimal? _mucQuyDoi, System.Decimal? _donGia, System.Decimal? _soTietQuyDoi, System.Decimal? _soTien, System.String _maLop)
		{
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._maQuanLy = _maQuanLy;
			this._ho = _ho;
			this._ten = _ten;
			this._tenHoatDong = _tenHoatDong;
			this._soLuong = _soLuong;
			this._mucQuyDoi = _mucQuyDoi;
			this._donGia = _donGia;
			this._soTietQuyDoi = _soTietQuyDoi;
			this._soTien = _soTien;
			this._maLop = _maLop;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewQuyDoiHoatDongNgoaiGiangDay"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_tenHoatDong"></param>
		///<param name="_soLuong"></param>
		///<param name="_mucQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_soTietQuyDoi"></param>
		///<param name="_soTien"></param>
		///<param name="_maLop"></param>
		public static ViewQuyDoiHoatDongNgoaiGiangDay CreateViewQuyDoiHoatDongNgoaiGiangDay(System.String _namHoc, System.String _hocKy, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _tenHoatDong, System.Decimal? _soLuong, System.Decimal? _mucQuyDoi, System.Decimal? _donGia, System.Decimal? _soTietQuyDoi, System.Decimal? _soTien, System.String _maLop)
		{
			ViewQuyDoiHoatDongNgoaiGiangDay newViewQuyDoiHoatDongNgoaiGiangDay = new ViewQuyDoiHoatDongNgoaiGiangDay();
			newViewQuyDoiHoatDongNgoaiGiangDay.NamHoc = _namHoc;
			newViewQuyDoiHoatDongNgoaiGiangDay.HocKy = _hocKy;
			newViewQuyDoiHoatDongNgoaiGiangDay.MaQuanLy = _maQuanLy;
			newViewQuyDoiHoatDongNgoaiGiangDay.Ho = _ho;
			newViewQuyDoiHoatDongNgoaiGiangDay.Ten = _ten;
			newViewQuyDoiHoatDongNgoaiGiangDay.TenHoatDong = _tenHoatDong;
			newViewQuyDoiHoatDongNgoaiGiangDay.SoLuong = _soLuong;
			newViewQuyDoiHoatDongNgoaiGiangDay.MucQuyDoi = _mucQuyDoi;
			newViewQuyDoiHoatDongNgoaiGiangDay.DonGia = _donGia;
			newViewQuyDoiHoatDongNgoaiGiangDay.SoTietQuyDoi = _soTietQuyDoi;
			newViewQuyDoiHoatDongNgoaiGiangDay.SoTien = _soTien;
			newViewQuyDoiHoatDongNgoaiGiangDay.MaLop = _maLop;
			return newViewQuyDoiHoatDongNgoaiGiangDay;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this._maQuanLy; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaQuanLy does not allow null values.");
				if (_maQuanLy == value)
					return;
					
				this._maQuanLy = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ho property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ho
		{
			get
			{
				return this._ho; 
			}
			set
			{
				if (_ho == value)
					return;
					
				this._ho = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ho");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ten property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ten
		{
			get
			{
				return this._ten; 
			}
			set
			{
				if (_ten == value)
					return;
					
				this._ten = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ten");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHoatDong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHoatDong
		{
			get
			{
				return this._tenHoatDong; 
			}
			set
			{
				if (_tenHoatDong == value)
					return;
					
				this._tenHoatDong = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHoatDong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoLuong property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoLuongNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoLuong
		{
			get
			{
				return this._soLuong; 
			}
			set
			{
				if (_soLuong == value && SoLuong != null )
					return;
					
				this._soLuong = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MucQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMucQuyDoiNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? MucQuyDoi
		{
			get
			{
				return this._mucQuyDoi; 
			}
			set
			{
				if (_mucQuyDoi == value && MucQuyDoi != null )
					return;
					
				this._mucQuyDoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MucQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDonGiaNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? DonGia
		{
			get
			{
				return this._donGia; 
			}
			set
			{
				if (_donGia == value && DonGia != null )
					return;
					
				this._donGia = value;
				this._isDirty = true;
				
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTietQuyDoiNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTietQuyDoi
		{
			get
			{
				return this._soTietQuyDoi; 
			}
			set
			{
				if (_soTietQuyDoi == value && SoTietQuyDoi != null )
					return;
					
				this._soTietQuyDoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTien property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTienNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTien
		{
			get
			{
				return this._soTien; 
			}
			set
			{
				if (_soTien == value && SoTien != null )
					return;
					
				this._soTien = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "view_QuyDoiHoatDongNgoaiGiangDay"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewQuyDoiHoatDongNgoaiGiangDayBase Entity 
		///</summary>
		public virtual ViewQuyDoiHoatDongNgoaiGiangDayBase Copy()
		{
			//shallow copy entity
			ViewQuyDoiHoatDongNgoaiGiangDay copy = new ViewQuyDoiHoatDongNgoaiGiangDay();
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaQuanLy = this.MaQuanLy;
				copy.Ho = this.Ho;
				copy.Ten = this.Ten;
				copy.TenHoatDong = this.TenHoatDong;
				copy.SoLuong = this.SoLuong;
				copy.MucQuyDoi = this.MucQuyDoi;
				copy.DonGia = this.DonGia;
				copy.SoTietQuyDoi = this.SoTietQuyDoi;
				copy.SoTien = this.SoTien;
				copy.MaLop = this.MaLop;
			copy.AcceptChanges();
			return (ViewQuyDoiHoatDongNgoaiGiangDay)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewQuyDoiHoatDongNgoaiGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewQuyDoiHoatDongNgoaiGiangDayBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewQuyDoiHoatDongNgoaiGiangDayBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewQuyDoiHoatDongNgoaiGiangDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewQuyDoiHoatDongNgoaiGiangDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewQuyDoiHoatDongNgoaiGiangDayBase Object1, ViewQuyDoiHoatDongNgoaiGiangDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object1.NamHoc == null )
			{
				equal = false;
			}
			if (Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object1.HocKy == null )
			{
				equal = false;
			}
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if (Object1.Ho != null && Object2.Ho != null )
			{
				if (Object1.Ho != Object2.Ho)
					equal = false;
			}
			else if (Object1.Ho == null ^ Object1.Ho == null )
			{
				equal = false;
			}
			if (Object1.Ten != null && Object2.Ten != null )
			{
				if (Object1.Ten != Object2.Ten)
					equal = false;
			}
			else if (Object1.Ten == null ^ Object1.Ten == null )
			{
				equal = false;
			}
			if (Object1.TenHoatDong != null && Object2.TenHoatDong != null )
			{
				if (Object1.TenHoatDong != Object2.TenHoatDong)
					equal = false;
			}
			else if (Object1.TenHoatDong == null ^ Object1.TenHoatDong == null )
			{
				equal = false;
			}
			if (Object1.SoLuong != null && Object2.SoLuong != null )
			{
				if (Object1.SoLuong != Object2.SoLuong)
					equal = false;
			}
			else if (Object1.SoLuong == null ^ Object1.SoLuong == null )
			{
				equal = false;
			}
			if (Object1.MucQuyDoi != null && Object2.MucQuyDoi != null )
			{
				if (Object1.MucQuyDoi != Object2.MucQuyDoi)
					equal = false;
			}
			else if (Object1.MucQuyDoi == null ^ Object1.MucQuyDoi == null )
			{
				equal = false;
			}
			if (Object1.DonGia != null && Object2.DonGia != null )
			{
				if (Object1.DonGia != Object2.DonGia)
					equal = false;
			}
			else if (Object1.DonGia == null ^ Object1.DonGia == null )
			{
				equal = false;
			}
			if (Object1.SoTietQuyDoi != null && Object2.SoTietQuyDoi != null )
			{
				if (Object1.SoTietQuyDoi != Object2.SoTietQuyDoi)
					equal = false;
			}
			else if (Object1.SoTietQuyDoi == null ^ Object1.SoTietQuyDoi == null )
			{
				equal = false;
			}
			if (Object1.SoTien != null && Object2.SoTien != null )
			{
				if (Object1.SoTien != Object2.SoTien)
					equal = false;
			}
			else if (Object1.SoTien == null ^ Object1.SoTien == null )
			{
				equal = false;
			}
			if (Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object1.MaLop == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewQuyDoiHoatDongNgoaiGiangDay entity, string propertyName)
		{
			switch (propertyName)
			{
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "MaQuanLy":
					return entity.MaQuanLy;
				case "Ho":
					return entity.Ho;
				case "Ten":
					return entity.Ten;
				case "TenHoatDong":
					return entity.TenHoatDong;
				case "SoLuong":
					return entity.SoLuong;
				case "MucQuyDoi":
					return entity.MucQuyDoi;
				case "DonGia":
					return entity.DonGia;
				case "SoTietQuyDoi":
					return entity.SoTietQuyDoi;
				case "SoTien":
					return entity.SoTien;
				case "MaLop":
					return entity.MaLop;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewQuyDoiHoatDongNgoaiGiangDay, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- NamHoc: {0}{12}- HocKy: {1}{12}- MaQuanLy: {2}{12}- Ho: {3}{12}- Ten: {4}{12}- TenHoatDong: {5}{12}- SoLuong: {6}{12}- MucQuyDoi: {7}{12}- DonGia: {8}{12}- SoTietQuyDoi: {9}{12}- SoTien: {10}{12}- MaLop: {11}{12}", 
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
			     
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
			     
				this.MaQuanLy,
				(this.Ho == null) ? string.Empty : this.Ho.ToString(),
			     
				(this.Ten == null) ? string.Empty : this.Ten.ToString(),
			     
				(this.TenHoatDong == null) ? string.Empty : this.TenHoatDong.ToString(),
			     
				(this.SoLuong == null) ? string.Empty : this.SoLuong.ToString(),
			     
				(this.MucQuyDoi == null) ? string.Empty : this.MucQuyDoi.ToString(),
			     
				(this.DonGia == null) ? string.Empty : this.DonGia.ToString(),
			     
				(this.SoTietQuyDoi == null) ? string.Empty : this.SoTietQuyDoi.ToString(),
			     
				(this.SoTien == null) ? string.Empty : this.SoTien.ToString(),
			     
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewQuyDoiHoatDongNgoaiGiangDay columns.
	/// </summary>
	[Serializable]
	public enum ViewQuyDoiHoatDongNgoaiGiangDayColumn
	{
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("MaQuanLy")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaQuanLy,
		/// <summary>
		/// Ho : 
		/// </summary>
		[EnumTextValue("Ho")]
		[ColumnEnum("Ho", typeof(System.String), System.Data.DbType.String, false, false, true, 101)]
		Ho,
		/// <summary>
		/// Ten : 
		/// </summary>
		[EnumTextValue("Ten")]
		[ColumnEnum("Ten", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Ten,
		/// <summary>
		/// TenHoatDong : 
		/// </summary>
		[EnumTextValue("TenHoatDong")]
		[ColumnEnum("TenHoatDong", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenHoatDong,
		/// <summary>
		/// SoLuong : 
		/// </summary>
		[EnumTextValue("SoLuong")]
		[ColumnEnum("SoLuong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoLuong,
		/// <summary>
		/// MucQuyDoi : 
		/// </summary>
		[EnumTextValue("MucQuyDoi")]
		[ColumnEnum("MucQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MucQuyDoi,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("DonGia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGia,
		/// <summary>
		/// SoTietQuyDoi : 
		/// </summary>
		[EnumTextValue("SoTietQuyDoi")]
		[ColumnEnum("SoTietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietQuyDoi,
		/// <summary>
		/// SoTien : 
		/// </summary>
		[EnumTextValue("SoTien")]
		[ColumnEnum("SoTien", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTien,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		MaLop
	}//End enum

} // end namespace
