/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewPhanCongGiangDay.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_PhanCongGiangDay' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewPhanCongGiangDayBase")]
	public abstract partial class ViewPhanCongGiangDayBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.String		  _maGiangVien = string.Empty;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Int32?		  _soTiet = null;
		
		/// <summary>
		/// SoLuong : 
		/// </summary>
		private System.Int32?		  _soLuong = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = string.Empty;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = string.Empty;
		
		/// <summary>
		/// TenLop : 
		/// </summary>
		private System.String		  _tenLop = string.Empty;
		
		/// <summary>
		/// NgayBatDauDay : 
		/// </summary>
		private System.DateTime?		  _ngayBatDauDay = null;
		
		/// <summary>
		/// NgayKetThucDay : 
		/// </summary>
		private System.DateTime?		  _ngayKetThucDay = null;
		
		/// <summary>
		/// NoiLamViec : 
		/// </summary>
		private System.String		  _noiLamViec = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = string.Empty;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = string.Empty;
		
		/// <summary>
		/// TenHocKy : 
		/// </summary>
		private System.String		  _tenHocKy = null;
		
		/// <summary>
		/// TenCoSo : 
		/// </summary>
		private System.String		  _tenCoSo = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewPhanCongGiangDayBase"/> instance.
		///</summary>
		public ViewPhanCongGiangDayBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewPhanCongGiangDayBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_soTiet"></param>
		///<param name="_soLuong"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_tenLop"></param>
		///<param name="_ngayBatDauDay"></param>
		///<param name="_ngayKetThucDay"></param>
		///<param name="_noiLamViec"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_tenHocKy"></param>
		///<param name="_tenCoSo"></param>
		public ViewPhanCongGiangDayBase(System.String _maGiangVien, System.String _hoTen, System.Int32? _soTiet, System.Int32? _soLuong, System.String _maMonHoc, System.String _tenMonHoc, System.String _maLopHocPhan, System.String _maLop, System.String _tenLop, System.DateTime? _ngayBatDauDay, System.DateTime? _ngayKetThucDay, System.String _noiLamViec, System.String _namHoc, System.String _hocKy, System.String _tenHocKy, System.String _tenCoSo)
		{
			this._maGiangVien = _maGiangVien;
			this._hoTen = _hoTen;
			this._soTiet = _soTiet;
			this._soLuong = _soLuong;
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._maLopHocPhan = _maLopHocPhan;
			this._maLop = _maLop;
			this._tenLop = _tenLop;
			this._ngayBatDauDay = _ngayBatDauDay;
			this._ngayKetThucDay = _ngayKetThucDay;
			this._noiLamViec = _noiLamViec;
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._tenHocKy = _tenHocKy;
			this._tenCoSo = _tenCoSo;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewPhanCongGiangDay"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_soTiet"></param>
		///<param name="_soLuong"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_tenLop"></param>
		///<param name="_ngayBatDauDay"></param>
		///<param name="_ngayKetThucDay"></param>
		///<param name="_noiLamViec"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_tenHocKy"></param>
		///<param name="_tenCoSo"></param>
		public static ViewPhanCongGiangDay CreateViewPhanCongGiangDay(System.String _maGiangVien, System.String _hoTen, System.Int32? _soTiet, System.Int32? _soLuong, System.String _maMonHoc, System.String _tenMonHoc, System.String _maLopHocPhan, System.String _maLop, System.String _tenLop, System.DateTime? _ngayBatDauDay, System.DateTime? _ngayKetThucDay, System.String _noiLamViec, System.String _namHoc, System.String _hocKy, System.String _tenHocKy, System.String _tenCoSo)
		{
			ViewPhanCongGiangDay newViewPhanCongGiangDay = new ViewPhanCongGiangDay();
			newViewPhanCongGiangDay.MaGiangVien = _maGiangVien;
			newViewPhanCongGiangDay.HoTen = _hoTen;
			newViewPhanCongGiangDay.SoTiet = _soTiet;
			newViewPhanCongGiangDay.SoLuong = _soLuong;
			newViewPhanCongGiangDay.MaMonHoc = _maMonHoc;
			newViewPhanCongGiangDay.TenMonHoc = _tenMonHoc;
			newViewPhanCongGiangDay.MaLopHocPhan = _maLopHocPhan;
			newViewPhanCongGiangDay.MaLop = _maLop;
			newViewPhanCongGiangDay.TenLop = _tenLop;
			newViewPhanCongGiangDay.NgayBatDauDay = _ngayBatDauDay;
			newViewPhanCongGiangDay.NgayKetThucDay = _ngayKetThucDay;
			newViewPhanCongGiangDay.NoiLamViec = _noiLamViec;
			newViewPhanCongGiangDay.NamHoc = _namHoc;
			newViewPhanCongGiangDay.HocKy = _hocKy;
			newViewPhanCongGiangDay.TenHocKy = _tenHocKy;
			newViewPhanCongGiangDay.TenCoSo = _tenCoSo;
			return newViewPhanCongGiangDay;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaGiangVien does not allow null values.");
				if (_maGiangVien == value)
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value && SoTiet != null )
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoLuong property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoLuongNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoLuong
		{
			get
			{
				return this._soLuong; 
			}
			set
			{
				if (_soLuong == value && SoLuong != null )
					return;
					
				this._soLuong = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLopHocPhan does not allow null values.");
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLop does not allow null values.");
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenLop
		{
			get
			{
				return this._tenLop; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenLop does not allow null values.");
				if (_tenLop == value)
					return;
					
				this._tenLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayBatDauDay property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayBatDauDayNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayBatDauDay
		{
			get
			{
				return this._ngayBatDauDay; 
			}
			set
			{
				if (_ngayBatDauDay == value && NgayBatDauDay != null )
					return;
					
				this._ngayBatDauDay = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayBatDauDay");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayKetThucDay property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayKetThucDayNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayKetThucDay
		{
			get
			{
				return this._ngayKetThucDay; 
			}
			set
			{
				if (_ngayKetThucDay == value && NgayKetThucDay != null )
					return;
					
				this._ngayKetThucDay = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayKetThucDay");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NoiLamViec property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NoiLamViec
		{
			get
			{
				return this._noiLamViec; 
			}
			set
			{
				if (_noiLamViec == value)
					return;
					
				this._noiLamViec = value;
				this._isDirty = true;
				
				OnPropertyChanged("NoiLamViec");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "NamHoc does not allow null values.");
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "HocKy does not allow null values.");
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocKy
		{
			get
			{
				return this._tenHocKy; 
			}
			set
			{
				if (_tenHocKy == value)
					return;
					
				this._tenHocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenCoSo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenCoSo
		{
			get
			{
				return this._tenCoSo; 
			}
			set
			{
				if (_tenCoSo == value)
					return;
					
				this._tenCoSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenCoSo");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_PhanCongGiangDay"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewPhanCongGiangDayBase Entity 
		///</summary>
		public virtual ViewPhanCongGiangDayBase Copy()
		{
			//shallow copy entity
			ViewPhanCongGiangDay copy = new ViewPhanCongGiangDay();
				copy.MaGiangVien = this.MaGiangVien;
				copy.HoTen = this.HoTen;
				copy.SoTiet = this.SoTiet;
				copy.SoLuong = this.SoLuong;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaLop = this.MaLop;
				copy.TenLop = this.TenLop;
				copy.NgayBatDauDay = this.NgayBatDauDay;
				copy.NgayKetThucDay = this.NgayKetThucDay;
				copy.NoiLamViec = this.NoiLamViec;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.TenHocKy = this.TenHocKy;
				copy.TenCoSo = this.TenCoSo;
			copy.AcceptChanges();
			return (ViewPhanCongGiangDay)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewPhanCongGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewPhanCongGiangDayBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewPhanCongGiangDayBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewPhanCongGiangDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewPhanCongGiangDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewPhanCongGiangDayBase Object1, ViewPhanCongGiangDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaGiangVien != Object2.MaGiangVien)
				equal = false;
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object1.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.SoLuong != null && Object2.SoLuong != null )
			{
				if (Object1.SoLuong != Object2.SoLuong)
					equal = false;
			}
			else if (Object1.SoLuong == null ^ Object1.SoLuong == null )
			{
				equal = false;
			}
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if (Object1.MaLop != Object2.MaLop)
				equal = false;
			if (Object1.TenLop != Object2.TenLop)
				equal = false;
			if (Object1.NgayBatDauDay != null && Object2.NgayBatDauDay != null )
			{
				if (Object1.NgayBatDauDay != Object2.NgayBatDauDay)
					equal = false;
			}
			else if (Object1.NgayBatDauDay == null ^ Object1.NgayBatDauDay == null )
			{
				equal = false;
			}
			if (Object1.NgayKetThucDay != null && Object2.NgayKetThucDay != null )
			{
				if (Object1.NgayKetThucDay != Object2.NgayKetThucDay)
					equal = false;
			}
			else if (Object1.NgayKetThucDay == null ^ Object1.NgayKetThucDay == null )
			{
				equal = false;
			}
			if (Object1.NoiLamViec != null && Object2.NoiLamViec != null )
			{
				if (Object1.NoiLamViec != Object2.NoiLamViec)
					equal = false;
			}
			else if (Object1.NoiLamViec == null ^ Object1.NoiLamViec == null )
			{
				equal = false;
			}
			if (Object1.NamHoc != Object2.NamHoc)
				equal = false;
			if (Object1.HocKy != Object2.HocKy)
				equal = false;
			if (Object1.TenHocKy != null && Object2.TenHocKy != null )
			{
				if (Object1.TenHocKy != Object2.TenHocKy)
					equal = false;
			}
			else if (Object1.TenHocKy == null ^ Object1.TenHocKy == null )
			{
				equal = false;
			}
			if (Object1.TenCoSo != null && Object2.TenCoSo != null )
			{
				if (Object1.TenCoSo != Object2.TenCoSo)
					equal = false;
			}
			else if (Object1.TenCoSo == null ^ Object1.TenCoSo == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewPhanCongGiangDay entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "HoTen":
					return entity.HoTen;
				case "SoTiet":
					return entity.SoTiet;
				case "SoLuong":
					return entity.SoLuong;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "MaLop":
					return entity.MaLop;
				case "TenLop":
					return entity.TenLop;
				case "NgayBatDauDay":
					return entity.NgayBatDauDay;
				case "NgayKetThucDay":
					return entity.NgayKetThucDay;
				case "NoiLamViec":
					return entity.NoiLamViec;
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "TenHocKy":
					return entity.TenHocKy;
				case "TenCoSo":
					return entity.TenCoSo;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewPhanCongGiangDay, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- MaGiangVien: {0}{16}- HoTen: {1}{16}- SoTiet: {2}{16}- SoLuong: {3}{16}- MaMonHoc: {4}{16}- TenMonHoc: {5}{16}- MaLopHocPhan: {6}{16}- MaLop: {7}{16}- TenLop: {8}{16}- NgayBatDauDay: {9}{16}- NgayKetThucDay: {10}{16}- NoiLamViec: {11}{16}- NamHoc: {12}{16}- HocKy: {13}{16}- TenHocKy: {14}{16}- TenCoSo: {15}{16}", 
				this.MaGiangVien,
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
			     
				(this.SoLuong == null) ? string.Empty : this.SoLuong.ToString(),
			     
				this.MaMonHoc,
				this.TenMonHoc,
				this.MaLopHocPhan,
				this.MaLop,
				this.TenLop,
				(this.NgayBatDauDay == null) ? string.Empty : this.NgayBatDauDay.ToString(),
			     
				(this.NgayKetThucDay == null) ? string.Empty : this.NgayKetThucDay.ToString(),
			     
				(this.NoiLamViec == null) ? string.Empty : this.NoiLamViec.ToString(),
			     
				this.NamHoc,
				this.HocKy,
				(this.TenHocKy == null) ? string.Empty : this.TenHocKy.ToString(),
			     
				(this.TenCoSo == null) ? string.Empty : this.TenCoSo.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewPhanCongGiangDay columns.
	/// </summary>
	[Serializable]
	public enum ViewPhanCongGiangDayColumn
	{
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaGiangVien,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		HoTen,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet,
		/// <summary>
		/// SoLuong : 
		/// </summary>
		[EnumTextValue("SoLuong")]
		[ColumnEnum("SoLuong", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuong,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 500)]
		TenMonHoc,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		MaLopHocPhan,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaLop,
		/// <summary>
		/// TenLop : 
		/// </summary>
		[EnumTextValue("TenLop")]
		[ColumnEnum("TenLop", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		TenLop,
		/// <summary>
		/// NgayBatDauDay : 
		/// </summary>
		[EnumTextValue("NgayBatDauDay")]
		[ColumnEnum("NgayBatDauDay", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayBatDauDay,
		/// <summary>
		/// NgayKetThucDay : 
		/// </summary>
		[EnumTextValue("NgayKetThucDay")]
		[ColumnEnum("NgayKetThucDay", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKetThucDay,
		/// <summary>
		/// NoiLamViec : 
		/// </summary>
		[EnumTextValue("NoiLamViec")]
		[ColumnEnum("NoiLamViec", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		NoiLamViec,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		HocKy,
		/// <summary>
		/// TenHocKy : 
		/// </summary>
		[EnumTextValue("TenHocKy")]
		[ColumnEnum("TenHocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		TenHocKy,
		/// <summary>
		/// TenCoSo : 
		/// </summary>
		[EnumTextValue("TenCoSo")]
		[ColumnEnum("TenCoSo", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TenCoSo
	}//End enum

} // end namespace
