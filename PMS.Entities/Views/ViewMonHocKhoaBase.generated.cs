/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewMonHocKhoa.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_MonHoc_Khoa' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewMonHocKhoaBase")]
	public abstract partial class ViewMonHocKhoaBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// TenHienThi : 
		/// </summary>
		private System.String		  _tenHienThi = string.Empty;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		private System.Decimal		  _soTinChi = 0.0m;
		
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		private System.String		  _maKhoa = null;
		
		/// <summary>
		/// TenKhoa : 
		/// </summary>
		private System.String		  _tenKhoa = null;
		
		/// <summary>
		/// MaBoMon : 
		/// </summary>
		private System.String		  _maBoMon = null;
		
		/// <summary>
		/// TenBoMon : 
		/// </summary>
		private System.String		  _tenBoMon = null;
		
		/// <summary>
		/// NhomMonHoc : 
		/// </summary>
		private System.String		  _nhomMonHoc = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewMonHocKhoaBase"/> instance.
		///</summary>
		public ViewMonHocKhoaBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewMonHocKhoaBase"/> instance.
		///</summary>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_tenHienThi"></param>
		///<param name="_soTinChi"></param>
		///<param name="_maKhoa"></param>
		///<param name="_tenKhoa"></param>
		///<param name="_maBoMon"></param>
		///<param name="_tenBoMon"></param>
		///<param name="_nhomMonHoc"></param>
		public ViewMonHocKhoaBase(System.String _maMonHoc, System.String _tenMonHoc, System.String _tenHienThi, System.Decimal _soTinChi, System.String _maKhoa, System.String _tenKhoa, System.String _maBoMon, System.String _tenBoMon, System.String _nhomMonHoc)
		{
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._tenHienThi = _tenHienThi;
			this._soTinChi = _soTinChi;
			this._maKhoa = _maKhoa;
			this._tenKhoa = _tenKhoa;
			this._maBoMon = _maBoMon;
			this._tenBoMon = _tenBoMon;
			this._nhomMonHoc = _nhomMonHoc;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewMonHocKhoa"/> instance.
		///</summary>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_tenHienThi"></param>
		///<param name="_soTinChi"></param>
		///<param name="_maKhoa"></param>
		///<param name="_tenKhoa"></param>
		///<param name="_maBoMon"></param>
		///<param name="_tenBoMon"></param>
		///<param name="_nhomMonHoc"></param>
		public static ViewMonHocKhoa CreateViewMonHocKhoa(System.String _maMonHoc, System.String _tenMonHoc, System.String _tenHienThi, System.Decimal _soTinChi, System.String _maKhoa, System.String _tenKhoa, System.String _maBoMon, System.String _tenBoMon, System.String _nhomMonHoc)
		{
			ViewMonHocKhoa newViewMonHocKhoa = new ViewMonHocKhoa();
			newViewMonHocKhoa.MaMonHoc = _maMonHoc;
			newViewMonHocKhoa.TenMonHoc = _tenMonHoc;
			newViewMonHocKhoa.TenHienThi = _tenHienThi;
			newViewMonHocKhoa.SoTinChi = _soTinChi;
			newViewMonHocKhoa.MaKhoa = _maKhoa;
			newViewMonHocKhoa.TenKhoa = _tenKhoa;
			newViewMonHocKhoa.MaBoMon = _maBoMon;
			newViewMonHocKhoa.TenBoMon = _tenBoMon;
			newViewMonHocKhoa.NhomMonHoc = _nhomMonHoc;
			return newViewMonHocKhoa;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHienThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHienThi
		{
			get
			{
				return this._tenHienThi; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenHienThi does not allow null values.");
				if (_tenHienThi == value)
					return;
					
				this._tenHienThi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHienThi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal SoTinChi
		{
			get
			{
				return this._soTinChi; 
			}
			set
			{
				if (_soTinChi == value)
					return;
					
				this._soTinChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaKhoa property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaKhoa
		{
			get
			{
				return this._maKhoa; 
			}
			set
			{
				if (_maKhoa == value)
					return;
					
				this._maKhoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaKhoa");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenKhoa property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenKhoa
		{
			get
			{
				return this._tenKhoa; 
			}
			set
			{
				if (_tenKhoa == value)
					return;
					
				this._tenKhoa = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenKhoa");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBoMon property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaBoMon
		{
			get
			{
				return this._maBoMon; 
			}
			set
			{
				if (_maBoMon == value)
					return;
					
				this._maBoMon = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBoMon");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenBoMon property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenBoMon
		{
			get
			{
				return this._tenBoMon; 
			}
			set
			{
				if (_tenBoMon == value)
					return;
					
				this._tenBoMon = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenBoMon");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NhomMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NhomMonHoc
		{
			get
			{
				return this._nhomMonHoc; 
			}
			set
			{
				if (_nhomMonHoc == value)
					return;
					
				this._nhomMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NhomMonHoc");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_MonHoc_Khoa"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewMonHocKhoaBase Entity 
		///</summary>
		public virtual ViewMonHocKhoaBase Copy()
		{
			//shallow copy entity
			ViewMonHocKhoa copy = new ViewMonHocKhoa();
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.TenHienThi = this.TenHienThi;
				copy.SoTinChi = this.SoTinChi;
				copy.MaKhoa = this.MaKhoa;
				copy.TenKhoa = this.TenKhoa;
				copy.MaBoMon = this.MaBoMon;
				copy.TenBoMon = this.TenBoMon;
				copy.NhomMonHoc = this.NhomMonHoc;
			copy.AcceptChanges();
			return (ViewMonHocKhoa)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewMonHocKhoaBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewMonHocKhoaBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewMonHocKhoaBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewMonHocKhoaBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewMonHocKhoaBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewMonHocKhoaBase Object1, ViewMonHocKhoaBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.TenHienThi != Object2.TenHienThi)
				equal = false;
			if (Object1.SoTinChi != Object2.SoTinChi)
				equal = false;
			if (Object1.MaKhoa != null && Object2.MaKhoa != null )
			{
				if (Object1.MaKhoa != Object2.MaKhoa)
					equal = false;
			}
			else if (Object1.MaKhoa == null ^ Object1.MaKhoa == null )
			{
				equal = false;
			}
			if (Object1.TenKhoa != null && Object2.TenKhoa != null )
			{
				if (Object1.TenKhoa != Object2.TenKhoa)
					equal = false;
			}
			else if (Object1.TenKhoa == null ^ Object1.TenKhoa == null )
			{
				equal = false;
			}
			if (Object1.MaBoMon != null && Object2.MaBoMon != null )
			{
				if (Object1.MaBoMon != Object2.MaBoMon)
					equal = false;
			}
			else if (Object1.MaBoMon == null ^ Object1.MaBoMon == null )
			{
				equal = false;
			}
			if (Object1.TenBoMon != null && Object2.TenBoMon != null )
			{
				if (Object1.TenBoMon != Object2.TenBoMon)
					equal = false;
			}
			else if (Object1.TenBoMon == null ^ Object1.TenBoMon == null )
			{
				equal = false;
			}
			if (Object1.NhomMonHoc != null && Object2.NhomMonHoc != null )
			{
				if (Object1.NhomMonHoc != Object2.NhomMonHoc)
					equal = false;
			}
			else if (Object1.NhomMonHoc == null ^ Object1.NhomMonHoc == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewMonHocKhoa entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "TenHienThi":
					return entity.TenHienThi;
				case "SoTinChi":
					return entity.SoTinChi;
				case "MaKhoa":
					return entity.MaKhoa;
				case "TenKhoa":
					return entity.TenKhoa;
				case "MaBoMon":
					return entity.MaBoMon;
				case "TenBoMon":
					return entity.TenBoMon;
				case "NhomMonHoc":
					return entity.NhomMonHoc;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewMonHocKhoa, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- MaMonHoc: {0}{9}- TenMonHoc: {1}{9}- TenHienThi: {2}{9}- SoTinChi: {3}{9}- MaKhoa: {4}{9}- TenKhoa: {5}{9}- MaBoMon: {6}{9}- TenBoMon: {7}{9}- NhomMonHoc: {8}{9}", 
				this.MaMonHoc,
				this.TenMonHoc,
				this.TenHienThi,
				this.SoTinChi,
				(this.MaKhoa == null) ? string.Empty : this.MaKhoa.ToString(),
			     
				(this.TenKhoa == null) ? string.Empty : this.TenKhoa.ToString(),
			     
				(this.MaBoMon == null) ? string.Empty : this.MaBoMon.ToString(),
			     
				(this.TenBoMon == null) ? string.Empty : this.TenBoMon.ToString(),
			     
				(this.NhomMonHoc == null) ? string.Empty : this.NhomMonHoc.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewMonHocKhoa columns.
	/// </summary>
	[Serializable]
	public enum ViewMonHocKhoaColumn
	{
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc,
		/// <summary>
		/// TenHienThi : 
		/// </summary>
		[EnumTextValue("TenHienThi")]
		[ColumnEnum("TenHienThi", typeof(System.String), System.Data.DbType.String, false, false, false, 278)]
		TenHienThi,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("SoTinChi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SoTinChi,
		/// <summary>
		/// MaKhoa : 
		/// </summary>
		[EnumTextValue("MaKhoa")]
		[ColumnEnum("MaKhoa", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaKhoa,
		/// <summary>
		/// TenKhoa : 
		/// </summary>
		[EnumTextValue("TenKhoa")]
		[ColumnEnum("TenKhoa", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenKhoa,
		/// <summary>
		/// MaBoMon : 
		/// </summary>
		[EnumTextValue("MaBoMon")]
		[ColumnEnum("MaBoMon", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaBoMon,
		/// <summary>
		/// TenBoMon : 
		/// </summary>
		[EnumTextValue("TenBoMon")]
		[ColumnEnum("TenBoMon", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenBoMon,
		/// <summary>
		/// NhomMonHoc : 
		/// </summary>
		[EnumTextValue("NhomMonHoc")]
		[ColumnEnum("NhomMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NhomMonHoc
	}//End enum

} // end namespace
