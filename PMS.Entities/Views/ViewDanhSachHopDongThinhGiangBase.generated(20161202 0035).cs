/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewDanhSachHopDongThinhGiang.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_DanhSachHopDongThinhGiang' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewDanhSachHopDongThinhGiangBase")]
	public abstract partial class ViewDanhSachHopDongThinhGiangBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// Id : 
		/// </summary>
		private System.Int32		  _id = (int)0;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = null;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.Int32?		  _maGiangVien = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// NgaySinh : 
		/// </summary>
		private System.String		  _ngaySinh = null;
		
		/// <summary>
		/// SoCmnd : 
		/// </summary>
		private System.String		  _soCmnd = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		private System.Int32?		  _maHocHam = null;
		
		/// <summary>
		/// TenHocHam : 
		/// </summary>
		private System.String		  _tenHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		private System.Int32?		  _maHocVi = null;
		
		/// <summary>
		/// TenHocVi : 
		/// </summary>
		private System.String		  _tenHocVi = null;
		
		/// <summary>
		/// ChuyenNganh : 
		/// </summary>
		private System.String		  _chuyenNganh = null;
		
		/// <summary>
		/// MaSoThue : 
		/// </summary>
		private System.String		  _maSoThue = null;
		
		/// <summary>
		/// CoQuanCongTac : 
		/// </summary>
		private System.String		  _coQuanCongTac = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = null;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = null;
		
		/// <summary>
		/// SoHopDong : 
		/// </summary>
		private System.String		  _soHopDong = null;
		
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		private System.String		  _maDonVi = null;
		
		/// <summary>
		/// TenDonVi : 
		/// </summary>
		private System.String		  _tenDonVi = string.Empty;
		
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		private System.DateTime?		  _ngayBatDau = null;
		
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		private System.DateTime?		  _ngayKetThuc = null;
		
		/// <summary>
		/// SoTietLyThuyet : 
		/// </summary>
		private System.Decimal?		  _soTietLyThuyet = null;
		
		/// <summary>
		/// SoTietThucHanh : 
		/// </summary>
		private System.Decimal?		  _soTietThucHanh = null;
		
		/// <summary>
		/// HeSoQuyDoiThucHanh : 
		/// </summary>
		private System.Decimal?		  _heSoQuyDoiThucHanh = null;
		
		/// <summary>
		/// SoNhomThucHanh : 
		/// </summary>
		private System.Int32?		  _soNhomThucHanh = null;
		
		/// <summary>
		/// TongSoTiet : 
		/// </summary>
		private System.Decimal?		  _tongSoTiet = null;
		
		/// <summary>
		/// SoTietLyThuyetTrenTuan : 
		/// </summary>
		private System.Decimal?		  _soTietLyThuyetTrenTuan = null;
		
		/// <summary>
		/// SoTietThucHanhTrenTuan : 
		/// </summary>
		private System.Decimal?		  _soTietThucHanhTrenTuan = null;
		
		/// <summary>
		/// TongSoTietTrenTuan : 
		/// </summary>
		private System.Decimal?		  _tongSoTietTrenTuan = null;
		
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		private System.Decimal?		  _heSoLopDong = null;
		
		/// <summary>
		/// SiSo : 
		/// </summary>
		private System.Int32?		  _siSo = null;
		
		/// <summary>
		/// TrangThaiHoSo : 
		/// </summary>
		private System.String		  _trangThaiHoSo = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		private System.Decimal?		  _donGia = null;
		
		/// <summary>
		/// DonViTienTe : 
		/// </summary>
		private System.String		  _donViTienTe = null;
		
		/// <summary>
		/// TongGiaTriHopDong : 
		/// </summary>
		private System.Decimal?		  _tongGiaTriHopDong = null;
		
		/// <summary>
		/// GiaTriHopDongConLai : 
		/// </summary>
		private System.Decimal?		  _giaTriHopDongConLai = null;
		
		/// <summary>
		/// Thue : 
		/// </summary>
		private System.Decimal?		  _thue = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		private System.String		  _ghiChu = null;
		
		/// <summary>
		/// DaXacNhan : 
		/// </summary>
		private System.Boolean?		  _daXacNhan = null;
		
		/// <summary>
		/// IsLock : 
		/// </summary>
		private System.Boolean?		  _isLock = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		private System.String		  _ngayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		private System.String		  _nguoiCapNhat = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewDanhSachHopDongThinhGiangBase"/> instance.
		///</summary>
		public ViewDanhSachHopDongThinhGiangBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewDanhSachHopDongThinhGiangBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_soCmnd"></param>
		///<param name="_maHocHam"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maSoThue"></param>
		///<param name="_coQuanCongTac"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_soHopDong"></param>
		///<param name="_maDonVi"></param>
		///<param name="_tenDonVi"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_soTietLyThuyet"></param>
		///<param name="_soTietThucHanh"></param>
		///<param name="_heSoQuyDoiThucHanh"></param>
		///<param name="_soNhomThucHanh"></param>
		///<param name="_tongSoTiet"></param>
		///<param name="_soTietLyThuyetTrenTuan"></param>
		///<param name="_soTietThucHanhTrenTuan"></param>
		///<param name="_tongSoTietTrenTuan"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_siSo"></param>
		///<param name="_trangThaiHoSo"></param>
		///<param name="_donGia"></param>
		///<param name="_donViTienTe"></param>
		///<param name="_tongGiaTriHopDong"></param>
		///<param name="_giaTriHopDongConLai"></param>
		///<param name="_thue"></param>
		///<param name="_ghiChu"></param>
		///<param name="_daXacNhan"></param>
		///<param name="_isLock"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		public ViewDanhSachHopDongThinhGiangBase(System.Int32 _id, System.String _namHoc, System.String _hocKy, System.Int32? _maGiangVien, System.String _hoTen, System.String _ngaySinh, System.String _soCmnd, System.Int32? _maHocHam, System.String _tenHocHam, System.Int32? _maHocVi, System.String _tenHocVi, System.String _chuyenNganh, System.String _maSoThue, System.String _coQuanCongTac, System.String _maMonHoc, System.String _tenMonHoc, System.String _maLopHocPhan, System.String _maLop, System.String _soHopDong, System.String _maDonVi, System.String _tenDonVi, System.DateTime? _ngayBatDau, System.DateTime? _ngayKetThuc, System.Decimal? _soTietLyThuyet, System.Decimal? _soTietThucHanh, System.Decimal? _heSoQuyDoiThucHanh, System.Int32? _soNhomThucHanh, System.Decimal? _tongSoTiet, System.Decimal? _soTietLyThuyetTrenTuan, System.Decimal? _soTietThucHanhTrenTuan, System.Decimal? _tongSoTietTrenTuan, System.Decimal? _heSoLopDong, System.Int32? _siSo, System.String _trangThaiHoSo, System.Decimal? _donGia, System.String _donViTienTe, System.Decimal? _tongGiaTriHopDong, System.Decimal? _giaTriHopDongConLai, System.Decimal? _thue, System.String _ghiChu, System.Boolean? _daXacNhan, System.Boolean? _isLock, System.String _ngayCapNhat, System.String _nguoiCapNhat)
		{
			this._id = _id;
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._maGiangVien = _maGiangVien;
			this._hoTen = _hoTen;
			this._ngaySinh = _ngaySinh;
			this._soCmnd = _soCmnd;
			this._maHocHam = _maHocHam;
			this._tenHocHam = _tenHocHam;
			this._maHocVi = _maHocVi;
			this._tenHocVi = _tenHocVi;
			this._chuyenNganh = _chuyenNganh;
			this._maSoThue = _maSoThue;
			this._coQuanCongTac = _coQuanCongTac;
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._maLopHocPhan = _maLopHocPhan;
			this._maLop = _maLop;
			this._soHopDong = _soHopDong;
			this._maDonVi = _maDonVi;
			this._tenDonVi = _tenDonVi;
			this._ngayBatDau = _ngayBatDau;
			this._ngayKetThuc = _ngayKetThuc;
			this._soTietLyThuyet = _soTietLyThuyet;
			this._soTietThucHanh = _soTietThucHanh;
			this._heSoQuyDoiThucHanh = _heSoQuyDoiThucHanh;
			this._soNhomThucHanh = _soNhomThucHanh;
			this._tongSoTiet = _tongSoTiet;
			this._soTietLyThuyetTrenTuan = _soTietLyThuyetTrenTuan;
			this._soTietThucHanhTrenTuan = _soTietThucHanhTrenTuan;
			this._tongSoTietTrenTuan = _tongSoTietTrenTuan;
			this._heSoLopDong = _heSoLopDong;
			this._siSo = _siSo;
			this._trangThaiHoSo = _trangThaiHoSo;
			this._donGia = _donGia;
			this._donViTienTe = _donViTienTe;
			this._tongGiaTriHopDong = _tongGiaTriHopDong;
			this._giaTriHopDongConLai = _giaTriHopDongConLai;
			this._thue = _thue;
			this._ghiChu = _ghiChu;
			this._daXacNhan = _daXacNhan;
			this._isLock = _isLock;
			this._ngayCapNhat = _ngayCapNhat;
			this._nguoiCapNhat = _nguoiCapNhat;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewDanhSachHopDongThinhGiang"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_soCmnd"></param>
		///<param name="_maHocHam"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maSoThue"></param>
		///<param name="_coQuanCongTac"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_soHopDong"></param>
		///<param name="_maDonVi"></param>
		///<param name="_tenDonVi"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_soTietLyThuyet"></param>
		///<param name="_soTietThucHanh"></param>
		///<param name="_heSoQuyDoiThucHanh"></param>
		///<param name="_soNhomThucHanh"></param>
		///<param name="_tongSoTiet"></param>
		///<param name="_soTietLyThuyetTrenTuan"></param>
		///<param name="_soTietThucHanhTrenTuan"></param>
		///<param name="_tongSoTietTrenTuan"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_siSo"></param>
		///<param name="_trangThaiHoSo"></param>
		///<param name="_donGia"></param>
		///<param name="_donViTienTe"></param>
		///<param name="_tongGiaTriHopDong"></param>
		///<param name="_giaTriHopDongConLai"></param>
		///<param name="_thue"></param>
		///<param name="_ghiChu"></param>
		///<param name="_daXacNhan"></param>
		///<param name="_isLock"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		public static ViewDanhSachHopDongThinhGiang CreateViewDanhSachHopDongThinhGiang(System.Int32 _id, System.String _namHoc, System.String _hocKy, System.Int32? _maGiangVien, System.String _hoTen, System.String _ngaySinh, System.String _soCmnd, System.Int32? _maHocHam, System.String _tenHocHam, System.Int32? _maHocVi, System.String _tenHocVi, System.String _chuyenNganh, System.String _maSoThue, System.String _coQuanCongTac, System.String _maMonHoc, System.String _tenMonHoc, System.String _maLopHocPhan, System.String _maLop, System.String _soHopDong, System.String _maDonVi, System.String _tenDonVi, System.DateTime? _ngayBatDau, System.DateTime? _ngayKetThuc, System.Decimal? _soTietLyThuyet, System.Decimal? _soTietThucHanh, System.Decimal? _heSoQuyDoiThucHanh, System.Int32? _soNhomThucHanh, System.Decimal? _tongSoTiet, System.Decimal? _soTietLyThuyetTrenTuan, System.Decimal? _soTietThucHanhTrenTuan, System.Decimal? _tongSoTietTrenTuan, System.Decimal? _heSoLopDong, System.Int32? _siSo, System.String _trangThaiHoSo, System.Decimal? _donGia, System.String _donViTienTe, System.Decimal? _tongGiaTriHopDong, System.Decimal? _giaTriHopDongConLai, System.Decimal? _thue, System.String _ghiChu, System.Boolean? _daXacNhan, System.Boolean? _isLock, System.String _ngayCapNhat, System.String _nguoiCapNhat)
		{
			ViewDanhSachHopDongThinhGiang newViewDanhSachHopDongThinhGiang = new ViewDanhSachHopDongThinhGiang();
			newViewDanhSachHopDongThinhGiang.Id = _id;
			newViewDanhSachHopDongThinhGiang.NamHoc = _namHoc;
			newViewDanhSachHopDongThinhGiang.HocKy = _hocKy;
			newViewDanhSachHopDongThinhGiang.MaGiangVien = _maGiangVien;
			newViewDanhSachHopDongThinhGiang.HoTen = _hoTen;
			newViewDanhSachHopDongThinhGiang.NgaySinh = _ngaySinh;
			newViewDanhSachHopDongThinhGiang.SoCmnd = _soCmnd;
			newViewDanhSachHopDongThinhGiang.MaHocHam = _maHocHam;
			newViewDanhSachHopDongThinhGiang.TenHocHam = _tenHocHam;
			newViewDanhSachHopDongThinhGiang.MaHocVi = _maHocVi;
			newViewDanhSachHopDongThinhGiang.TenHocVi = _tenHocVi;
			newViewDanhSachHopDongThinhGiang.ChuyenNganh = _chuyenNganh;
			newViewDanhSachHopDongThinhGiang.MaSoThue = _maSoThue;
			newViewDanhSachHopDongThinhGiang.CoQuanCongTac = _coQuanCongTac;
			newViewDanhSachHopDongThinhGiang.MaMonHoc = _maMonHoc;
			newViewDanhSachHopDongThinhGiang.TenMonHoc = _tenMonHoc;
			newViewDanhSachHopDongThinhGiang.MaLopHocPhan = _maLopHocPhan;
			newViewDanhSachHopDongThinhGiang.MaLop = _maLop;
			newViewDanhSachHopDongThinhGiang.SoHopDong = _soHopDong;
			newViewDanhSachHopDongThinhGiang.MaDonVi = _maDonVi;
			newViewDanhSachHopDongThinhGiang.TenDonVi = _tenDonVi;
			newViewDanhSachHopDongThinhGiang.NgayBatDau = _ngayBatDau;
			newViewDanhSachHopDongThinhGiang.NgayKetThuc = _ngayKetThuc;
			newViewDanhSachHopDongThinhGiang.SoTietLyThuyet = _soTietLyThuyet;
			newViewDanhSachHopDongThinhGiang.SoTietThucHanh = _soTietThucHanh;
			newViewDanhSachHopDongThinhGiang.HeSoQuyDoiThucHanh = _heSoQuyDoiThucHanh;
			newViewDanhSachHopDongThinhGiang.SoNhomThucHanh = _soNhomThucHanh;
			newViewDanhSachHopDongThinhGiang.TongSoTiet = _tongSoTiet;
			newViewDanhSachHopDongThinhGiang.SoTietLyThuyetTrenTuan = _soTietLyThuyetTrenTuan;
			newViewDanhSachHopDongThinhGiang.SoTietThucHanhTrenTuan = _soTietThucHanhTrenTuan;
			newViewDanhSachHopDongThinhGiang.TongSoTietTrenTuan = _tongSoTietTrenTuan;
			newViewDanhSachHopDongThinhGiang.HeSoLopDong = _heSoLopDong;
			newViewDanhSachHopDongThinhGiang.SiSo = _siSo;
			newViewDanhSachHopDongThinhGiang.TrangThaiHoSo = _trangThaiHoSo;
			newViewDanhSachHopDongThinhGiang.DonGia = _donGia;
			newViewDanhSachHopDongThinhGiang.DonViTienTe = _donViTienTe;
			newViewDanhSachHopDongThinhGiang.TongGiaTriHopDong = _tongGiaTriHopDong;
			newViewDanhSachHopDongThinhGiang.GiaTriHopDongConLai = _giaTriHopDongConLai;
			newViewDanhSachHopDongThinhGiang.Thue = _thue;
			newViewDanhSachHopDongThinhGiang.GhiChu = _ghiChu;
			newViewDanhSachHopDongThinhGiang.DaXacNhan = _daXacNhan;
			newViewDanhSachHopDongThinhGiang.IsLock = _isLock;
			newViewDanhSachHopDongThinhGiang.NgayCapNhat = _ngayCapNhat;
			newViewDanhSachHopDongThinhGiang.NguoiCapNhat = _nguoiCapNhat;
			return newViewDanhSachHopDongThinhGiang;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Id
		{
			get
			{
				return this._id; 
			}
			set
			{
				if (_id == value)
					return;
					
				this._id = value;
				this._isDirty = true;
				
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaGiangVienNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value && MaGiangVien != null )
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgaySinh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NgaySinh
		{
			get
			{
				return this._ngaySinh; 
			}
			set
			{
				if (_ngaySinh == value)
					return;
					
				this._ngaySinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgaySinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoCmnd property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SoCmnd
		{
			get
			{
				return this._soCmnd; 
			}
			set
			{
				if (_soCmnd == value)
					return;
					
				this._soCmnd = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoCmnd");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaHocHamNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this._maHocHam; 
			}
			set
			{
				if (_maHocHam == value && MaHocHam != null )
					return;
					
				this._maHocHam = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocHam property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocHam
		{
			get
			{
				return this._tenHocHam; 
			}
			set
			{
				if (_tenHocHam == value)
					return;
					
				this._tenHocHam = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaHocViNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this._maHocVi; 
			}
			set
			{
				if (_maHocVi == value && MaHocVi != null )
					return;
					
				this._maHocVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocVi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocVi
		{
			get
			{
				return this._tenHocVi; 
			}
			set
			{
				if (_tenHocVi == value)
					return;
					
				this._tenHocVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ChuyenNganh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ChuyenNganh
		{
			get
			{
				return this._chuyenNganh; 
			}
			set
			{
				if (_chuyenNganh == value)
					return;
					
				this._chuyenNganh = value;
				this._isDirty = true;
				
				OnPropertyChanged("ChuyenNganh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaSoThue property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaSoThue
		{
			get
			{
				return this._maSoThue; 
			}
			set
			{
				if (_maSoThue == value)
					return;
					
				this._maSoThue = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaSoThue");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CoQuanCongTac property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CoQuanCongTac
		{
			get
			{
				return this._coQuanCongTac; 
			}
			set
			{
				if (_coQuanCongTac == value)
					return;
					
				this._coQuanCongTac = value;
				this._isDirty = true;
				
				OnPropertyChanged("CoQuanCongTac");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoHopDong property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SoHopDong
		{
			get
			{
				return this._soHopDong; 
			}
			set
			{
				if (_soHopDong == value)
					return;
					
				this._soHopDong = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoHopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaDonVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaDonVi
		{
			get
			{
				return this._maDonVi; 
			}
			set
			{
				if (_maDonVi == value)
					return;
					
				this._maDonVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenDonVi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenDonVi
		{
			get
			{
				return this._tenDonVi; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenDonVi does not allow null values.");
				if (_tenDonVi == value)
					return;
					
				this._tenDonVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayBatDau property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayBatDauNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayBatDau
		{
			get
			{
				return this._ngayBatDau; 
			}
			set
			{
				if (_ngayBatDau == value && NgayBatDau != null )
					return;
					
				this._ngayBatDau = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayKetThuc property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayKetThucNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayKetThuc
		{
			get
			{
				return this._ngayKetThuc; 
			}
			set
			{
				if (_ngayKetThuc == value && NgayKetThuc != null )
					return;
					
				this._ngayKetThuc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayKetThuc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTietLyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTietLyThuyetNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTietLyThuyet
		{
			get
			{
				return this._soTietLyThuyet; 
			}
			set
			{
				if (_soTietLyThuyet == value && SoTietLyThuyet != null )
					return;
					
				this._soTietLyThuyet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTietLyThuyet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTietThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTietThucHanhNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTietThucHanh
		{
			get
			{
				return this._soTietThucHanh; 
			}
			set
			{
				if (_soTietThucHanh == value && SoTietThucHanh != null )
					return;
					
				this._soTietThucHanh = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTietThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSoQuyDoiThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHeSoQuyDoiThucHanhNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? HeSoQuyDoiThucHanh
		{
			get
			{
				return this._heSoQuyDoiThucHanh; 
			}
			set
			{
				if (_heSoQuyDoiThucHanh == value && HeSoQuyDoiThucHanh != null )
					return;
					
				this._heSoQuyDoiThucHanh = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSoQuyDoiThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoNhomThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoNhomThucHanhNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoNhomThucHanh
		{
			get
			{
				return this._soNhomThucHanh; 
			}
			set
			{
				if (_soNhomThucHanh == value && SoNhomThucHanh != null )
					return;
					
				this._soNhomThucHanh = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoNhomThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TongSoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTongSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TongSoTiet
		{
			get
			{
				return this._tongSoTiet; 
			}
			set
			{
				if (_tongSoTiet == value && TongSoTiet != null )
					return;
					
				this._tongSoTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("TongSoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTietLyThuyetTrenTuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTietLyThuyetTrenTuanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTietLyThuyetTrenTuan
		{
			get
			{
				return this._soTietLyThuyetTrenTuan; 
			}
			set
			{
				if (_soTietLyThuyetTrenTuan == value && SoTietLyThuyetTrenTuan != null )
					return;
					
				this._soTietLyThuyetTrenTuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTietLyThuyetTrenTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTietThucHanhTrenTuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSoTietThucHanhTrenTuanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SoTietThucHanhTrenTuan
		{
			get
			{
				return this._soTietThucHanhTrenTuan; 
			}
			set
			{
				if (_soTietThucHanhTrenTuan == value && SoTietThucHanhTrenTuan != null )
					return;
					
				this._soTietThucHanhTrenTuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTietThucHanhTrenTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TongSoTietTrenTuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTongSoTietTrenTuanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TongSoTietTrenTuan
		{
			get
			{
				return this._tongSoTietTrenTuan; 
			}
			set
			{
				if (_tongSoTietTrenTuan == value && TongSoTietTrenTuan != null )
					return;
					
				this._tongSoTietTrenTuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("TongSoTietTrenTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSoLopDong property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHeSoLopDongNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? HeSoLopDong
		{
			get
			{
				return this._heSoLopDong; 
			}
			set
			{
				if (_heSoLopDong == value && HeSoLopDong != null )
					return;
					
				this._heSoLopDong = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSoLopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiSo property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiSoNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SiSo
		{
			get
			{
				return this._siSo; 
			}
			set
			{
				if (_siSo == value && SiSo != null )
					return;
					
				this._siSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TrangThaiHoSo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TrangThaiHoSo
		{
			get
			{
				return this._trangThaiHoSo; 
			}
			set
			{
				if (_trangThaiHoSo == value)
					return;
					
				this._trangThaiHoSo = value;
				this._isDirty = true;
				
				OnPropertyChanged("TrangThaiHoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDonGiaNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? DonGia
		{
			get
			{
				return this._donGia; 
			}
			set
			{
				if (_donGia == value && DonGia != null )
					return;
					
				this._donGia = value;
				this._isDirty = true;
				
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DonViTienTe property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DonViTienTe
		{
			get
			{
				return this._donViTienTe; 
			}
			set
			{
				if (_donViTienTe == value)
					return;
					
				this._donViTienTe = value;
				this._isDirty = true;
				
				OnPropertyChanged("DonViTienTe");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TongGiaTriHopDong property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTongGiaTriHopDongNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TongGiaTriHopDong
		{
			get
			{
				return this._tongGiaTriHopDong; 
			}
			set
			{
				if (_tongGiaTriHopDong == value && TongGiaTriHopDong != null )
					return;
					
				this._tongGiaTriHopDong = value;
				this._isDirty = true;
				
				OnPropertyChanged("TongGiaTriHopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GiaTriHopDongConLai property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGiaTriHopDongConLaiNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? GiaTriHopDongConLai
		{
			get
			{
				return this._giaTriHopDongConLai; 
			}
			set
			{
				if (_giaTriHopDongConLai == value && GiaTriHopDongConLai != null )
					return;
					
				this._giaTriHopDongConLai = value;
				this._isDirty = true;
				
				OnPropertyChanged("GiaTriHopDongConLai");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Thue property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsThueNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Thue
		{
			get
			{
				return this._thue; 
			}
			set
			{
				if (_thue == value && Thue != null )
					return;
					
				this._thue = value;
				this._isDirty = true;
				
				OnPropertyChanged("Thue");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GhiChu
		{
			get
			{
				return this._ghiChu; 
			}
			set
			{
				if (_ghiChu == value)
					return;
					
				this._ghiChu = value;
				this._isDirty = true;
				
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DaXacNhan property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsDaXacNhanNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? DaXacNhan
		{
			get
			{
				return this._daXacNhan; 
			}
			set
			{
				if (_daXacNhan == value && DaXacNhan != null )
					return;
					
				this._daXacNhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("DaXacNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsLock property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsLockNull() and perform business logic appropriately.
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? IsLock
		{
			get
			{
				return this._isLock; 
			}
			set
			{
				if (_isLock == value && IsLock != null )
					return;
					
				this._isLock = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsLock");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this._ngayCapNhat; 
			}
			set
			{
				if (_ngayCapNhat == value)
					return;
					
				this._ngayCapNhat = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this._nguoiCapNhat; 
			}
			set
			{
				if (_nguoiCapNhat == value)
					return;
					
				this._nguoiCapNhat = value;
				this._isDirty = true;
				
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_DanhSachHopDongThinhGiang"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewDanhSachHopDongThinhGiangBase Entity 
		///</summary>
		public virtual ViewDanhSachHopDongThinhGiangBase Copy()
		{
			//shallow copy entity
			ViewDanhSachHopDongThinhGiang copy = new ViewDanhSachHopDongThinhGiang();
				copy.Id = this.Id;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaGiangVien = this.MaGiangVien;
				copy.HoTen = this.HoTen;
				copy.NgaySinh = this.NgaySinh;
				copy.SoCmnd = this.SoCmnd;
				copy.MaHocHam = this.MaHocHam;
				copy.TenHocHam = this.TenHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.TenHocVi = this.TenHocVi;
				copy.ChuyenNganh = this.ChuyenNganh;
				copy.MaSoThue = this.MaSoThue;
				copy.CoQuanCongTac = this.CoQuanCongTac;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaLop = this.MaLop;
				copy.SoHopDong = this.SoHopDong;
				copy.MaDonVi = this.MaDonVi;
				copy.TenDonVi = this.TenDonVi;
				copy.NgayBatDau = this.NgayBatDau;
				copy.NgayKetThuc = this.NgayKetThuc;
				copy.SoTietLyThuyet = this.SoTietLyThuyet;
				copy.SoTietThucHanh = this.SoTietThucHanh;
				copy.HeSoQuyDoiThucHanh = this.HeSoQuyDoiThucHanh;
				copy.SoNhomThucHanh = this.SoNhomThucHanh;
				copy.TongSoTiet = this.TongSoTiet;
				copy.SoTietLyThuyetTrenTuan = this.SoTietLyThuyetTrenTuan;
				copy.SoTietThucHanhTrenTuan = this.SoTietThucHanhTrenTuan;
				copy.TongSoTietTrenTuan = this.TongSoTietTrenTuan;
				copy.HeSoLopDong = this.HeSoLopDong;
				copy.SiSo = this.SiSo;
				copy.TrangThaiHoSo = this.TrangThaiHoSo;
				copy.DonGia = this.DonGia;
				copy.DonViTienTe = this.DonViTienTe;
				copy.TongGiaTriHopDong = this.TongGiaTriHopDong;
				copy.GiaTriHopDongConLai = this.GiaTriHopDongConLai;
				copy.Thue = this.Thue;
				copy.GhiChu = this.GhiChu;
				copy.DaXacNhan = this.DaXacNhan;
				copy.IsLock = this.IsLock;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
			copy.AcceptChanges();
			return (ViewDanhSachHopDongThinhGiang)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewDanhSachHopDongThinhGiangBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewDanhSachHopDongThinhGiangBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewDanhSachHopDongThinhGiangBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewDanhSachHopDongThinhGiangBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewDanhSachHopDongThinhGiangBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewDanhSachHopDongThinhGiangBase Object1, ViewDanhSachHopDongThinhGiangBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object1.NamHoc == null )
			{
				equal = false;
			}
			if (Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object1.HocKy == null )
			{
				equal = false;
			}
			if (Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object1.MaGiangVien == null )
			{
				equal = false;
			}
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.NgaySinh != null && Object2.NgaySinh != null )
			{
				if (Object1.NgaySinh != Object2.NgaySinh)
					equal = false;
			}
			else if (Object1.NgaySinh == null ^ Object1.NgaySinh == null )
			{
				equal = false;
			}
			if (Object1.SoCmnd != null && Object2.SoCmnd != null )
			{
				if (Object1.SoCmnd != Object2.SoCmnd)
					equal = false;
			}
			else if (Object1.SoCmnd == null ^ Object1.SoCmnd == null )
			{
				equal = false;
			}
			if (Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object1.MaHocHam == null )
			{
				equal = false;
			}
			if (Object1.TenHocHam != null && Object2.TenHocHam != null )
			{
				if (Object1.TenHocHam != Object2.TenHocHam)
					equal = false;
			}
			else if (Object1.TenHocHam == null ^ Object1.TenHocHam == null )
			{
				equal = false;
			}
			if (Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object1.MaHocVi == null )
			{
				equal = false;
			}
			if (Object1.TenHocVi != null && Object2.TenHocVi != null )
			{
				if (Object1.TenHocVi != Object2.TenHocVi)
					equal = false;
			}
			else if (Object1.TenHocVi == null ^ Object1.TenHocVi == null )
			{
				equal = false;
			}
			if (Object1.ChuyenNganh != null && Object2.ChuyenNganh != null )
			{
				if (Object1.ChuyenNganh != Object2.ChuyenNganh)
					equal = false;
			}
			else if (Object1.ChuyenNganh == null ^ Object1.ChuyenNganh == null )
			{
				equal = false;
			}
			if (Object1.MaSoThue != null && Object2.MaSoThue != null )
			{
				if (Object1.MaSoThue != Object2.MaSoThue)
					equal = false;
			}
			else if (Object1.MaSoThue == null ^ Object1.MaSoThue == null )
			{
				equal = false;
			}
			if (Object1.CoQuanCongTac != null && Object2.CoQuanCongTac != null )
			{
				if (Object1.CoQuanCongTac != Object2.CoQuanCongTac)
					equal = false;
			}
			else if (Object1.CoQuanCongTac == null ^ Object1.CoQuanCongTac == null )
			{
				equal = false;
			}
			if (Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object1.MaMonHoc == null )
			{
				equal = false;
			}
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object1.MaLopHocPhan == null )
			{
				equal = false;
			}
			if (Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object1.MaLop == null )
			{
				equal = false;
			}
			if (Object1.SoHopDong != null && Object2.SoHopDong != null )
			{
				if (Object1.SoHopDong != Object2.SoHopDong)
					equal = false;
			}
			else if (Object1.SoHopDong == null ^ Object1.SoHopDong == null )
			{
				equal = false;
			}
			if (Object1.MaDonVi != null && Object2.MaDonVi != null )
			{
				if (Object1.MaDonVi != Object2.MaDonVi)
					equal = false;
			}
			else if (Object1.MaDonVi == null ^ Object1.MaDonVi == null )
			{
				equal = false;
			}
			if (Object1.TenDonVi != Object2.TenDonVi)
				equal = false;
			if (Object1.NgayBatDau != null && Object2.NgayBatDau != null )
			{
				if (Object1.NgayBatDau != Object2.NgayBatDau)
					equal = false;
			}
			else if (Object1.NgayBatDau == null ^ Object1.NgayBatDau == null )
			{
				equal = false;
			}
			if (Object1.NgayKetThuc != null && Object2.NgayKetThuc != null )
			{
				if (Object1.NgayKetThuc != Object2.NgayKetThuc)
					equal = false;
			}
			else if (Object1.NgayKetThuc == null ^ Object1.NgayKetThuc == null )
			{
				equal = false;
			}
			if (Object1.SoTietLyThuyet != null && Object2.SoTietLyThuyet != null )
			{
				if (Object1.SoTietLyThuyet != Object2.SoTietLyThuyet)
					equal = false;
			}
			else if (Object1.SoTietLyThuyet == null ^ Object1.SoTietLyThuyet == null )
			{
				equal = false;
			}
			if (Object1.SoTietThucHanh != null && Object2.SoTietThucHanh != null )
			{
				if (Object1.SoTietThucHanh != Object2.SoTietThucHanh)
					equal = false;
			}
			else if (Object1.SoTietThucHanh == null ^ Object1.SoTietThucHanh == null )
			{
				equal = false;
			}
			if (Object1.HeSoQuyDoiThucHanh != null && Object2.HeSoQuyDoiThucHanh != null )
			{
				if (Object1.HeSoQuyDoiThucHanh != Object2.HeSoQuyDoiThucHanh)
					equal = false;
			}
			else if (Object1.HeSoQuyDoiThucHanh == null ^ Object1.HeSoQuyDoiThucHanh == null )
			{
				equal = false;
			}
			if (Object1.SoNhomThucHanh != null && Object2.SoNhomThucHanh != null )
			{
				if (Object1.SoNhomThucHanh != Object2.SoNhomThucHanh)
					equal = false;
			}
			else if (Object1.SoNhomThucHanh == null ^ Object1.SoNhomThucHanh == null )
			{
				equal = false;
			}
			if (Object1.TongSoTiet != null && Object2.TongSoTiet != null )
			{
				if (Object1.TongSoTiet != Object2.TongSoTiet)
					equal = false;
			}
			else if (Object1.TongSoTiet == null ^ Object1.TongSoTiet == null )
			{
				equal = false;
			}
			if (Object1.SoTietLyThuyetTrenTuan != null && Object2.SoTietLyThuyetTrenTuan != null )
			{
				if (Object1.SoTietLyThuyetTrenTuan != Object2.SoTietLyThuyetTrenTuan)
					equal = false;
			}
			else if (Object1.SoTietLyThuyetTrenTuan == null ^ Object1.SoTietLyThuyetTrenTuan == null )
			{
				equal = false;
			}
			if (Object1.SoTietThucHanhTrenTuan != null && Object2.SoTietThucHanhTrenTuan != null )
			{
				if (Object1.SoTietThucHanhTrenTuan != Object2.SoTietThucHanhTrenTuan)
					equal = false;
			}
			else if (Object1.SoTietThucHanhTrenTuan == null ^ Object1.SoTietThucHanhTrenTuan == null )
			{
				equal = false;
			}
			if (Object1.TongSoTietTrenTuan != null && Object2.TongSoTietTrenTuan != null )
			{
				if (Object1.TongSoTietTrenTuan != Object2.TongSoTietTrenTuan)
					equal = false;
			}
			else if (Object1.TongSoTietTrenTuan == null ^ Object1.TongSoTietTrenTuan == null )
			{
				equal = false;
			}
			if (Object1.HeSoLopDong != null && Object2.HeSoLopDong != null )
			{
				if (Object1.HeSoLopDong != Object2.HeSoLopDong)
					equal = false;
			}
			else if (Object1.HeSoLopDong == null ^ Object1.HeSoLopDong == null )
			{
				equal = false;
			}
			if (Object1.SiSo != null && Object2.SiSo != null )
			{
				if (Object1.SiSo != Object2.SiSo)
					equal = false;
			}
			else if (Object1.SiSo == null ^ Object1.SiSo == null )
			{
				equal = false;
			}
			if (Object1.TrangThaiHoSo != null && Object2.TrangThaiHoSo != null )
			{
				if (Object1.TrangThaiHoSo != Object2.TrangThaiHoSo)
					equal = false;
			}
			else if (Object1.TrangThaiHoSo == null ^ Object1.TrangThaiHoSo == null )
			{
				equal = false;
			}
			if (Object1.DonGia != null && Object2.DonGia != null )
			{
				if (Object1.DonGia != Object2.DonGia)
					equal = false;
			}
			else if (Object1.DonGia == null ^ Object1.DonGia == null )
			{
				equal = false;
			}
			if (Object1.DonViTienTe != null && Object2.DonViTienTe != null )
			{
				if (Object1.DonViTienTe != Object2.DonViTienTe)
					equal = false;
			}
			else if (Object1.DonViTienTe == null ^ Object1.DonViTienTe == null )
			{
				equal = false;
			}
			if (Object1.TongGiaTriHopDong != null && Object2.TongGiaTriHopDong != null )
			{
				if (Object1.TongGiaTriHopDong != Object2.TongGiaTriHopDong)
					equal = false;
			}
			else if (Object1.TongGiaTriHopDong == null ^ Object1.TongGiaTriHopDong == null )
			{
				equal = false;
			}
			if (Object1.GiaTriHopDongConLai != null && Object2.GiaTriHopDongConLai != null )
			{
				if (Object1.GiaTriHopDongConLai != Object2.GiaTriHopDongConLai)
					equal = false;
			}
			else if (Object1.GiaTriHopDongConLai == null ^ Object1.GiaTriHopDongConLai == null )
			{
				equal = false;
			}
			if (Object1.Thue != null && Object2.Thue != null )
			{
				if (Object1.Thue != Object2.Thue)
					equal = false;
			}
			else if (Object1.Thue == null ^ Object1.Thue == null )
			{
				equal = false;
			}
			if (Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object1.GhiChu == null )
			{
				equal = false;
			}
			if (Object1.DaXacNhan != null && Object2.DaXacNhan != null )
			{
				if (Object1.DaXacNhan != Object2.DaXacNhan)
					equal = false;
			}
			else if (Object1.DaXacNhan == null ^ Object1.DaXacNhan == null )
			{
				equal = false;
			}
			if (Object1.IsLock != null && Object2.IsLock != null )
			{
				if (Object1.IsLock != Object2.IsLock)
					equal = false;
			}
			else if (Object1.IsLock == null ^ Object1.IsLock == null )
			{
				equal = false;
			}
			if (Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object1.NgayCapNhat == null )
			{
				equal = false;
			}
			if (Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object1.NguoiCapNhat == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewDanhSachHopDongThinhGiang entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Id":
					return entity.Id;
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "HoTen":
					return entity.HoTen;
				case "NgaySinh":
					return entity.NgaySinh;
				case "SoCmnd":
					return entity.SoCmnd;
				case "MaHocHam":
					return entity.MaHocHam;
				case "TenHocHam":
					return entity.TenHocHam;
				case "MaHocVi":
					return entity.MaHocVi;
				case "TenHocVi":
					return entity.TenHocVi;
				case "ChuyenNganh":
					return entity.ChuyenNganh;
				case "MaSoThue":
					return entity.MaSoThue;
				case "CoQuanCongTac":
					return entity.CoQuanCongTac;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "MaLop":
					return entity.MaLop;
				case "SoHopDong":
					return entity.SoHopDong;
				case "MaDonVi":
					return entity.MaDonVi;
				case "TenDonVi":
					return entity.TenDonVi;
				case "NgayBatDau":
					return entity.NgayBatDau;
				case "NgayKetThuc":
					return entity.NgayKetThuc;
				case "SoTietLyThuyet":
					return entity.SoTietLyThuyet;
				case "SoTietThucHanh":
					return entity.SoTietThucHanh;
				case "HeSoQuyDoiThucHanh":
					return entity.HeSoQuyDoiThucHanh;
				case "SoNhomThucHanh":
					return entity.SoNhomThucHanh;
				case "TongSoTiet":
					return entity.TongSoTiet;
				case "SoTietLyThuyetTrenTuan":
					return entity.SoTietLyThuyetTrenTuan;
				case "SoTietThucHanhTrenTuan":
					return entity.SoTietThucHanhTrenTuan;
				case "TongSoTietTrenTuan":
					return entity.TongSoTietTrenTuan;
				case "HeSoLopDong":
					return entity.HeSoLopDong;
				case "SiSo":
					return entity.SiSo;
				case "TrangThaiHoSo":
					return entity.TrangThaiHoSo;
				case "DonGia":
					return entity.DonGia;
				case "DonViTienTe":
					return entity.DonViTienTe;
				case "TongGiaTriHopDong":
					return entity.TongGiaTriHopDong;
				case "GiaTriHopDongConLai":
					return entity.GiaTriHopDongConLai;
				case "Thue":
					return entity.Thue;
				case "GhiChu":
					return entity.GhiChu;
				case "DaXacNhan":
					return entity.DaXacNhan;
				case "IsLock":
					return entity.IsLock;
				case "NgayCapNhat":
					return entity.NgayCapNhat;
				case "NguoiCapNhat":
					return entity.NguoiCapNhat;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewDanhSachHopDongThinhGiang, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{45}{44}- Id: {0}{44}- NamHoc: {1}{44}- HocKy: {2}{44}- MaGiangVien: {3}{44}- HoTen: {4}{44}- NgaySinh: {5}{44}- SoCmnd: {6}{44}- MaHocHam: {7}{44}- TenHocHam: {8}{44}- MaHocVi: {9}{44}- TenHocVi: {10}{44}- ChuyenNganh: {11}{44}- MaSoThue: {12}{44}- CoQuanCongTac: {13}{44}- MaMonHoc: {14}{44}- TenMonHoc: {15}{44}- MaLopHocPhan: {16}{44}- MaLop: {17}{44}- SoHopDong: {18}{44}- MaDonVi: {19}{44}- TenDonVi: {20}{44}- NgayBatDau: {21}{44}- NgayKetThuc: {22}{44}- SoTietLyThuyet: {23}{44}- SoTietThucHanh: {24}{44}- HeSoQuyDoiThucHanh: {25}{44}- SoNhomThucHanh: {26}{44}- TongSoTiet: {27}{44}- SoTietLyThuyetTrenTuan: {28}{44}- SoTietThucHanhTrenTuan: {29}{44}- TongSoTietTrenTuan: {30}{44}- HeSoLopDong: {31}{44}- SiSo: {32}{44}- TrangThaiHoSo: {33}{44}- DonGia: {34}{44}- DonViTienTe: {35}{44}- TongGiaTriHopDong: {36}{44}- GiaTriHopDongConLai: {37}{44}- Thue: {38}{44}- GhiChu: {39}{44}- DaXacNhan: {40}{44}- IsLock: {41}{44}- NgayCapNhat: {42}{44}- NguoiCapNhat: {43}{44}", 
				this.Id,
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
			     
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
			     
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
			     
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				(this.NgaySinh == null) ? string.Empty : this.NgaySinh.ToString(),
			     
				(this.SoCmnd == null) ? string.Empty : this.SoCmnd.ToString(),
			     
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
			     
				(this.TenHocHam == null) ? string.Empty : this.TenHocHam.ToString(),
			     
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
			     
				(this.TenHocVi == null) ? string.Empty : this.TenHocVi.ToString(),
			     
				(this.ChuyenNganh == null) ? string.Empty : this.ChuyenNganh.ToString(),
			     
				(this.MaSoThue == null) ? string.Empty : this.MaSoThue.ToString(),
			     
				(this.CoQuanCongTac == null) ? string.Empty : this.CoQuanCongTac.ToString(),
			     
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
			     
				this.TenMonHoc,
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
			     
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
			     
				(this.SoHopDong == null) ? string.Empty : this.SoHopDong.ToString(),
			     
				(this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString(),
			     
				this.TenDonVi,
				(this.NgayBatDau == null) ? string.Empty : this.NgayBatDau.ToString(),
			     
				(this.NgayKetThuc == null) ? string.Empty : this.NgayKetThuc.ToString(),
			     
				(this.SoTietLyThuyet == null) ? string.Empty : this.SoTietLyThuyet.ToString(),
			     
				(this.SoTietThucHanh == null) ? string.Empty : this.SoTietThucHanh.ToString(),
			     
				(this.HeSoQuyDoiThucHanh == null) ? string.Empty : this.HeSoQuyDoiThucHanh.ToString(),
			     
				(this.SoNhomThucHanh == null) ? string.Empty : this.SoNhomThucHanh.ToString(),
			     
				(this.TongSoTiet == null) ? string.Empty : this.TongSoTiet.ToString(),
			     
				(this.SoTietLyThuyetTrenTuan == null) ? string.Empty : this.SoTietLyThuyetTrenTuan.ToString(),
			     
				(this.SoTietThucHanhTrenTuan == null) ? string.Empty : this.SoTietThucHanhTrenTuan.ToString(),
			     
				(this.TongSoTietTrenTuan == null) ? string.Empty : this.TongSoTietTrenTuan.ToString(),
			     
				(this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString(),
			     
				(this.SiSo == null) ? string.Empty : this.SiSo.ToString(),
			     
				(this.TrangThaiHoSo == null) ? string.Empty : this.TrangThaiHoSo.ToString(),
			     
				(this.DonGia == null) ? string.Empty : this.DonGia.ToString(),
			     
				(this.DonViTienTe == null) ? string.Empty : this.DonViTienTe.ToString(),
			     
				(this.TongGiaTriHopDong == null) ? string.Empty : this.TongGiaTriHopDong.ToString(),
			     
				(this.GiaTriHopDongConLai == null) ? string.Empty : this.GiaTriHopDongConLai.ToString(),
			     
				(this.Thue == null) ? string.Empty : this.Thue.ToString(),
			     
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
			     
				(this.DaXacNhan == null) ? string.Empty : this.DaXacNhan.ToString(),
			     
				(this.IsLock == null) ? string.Empty : this.IsLock.ToString(),
			     
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
			     
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewDanhSachHopDongThinhGiang columns.
	/// </summary>
	[Serializable]
	public enum ViewDanhSachHopDongThinhGiangColumn
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Id,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		HoTen,
		/// <summary>
		/// NgaySinh : 
		/// </summary>
		[EnumTextValue("NgaySinh")]
		[ColumnEnum("NgaySinh", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		NgaySinh,
		/// <summary>
		/// SoCmnd : 
		/// </summary>
		[EnumTextValue("SoCmnd")]
		[ColumnEnum("SoCmnd", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		SoCmnd,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("MaHocHam")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam,
		/// <summary>
		/// TenHocHam : 
		/// </summary>
		[EnumTextValue("TenHocHam")]
		[ColumnEnum("TenHocHam", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenHocHam,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("MaHocVi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi,
		/// <summary>
		/// TenHocVi : 
		/// </summary>
		[EnumTextValue("TenHocVi")]
		[ColumnEnum("TenHocVi", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenHocVi,
		/// <summary>
		/// ChuyenNganh : 
		/// </summary>
		[EnumTextValue("ChuyenNganh")]
		[ColumnEnum("ChuyenNganh", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ChuyenNganh,
		/// <summary>
		/// MaSoThue : 
		/// </summary>
		[EnumTextValue("MaSoThue")]
		[ColumnEnum("MaSoThue", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaSoThue,
		/// <summary>
		/// CoQuanCongTac : 
		/// </summary>
		[EnumTextValue("CoQuanCongTac")]
		[ColumnEnum("CoQuanCongTac", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		CoQuanCongTac,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MaLopHocPhan,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		MaLop,
		/// <summary>
		/// SoHopDong : 
		/// </summary>
		[EnumTextValue("SoHopDong")]
		[ColumnEnum("SoHopDong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		SoHopDong,
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		[EnumTextValue("MaDonVi")]
		[ColumnEnum("MaDonVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDonVi,
		/// <summary>
		/// TenDonVi : 
		/// </summary>
		[EnumTextValue("TenDonVi")]
		[ColumnEnum("TenDonVi", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenDonVi,
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		[EnumTextValue("NgayBatDau")]
		[ColumnEnum("NgayBatDau", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayBatDau,
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		[EnumTextValue("NgayKetThuc")]
		[ColumnEnum("NgayKetThuc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKetThuc,
		/// <summary>
		/// SoTietLyThuyet : 
		/// </summary>
		[EnumTextValue("SoTietLyThuyet")]
		[ColumnEnum("SoTietLyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietLyThuyet,
		/// <summary>
		/// SoTietThucHanh : 
		/// </summary>
		[EnumTextValue("SoTietThucHanh")]
		[ColumnEnum("SoTietThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietThucHanh,
		/// <summary>
		/// HeSoQuyDoiThucHanh : 
		/// </summary>
		[EnumTextValue("HeSoQuyDoiThucHanh")]
		[ColumnEnum("HeSoQuyDoiThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoQuyDoiThucHanh,
		/// <summary>
		/// SoNhomThucHanh : 
		/// </summary>
		[EnumTextValue("SoNhomThucHanh")]
		[ColumnEnum("SoNhomThucHanh", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoNhomThucHanh,
		/// <summary>
		/// TongSoTiet : 
		/// </summary>
		[EnumTextValue("TongSoTiet")]
		[ColumnEnum("TongSoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongSoTiet,
		/// <summary>
		/// SoTietLyThuyetTrenTuan : 
		/// </summary>
		[EnumTextValue("SoTietLyThuyetTrenTuan")]
		[ColumnEnum("SoTietLyThuyetTrenTuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietLyThuyetTrenTuan,
		/// <summary>
		/// SoTietThucHanhTrenTuan : 
		/// </summary>
		[EnumTextValue("SoTietThucHanhTrenTuan")]
		[ColumnEnum("SoTietThucHanhTrenTuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietThucHanhTrenTuan,
		/// <summary>
		/// TongSoTietTrenTuan : 
		/// </summary>
		[EnumTextValue("TongSoTietTrenTuan")]
		[ColumnEnum("TongSoTietTrenTuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongSoTietTrenTuan,
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		[EnumTextValue("HeSoLopDong")]
		[ColumnEnum("HeSoLopDong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLopDong,
		/// <summary>
		/// SiSo : 
		/// </summary>
		[EnumTextValue("SiSo")]
		[ColumnEnum("SiSo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSo,
		/// <summary>
		/// TrangThaiHoSo : 
		/// </summary>
		[EnumTextValue("TrangThaiHoSo")]
		[ColumnEnum("TrangThaiHoSo", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TrangThaiHoSo,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("DonGia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGia,
		/// <summary>
		/// DonViTienTe : 
		/// </summary>
		[EnumTextValue("DonViTienTe")]
		[ColumnEnum("DonViTienTe", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DonViTienTe,
		/// <summary>
		/// TongGiaTriHopDong : 
		/// </summary>
		[EnumTextValue("TongGiaTriHopDong")]
		[ColumnEnum("TongGiaTriHopDong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongGiaTriHopDong,
		/// <summary>
		/// GiaTriHopDongConLai : 
		/// </summary>
		[EnumTextValue("GiaTriHopDongConLai")]
		[ColumnEnum("GiaTriHopDongConLai", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GiaTriHopDongConLai,
		/// <summary>
		/// Thue : 
		/// </summary>
		[EnumTextValue("Thue")]
		[ColumnEnum("Thue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Thue,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("GhiChu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true)]
		GhiChu,
		/// <summary>
		/// DaXacNhan : 
		/// </summary>
		[EnumTextValue("DaXacNhan")]
		[ColumnEnum("DaXacNhan", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DaXacNhan,
		/// <summary>
		/// IsLock : 
		/// </summary>
		[EnumTextValue("IsLock")]
		[ColumnEnum("IsLock", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsLock,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("NgayCapNhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgayCapNhat,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("NguoiCapNhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat
	}//End enum

} // end namespace
