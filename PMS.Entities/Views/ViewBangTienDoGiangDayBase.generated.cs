/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ViewBangTienDoGiangDay.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'view_BangTienDoGiangDay' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewBangTienDoGiangDayBase")]
	public abstract partial class ViewBangTienDoGiangDayBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		private System.Int32		  _maLichHoc = (int)0;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.String		  _maGiangVien = string.Empty;
		
		/// <summary>
		/// Ho : 
		/// </summary>
		private System.String		  _ho = null;
		
		/// <summary>
		/// Ten : 
		/// </summary>
		private System.String		  _ten = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = string.Empty;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		private System.String		  _maLop = string.Empty;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = string.Empty;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = string.Empty;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		private System.Byte		  _maLoaiHocPhan = (byte)0;
		
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		private System.String		  _loaiHocPhan = null;
		
		/// <summary>
		/// PhanLoai : 
		/// </summary>
		private System.String		  _phanLoai = null;
		
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		private System.Int32?		  _siSoLop = null;
		
		/// <summary>
		/// TrongGio : 
		/// </summary>
		private System.Decimal?		  _trongGio = null;
		
		/// <summary>
		/// NgoaiGio : 
		/// </summary>
		private System.Decimal?		  _ngoaiGio = null;
		
		/// <summary>
		/// ChatLuongCao : 
		/// </summary>
		private System.Decimal?		  _chatLuongCao = null;
		
		/// <summary>
		/// Nhom : 
		/// </summary>
		private System.String		  _nhom = null;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		private System.Decimal		  _soTinChi = 0.0m;
		
		/// <summary>
		/// LyThuyet : 
		/// </summary>
		private System.Decimal		  _lyThuyet = 0.0m;
		
		/// <summary>
		/// ThucHanh : 
		/// </summary>
		private System.Decimal		  _thucHanh = 0.0m;
		
		/// <summary>
		/// BaiTap : 
		/// </summary>
		private System.Decimal		  _baiTap = 0.0m;
		
		/// <summary>
		/// BaiTapLon : 
		/// </summary>
		private System.Decimal		  _baiTapLon = 0.0m;
		
		/// <summary>
		/// DoAn : 
		/// </summary>
		private System.Decimal		  _doAn = 0.0m;
		
		/// <summary>
		/// LuanAn : 
		/// </summary>
		private System.Decimal		  _luanAn = 0.0m;
		
		/// <summary>
		/// TieuLuan : 
		/// </summary>
		private System.Decimal		  _tieuLuan = 0.0m;
		
		/// <summary>
		/// ThucTap : 
		/// </summary>
		private System.Decimal		  _thucTap = 0.0m;
		
		/// <summary>
		/// Tuan : 
		/// </summary>
		private System.Int32?		  _tuan = null;
		
		/// <summary>
		/// Nam : 
		/// </summary>
		private System.Int32?		  _nam = null;
		
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		private System.DateTime?		  _ngayBatDau = null;
		
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		private System.DateTime?		  _ngayKetThuc = null;
		
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		private System.Int32?		  _maBuoiHoc = null;
		
		/// <summary>
		/// TenBuoiHoc : 
		/// </summary>
		private System.String		  _tenBuoiHoc = string.Empty;
		
		/// <summary>
		/// ThoiGianHoc : 
		/// </summary>
		private System.String		  _thoiGianHoc = string.Empty;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Int32?		  _soTiet = null;
		
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		private System.Int32?		  _tietBatDau = null;
		
		/// <summary>
		/// NgayTao : 
		/// </summary>
		private System.DateTime?		  _ngayTao = null;
		
		/// <summary>
		/// RowIndex : 
		/// </summary>
		private System.Int32?		  _rowIndex = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewBangTienDoGiangDayBase"/> instance.
		///</summary>
		public ViewBangTienDoGiangDayBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewBangTienDoGiangDayBase"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_phanLoai"></param>
		///<param name="_siSoLop"></param>
		///<param name="_trongGio"></param>
		///<param name="_ngoaiGio"></param>
		///<param name="_chatLuongCao"></param>
		///<param name="_nhom"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_baiTap"></param>
		///<param name="_baiTapLon"></param>
		///<param name="_doAn"></param>
		///<param name="_luanAn"></param>
		///<param name="_tieuLuan"></param>
		///<param name="_thucTap"></param>
		///<param name="_tuan"></param>
		///<param name="_nam"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_tenBuoiHoc"></param>
		///<param name="_thoiGianHoc"></param>
		///<param name="_soTiet"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_ngayTao"></param>
		///<param name="_rowIndex"></param>
		public ViewBangTienDoGiangDayBase(System.Int32 _maLichHoc, System.String _maGiangVien, System.String _ho, System.String _ten, System.String _maLopHocPhan, System.String _maLop, System.String _namHoc, System.String _hocKy, System.String _maMonHoc, System.Byte _maLoaiHocPhan, System.String _loaiHocPhan, System.String _phanLoai, System.Int32? _siSoLop, System.Decimal? _trongGio, System.Decimal? _ngoaiGio, System.Decimal? _chatLuongCao, System.String _nhom, System.Decimal _soTinChi, System.Decimal _lyThuyet, System.Decimal _thucHanh, System.Decimal _baiTap, System.Decimal _baiTapLon, System.Decimal _doAn, System.Decimal _luanAn, System.Decimal _tieuLuan, System.Decimal _thucTap, System.Int32? _tuan, System.Int32? _nam, System.DateTime? _ngayBatDau, System.DateTime? _ngayKetThuc, System.Int32? _maBuoiHoc, System.String _tenBuoiHoc, System.String _thoiGianHoc, System.Int32? _soTiet, System.Int32? _tietBatDau, System.DateTime? _ngayTao, System.Int32? _rowIndex)
		{
			this._maLichHoc = _maLichHoc;
			this._maGiangVien = _maGiangVien;
			this._ho = _ho;
			this._ten = _ten;
			this._maLopHocPhan = _maLopHocPhan;
			this._maLop = _maLop;
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._maMonHoc = _maMonHoc;
			this._maLoaiHocPhan = _maLoaiHocPhan;
			this._loaiHocPhan = _loaiHocPhan;
			this._phanLoai = _phanLoai;
			this._siSoLop = _siSoLop;
			this._trongGio = _trongGio;
			this._ngoaiGio = _ngoaiGio;
			this._chatLuongCao = _chatLuongCao;
			this._nhom = _nhom;
			this._soTinChi = _soTinChi;
			this._lyThuyet = _lyThuyet;
			this._thucHanh = _thucHanh;
			this._baiTap = _baiTap;
			this._baiTapLon = _baiTapLon;
			this._doAn = _doAn;
			this._luanAn = _luanAn;
			this._tieuLuan = _tieuLuan;
			this._thucTap = _thucTap;
			this._tuan = _tuan;
			this._nam = _nam;
			this._ngayBatDau = _ngayBatDau;
			this._ngayKetThuc = _ngayKetThuc;
			this._maBuoiHoc = _maBuoiHoc;
			this._tenBuoiHoc = _tenBuoiHoc;
			this._thoiGianHoc = _thoiGianHoc;
			this._soTiet = _soTiet;
			this._tietBatDau = _tietBatDau;
			this._ngayTao = _ngayTao;
			this._rowIndex = _rowIndex;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewBangTienDoGiangDay"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_phanLoai"></param>
		///<param name="_siSoLop"></param>
		///<param name="_trongGio"></param>
		///<param name="_ngoaiGio"></param>
		///<param name="_chatLuongCao"></param>
		///<param name="_nhom"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_baiTap"></param>
		///<param name="_baiTapLon"></param>
		///<param name="_doAn"></param>
		///<param name="_luanAn"></param>
		///<param name="_tieuLuan"></param>
		///<param name="_thucTap"></param>
		///<param name="_tuan"></param>
		///<param name="_nam"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_tenBuoiHoc"></param>
		///<param name="_thoiGianHoc"></param>
		///<param name="_soTiet"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_ngayTao"></param>
		///<param name="_rowIndex"></param>
		public static ViewBangTienDoGiangDay CreateViewBangTienDoGiangDay(System.Int32 _maLichHoc, System.String _maGiangVien, System.String _ho, System.String _ten, System.String _maLopHocPhan, System.String _maLop, System.String _namHoc, System.String _hocKy, System.String _maMonHoc, System.Byte _maLoaiHocPhan, System.String _loaiHocPhan, System.String _phanLoai, System.Int32? _siSoLop, System.Decimal? _trongGio, System.Decimal? _ngoaiGio, System.Decimal? _chatLuongCao, System.String _nhom, System.Decimal _soTinChi, System.Decimal _lyThuyet, System.Decimal _thucHanh, System.Decimal _baiTap, System.Decimal _baiTapLon, System.Decimal _doAn, System.Decimal _luanAn, System.Decimal _tieuLuan, System.Decimal _thucTap, System.Int32? _tuan, System.Int32? _nam, System.DateTime? _ngayBatDau, System.DateTime? _ngayKetThuc, System.Int32? _maBuoiHoc, System.String _tenBuoiHoc, System.String _thoiGianHoc, System.Int32? _soTiet, System.Int32? _tietBatDau, System.DateTime? _ngayTao, System.Int32? _rowIndex)
		{
			ViewBangTienDoGiangDay newViewBangTienDoGiangDay = new ViewBangTienDoGiangDay();
			newViewBangTienDoGiangDay.MaLichHoc = _maLichHoc;
			newViewBangTienDoGiangDay.MaGiangVien = _maGiangVien;
			newViewBangTienDoGiangDay.Ho = _ho;
			newViewBangTienDoGiangDay.Ten = _ten;
			newViewBangTienDoGiangDay.MaLopHocPhan = _maLopHocPhan;
			newViewBangTienDoGiangDay.MaLop = _maLop;
			newViewBangTienDoGiangDay.NamHoc = _namHoc;
			newViewBangTienDoGiangDay.HocKy = _hocKy;
			newViewBangTienDoGiangDay.MaMonHoc = _maMonHoc;
			newViewBangTienDoGiangDay.MaLoaiHocPhan = _maLoaiHocPhan;
			newViewBangTienDoGiangDay.LoaiHocPhan = _loaiHocPhan;
			newViewBangTienDoGiangDay.PhanLoai = _phanLoai;
			newViewBangTienDoGiangDay.SiSoLop = _siSoLop;
			newViewBangTienDoGiangDay.TrongGio = _trongGio;
			newViewBangTienDoGiangDay.NgoaiGio = _ngoaiGio;
			newViewBangTienDoGiangDay.ChatLuongCao = _chatLuongCao;
			newViewBangTienDoGiangDay.Nhom = _nhom;
			newViewBangTienDoGiangDay.SoTinChi = _soTinChi;
			newViewBangTienDoGiangDay.LyThuyet = _lyThuyet;
			newViewBangTienDoGiangDay.ThucHanh = _thucHanh;
			newViewBangTienDoGiangDay.BaiTap = _baiTap;
			newViewBangTienDoGiangDay.BaiTapLon = _baiTapLon;
			newViewBangTienDoGiangDay.DoAn = _doAn;
			newViewBangTienDoGiangDay.LuanAn = _luanAn;
			newViewBangTienDoGiangDay.TieuLuan = _tieuLuan;
			newViewBangTienDoGiangDay.ThucTap = _thucTap;
			newViewBangTienDoGiangDay.Tuan = _tuan;
			newViewBangTienDoGiangDay.Nam = _nam;
			newViewBangTienDoGiangDay.NgayBatDau = _ngayBatDau;
			newViewBangTienDoGiangDay.NgayKetThuc = _ngayKetThuc;
			newViewBangTienDoGiangDay.MaBuoiHoc = _maBuoiHoc;
			newViewBangTienDoGiangDay.TenBuoiHoc = _tenBuoiHoc;
			newViewBangTienDoGiangDay.ThoiGianHoc = _thoiGianHoc;
			newViewBangTienDoGiangDay.SoTiet = _soTiet;
			newViewBangTienDoGiangDay.TietBatDau = _tietBatDau;
			newViewBangTienDoGiangDay.NgayTao = _ngayTao;
			newViewBangTienDoGiangDay.RowIndex = _rowIndex;
			return newViewBangTienDoGiangDay;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaLichHoc property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 MaLichHoc
		{
			get
			{
				return this._maLichHoc; 
			}
			set
			{
				if (_maLichHoc == value)
					return;
					
				this._maLichHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLichHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaGiangVien does not allow null values.");
				if (_maGiangVien == value)
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ho property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ho
		{
			get
			{
				return this._ho; 
			}
			set
			{
				if (_ho == value)
					return;
					
				this._ho = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ho");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ten property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ten
		{
			get
			{
				return this._ten; 
			}
			set
			{
				if (_ten == value)
					return;
					
				this._ten = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ten");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLopHocPhan does not allow null values.");
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLop
		{
			get
			{
				return this._maLop; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLop does not allow null values.");
				if (_maLop == value)
					return;
					
				this._maLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "NamHoc does not allow null values.");
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "HocKy does not allow null values.");
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is tinyint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Byte MaLoaiHocPhan
		{
			get
			{
				return this._maLoaiHocPhan; 
			}
			set
			{
				if (_maLoaiHocPhan == value)
					return;
					
				this._maLoaiHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LoaiHocPhan
		{
			get
			{
				return this._loaiHocPhan; 
			}
			set
			{
				if (_loaiHocPhan == value)
					return;
					
				this._loaiHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("LoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PhanLoai property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PhanLoai
		{
			get
			{
				return this._phanLoai; 
			}
			set
			{
				if (_phanLoai == value)
					return;
					
				this._phanLoai = value;
				this._isDirty = true;
				
				OnPropertyChanged("PhanLoai");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiSoLop property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiSoLopNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SiSoLop
		{
			get
			{
				return this._siSoLop; 
			}
			set
			{
				if (_siSoLop == value && SiSoLop != null )
					return;
					
				this._siSoLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiSoLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TrongGio property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTrongGioNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TrongGio
		{
			get
			{
				return this._trongGio; 
			}
			set
			{
				if (_trongGio == value && TrongGio != null )
					return;
					
				this._trongGio = value;
				this._isDirty = true;
				
				OnPropertyChanged("TrongGio");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgoaiGio property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNgoaiGioNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? NgoaiGio
		{
			get
			{
				return this._ngoaiGio; 
			}
			set
			{
				if (_ngoaiGio == value && NgoaiGio != null )
					return;
					
				this._ngoaiGio = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgoaiGio");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ChatLuongCao property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsChatLuongCaoNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? ChatLuongCao
		{
			get
			{
				return this._chatLuongCao; 
			}
			set
			{
				if (_chatLuongCao == value && ChatLuongCao != null )
					return;
					
				this._chatLuongCao = value;
				this._isDirty = true;
				
				OnPropertyChanged("ChatLuongCao");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nhom property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Nhom
		{
			get
			{
				return this._nhom; 
			}
			set
			{
				if (_nhom == value)
					return;
					
				this._nhom = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nhom");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal SoTinChi
		{
			get
			{
				return this._soTinChi; 
			}
			set
			{
				if (_soTinChi == value)
					return;
					
				this._soTinChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal LyThuyet
		{
			get
			{
				return this._lyThuyet; 
			}
			set
			{
				if (_lyThuyet == value)
					return;
					
				this._lyThuyet = value;
				this._isDirty = true;
				
				OnPropertyChanged("LyThuyet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal ThucHanh
		{
			get
			{
				return this._thucHanh; 
			}
			set
			{
				if (_thucHanh == value)
					return;
					
				this._thucHanh = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BaiTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal BaiTap
		{
			get
			{
				return this._baiTap; 
			}
			set
			{
				if (_baiTap == value)
					return;
					
				this._baiTap = value;
				this._isDirty = true;
				
				OnPropertyChanged("BaiTap");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BaiTapLon property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal BaiTapLon
		{
			get
			{
				return this._baiTapLon; 
			}
			set
			{
				if (_baiTapLon == value)
					return;
					
				this._baiTapLon = value;
				this._isDirty = true;
				
				OnPropertyChanged("BaiTapLon");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DoAn property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal DoAn
		{
			get
			{
				return this._doAn; 
			}
			set
			{
				if (_doAn == value)
					return;
					
				this._doAn = value;
				this._isDirty = true;
				
				OnPropertyChanged("DoAn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LuanAn property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal LuanAn
		{
			get
			{
				return this._luanAn; 
			}
			set
			{
				if (_luanAn == value)
					return;
					
				this._luanAn = value;
				this._isDirty = true;
				
				OnPropertyChanged("LuanAn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TieuLuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal TieuLuan
		{
			get
			{
				return this._tieuLuan; 
			}
			set
			{
				if (_tieuLuan == value)
					return;
					
				this._tieuLuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("TieuLuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ThucTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal ThucTap
		{
			get
			{
				return this._thucTap; 
			}
			set
			{
				if (_thucTap == value)
					return;
					
				this._thucTap = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThucTap");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Tuan property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTuanNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Tuan
		{
			get
			{
				return this._tuan; 
			}
			set
			{
				if (_tuan == value && Tuan != null )
					return;
					
				this._tuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("Tuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nam property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNamNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Nam
		{
			get
			{
				return this._nam; 
			}
			set
			{
				if (_nam == value && Nam != null )
					return;
					
				this._nam = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayBatDau property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayBatDauNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayBatDau
		{
			get
			{
				return this._ngayBatDau; 
			}
			set
			{
				if (_ngayBatDau == value && NgayBatDau != null )
					return;
					
				this._ngayBatDau = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayKetThuc property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayKetThucNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayKetThuc
		{
			get
			{
				return this._ngayKetThuc; 
			}
			set
			{
				if (_ngayKetThuc == value && NgayKetThuc != null )
					return;
					
				this._ngayKetThuc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayKetThuc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBuoiHoc property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaBuoiHocNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaBuoiHoc
		{
			get
			{
				return this._maBuoiHoc; 
			}
			set
			{
				if (_maBuoiHoc == value && MaBuoiHoc != null )
					return;
					
				this._maBuoiHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBuoiHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenBuoiHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenBuoiHoc
		{
			get
			{
				return this._tenBuoiHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenBuoiHoc does not allow null values.");
				if (_tenBuoiHoc == value)
					return;
					
				this._tenBuoiHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenBuoiHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ThoiGianHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ThoiGianHoc
		{
			get
			{
				return this._thoiGianHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ThoiGianHoc does not allow null values.");
				if (_thoiGianHoc == value)
					return;
					
				this._thoiGianHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThoiGianHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSoTietNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value && SoTiet != null )
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietBatDau property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTietBatDauNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? TietBatDau
		{
			get
			{
				return this._tietBatDau; 
			}
			set
			{
				if (_tietBatDau == value && TietBatDau != null )
					return;
					
				this._tietBatDau = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayTao property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayTaoNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayTao
		{
			get
			{
				return this._ngayTao; 
			}
			set
			{
				if (_ngayTao == value && NgayTao != null )
					return;
					
				this._ngayTao = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayTao");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RowIndex property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRowIndexNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? RowIndex
		{
			get
			{
				return this._rowIndex; 
			}
			set
			{
				if (_rowIndex == value && RowIndex != null )
					return;
					
				this._rowIndex = value;
				this._isDirty = true;
				
				OnPropertyChanged("RowIndex");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "view_BangTienDoGiangDay"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewBangTienDoGiangDayBase Entity 
		///</summary>
		public virtual ViewBangTienDoGiangDayBase Copy()
		{
			//shallow copy entity
			ViewBangTienDoGiangDay copy = new ViewBangTienDoGiangDay();
				copy.MaLichHoc = this.MaLichHoc;
				copy.MaGiangVien = this.MaGiangVien;
				copy.Ho = this.Ho;
				copy.Ten = this.Ten;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaLop = this.MaLop;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaMonHoc = this.MaMonHoc;
				copy.MaLoaiHocPhan = this.MaLoaiHocPhan;
				copy.LoaiHocPhan = this.LoaiHocPhan;
				copy.PhanLoai = this.PhanLoai;
				copy.SiSoLop = this.SiSoLop;
				copy.TrongGio = this.TrongGio;
				copy.NgoaiGio = this.NgoaiGio;
				copy.ChatLuongCao = this.ChatLuongCao;
				copy.Nhom = this.Nhom;
				copy.SoTinChi = this.SoTinChi;
				copy.LyThuyet = this.LyThuyet;
				copy.ThucHanh = this.ThucHanh;
				copy.BaiTap = this.BaiTap;
				copy.BaiTapLon = this.BaiTapLon;
				copy.DoAn = this.DoAn;
				copy.LuanAn = this.LuanAn;
				copy.TieuLuan = this.TieuLuan;
				copy.ThucTap = this.ThucTap;
				copy.Tuan = this.Tuan;
				copy.Nam = this.Nam;
				copy.NgayBatDau = this.NgayBatDau;
				copy.NgayKetThuc = this.NgayKetThuc;
				copy.MaBuoiHoc = this.MaBuoiHoc;
				copy.TenBuoiHoc = this.TenBuoiHoc;
				copy.ThoiGianHoc = this.ThoiGianHoc;
				copy.SoTiet = this.SoTiet;
				copy.TietBatDau = this.TietBatDau;
				copy.NgayTao = this.NgayTao;
				copy.RowIndex = this.RowIndex;
			copy.AcceptChanges();
			return (ViewBangTienDoGiangDay)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewBangTienDoGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewBangTienDoGiangDayBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewBangTienDoGiangDayBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewBangTienDoGiangDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewBangTienDoGiangDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewBangTienDoGiangDayBase Object1, ViewBangTienDoGiangDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaLichHoc != Object2.MaLichHoc)
				equal = false;
			if (Object1.MaGiangVien != Object2.MaGiangVien)
				equal = false;
			if (Object1.Ho != null && Object2.Ho != null )
			{
				if (Object1.Ho != Object2.Ho)
					equal = false;
			}
			else if (Object1.Ho == null ^ Object1.Ho == null )
			{
				equal = false;
			}
			if (Object1.Ten != null && Object2.Ten != null )
			{
				if (Object1.Ten != Object2.Ten)
					equal = false;
			}
			else if (Object1.Ten == null ^ Object1.Ten == null )
			{
				equal = false;
			}
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if (Object1.MaLop != Object2.MaLop)
				equal = false;
			if (Object1.NamHoc != Object2.NamHoc)
				equal = false;
			if (Object1.HocKy != Object2.HocKy)
				equal = false;
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.MaLoaiHocPhan != Object2.MaLoaiHocPhan)
				equal = false;
			if (Object1.LoaiHocPhan != null && Object2.LoaiHocPhan != null )
			{
				if (Object1.LoaiHocPhan != Object2.LoaiHocPhan)
					equal = false;
			}
			else if (Object1.LoaiHocPhan == null ^ Object1.LoaiHocPhan == null )
			{
				equal = false;
			}
			if (Object1.PhanLoai != null && Object2.PhanLoai != null )
			{
				if (Object1.PhanLoai != Object2.PhanLoai)
					equal = false;
			}
			else if (Object1.PhanLoai == null ^ Object1.PhanLoai == null )
			{
				equal = false;
			}
			if (Object1.SiSoLop != null && Object2.SiSoLop != null )
			{
				if (Object1.SiSoLop != Object2.SiSoLop)
					equal = false;
			}
			else if (Object1.SiSoLop == null ^ Object1.SiSoLop == null )
			{
				equal = false;
			}
			if (Object1.TrongGio != null && Object2.TrongGio != null )
			{
				if (Object1.TrongGio != Object2.TrongGio)
					equal = false;
			}
			else if (Object1.TrongGio == null ^ Object1.TrongGio == null )
			{
				equal = false;
			}
			if (Object1.NgoaiGio != null && Object2.NgoaiGio != null )
			{
				if (Object1.NgoaiGio != Object2.NgoaiGio)
					equal = false;
			}
			else if (Object1.NgoaiGio == null ^ Object1.NgoaiGio == null )
			{
				equal = false;
			}
			if (Object1.ChatLuongCao != null && Object2.ChatLuongCao != null )
			{
				if (Object1.ChatLuongCao != Object2.ChatLuongCao)
					equal = false;
			}
			else if (Object1.ChatLuongCao == null ^ Object1.ChatLuongCao == null )
			{
				equal = false;
			}
			if (Object1.Nhom != null && Object2.Nhom != null )
			{
				if (Object1.Nhom != Object2.Nhom)
					equal = false;
			}
			else if (Object1.Nhom == null ^ Object1.Nhom == null )
			{
				equal = false;
			}
			if (Object1.SoTinChi != Object2.SoTinChi)
				equal = false;
			if (Object1.LyThuyet != Object2.LyThuyet)
				equal = false;
			if (Object1.ThucHanh != Object2.ThucHanh)
				equal = false;
			if (Object1.BaiTap != Object2.BaiTap)
				equal = false;
			if (Object1.BaiTapLon != Object2.BaiTapLon)
				equal = false;
			if (Object1.DoAn != Object2.DoAn)
				equal = false;
			if (Object1.LuanAn != Object2.LuanAn)
				equal = false;
			if (Object1.TieuLuan != Object2.TieuLuan)
				equal = false;
			if (Object1.ThucTap != Object2.ThucTap)
				equal = false;
			if (Object1.Tuan != null && Object2.Tuan != null )
			{
				if (Object1.Tuan != Object2.Tuan)
					equal = false;
			}
			else if (Object1.Tuan == null ^ Object1.Tuan == null )
			{
				equal = false;
			}
			if (Object1.Nam != null && Object2.Nam != null )
			{
				if (Object1.Nam != Object2.Nam)
					equal = false;
			}
			else if (Object1.Nam == null ^ Object1.Nam == null )
			{
				equal = false;
			}
			if (Object1.NgayBatDau != null && Object2.NgayBatDau != null )
			{
				if (Object1.NgayBatDau != Object2.NgayBatDau)
					equal = false;
			}
			else if (Object1.NgayBatDau == null ^ Object1.NgayBatDau == null )
			{
				equal = false;
			}
			if (Object1.NgayKetThuc != null && Object2.NgayKetThuc != null )
			{
				if (Object1.NgayKetThuc != Object2.NgayKetThuc)
					equal = false;
			}
			else if (Object1.NgayKetThuc == null ^ Object1.NgayKetThuc == null )
			{
				equal = false;
			}
			if (Object1.MaBuoiHoc != null && Object2.MaBuoiHoc != null )
			{
				if (Object1.MaBuoiHoc != Object2.MaBuoiHoc)
					equal = false;
			}
			else if (Object1.MaBuoiHoc == null ^ Object1.MaBuoiHoc == null )
			{
				equal = false;
			}
			if (Object1.TenBuoiHoc != Object2.TenBuoiHoc)
				equal = false;
			if (Object1.ThoiGianHoc != Object2.ThoiGianHoc)
				equal = false;
			if (Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object1.SoTiet == null )
			{
				equal = false;
			}
			if (Object1.TietBatDau != null && Object2.TietBatDau != null )
			{
				if (Object1.TietBatDau != Object2.TietBatDau)
					equal = false;
			}
			else if (Object1.TietBatDau == null ^ Object1.TietBatDau == null )
			{
				equal = false;
			}
			if (Object1.NgayTao != null && Object2.NgayTao != null )
			{
				if (Object1.NgayTao != Object2.NgayTao)
					equal = false;
			}
			else if (Object1.NgayTao == null ^ Object1.NgayTao == null )
			{
				equal = false;
			}
			if (Object1.RowIndex != null && Object2.RowIndex != null )
			{
				if (Object1.RowIndex != Object2.RowIndex)
					equal = false;
			}
			else if (Object1.RowIndex == null ^ Object1.RowIndex == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewBangTienDoGiangDay entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaLichHoc":
					return entity.MaLichHoc;
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "Ho":
					return entity.Ho;
				case "Ten":
					return entity.Ten;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "MaLop":
					return entity.MaLop;
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "MaLoaiHocPhan":
					return entity.MaLoaiHocPhan;
				case "LoaiHocPhan":
					return entity.LoaiHocPhan;
				case "PhanLoai":
					return entity.PhanLoai;
				case "SiSoLop":
					return entity.SiSoLop;
				case "TrongGio":
					return entity.TrongGio;
				case "NgoaiGio":
					return entity.NgoaiGio;
				case "ChatLuongCao":
					return entity.ChatLuongCao;
				case "Nhom":
					return entity.Nhom;
				case "SoTinChi":
					return entity.SoTinChi;
				case "LyThuyet":
					return entity.LyThuyet;
				case "ThucHanh":
					return entity.ThucHanh;
				case "BaiTap":
					return entity.BaiTap;
				case "BaiTapLon":
					return entity.BaiTapLon;
				case "DoAn":
					return entity.DoAn;
				case "LuanAn":
					return entity.LuanAn;
				case "TieuLuan":
					return entity.TieuLuan;
				case "ThucTap":
					return entity.ThucTap;
				case "Tuan":
					return entity.Tuan;
				case "Nam":
					return entity.Nam;
				case "NgayBatDau":
					return entity.NgayBatDau;
				case "NgayKetThuc":
					return entity.NgayKetThuc;
				case "MaBuoiHoc":
					return entity.MaBuoiHoc;
				case "TenBuoiHoc":
					return entity.TenBuoiHoc;
				case "ThoiGianHoc":
					return entity.ThoiGianHoc;
				case "SoTiet":
					return entity.SoTiet;
				case "TietBatDau":
					return entity.TietBatDau;
				case "NgayTao":
					return entity.NgayTao;
				case "RowIndex":
					return entity.RowIndex;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewBangTienDoGiangDay, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{38}{37}- MaLichHoc: {0}{37}- MaGiangVien: {1}{37}- Ho: {2}{37}- Ten: {3}{37}- MaLopHocPhan: {4}{37}- MaLop: {5}{37}- NamHoc: {6}{37}- HocKy: {7}{37}- MaMonHoc: {8}{37}- MaLoaiHocPhan: {9}{37}- LoaiHocPhan: {10}{37}- PhanLoai: {11}{37}- SiSoLop: {12}{37}- TrongGio: {13}{37}- NgoaiGio: {14}{37}- ChatLuongCao: {15}{37}- Nhom: {16}{37}- SoTinChi: {17}{37}- LyThuyet: {18}{37}- ThucHanh: {19}{37}- BaiTap: {20}{37}- BaiTapLon: {21}{37}- DoAn: {22}{37}- LuanAn: {23}{37}- TieuLuan: {24}{37}- ThucTap: {25}{37}- Tuan: {26}{37}- Nam: {27}{37}- NgayBatDau: {28}{37}- NgayKetThuc: {29}{37}- MaBuoiHoc: {30}{37}- TenBuoiHoc: {31}{37}- ThoiGianHoc: {32}{37}- SoTiet: {33}{37}- TietBatDau: {34}{37}- NgayTao: {35}{37}- RowIndex: {36}{37}", 
				this.MaLichHoc,
				this.MaGiangVien,
				(this.Ho == null) ? string.Empty : this.Ho.ToString(),
			     
				(this.Ten == null) ? string.Empty : this.Ten.ToString(),
			     
				this.MaLopHocPhan,
				this.MaLop,
				this.NamHoc,
				this.HocKy,
				this.MaMonHoc,
				this.MaLoaiHocPhan,
				(this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString(),
			     
				(this.PhanLoai == null) ? string.Empty : this.PhanLoai.ToString(),
			     
				(this.SiSoLop == null) ? string.Empty : this.SiSoLop.ToString(),
			     
				(this.TrongGio == null) ? string.Empty : this.TrongGio.ToString(),
			     
				(this.NgoaiGio == null) ? string.Empty : this.NgoaiGio.ToString(),
			     
				(this.ChatLuongCao == null) ? string.Empty : this.ChatLuongCao.ToString(),
			     
				(this.Nhom == null) ? string.Empty : this.Nhom.ToString(),
			     
				this.SoTinChi,
				this.LyThuyet,
				this.ThucHanh,
				this.BaiTap,
				this.BaiTapLon,
				this.DoAn,
				this.LuanAn,
				this.TieuLuan,
				this.ThucTap,
				(this.Tuan == null) ? string.Empty : this.Tuan.ToString(),
			     
				(this.Nam == null) ? string.Empty : this.Nam.ToString(),
			     
				(this.NgayBatDau == null) ? string.Empty : this.NgayBatDau.ToString(),
			     
				(this.NgayKetThuc == null) ? string.Empty : this.NgayKetThuc.ToString(),
			     
				(this.MaBuoiHoc == null) ? string.Empty : this.MaBuoiHoc.ToString(),
			     
				this.TenBuoiHoc,
				this.ThoiGianHoc,
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
			     
				(this.TietBatDau == null) ? string.Empty : this.TietBatDau.ToString(),
			     
				(this.NgayTao == null) ? string.Empty : this.NgayTao.ToString(),
			     
				(this.RowIndex == null) ? string.Empty : this.RowIndex.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewBangTienDoGiangDay columns.
	/// </summary>
	[Serializable]
	public enum ViewBangTienDoGiangDayColumn
	{
		/// <summary>
		/// MaLichHoc : 
		/// </summary>
		[EnumTextValue("MaLichHoc")]
		[ColumnEnum("MaLichHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MaLichHoc,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaGiangVien,
		/// <summary>
		/// Ho : 
		/// </summary>
		[EnumTextValue("Ho")]
		[ColumnEnum("Ho", typeof(System.String), System.Data.DbType.String, false, false, true, 101)]
		Ho,
		/// <summary>
		/// Ten : 
		/// </summary>
		[EnumTextValue("Ten")]
		[ColumnEnum("Ten", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Ten,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaLopHocPhan,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaLop,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		HocKy,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// MaLoaiHocPhan : 
		/// </summary>
		[EnumTextValue("MaLoaiHocPhan")]
		[ColumnEnum("MaLoaiHocPhan", typeof(System.Byte), System.Data.DbType.Byte, false, false, false)]
		MaLoaiHocPhan,
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		[EnumTextValue("LoaiHocPhan")]
		[ColumnEnum("LoaiHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		LoaiHocPhan,
		/// <summary>
		/// PhanLoai : 
		/// </summary>
		[EnumTextValue("PhanLoai")]
		[ColumnEnum("PhanLoai", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		PhanLoai,
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		[EnumTextValue("SiSoLop")]
		[ColumnEnum("SiSoLop", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSoLop,
		/// <summary>
		/// TrongGio : 
		/// </summary>
		[EnumTextValue("TrongGio")]
		[ColumnEnum("TrongGio", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TrongGio,
		/// <summary>
		/// NgoaiGio : 
		/// </summary>
		[EnumTextValue("NgoaiGio")]
		[ColumnEnum("NgoaiGio", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NgoaiGio,
		/// <summary>
		/// ChatLuongCao : 
		/// </summary>
		[EnumTextValue("ChatLuongCao")]
		[ColumnEnum("ChatLuongCao", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ChatLuongCao,
		/// <summary>
		/// Nhom : 
		/// </summary>
		[EnumTextValue("Nhom")]
		[ColumnEnum("Nhom", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Nhom,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("SoTinChi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SoTinChi,
		/// <summary>
		/// LyThuyet : 
		/// </summary>
		[EnumTextValue("LyThuyet")]
		[ColumnEnum("LyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		LyThuyet,
		/// <summary>
		/// ThucHanh : 
		/// </summary>
		[EnumTextValue("ThucHanh")]
		[ColumnEnum("ThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ThucHanh,
		/// <summary>
		/// BaiTap : 
		/// </summary>
		[EnumTextValue("BaiTap")]
		[ColumnEnum("BaiTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		BaiTap,
		/// <summary>
		/// BaiTapLon : 
		/// </summary>
		[EnumTextValue("BaiTapLon")]
		[ColumnEnum("BaiTapLon", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		BaiTapLon,
		/// <summary>
		/// DoAn : 
		/// </summary>
		[EnumTextValue("DoAn")]
		[ColumnEnum("DoAn", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DoAn,
		/// <summary>
		/// LuanAn : 
		/// </summary>
		[EnumTextValue("LuanAn")]
		[ColumnEnum("LuanAn", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		LuanAn,
		/// <summary>
		/// TieuLuan : 
		/// </summary>
		[EnumTextValue("TieuLuan")]
		[ColumnEnum("TieuLuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TieuLuan,
		/// <summary>
		/// ThucTap : 
		/// </summary>
		[EnumTextValue("ThucTap")]
		[ColumnEnum("ThucTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ThucTap,
		/// <summary>
		/// Tuan : 
		/// </summary>
		[EnumTextValue("Tuan")]
		[ColumnEnum("Tuan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Tuan,
		/// <summary>
		/// Nam : 
		/// </summary>
		[EnumTextValue("Nam")]
		[ColumnEnum("Nam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Nam,
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		[EnumTextValue("NgayBatDau")]
		[ColumnEnum("NgayBatDau", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayBatDau,
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		[EnumTextValue("NgayKetThuc")]
		[ColumnEnum("NgayKetThuc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKetThuc,
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		[EnumTextValue("MaBuoiHoc")]
		[ColumnEnum("MaBuoiHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaBuoiHoc,
		/// <summary>
		/// TenBuoiHoc : 
		/// </summary>
		[EnumTextValue("TenBuoiHoc")]
		[ColumnEnum("TenBuoiHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		TenBuoiHoc,
		/// <summary>
		/// ThoiGianHoc : 
		/// </summary>
		[EnumTextValue("ThoiGianHoc")]
		[ColumnEnum("ThoiGianHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 41)]
		ThoiGianHoc,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet,
		/// <summary>
		/// TietBatDau : 
		/// </summary>
		[EnumTextValue("TietBatDau")]
		[ColumnEnum("TietBatDau", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietBatDau,
		/// <summary>
		/// NgayTao : 
		/// </summary>
		[EnumTextValue("NgayTao")]
		[ColumnEnum("NgayTao", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayTao,
		/// <summary>
		/// RowIndex : 
		/// </summary>
		[EnumTextValue("RowIndex")]
		[ColumnEnum("RowIndex", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RowIndex
	}//End enum

} // end namespace
