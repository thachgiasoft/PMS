/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ViewGiangVienLichGiang.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_GiangVien_LichGiang' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewGiangVienLichGiangBase")]
	public abstract partial class ViewGiangVienLichGiangBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		private System.Int32?		  _maGiangVien = null;
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		private System.String		  _maQuanLy = null;
		
		/// <summary>
		/// Ho : 
		/// </summary>
		private System.String		  _ho = null;
		
		/// <summary>
		/// Ten : 
		/// </summary>
		private System.String		  _ten = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		private System.String		  _hoTen = null;
		
		/// <summary>
		/// ChuyenNganh : 
		/// </summary>
		private System.String		  _chuyenNganh = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		private System.Int32?		  _maHocHam = null;
		
		/// <summary>
		/// Cmnd : 
		/// </summary>
		private System.String		  _cmnd = null;
		
		/// <summary>
		/// MaSoThue : 
		/// </summary>
		private System.String		  _maSoThue = null;
		
		/// <summary>
		/// ThuongTru : 
		/// </summary>
		private System.String		  _thuongTru = null;
		
		/// <summary>
		/// TenHocHam : 
		/// </summary>
		private System.String		  _tenHocHam = null;
		
		/// <summary>
		/// MaHocPhan : 
		/// </summary>
		private System.String		  _maHocPhan = string.Empty;
		
		/// <summary>
		/// TenHocPhan : 
		/// </summary>
		private System.String		  _tenHocPhan = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = string.Empty;
		
		/// <summary>
		/// TenLopHocPhan : 
		/// </summary>
		private System.String		  _tenLopHocPhan = null;
		
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		private System.String		  _maBacDaoTao = string.Empty;
		
		/// <summary>
		/// MaLoaiHinh : 
		/// </summary>
		private System.String		  _maLoaiHinh = string.Empty;
		
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		private System.String		  _maBacLoaiHinh = string.Empty;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		private System.Int32?		  _maLoaiGiangVien = null;
		
		/// <summary>
		/// MaPhong : 
		/// </summary>
		private System.String		  _maPhong = null;
		
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		private System.Int32?		  _maBuoiHoc = null;
		
		/// <summary>
		/// MaThongTinBuoi : 
		/// </summary>
		private System.String		  _maThongTinBuoi = string.Empty;
		
		/// <summary>
		/// ThongTinBuoi : 
		/// </summary>
		private System.String		  _thongTinBuoi = null;
		
		/// <summary>
		/// TenPhong : 
		/// </summary>
		private System.String		  _tenPhong = string.Empty;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		private System.Decimal		  _soTiet = 0.0m;
		
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		private System.Int32?		  _siSoLop = null;
		
		/// <summary>
		/// HeSoLD : 
		/// </summary>
		private System.Decimal?		  _heSoLd = null;
		
		/// <summary>
		/// HeSoTinChi : 
		/// </summary>
		private System.Decimal		  _heSoTinChi = 0.0m;
		
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		private System.Decimal?		  _tietQuyDoi = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		private System.Decimal		  _donGia = 0.0m;
		
		/// <summary>
		/// TienThem : 
		/// </summary>
		private System.Decimal		  _tienThem = 0.0m;
		
		/// <summary>
		/// TongCong : 
		/// </summary>
		private System.Decimal?		  _tongCong = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = string.Empty;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = string.Empty;
		
		/// <summary>
		/// NgayKyHopDong : 
		/// </summary>
		private System.DateTime?		  _ngayKyHopDong = null;
		
		/// <summary>
		/// NgayKetThucHopDong : 
		/// </summary>
		private System.DateTime?		  _ngayKetThucHopDong = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewGiangVienLichGiangBase"/> instance.
		///</summary>
		public ViewGiangVienLichGiangBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewGiangVienLichGiangBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_hoTen"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maHocHam"></param>
		///<param name="_cmnd"></param>
		///<param name="_maSoThue"></param>
		///<param name="_thuongTru"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_tenHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinh"></param>
		///<param name="_maBacLoaiHinh"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maPhong"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maThongTinBuoi"></param>
		///<param name="_thongTinBuoi"></param>
		///<param name="_tenPhong"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTiet"></param>
		///<param name="_siSoLop"></param>
		///<param name="_heSoLd"></param>
		///<param name="_heSoTinChi"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_tienThem"></param>
		///<param name="_tongCong"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_ngayKyHopDong"></param>
		///<param name="_ngayKetThucHopDong"></param>
		public ViewGiangVienLichGiangBase(System.Int32? _maGiangVien, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _hoTen, System.String _chuyenNganh, System.Int32? _maHocHam, System.String _cmnd, System.String _maSoThue, System.String _thuongTru, System.String _tenHocHam, System.String _maHocPhan, System.String _tenHocPhan, System.String _maLopHocPhan, System.String _tenLopHocPhan, System.String _maBacDaoTao, System.String _maLoaiHinh, System.String _maBacLoaiHinh, System.Int32? _maLoaiGiangVien, System.String _maPhong, System.Int32? _maBuoiHoc, System.String _maThongTinBuoi, System.String _thongTinBuoi, System.String _tenPhong, System.String _maMonHoc, System.String _tenMonHoc, System.Decimal _soTiet, System.Int32? _siSoLop, System.Decimal? _heSoLd, System.Decimal _heSoTinChi, System.Decimal? _tietQuyDoi, System.Decimal _donGia, System.Decimal _tienThem, System.Decimal? _tongCong, System.String _namHoc, System.String _hocKy, System.DateTime? _ngayKyHopDong, System.DateTime? _ngayKetThucHopDong)
		{
			this._maGiangVien = _maGiangVien;
			this._maQuanLy = _maQuanLy;
			this._ho = _ho;
			this._ten = _ten;
			this._hoTen = _hoTen;
			this._chuyenNganh = _chuyenNganh;
			this._maHocHam = _maHocHam;
			this._cmnd = _cmnd;
			this._maSoThue = _maSoThue;
			this._thuongTru = _thuongTru;
			this._tenHocHam = _tenHocHam;
			this._maHocPhan = _maHocPhan;
			this._tenHocPhan = _tenHocPhan;
			this._maLopHocPhan = _maLopHocPhan;
			this._tenLopHocPhan = _tenLopHocPhan;
			this._maBacDaoTao = _maBacDaoTao;
			this._maLoaiHinh = _maLoaiHinh;
			this._maBacLoaiHinh = _maBacLoaiHinh;
			this._maLoaiGiangVien = _maLoaiGiangVien;
			this._maPhong = _maPhong;
			this._maBuoiHoc = _maBuoiHoc;
			this._maThongTinBuoi = _maThongTinBuoi;
			this._thongTinBuoi = _thongTinBuoi;
			this._tenPhong = _tenPhong;
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._soTiet = _soTiet;
			this._siSoLop = _siSoLop;
			this._heSoLd = _heSoLd;
			this._heSoTinChi = _heSoTinChi;
			this._tietQuyDoi = _tietQuyDoi;
			this._donGia = _donGia;
			this._tienThem = _tienThem;
			this._tongCong = _tongCong;
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._ngayKyHopDong = _ngayKyHopDong;
			this._ngayKetThucHopDong = _ngayKetThucHopDong;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewGiangVienLichGiang"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_hoTen"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maHocHam"></param>
		///<param name="_cmnd"></param>
		///<param name="_maSoThue"></param>
		///<param name="_thuongTru"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_tenHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinh"></param>
		///<param name="_maBacLoaiHinh"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maPhong"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maThongTinBuoi"></param>
		///<param name="_thongTinBuoi"></param>
		///<param name="_tenPhong"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTiet"></param>
		///<param name="_siSoLop"></param>
		///<param name="_heSoLd"></param>
		///<param name="_heSoTinChi"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_tienThem"></param>
		///<param name="_tongCong"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_ngayKyHopDong"></param>
		///<param name="_ngayKetThucHopDong"></param>
		public static ViewGiangVienLichGiang CreateViewGiangVienLichGiang(System.Int32? _maGiangVien, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _hoTen, System.String _chuyenNganh, System.Int32? _maHocHam, System.String _cmnd, System.String _maSoThue, System.String _thuongTru, System.String _tenHocHam, System.String _maHocPhan, System.String _tenHocPhan, System.String _maLopHocPhan, System.String _tenLopHocPhan, System.String _maBacDaoTao, System.String _maLoaiHinh, System.String _maBacLoaiHinh, System.Int32? _maLoaiGiangVien, System.String _maPhong, System.Int32? _maBuoiHoc, System.String _maThongTinBuoi, System.String _thongTinBuoi, System.String _tenPhong, System.String _maMonHoc, System.String _tenMonHoc, System.Decimal _soTiet, System.Int32? _siSoLop, System.Decimal? _heSoLd, System.Decimal _heSoTinChi, System.Decimal? _tietQuyDoi, System.Decimal _donGia, System.Decimal _tienThem, System.Decimal? _tongCong, System.String _namHoc, System.String _hocKy, System.DateTime? _ngayKyHopDong, System.DateTime? _ngayKetThucHopDong)
		{
			ViewGiangVienLichGiang newViewGiangVienLichGiang = new ViewGiangVienLichGiang();
			newViewGiangVienLichGiang.MaGiangVien = _maGiangVien;
			newViewGiangVienLichGiang.MaQuanLy = _maQuanLy;
			newViewGiangVienLichGiang.Ho = _ho;
			newViewGiangVienLichGiang.Ten = _ten;
			newViewGiangVienLichGiang.HoTen = _hoTen;
			newViewGiangVienLichGiang.ChuyenNganh = _chuyenNganh;
			newViewGiangVienLichGiang.MaHocHam = _maHocHam;
			newViewGiangVienLichGiang.Cmnd = _cmnd;
			newViewGiangVienLichGiang.MaSoThue = _maSoThue;
			newViewGiangVienLichGiang.ThuongTru = _thuongTru;
			newViewGiangVienLichGiang.TenHocHam = _tenHocHam;
			newViewGiangVienLichGiang.MaHocPhan = _maHocPhan;
			newViewGiangVienLichGiang.TenHocPhan = _tenHocPhan;
			newViewGiangVienLichGiang.MaLopHocPhan = _maLopHocPhan;
			newViewGiangVienLichGiang.TenLopHocPhan = _tenLopHocPhan;
			newViewGiangVienLichGiang.MaBacDaoTao = _maBacDaoTao;
			newViewGiangVienLichGiang.MaLoaiHinh = _maLoaiHinh;
			newViewGiangVienLichGiang.MaBacLoaiHinh = _maBacLoaiHinh;
			newViewGiangVienLichGiang.MaLoaiGiangVien = _maLoaiGiangVien;
			newViewGiangVienLichGiang.MaPhong = _maPhong;
			newViewGiangVienLichGiang.MaBuoiHoc = _maBuoiHoc;
			newViewGiangVienLichGiang.MaThongTinBuoi = _maThongTinBuoi;
			newViewGiangVienLichGiang.ThongTinBuoi = _thongTinBuoi;
			newViewGiangVienLichGiang.TenPhong = _tenPhong;
			newViewGiangVienLichGiang.MaMonHoc = _maMonHoc;
			newViewGiangVienLichGiang.TenMonHoc = _tenMonHoc;
			newViewGiangVienLichGiang.SoTiet = _soTiet;
			newViewGiangVienLichGiang.SiSoLop = _siSoLop;
			newViewGiangVienLichGiang.HeSoLd = _heSoLd;
			newViewGiangVienLichGiang.HeSoTinChi = _heSoTinChi;
			newViewGiangVienLichGiang.TietQuyDoi = _tietQuyDoi;
			newViewGiangVienLichGiang.DonGia = _donGia;
			newViewGiangVienLichGiang.TienThem = _tienThem;
			newViewGiangVienLichGiang.TongCong = _tongCong;
			newViewGiangVienLichGiang.NamHoc = _namHoc;
			newViewGiangVienLichGiang.HocKy = _hocKy;
			newViewGiangVienLichGiang.NgayKyHopDong = _ngayKyHopDong;
			newViewGiangVienLichGiang.NgayKetThucHopDong = _ngayKetThucHopDong;
			return newViewGiangVienLichGiang;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaGiangVienNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this._maGiangVien; 
			}
			set
			{
				if (_maGiangVien == value && MaGiangVien != null )
					return;
					
				this._maGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this._maQuanLy; 
			}
			set
			{
				if (_maQuanLy == value)
					return;
					
				this._maQuanLy = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ho property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ho
		{
			get
			{
				return this._ho; 
			}
			set
			{
				if (_ho == value)
					return;
					
				this._ho = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ho");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ten property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ten
		{
			get
			{
				return this._ten; 
			}
			set
			{
				if (_ten == value)
					return;
					
				this._ten = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ten");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HoTen
		{
			get
			{
				return this._hoTen; 
			}
			set
			{
				if (_hoTen == value)
					return;
					
				this._hoTen = value;
				this._isDirty = true;
				
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ChuyenNganh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ChuyenNganh
		{
			get
			{
				return this._chuyenNganh; 
			}
			set
			{
				if (_chuyenNganh == value)
					return;
					
				this._chuyenNganh = value;
				this._isDirty = true;
				
				OnPropertyChanged("ChuyenNganh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaHocHamNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this._maHocHam; 
			}
			set
			{
				if (_maHocHam == value && MaHocHam != null )
					return;
					
				this._maHocHam = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Cmnd property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Cmnd
		{
			get
			{
				return this._cmnd; 
			}
			set
			{
				if (_cmnd == value)
					return;
					
				this._cmnd = value;
				this._isDirty = true;
				
				OnPropertyChanged("Cmnd");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaSoThue property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaSoThue
		{
			get
			{
				return this._maSoThue; 
			}
			set
			{
				if (_maSoThue == value)
					return;
					
				this._maSoThue = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaSoThue");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ThuongTru property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ThuongTru
		{
			get
			{
				return this._thuongTru; 
			}
			set
			{
				if (_thuongTru == value)
					return;
					
				this._thuongTru = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThuongTru");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocHam property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocHam
		{
			get
			{
				return this._tenHocHam; 
			}
			set
			{
				if (_tenHocHam == value)
					return;
					
				this._tenHocHam = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaHocPhan
		{
			get
			{
				return this._maHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaHocPhan does not allow null values.");
				if (_maHocPhan == value)
					return;
					
				this._maHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenHocPhan
		{
			get
			{
				return this._tenHocPhan; 
			}
			set
			{
				if (_tenHocPhan == value)
					return;
					
				this._tenHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLopHocPhan does not allow null values.");
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenLopHocPhan
		{
			get
			{
				return this._tenLopHocPhan; 
			}
			set
			{
				if (_tenLopHocPhan == value)
					return;
					
				this._tenLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaBacDaoTao
		{
			get
			{
				return this._maBacDaoTao; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaBacDaoTao does not allow null values.");
				if (_maBacDaoTao == value)
					return;
					
				this._maBacDaoTao = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLoaiHinh
		{
			get
			{
				return this._maLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLoaiHinh does not allow null values.");
				if (_maLoaiHinh == value)
					return;
					
				this._maLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiHinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBacLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaBacLoaiHinh
		{
			get
			{
				return this._maBacLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaBacLoaiHinh does not allow null values.");
				if (_maBacLoaiHinh == value)
					return;
					
				this._maBacLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBacLoaiHinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaLoaiGiangVienNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this._maLoaiGiangVien; 
			}
			set
			{
				if (_maLoaiGiangVien == value && MaLoaiGiangVien != null )
					return;
					
				this._maLoaiGiangVien = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaPhong property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaPhong
		{
			get
			{
				return this._maPhong; 
			}
			set
			{
				if (_maPhong == value)
					return;
					
				this._maPhong = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBuoiHoc property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaBuoiHocNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? MaBuoiHoc
		{
			get
			{
				return this._maBuoiHoc; 
			}
			set
			{
				if (_maBuoiHoc == value && MaBuoiHoc != null )
					return;
					
				this._maBuoiHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBuoiHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaThongTinBuoi property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaThongTinBuoi
		{
			get
			{
				return this._maThongTinBuoi; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaThongTinBuoi does not allow null values.");
				if (_maThongTinBuoi == value)
					return;
					
				this._maThongTinBuoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaThongTinBuoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ThongTinBuoi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ThongTinBuoi
		{
			get
			{
				return this._thongTinBuoi; 
			}
			set
			{
				if (_thongTinBuoi == value)
					return;
					
				this._thongTinBuoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThongTinBuoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenPhong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenPhong
		{
			get
			{
				return this._tenPhong; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenPhong does not allow null values.");
				if (_tenPhong == value)
					return;
					
				this._tenPhong = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal SoTiet
		{
			get
			{
				return this._soTiet; 
			}
			set
			{
				if (_soTiet == value)
					return;
					
				this._soTiet = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SiSoLop property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSiSoLopNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? SiSoLop
		{
			get
			{
				return this._siSoLop; 
			}
			set
			{
				if (_siSoLop == value && SiSoLop != null )
					return;
					
				this._siSoLop = value;
				this._isDirty = true;
				
				OnPropertyChanged("SiSoLop");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSoLD property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHeSoLdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? HeSoLd
		{
			get
			{
				return this._heSoLd; 
			}
			set
			{
				if (_heSoLd == value && HeSoLd != null )
					return;
					
				this._heSoLd = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSoLd");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HeSoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal HeSoTinChi
		{
			get
			{
				return this._heSoTinChi; 
			}
			set
			{
				if (_heSoTinChi == value)
					return;
					
				this._heSoTinChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("HeSoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTietQuyDoiNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TietQuyDoi
		{
			get
			{
				return this._tietQuyDoi; 
			}
			set
			{
				if (_tietQuyDoi == value && TietQuyDoi != null )
					return;
					
				this._tietQuyDoi = value;
				this._isDirty = true;
				
				OnPropertyChanged("TietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal DonGia
		{
			get
			{
				return this._donGia; 
			}
			set
			{
				if (_donGia == value)
					return;
					
				this._donGia = value;
				this._isDirty = true;
				
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TienThem property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal TienThem
		{
			get
			{
				return this._tienThem; 
			}
			set
			{
				if (_tienThem == value)
					return;
					
				this._tienThem = value;
				this._isDirty = true;
				
				OnPropertyChanged("TienThem");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TongCong property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTongCongNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? TongCong
		{
			get
			{
				return this._tongCong; 
			}
			set
			{
				if (_tongCong == value && TongCong != null )
					return;
					
				this._tongCong = value;
				this._isDirty = true;
				
				OnPropertyChanged("TongCong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "NamHoc does not allow null values.");
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "HocKy does not allow null values.");
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayKyHopDong property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayKyHopDongNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayKyHopDong
		{
			get
			{
				return this._ngayKyHopDong; 
			}
			set
			{
				if (_ngayKyHopDong == value && NgayKyHopDong != null )
					return;
					
				this._ngayKyHopDong = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayKyHopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NgayKetThucHopDong property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgayKetThucHopDongNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? NgayKetThucHopDong
		{
			get
			{
				return this._ngayKetThucHopDong; 
			}
			set
			{
				if (_ngayKetThucHopDong == value && NgayKetThucHopDong != null )
					return;
					
				this._ngayKetThucHopDong = value;
				this._isDirty = true;
				
				OnPropertyChanged("NgayKetThucHopDong");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_GiangVien_LichGiang"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewGiangVienLichGiangBase Entity 
		///</summary>
		public virtual ViewGiangVienLichGiangBase Copy()
		{
			//shallow copy entity
			ViewGiangVienLichGiang copy = new ViewGiangVienLichGiang();
				copy.MaGiangVien = this.MaGiangVien;
				copy.MaQuanLy = this.MaQuanLy;
				copy.Ho = this.Ho;
				copy.Ten = this.Ten;
				copy.HoTen = this.HoTen;
				copy.ChuyenNganh = this.ChuyenNganh;
				copy.MaHocHam = this.MaHocHam;
				copy.Cmnd = this.Cmnd;
				copy.MaSoThue = this.MaSoThue;
				copy.ThuongTru = this.ThuongTru;
				copy.TenHocHam = this.TenHocHam;
				copy.MaHocPhan = this.MaHocPhan;
				copy.TenHocPhan = this.TenHocPhan;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.TenLopHocPhan = this.TenLopHocPhan;
				copy.MaBacDaoTao = this.MaBacDaoTao;
				copy.MaLoaiHinh = this.MaLoaiHinh;
				copy.MaBacLoaiHinh = this.MaBacLoaiHinh;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.MaPhong = this.MaPhong;
				copy.MaBuoiHoc = this.MaBuoiHoc;
				copy.MaThongTinBuoi = this.MaThongTinBuoi;
				copy.ThongTinBuoi = this.ThongTinBuoi;
				copy.TenPhong = this.TenPhong;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.SoTiet = this.SoTiet;
				copy.SiSoLop = this.SiSoLop;
				copy.HeSoLd = this.HeSoLd;
				copy.HeSoTinChi = this.HeSoTinChi;
				copy.TietQuyDoi = this.TietQuyDoi;
				copy.DonGia = this.DonGia;
				copy.TienThem = this.TienThem;
				copy.TongCong = this.TongCong;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.NgayKyHopDong = this.NgayKyHopDong;
				copy.NgayKetThucHopDong = this.NgayKetThucHopDong;
			copy.AcceptChanges();
			return (ViewGiangVienLichGiang)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewGiangVienLichGiangBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewGiangVienLichGiangBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewGiangVienLichGiangBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewGiangVienLichGiangBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewGiangVienLichGiangBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewGiangVienLichGiangBase Object1, ViewGiangVienLichGiangBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object1.MaGiangVien == null )
			{
				equal = false;
			}
			if (Object1.MaQuanLy != null && Object2.MaQuanLy != null )
			{
				if (Object1.MaQuanLy != Object2.MaQuanLy)
					equal = false;
			}
			else if (Object1.MaQuanLy == null ^ Object1.MaQuanLy == null )
			{
				equal = false;
			}
			if (Object1.Ho != null && Object2.Ho != null )
			{
				if (Object1.Ho != Object2.Ho)
					equal = false;
			}
			else if (Object1.Ho == null ^ Object1.Ho == null )
			{
				equal = false;
			}
			if (Object1.Ten != null && Object2.Ten != null )
			{
				if (Object1.Ten != Object2.Ten)
					equal = false;
			}
			else if (Object1.Ten == null ^ Object1.Ten == null )
			{
				equal = false;
			}
			if (Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object1.HoTen == null )
			{
				equal = false;
			}
			if (Object1.ChuyenNganh != null && Object2.ChuyenNganh != null )
			{
				if (Object1.ChuyenNganh != Object2.ChuyenNganh)
					equal = false;
			}
			else if (Object1.ChuyenNganh == null ^ Object1.ChuyenNganh == null )
			{
				equal = false;
			}
			if (Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object1.MaHocHam == null )
			{
				equal = false;
			}
			if (Object1.Cmnd != null && Object2.Cmnd != null )
			{
				if (Object1.Cmnd != Object2.Cmnd)
					equal = false;
			}
			else if (Object1.Cmnd == null ^ Object1.Cmnd == null )
			{
				equal = false;
			}
			if (Object1.MaSoThue != null && Object2.MaSoThue != null )
			{
				if (Object1.MaSoThue != Object2.MaSoThue)
					equal = false;
			}
			else if (Object1.MaSoThue == null ^ Object1.MaSoThue == null )
			{
				equal = false;
			}
			if (Object1.ThuongTru != null && Object2.ThuongTru != null )
			{
				if (Object1.ThuongTru != Object2.ThuongTru)
					equal = false;
			}
			else if (Object1.ThuongTru == null ^ Object1.ThuongTru == null )
			{
				equal = false;
			}
			if (Object1.TenHocHam != null && Object2.TenHocHam != null )
			{
				if (Object1.TenHocHam != Object2.TenHocHam)
					equal = false;
			}
			else if (Object1.TenHocHam == null ^ Object1.TenHocHam == null )
			{
				equal = false;
			}
			if (Object1.MaHocPhan != Object2.MaHocPhan)
				equal = false;
			if (Object1.TenHocPhan != null && Object2.TenHocPhan != null )
			{
				if (Object1.TenHocPhan != Object2.TenHocPhan)
					equal = false;
			}
			else if (Object1.TenHocPhan == null ^ Object1.TenHocPhan == null )
			{
				equal = false;
			}
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if (Object1.TenLopHocPhan != null && Object2.TenLopHocPhan != null )
			{
				if (Object1.TenLopHocPhan != Object2.TenLopHocPhan)
					equal = false;
			}
			else if (Object1.TenLopHocPhan == null ^ Object1.TenLopHocPhan == null )
			{
				equal = false;
			}
			if (Object1.MaBacDaoTao != Object2.MaBacDaoTao)
				equal = false;
			if (Object1.MaLoaiHinh != Object2.MaLoaiHinh)
				equal = false;
			if (Object1.MaBacLoaiHinh != Object2.MaBacLoaiHinh)
				equal = false;
			if (Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object1.MaLoaiGiangVien == null )
			{
				equal = false;
			}
			if (Object1.MaPhong != null && Object2.MaPhong != null )
			{
				if (Object1.MaPhong != Object2.MaPhong)
					equal = false;
			}
			else if (Object1.MaPhong == null ^ Object1.MaPhong == null )
			{
				equal = false;
			}
			if (Object1.MaBuoiHoc != null && Object2.MaBuoiHoc != null )
			{
				if (Object1.MaBuoiHoc != Object2.MaBuoiHoc)
					equal = false;
			}
			else if (Object1.MaBuoiHoc == null ^ Object1.MaBuoiHoc == null )
			{
				equal = false;
			}
			if (Object1.MaThongTinBuoi != Object2.MaThongTinBuoi)
				equal = false;
			if (Object1.ThongTinBuoi != null && Object2.ThongTinBuoi != null )
			{
				if (Object1.ThongTinBuoi != Object2.ThongTinBuoi)
					equal = false;
			}
			else if (Object1.ThongTinBuoi == null ^ Object1.ThongTinBuoi == null )
			{
				equal = false;
			}
			if (Object1.TenPhong != Object2.TenPhong)
				equal = false;
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.SoTiet != Object2.SoTiet)
				equal = false;
			if (Object1.SiSoLop != null && Object2.SiSoLop != null )
			{
				if (Object1.SiSoLop != Object2.SiSoLop)
					equal = false;
			}
			else if (Object1.SiSoLop == null ^ Object1.SiSoLop == null )
			{
				equal = false;
			}
			if (Object1.HeSoLd != null && Object2.HeSoLd != null )
			{
				if (Object1.HeSoLd != Object2.HeSoLd)
					equal = false;
			}
			else if (Object1.HeSoLd == null ^ Object1.HeSoLd == null )
			{
				equal = false;
			}
			if (Object1.HeSoTinChi != Object2.HeSoTinChi)
				equal = false;
			if (Object1.TietQuyDoi != null && Object2.TietQuyDoi != null )
			{
				if (Object1.TietQuyDoi != Object2.TietQuyDoi)
					equal = false;
			}
			else if (Object1.TietQuyDoi == null ^ Object1.TietQuyDoi == null )
			{
				equal = false;
			}
			if (Object1.DonGia != Object2.DonGia)
				equal = false;
			if (Object1.TienThem != Object2.TienThem)
				equal = false;
			if (Object1.TongCong != null && Object2.TongCong != null )
			{
				if (Object1.TongCong != Object2.TongCong)
					equal = false;
			}
			else if (Object1.TongCong == null ^ Object1.TongCong == null )
			{
				equal = false;
			}
			if (Object1.NamHoc != Object2.NamHoc)
				equal = false;
			if (Object1.HocKy != Object2.HocKy)
				equal = false;
			if (Object1.NgayKyHopDong != null && Object2.NgayKyHopDong != null )
			{
				if (Object1.NgayKyHopDong != Object2.NgayKyHopDong)
					equal = false;
			}
			else if (Object1.NgayKyHopDong == null ^ Object1.NgayKyHopDong == null )
			{
				equal = false;
			}
			if (Object1.NgayKetThucHopDong != null && Object2.NgayKetThucHopDong != null )
			{
				if (Object1.NgayKetThucHopDong != Object2.NgayKetThucHopDong)
					equal = false;
			}
			else if (Object1.NgayKetThucHopDong == null ^ Object1.NgayKetThucHopDong == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewGiangVienLichGiang entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaGiangVien":
					return entity.MaGiangVien;
				case "MaQuanLy":
					return entity.MaQuanLy;
				case "Ho":
					return entity.Ho;
				case "Ten":
					return entity.Ten;
				case "HoTen":
					return entity.HoTen;
				case "ChuyenNganh":
					return entity.ChuyenNganh;
				case "MaHocHam":
					return entity.MaHocHam;
				case "Cmnd":
					return entity.Cmnd;
				case "MaSoThue":
					return entity.MaSoThue;
				case "ThuongTru":
					return entity.ThuongTru;
				case "TenHocHam":
					return entity.TenHocHam;
				case "MaHocPhan":
					return entity.MaHocPhan;
				case "TenHocPhan":
					return entity.TenHocPhan;
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "TenLopHocPhan":
					return entity.TenLopHocPhan;
				case "MaBacDaoTao":
					return entity.MaBacDaoTao;
				case "MaLoaiHinh":
					return entity.MaLoaiHinh;
				case "MaBacLoaiHinh":
					return entity.MaBacLoaiHinh;
				case "MaLoaiGiangVien":
					return entity.MaLoaiGiangVien;
				case "MaPhong":
					return entity.MaPhong;
				case "MaBuoiHoc":
					return entity.MaBuoiHoc;
				case "MaThongTinBuoi":
					return entity.MaThongTinBuoi;
				case "ThongTinBuoi":
					return entity.ThongTinBuoi;
				case "TenPhong":
					return entity.TenPhong;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "SoTiet":
					return entity.SoTiet;
				case "SiSoLop":
					return entity.SiSoLop;
				case "HeSoLd":
					return entity.HeSoLd;
				case "HeSoTinChi":
					return entity.HeSoTinChi;
				case "TietQuyDoi":
					return entity.TietQuyDoi;
				case "DonGia":
					return entity.DonGia;
				case "TienThem":
					return entity.TienThem;
				case "TongCong":
					return entity.TongCong;
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "NgayKyHopDong":
					return entity.NgayKyHopDong;
				case "NgayKetThucHopDong":
					return entity.NgayKetThucHopDong;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewGiangVienLichGiang, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{39}{38}- MaGiangVien: {0}{38}- MaQuanLy: {1}{38}- Ho: {2}{38}- Ten: {3}{38}- HoTen: {4}{38}- ChuyenNganh: {5}{38}- MaHocHam: {6}{38}- Cmnd: {7}{38}- MaSoThue: {8}{38}- ThuongTru: {9}{38}- TenHocHam: {10}{38}- MaHocPhan: {11}{38}- TenHocPhan: {12}{38}- MaLopHocPhan: {13}{38}- TenLopHocPhan: {14}{38}- MaBacDaoTao: {15}{38}- MaLoaiHinh: {16}{38}- MaBacLoaiHinh: {17}{38}- MaLoaiGiangVien: {18}{38}- MaPhong: {19}{38}- MaBuoiHoc: {20}{38}- MaThongTinBuoi: {21}{38}- ThongTinBuoi: {22}{38}- TenPhong: {23}{38}- MaMonHoc: {24}{38}- TenMonHoc: {25}{38}- SoTiet: {26}{38}- SiSoLop: {27}{38}- HeSoLd: {28}{38}- HeSoTinChi: {29}{38}- TietQuyDoi: {30}{38}- DonGia: {31}{38}- TienThem: {32}{38}- TongCong: {33}{38}- NamHoc: {34}{38}- HocKy: {35}{38}- NgayKyHopDong: {36}{38}- NgayKetThucHopDong: {37}{38}", 
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
			     
				(this.MaQuanLy == null) ? string.Empty : this.MaQuanLy.ToString(),
			     
				(this.Ho == null) ? string.Empty : this.Ho.ToString(),
			     
				(this.Ten == null) ? string.Empty : this.Ten.ToString(),
			     
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
			     
				(this.ChuyenNganh == null) ? string.Empty : this.ChuyenNganh.ToString(),
			     
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
			     
				(this.Cmnd == null) ? string.Empty : this.Cmnd.ToString(),
			     
				(this.MaSoThue == null) ? string.Empty : this.MaSoThue.ToString(),
			     
				(this.ThuongTru == null) ? string.Empty : this.ThuongTru.ToString(),
			     
				(this.TenHocHam == null) ? string.Empty : this.TenHocHam.ToString(),
			     
				this.MaHocPhan,
				(this.TenHocPhan == null) ? string.Empty : this.TenHocPhan.ToString(),
			     
				this.MaLopHocPhan,
				(this.TenLopHocPhan == null) ? string.Empty : this.TenLopHocPhan.ToString(),
			     
				this.MaBacDaoTao,
				this.MaLoaiHinh,
				this.MaBacLoaiHinh,
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
			     
				(this.MaPhong == null) ? string.Empty : this.MaPhong.ToString(),
			     
				(this.MaBuoiHoc == null) ? string.Empty : this.MaBuoiHoc.ToString(),
			     
				this.MaThongTinBuoi,
				(this.ThongTinBuoi == null) ? string.Empty : this.ThongTinBuoi.ToString(),
			     
				this.TenPhong,
				this.MaMonHoc,
				this.TenMonHoc,
				this.SoTiet,
				(this.SiSoLop == null) ? string.Empty : this.SiSoLop.ToString(),
			     
				(this.HeSoLd == null) ? string.Empty : this.HeSoLd.ToString(),
			     
				this.HeSoTinChi,
				(this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString(),
			     
				this.DonGia,
				this.TienThem,
				(this.TongCong == null) ? string.Empty : this.TongCong.ToString(),
			     
				this.NamHoc,
				this.HocKy,
				(this.NgayKyHopDong == null) ? string.Empty : this.NgayKyHopDong.ToString(),
			     
				(this.NgayKetThucHopDong == null) ? string.Empty : this.NgayKetThucHopDong.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewGiangVienLichGiang columns.
	/// </summary>
	[Serializable]
	public enum ViewGiangVienLichGiangColumn
	{
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("MaGiangVien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("MaQuanLy")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaQuanLy,
		/// <summary>
		/// Ho : 
		/// </summary>
		[EnumTextValue("Ho")]
		[ColumnEnum("Ho", typeof(System.String), System.Data.DbType.String, false, false, true, 101)]
		Ho,
		/// <summary>
		/// Ten : 
		/// </summary>
		[EnumTextValue("Ten")]
		[ColumnEnum("Ten", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Ten,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("HoTen")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		HoTen,
		/// <summary>
		/// ChuyenNganh : 
		/// </summary>
		[EnumTextValue("ChuyenNganh")]
		[ColumnEnum("ChuyenNganh", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		ChuyenNganh,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("MaHocHam")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam,
		/// <summary>
		/// Cmnd : 
		/// </summary>
		[EnumTextValue("Cmnd")]
		[ColumnEnum("Cmnd", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Cmnd,
		/// <summary>
		/// MaSoThue : 
		/// </summary>
		[EnumTextValue("MaSoThue")]
		[ColumnEnum("MaSoThue", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaSoThue,
		/// <summary>
		/// ThuongTru : 
		/// </summary>
		[EnumTextValue("ThuongTru")]
		[ColumnEnum("ThuongTru", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		ThuongTru,
		/// <summary>
		/// TenHocHam : 
		/// </summary>
		[EnumTextValue("TenHocHam")]
		[ColumnEnum("TenHocHam", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenHocHam,
		/// <summary>
		/// MaHocPhan : 
		/// </summary>
		[EnumTextValue("MaHocPhan")]
		[ColumnEnum("MaHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaHocPhan,
		/// <summary>
		/// TenHocPhan : 
		/// </summary>
		[EnumTextValue("TenHocPhan")]
		[ColumnEnum("TenHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		TenHocPhan,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		MaLopHocPhan,
		/// <summary>
		/// TenLopHocPhan : 
		/// </summary>
		[EnumTextValue("TenLopHocPhan")]
		[ColumnEnum("TenLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		TenLopHocPhan,
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		[EnumTextValue("MaBacDaoTao")]
		[ColumnEnum("MaBacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaBacDaoTao,
		/// <summary>
		/// MaLoaiHinh : 
		/// </summary>
		[EnumTextValue("MaLoaiHinh")]
		[ColumnEnum("MaLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaLoaiHinh,
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		[EnumTextValue("MaBacLoaiHinh")]
		[ColumnEnum("MaBacLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 43)]
		MaBacLoaiHinh,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("MaLoaiGiangVien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien,
		/// <summary>
		/// MaPhong : 
		/// </summary>
		[EnumTextValue("MaPhong")]
		[ColumnEnum("MaPhong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaPhong,
		/// <summary>
		/// MaBuoiHoc : 
		/// </summary>
		[EnumTextValue("MaBuoiHoc")]
		[ColumnEnum("MaBuoiHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaBuoiHoc,
		/// <summary>
		/// MaThongTinBuoi : 
		/// </summary>
		[EnumTextValue("MaThongTinBuoi")]
		[ColumnEnum("MaThongTinBuoi", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaThongTinBuoi,
		/// <summary>
		/// ThongTinBuoi : 
		/// </summary>
		[EnumTextValue("ThongTinBuoi")]
		[ColumnEnum("ThongTinBuoi", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		ThongTinBuoi,
		/// <summary>
		/// TenPhong : 
		/// </summary>
		[EnumTextValue("TenPhong")]
		[ColumnEnum("TenPhong", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		TenPhong,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("SoTiet")]
		[ColumnEnum("SoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SoTiet,
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		[EnumTextValue("SiSoLop")]
		[ColumnEnum("SiSoLop", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSoLop,
		/// <summary>
		/// HeSoLD : 
		/// </summary>
		[EnumTextValue("HeSoLD")]
		[ColumnEnum("HeSoLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLd,
		/// <summary>
		/// HeSoTinChi : 
		/// </summary>
		[EnumTextValue("HeSoTinChi")]
		[ColumnEnum("HeSoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HeSoTinChi,
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		[EnumTextValue("TietQuyDoi")]
		[ColumnEnum("TietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietQuyDoi,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("DonGia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DonGia,
		/// <summary>
		/// TienThem : 
		/// </summary>
		[EnumTextValue("TienThem")]
		[ColumnEnum("TienThem", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TienThem,
		/// <summary>
		/// TongCong : 
		/// </summary>
		[EnumTextValue("TongCong")]
		[ColumnEnum("TongCong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongCong,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		HocKy,
		/// <summary>
		/// NgayKyHopDong : 
		/// </summary>
		[EnumTextValue("NgayKyHopDong")]
		[ColumnEnum("NgayKyHopDong", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKyHopDong,
		/// <summary>
		/// NgayKetThucHopDong : 
		/// </summary>
		[EnumTextValue("NgayKetThucHopDong")]
		[ColumnEnum("NgayKetThucHopDong", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKetThucHopDong
	}//End enum

} // end namespace
