/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file VMonHocTinChi.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'v_MonHoc_TinChi' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VMonHocTinChiBase")]
	public abstract partial class VMonHocTinChiBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		private System.Decimal		  _soTinChi = 0.0m;
		
		/// <summary>
		/// LyThuyet : 
		/// </summary>
		private System.Decimal		  _lyThuyet = 0.0m;
		
		/// <summary>
		/// ThucHanh : 
		/// </summary>
		private System.Decimal		  _thucHanh = 0.0m;
		
		/// <summary>
		/// BaiTap : 
		/// </summary>
		private System.Decimal		  _baiTap = 0.0m;
		
		/// <summary>
		/// BaiTapLon : 
		/// </summary>
		private System.Decimal		  _baiTapLon = 0.0m;
		
		/// <summary>
		/// DoAn : 
		/// </summary>
		private System.Decimal		  _doAn = 0.0m;
		
		/// <summary>
		/// LuanAn : 
		/// </summary>
		private System.Decimal		  _luanAn = 0.0m;
		
		/// <summary>
		/// TieuLuan : 
		/// </summary>
		private System.Decimal		  _tieuLuan = 0.0m;
		
		/// <summary>
		/// ThucTap : 
		/// </summary>
		private System.Decimal		  _thucTap = 0.0m;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VMonHocTinChiBase"/> instance.
		///</summary>
		public VMonHocTinChiBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VMonHocTinChiBase"/> instance.
		///</summary>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_baiTap"></param>
		///<param name="_baiTapLon"></param>
		///<param name="_doAn"></param>
		///<param name="_luanAn"></param>
		///<param name="_tieuLuan"></param>
		///<param name="_thucTap"></param>
		public VMonHocTinChiBase(System.String _maMonHoc, System.String _tenMonHoc, System.Decimal _soTinChi, System.Decimal _lyThuyet, System.Decimal _thucHanh, System.Decimal _baiTap, System.Decimal _baiTapLon, System.Decimal _doAn, System.Decimal _luanAn, System.Decimal _tieuLuan, System.Decimal _thucTap)
		{
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._soTinChi = _soTinChi;
			this._lyThuyet = _lyThuyet;
			this._thucHanh = _thucHanh;
			this._baiTap = _baiTap;
			this._baiTapLon = _baiTapLon;
			this._doAn = _doAn;
			this._luanAn = _luanAn;
			this._tieuLuan = _tieuLuan;
			this._thucTap = _thucTap;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VMonHocTinChi"/> instance.
		///</summary>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_baiTap"></param>
		///<param name="_baiTapLon"></param>
		///<param name="_doAn"></param>
		///<param name="_luanAn"></param>
		///<param name="_tieuLuan"></param>
		///<param name="_thucTap"></param>
		public static VMonHocTinChi CreateVMonHocTinChi(System.String _maMonHoc, System.String _tenMonHoc, System.Decimal _soTinChi, System.Decimal _lyThuyet, System.Decimal _thucHanh, System.Decimal _baiTap, System.Decimal _baiTapLon, System.Decimal _doAn, System.Decimal _luanAn, System.Decimal _tieuLuan, System.Decimal _thucTap)
		{
			VMonHocTinChi newVMonHocTinChi = new VMonHocTinChi();
			newVMonHocTinChi.MaMonHoc = _maMonHoc;
			newVMonHocTinChi.TenMonHoc = _tenMonHoc;
			newVMonHocTinChi.SoTinChi = _soTinChi;
			newVMonHocTinChi.LyThuyet = _lyThuyet;
			newVMonHocTinChi.ThucHanh = _thucHanh;
			newVMonHocTinChi.BaiTap = _baiTap;
			newVMonHocTinChi.BaiTapLon = _baiTapLon;
			newVMonHocTinChi.DoAn = _doAn;
			newVMonHocTinChi.LuanAn = _luanAn;
			newVMonHocTinChi.TieuLuan = _tieuLuan;
			newVMonHocTinChi.ThucTap = _thucTap;
			return newVMonHocTinChi;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal SoTinChi
		{
			get
			{
				return this._soTinChi; 
			}
			set
			{
				if (_soTinChi == value)
					return;
					
				this._soTinChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal LyThuyet
		{
			get
			{
				return this._lyThuyet; 
			}
			set
			{
				if (_lyThuyet == value)
					return;
					
				this._lyThuyet = value;
				this._isDirty = true;
				
				OnPropertyChanged("LyThuyet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal ThucHanh
		{
			get
			{
				return this._thucHanh; 
			}
			set
			{
				if (_thucHanh == value)
					return;
					
				this._thucHanh = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BaiTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal BaiTap
		{
			get
			{
				return this._baiTap; 
			}
			set
			{
				if (_baiTap == value)
					return;
					
				this._baiTap = value;
				this._isDirty = true;
				
				OnPropertyChanged("BaiTap");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BaiTapLon property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal BaiTapLon
		{
			get
			{
				return this._baiTapLon; 
			}
			set
			{
				if (_baiTapLon == value)
					return;
					
				this._baiTapLon = value;
				this._isDirty = true;
				
				OnPropertyChanged("BaiTapLon");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DoAn property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal DoAn
		{
			get
			{
				return this._doAn; 
			}
			set
			{
				if (_doAn == value)
					return;
					
				this._doAn = value;
				this._isDirty = true;
				
				OnPropertyChanged("DoAn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LuanAn property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal LuanAn
		{
			get
			{
				return this._luanAn; 
			}
			set
			{
				if (_luanAn == value)
					return;
					
				this._luanAn = value;
				this._isDirty = true;
				
				OnPropertyChanged("LuanAn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TieuLuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal TieuLuan
		{
			get
			{
				return this._tieuLuan; 
			}
			set
			{
				if (_tieuLuan == value)
					return;
					
				this._tieuLuan = value;
				this._isDirty = true;
				
				OnPropertyChanged("TieuLuan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ThucTap property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal ThucTap
		{
			get
			{
				return this._thucTap; 
			}
			set
			{
				if (_thucTap == value)
					return;
					
				this._thucTap = value;
				this._isDirty = true;
				
				OnPropertyChanged("ThucTap");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "v_MonHoc_TinChi"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VMonHocTinChiBase Entity 
		///</summary>
		public virtual VMonHocTinChiBase Copy()
		{
			//shallow copy entity
			VMonHocTinChi copy = new VMonHocTinChi();
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.SoTinChi = this.SoTinChi;
				copy.LyThuyet = this.LyThuyet;
				copy.ThucHanh = this.ThucHanh;
				copy.BaiTap = this.BaiTap;
				copy.BaiTapLon = this.BaiTapLon;
				copy.DoAn = this.DoAn;
				copy.LuanAn = this.LuanAn;
				copy.TieuLuan = this.TieuLuan;
				copy.ThucTap = this.ThucTap;
			copy.AcceptChanges();
			return (VMonHocTinChi)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VMonHocTinChiBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VMonHocTinChiBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VMonHocTinChiBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VMonHocTinChiBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VMonHocTinChiBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VMonHocTinChiBase Object1, VMonHocTinChiBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.SoTinChi != Object2.SoTinChi)
				equal = false;
			if (Object1.LyThuyet != Object2.LyThuyet)
				equal = false;
			if (Object1.ThucHanh != Object2.ThucHanh)
				equal = false;
			if (Object1.BaiTap != Object2.BaiTap)
				equal = false;
			if (Object1.BaiTapLon != Object2.BaiTapLon)
				equal = false;
			if (Object1.DoAn != Object2.DoAn)
				equal = false;
			if (Object1.LuanAn != Object2.LuanAn)
				equal = false;
			if (Object1.TieuLuan != Object2.TieuLuan)
				equal = false;
			if (Object1.ThucTap != Object2.ThucTap)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VMonHocTinChi entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "SoTinChi":
					return entity.SoTinChi;
				case "LyThuyet":
					return entity.LyThuyet;
				case "ThucHanh":
					return entity.ThucHanh;
				case "BaiTap":
					return entity.BaiTap;
				case "BaiTapLon":
					return entity.BaiTapLon;
				case "DoAn":
					return entity.DoAn;
				case "LuanAn":
					return entity.LuanAn;
				case "TieuLuan":
					return entity.TieuLuan;
				case "ThucTap":
					return entity.ThucTap;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VMonHocTinChi, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- MaMonHoc: {0}{11}- TenMonHoc: {1}{11}- SoTinChi: {2}{11}- LyThuyet: {3}{11}- ThucHanh: {4}{11}- BaiTap: {5}{11}- BaiTapLon: {6}{11}- DoAn: {7}{11}- LuanAn: {8}{11}- TieuLuan: {9}{11}- ThucTap: {10}{11}", 
				this.MaMonHoc,
				this.TenMonHoc,
				this.SoTinChi,
				this.LyThuyet,
				this.ThucHanh,
				this.BaiTap,
				this.BaiTapLon,
				this.DoAn,
				this.LuanAn,
				this.TieuLuan,
				this.ThucTap,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VMonHocTinChi columns.
	/// </summary>
	[Serializable]
	public enum VMonHocTinChiColumn
	{
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("SoTinChi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SoTinChi,
		/// <summary>
		/// LyThuyet : 
		/// </summary>
		[EnumTextValue("LyThuyet")]
		[ColumnEnum("LyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		LyThuyet,
		/// <summary>
		/// ThucHanh : 
		/// </summary>
		[EnumTextValue("ThucHanh")]
		[ColumnEnum("ThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ThucHanh,
		/// <summary>
		/// BaiTap : 
		/// </summary>
		[EnumTextValue("BaiTap")]
		[ColumnEnum("BaiTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		BaiTap,
		/// <summary>
		/// BaiTapLon : 
		/// </summary>
		[EnumTextValue("BaiTapLon")]
		[ColumnEnum("BaiTapLon", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		BaiTapLon,
		/// <summary>
		/// DoAn : 
		/// </summary>
		[EnumTextValue("DoAn")]
		[ColumnEnum("DoAn", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DoAn,
		/// <summary>
		/// LuanAn : 
		/// </summary>
		[EnumTextValue("LuanAn")]
		[ColumnEnum("LuanAn", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		LuanAn,
		/// <summary>
		/// TieuLuan : 
		/// </summary>
		[EnumTextValue("TieuLuan")]
		[ColumnEnum("TieuLuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TieuLuan,
		/// <summary>
		/// ThucTap : 
		/// </summary>
		[EnumTextValue("ThucTap")]
		[ColumnEnum("ThucTap", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ThucTap
	}//End enum

} // end namespace
