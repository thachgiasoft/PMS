/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewMonHoc.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'View_MonHoc' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ViewMonHocBase")]
	public abstract partial class ViewMonHocBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		private System.String		  _maLopHocPhan = string.Empty;
		
		/// <summary>
		/// TenLopHocPhan : 
		/// </summary>
		private System.String		  _tenLopHocPhan = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		private System.String		  _namHoc = string.Empty;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		private System.String		  _hocKy = string.Empty;
		
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		private System.String		  _maBacLoaiHinh = string.Empty;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		private System.String		  _maMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		private System.String		  _tenMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHocVietTat : 
		/// </summary>
		private System.String		  _tenMonHocVietTat = null;
		
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		private System.Decimal		  _soTinChi = 0.0m;
		
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		private System.String		  _maDonVi = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewMonHocBase"/> instance.
		///</summary>
		public ViewMonHocBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ViewMonHocBase"/> instance.
		///</summary>
		///<param name="_maLopHocPhan"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maBacLoaiHinh"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_tenMonHocVietTat"></param>
		///<param name="_soTinChi"></param>
		///<param name="_maDonVi"></param>
		public ViewMonHocBase(System.String _maLopHocPhan, System.String _tenLopHocPhan, System.String _namHoc, System.String _hocKy, System.String _maBacLoaiHinh, System.String _maMonHoc, System.String _tenMonHoc, System.String _tenMonHocVietTat, System.Decimal _soTinChi, System.String _maDonVi)
		{
			this._maLopHocPhan = _maLopHocPhan;
			this._tenLopHocPhan = _tenLopHocPhan;
			this._namHoc = _namHoc;
			this._hocKy = _hocKy;
			this._maBacLoaiHinh = _maBacLoaiHinh;
			this._maMonHoc = _maMonHoc;
			this._tenMonHoc = _tenMonHoc;
			this._tenMonHocVietTat = _tenMonHocVietTat;
			this._soTinChi = _soTinChi;
			this._maDonVi = _maDonVi;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewMonHoc"/> instance.
		///</summary>
		///<param name="_maLopHocPhan"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maBacLoaiHinh"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_tenMonHocVietTat"></param>
		///<param name="_soTinChi"></param>
		///<param name="_maDonVi"></param>
		public static ViewMonHoc CreateViewMonHoc(System.String _maLopHocPhan, System.String _tenLopHocPhan, System.String _namHoc, System.String _hocKy, System.String _maBacLoaiHinh, System.String _maMonHoc, System.String _tenMonHoc, System.String _tenMonHocVietTat, System.Decimal _soTinChi, System.String _maDonVi)
		{
			ViewMonHoc newViewMonHoc = new ViewMonHoc();
			newViewMonHoc.MaLopHocPhan = _maLopHocPhan;
			newViewMonHoc.TenLopHocPhan = _tenLopHocPhan;
			newViewMonHoc.NamHoc = _namHoc;
			newViewMonHoc.HocKy = _hocKy;
			newViewMonHoc.MaBacLoaiHinh = _maBacLoaiHinh;
			newViewMonHoc.MaMonHoc = _maMonHoc;
			newViewMonHoc.TenMonHoc = _tenMonHoc;
			newViewMonHoc.TenMonHocVietTat = _tenMonHocVietTat;
			newViewMonHoc.SoTinChi = _soTinChi;
			newViewMonHoc.MaDonVi = _maDonVi;
			return newViewMonHoc;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this._maLopHocPhan; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaLopHocPhan does not allow null values.");
				if (_maLopHocPhan == value)
					return;
					
				this._maLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenLopHocPhan
		{
			get
			{
				return this._tenLopHocPhan; 
			}
			set
			{
				if (_tenLopHocPhan == value)
					return;
					
				this._tenLopHocPhan = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NamHoc
		{
			get
			{
				return this._namHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "NamHoc does not allow null values.");
				if (_namHoc == value)
					return;
					
				this._namHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HocKy
		{
			get
			{
				return this._hocKy; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "HocKy does not allow null values.");
				if (_hocKy == value)
					return;
					
				this._hocKy = value;
				this._isDirty = true;
				
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaBacLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaBacLoaiHinh
		{
			get
			{
				return this._maBacLoaiHinh; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaBacLoaiHinh does not allow null values.");
				if (_maBacLoaiHinh == value)
					return;
					
				this._maBacLoaiHinh = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaBacLoaiHinh");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this._maMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MaMonHoc does not allow null values.");
				if (_maMonHoc == value)
					return;
					
				this._maMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this._tenMonHoc; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TenMonHoc does not allow null values.");
				if (_tenMonHoc == value)
					return;
					
				this._tenMonHoc = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TenMonHocVietTat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TenMonHocVietTat
		{
			get
			{
				return this._tenMonHocVietTat; 
			}
			set
			{
				if (_tenMonHocVietTat == value)
					return;
					
				this._tenMonHocVietTat = value;
				this._isDirty = true;
				
				OnPropertyChanged("TenMonHocVietTat");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal SoTinChi
		{
			get
			{
				return this._soTinChi; 
			}
			set
			{
				if (_soTinChi == value)
					return;
					
				this._soTinChi = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MaDonVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MaDonVi
		{
			get
			{
				return this._maDonVi; 
			}
			set
			{
				if (_maDonVi == value)
					return;
					
				this._maDonVi = value;
				this._isDirty = true;
				
				OnPropertyChanged("MaDonVi");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "View_MonHoc"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ViewMonHocBase Entity 
		///</summary>
		public virtual ViewMonHocBase Copy()
		{
			//shallow copy entity
			ViewMonHoc copy = new ViewMonHoc();
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.TenLopHocPhan = this.TenLopHocPhan;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaBacLoaiHinh = this.MaBacLoaiHinh;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.TenMonHocVietTat = this.TenMonHocVietTat;
				copy.SoTinChi = this.SoTinChi;
				copy.MaDonVi = this.MaDonVi;
			copy.AcceptChanges();
			return (ViewMonHoc)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ViewMonHocBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ViewMonHocBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ViewMonHocBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ViewMonHocBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ViewMonHocBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ViewMonHocBase Object1, ViewMonHocBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if (Object1.TenLopHocPhan != null && Object2.TenLopHocPhan != null )
			{
				if (Object1.TenLopHocPhan != Object2.TenLopHocPhan)
					equal = false;
			}
			else if (Object1.TenLopHocPhan == null ^ Object1.TenLopHocPhan == null )
			{
				equal = false;
			}
			if (Object1.NamHoc != Object2.NamHoc)
				equal = false;
			if (Object1.HocKy != Object2.HocKy)
				equal = false;
			if (Object1.MaBacLoaiHinh != Object2.MaBacLoaiHinh)
				equal = false;
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if (Object1.TenMonHocVietTat != null && Object2.TenMonHocVietTat != null )
			{
				if (Object1.TenMonHocVietTat != Object2.TenMonHocVietTat)
					equal = false;
			}
			else if (Object1.TenMonHocVietTat == null ^ Object1.TenMonHocVietTat == null )
			{
				equal = false;
			}
			if (Object1.SoTinChi != Object2.SoTinChi)
				equal = false;
			if (Object1.MaDonVi != null && Object2.MaDonVi != null )
			{
				if (Object1.MaDonVi != Object2.MaDonVi)
					equal = false;
			}
			else if (Object1.MaDonVi == null ^ Object1.MaDonVi == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ViewMonHoc entity, string propertyName)
		{
			switch (propertyName)
			{
				case "MaLopHocPhan":
					return entity.MaLopHocPhan;
				case "TenLopHocPhan":
					return entity.TenLopHocPhan;
				case "NamHoc":
					return entity.NamHoc;
				case "HocKy":
					return entity.HocKy;
				case "MaBacLoaiHinh":
					return entity.MaBacLoaiHinh;
				case "MaMonHoc":
					return entity.MaMonHoc;
				case "TenMonHoc":
					return entity.TenMonHoc;
				case "TenMonHocVietTat":
					return entity.TenMonHocVietTat;
				case "SoTinChi":
					return entity.SoTinChi;
				case "MaDonVi":
					return entity.MaDonVi;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ViewMonHoc, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- MaLopHocPhan: {0}{10}- TenLopHocPhan: {1}{10}- NamHoc: {2}{10}- HocKy: {3}{10}- MaBacLoaiHinh: {4}{10}- MaMonHoc: {5}{10}- TenMonHoc: {6}{10}- TenMonHocVietTat: {7}{10}- SoTinChi: {8}{10}- MaDonVi: {9}{10}", 
				this.MaLopHocPhan,
				(this.TenLopHocPhan == null) ? string.Empty : this.TenLopHocPhan.ToString(),
			     
				this.NamHoc,
				this.HocKy,
				this.MaBacLoaiHinh,
				this.MaMonHoc,
				this.TenMonHoc,
				(this.TenMonHocVietTat == null) ? string.Empty : this.TenMonHocVietTat.ToString(),
			     
				this.SoTinChi,
				(this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ViewMonHoc columns.
	/// </summary>
	[Serializable]
	public enum ViewMonHocColumn
	{
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("MaLopHocPhan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		MaLopHocPhan,
		/// <summary>
		/// TenLopHocPhan : 
		/// </summary>
		[EnumTextValue("TenLopHocPhan")]
		[ColumnEnum("TenLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		TenLopHocPhan,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("NamHoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		NamHoc,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("HocKy")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		HocKy,
		/// <summary>
		/// MaBacLoaiHinh : 
		/// </summary>
		[EnumTextValue("MaBacLoaiHinh")]
		[ColumnEnum("MaBacLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 43)]
		MaBacLoaiHinh,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("MaMonHoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("TenMonHoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc,
		/// <summary>
		/// TenMonHocVietTat : 
		/// </summary>
		[EnumTextValue("TenMonHocVietTat")]
		[ColumnEnum("TenMonHocVietTat", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenMonHocVietTat,
		/// <summary>
		/// SoTinChi : 
		/// </summary>
		[EnumTextValue("SoTinChi")]
		[ColumnEnum("SoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SoTinChi,
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		[EnumTextValue("MaDonVi")]
		[ColumnEnum("MaDonVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		MaDonVi
	}//End enum

} // end namespace
