
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file UteKhoiLuongQuyDoi.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'Ute_KhoiLuongQuyDoi' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class UteKhoiLuongQuyDoiBase : EntityBase, IUteKhoiLuongQuyDoi, IEntityId<UteKhoiLuongQuyDoiKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private UteKhoiLuongQuyDoiEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private UteKhoiLuongQuyDoiEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private UteKhoiLuongQuyDoiEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<UteKhoiLuongQuyDoi> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UteKhoiLuongQuyDoiEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UteKhoiLuongQuyDoiEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="UteKhoiLuongQuyDoiBase"/> instance.
		///</summary>
		public UteKhoiLuongQuyDoiBase()
		{
			this.entityData = new UteKhoiLuongQuyDoiEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="UteKhoiLuongQuyDoiBase"/> instance.
		///</summary>
		///<param name="_idKhoiLuongGiangDay"></param>
		///<param name="_heSoLopDongLyThuyet"></param>
		///<param name="_heSoLopDongThTnTt"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_soGioThucGiangTrenLop"></param>
		///<param name="_soGioChuanTinhThem"></param>
		///<param name="_heSoHocKy"></param>
		public UteKhoiLuongQuyDoiBase(System.Int32 _idKhoiLuongGiangDay, System.Decimal? _heSoLopDongLyThuyet, 
			System.Decimal? _heSoLopDongThTnTt, System.Decimal? _tietQuyDoi, System.DateTime? _ngayCapNhat, 
			System.Decimal? _soGioThucGiangTrenLop, System.Decimal? _soGioChuanTinhThem, System.Decimal? _heSoHocKy)
		{
			this.entityData = new UteKhoiLuongQuyDoiEntityData();
			this.backupData = null;

			this.IdKhoiLuongGiangDay = _idKhoiLuongGiangDay;
			this.HeSoLopDongLyThuyet = _heSoLopDongLyThuyet;
			this.HeSoLopDongThTnTt = _heSoLopDongThTnTt;
			this.TietQuyDoi = _tietQuyDoi;
			this.NgayCapNhat = _ngayCapNhat;
			this.SoGioThucGiangTrenLop = _soGioThucGiangTrenLop;
			this.SoGioChuanTinhThem = _soGioChuanTinhThem;
			this.HeSoHocKy = _heSoHocKy;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="UteKhoiLuongQuyDoi"/> instance.
		///</summary>
		///<param name="_idKhoiLuongGiangDay"></param>
		///<param name="_heSoLopDongLyThuyet"></param>
		///<param name="_heSoLopDongThTnTt"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_soGioThucGiangTrenLop"></param>
		///<param name="_soGioChuanTinhThem"></param>
		///<param name="_heSoHocKy"></param>
		public static UteKhoiLuongQuyDoi CreateUteKhoiLuongQuyDoi(System.Int32 _idKhoiLuongGiangDay, System.Decimal? _heSoLopDongLyThuyet, 
			System.Decimal? _heSoLopDongThTnTt, System.Decimal? _tietQuyDoi, System.DateTime? _ngayCapNhat, 
			System.Decimal? _soGioThucGiangTrenLop, System.Decimal? _soGioChuanTinhThem, System.Decimal? _heSoHocKy)
		{
			UteKhoiLuongQuyDoi newUteKhoiLuongQuyDoi = new UteKhoiLuongQuyDoi();
			newUteKhoiLuongQuyDoi.IdKhoiLuongGiangDay = _idKhoiLuongGiangDay;
			newUteKhoiLuongQuyDoi.HeSoLopDongLyThuyet = _heSoLopDongLyThuyet;
			newUteKhoiLuongQuyDoi.HeSoLopDongThTnTt = _heSoLopDongThTnTt;
			newUteKhoiLuongQuyDoi.TietQuyDoi = _tietQuyDoi;
			newUteKhoiLuongQuyDoi.NgayCapNhat = _ngayCapNhat;
			newUteKhoiLuongQuyDoi.SoGioThucGiangTrenLop = _soGioThucGiangTrenLop;
			newUteKhoiLuongQuyDoi.SoGioChuanTinhThem = _soGioChuanTinhThem;
			newUteKhoiLuongQuyDoi.HeSoHocKy = _heSoHocKy;
			return newUteKhoiLuongQuyDoi;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdKhoiLuongGiangDay property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 IdKhoiLuongGiangDay
		{
			get
			{
				return this.entityData.IdKhoiLuongGiangDay; 
			}
			
			set
			{
				if (this.entityData.IdKhoiLuongGiangDay == value)
					return;
				
                OnPropertyChanging("IdKhoiLuongGiangDay");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.IdKhoiLuongGiangDay, this.entityData.IdKhoiLuongGiangDay);
				this.entityData.IdKhoiLuongGiangDay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.IdKhoiLuongGiangDay, this.entityData.IdKhoiLuongGiangDay);
				OnPropertyChanged("IdKhoiLuongGiangDay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoLopDongLyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoLopDongLyThuyet
		{
			get
			{
				return this.entityData.HeSoLopDongLyThuyet; 
			}
			
			set
			{
				if (this.entityData.HeSoLopDongLyThuyet == value)
					return;
				
                OnPropertyChanging("HeSoLopDongLyThuyet");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.HeSoLopDongLyThuyet, this.entityData.HeSoLopDongLyThuyet);
				this.entityData.HeSoLopDongLyThuyet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.HeSoLopDongLyThuyet, this.entityData.HeSoLopDongLyThuyet);
				OnPropertyChanged("HeSoLopDongLyThuyet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoLopDongThTnTt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoLopDongThTnTt
		{
			get
			{
				return this.entityData.HeSoLopDongThTnTt; 
			}
			
			set
			{
				if (this.entityData.HeSoLopDongThTnTt == value)
					return;
				
                OnPropertyChanging("HeSoLopDongThTnTt");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.HeSoLopDongThTnTt, this.entityData.HeSoLopDongThTnTt);
				this.entityData.HeSoLopDongThTnTt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.HeSoLopDongThTnTt, this.entityData.HeSoLopDongThTnTt);
				OnPropertyChanged("HeSoLopDongThTnTt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietQuyDoi
		{
			get
			{
				return this.entityData.TietQuyDoi; 
			}
			
			set
			{
				if (this.entityData.TietQuyDoi == value)
					return;
				
                OnPropertyChanging("TietQuyDoi");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				this.entityData.TietQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				OnPropertyChanged("TietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoGioThucGiangTrenLop property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoGioThucGiangTrenLop
		{
			get
			{
				return this.entityData.SoGioThucGiangTrenLop; 
			}
			
			set
			{
				if (this.entityData.SoGioThucGiangTrenLop == value)
					return;
				
                OnPropertyChanging("SoGioThucGiangTrenLop");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.SoGioThucGiangTrenLop, this.entityData.SoGioThucGiangTrenLop);
				this.entityData.SoGioThucGiangTrenLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.SoGioThucGiangTrenLop, this.entityData.SoGioThucGiangTrenLop);
				OnPropertyChanged("SoGioThucGiangTrenLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoGioChuanTinhThem property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoGioChuanTinhThem
		{
			get
			{
				return this.entityData.SoGioChuanTinhThem; 
			}
			
			set
			{
				if (this.entityData.SoGioChuanTinhThem == value)
					return;
				
                OnPropertyChanging("SoGioChuanTinhThem");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.SoGioChuanTinhThem, this.entityData.SoGioChuanTinhThem);
				this.entityData.SoGioChuanTinhThem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.SoGioChuanTinhThem, this.entityData.SoGioChuanTinhThem);
				OnPropertyChanged("SoGioChuanTinhThem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoHocKy property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoHocKy
		{
			get
			{
				return this.entityData.HeSoHocKy; 
			}
			
			set
			{
				if (this.entityData.HeSoHocKy == value)
					return;
				
                OnPropertyChanging("HeSoHocKy");                    
				OnColumnChanging(UteKhoiLuongQuyDoiColumn.HeSoHocKy, this.entityData.HeSoHocKy);
				this.entityData.HeSoHocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UteKhoiLuongQuyDoiColumn.HeSoHocKy, this.entityData.HeSoHocKy);
				OnPropertyChanged("HeSoHocKy");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="UteKhoiLuongGiangDay"/>.
		/// </summary>
		/// <value>The source UteKhoiLuongGiangDay for IdKhoiLuongGiangDay.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual UteKhoiLuongGiangDay IdKhoiLuongGiangDaySource
      	{
            get { return entityData.IdKhoiLuongGiangDaySource; }
            set { entityData.IdKhoiLuongGiangDaySource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a UteThanhToanThuLao object
		///	which is related to this object through the relation UteThanhToanThuLao
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual UteThanhToanThuLao UteThanhToanThuLao
		{
			get { return entityData.UteThanhToanThuLao; }
			set { entityData.UteThanhToanThuLao = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Ute_KhoiLuongQuyDoi"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "IdKhoiLuongGiangDay", "HeSoLopDongLyThuyet", "HeSoLopDongThTnTt", "TietQuyDoi", "NgayCapNhat", "SoGioThucGiangTrenLop", "SoGioChuanTinhThem", "HeSoHocKy"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as UteKhoiLuongQuyDoiEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (UteKhoiLuongQuyDoi) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<UteKhoiLuongQuyDoi>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as UteKhoiLuongQuyDoi);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed UteKhoiLuongQuyDoi Entity 
		///</summary>
		protected virtual UteKhoiLuongQuyDoi Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			UteKhoiLuongQuyDoi copy = new UteKhoiLuongQuyDoi();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.IdKhoiLuongGiangDay = this.IdKhoiLuongGiangDay;
				copy.HeSoLopDongLyThuyet = this.HeSoLopDongLyThuyet;
				copy.HeSoLopDongThTnTt = this.HeSoLopDongThTnTt;
				copy.TietQuyDoi = this.TietQuyDoi;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.SoGioThucGiangTrenLop = this.SoGioThucGiangTrenLop;
				copy.SoGioChuanTinhThem = this.SoGioChuanTinhThem;
				copy.HeSoHocKy = this.HeSoHocKy;
			
			if (this.IdKhoiLuongGiangDaySource != null && existingCopies.Contains(this.IdKhoiLuongGiangDaySource))
				copy.IdKhoiLuongGiangDaySource = existingCopies[this.IdKhoiLuongGiangDaySource] as UteKhoiLuongGiangDay;
			else
				copy.IdKhoiLuongGiangDaySource = MakeCopyOf(this.IdKhoiLuongGiangDaySource, existingCopies) as UteKhoiLuongGiangDay;
		
			//deep copy nested objects
			copy.UteThanhToanThuLao = (UteThanhToanThuLao) MakeCopyOf(this.UteThanhToanThuLao, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed UteKhoiLuongQuyDoi Entity 
		///</summary>
		public virtual UteKhoiLuongQuyDoi Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed UteKhoiLuongQuyDoi Entity which is a deep copy of the current entity.
		///</summary>
		public virtual UteKhoiLuongQuyDoi DeepCopy()
		{
			return EntityHelper.Clone<UteKhoiLuongQuyDoi>(this as UteKhoiLuongQuyDoi);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as UteKhoiLuongQuyDoiEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new UteKhoiLuongQuyDoiEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as UteKhoiLuongQuyDoiEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(UteKhoiLuongQuyDoiColumn column)
		{
			switch(column)
			{
					case UteKhoiLuongQuyDoiColumn.Id:
					return entityData.Id != _originalData.Id;
					case UteKhoiLuongQuyDoiColumn.IdKhoiLuongGiangDay:
					return entityData.IdKhoiLuongGiangDay != _originalData.IdKhoiLuongGiangDay;
					case UteKhoiLuongQuyDoiColumn.HeSoLopDongLyThuyet:
					return entityData.HeSoLopDongLyThuyet != _originalData.HeSoLopDongLyThuyet;
					case UteKhoiLuongQuyDoiColumn.HeSoLopDongThTnTt:
					return entityData.HeSoLopDongThTnTt != _originalData.HeSoLopDongThTnTt;
					case UteKhoiLuongQuyDoiColumn.TietQuyDoi:
					return entityData.TietQuyDoi != _originalData.TietQuyDoi;
					case UteKhoiLuongQuyDoiColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case UteKhoiLuongQuyDoiColumn.SoGioThucGiangTrenLop:
					return entityData.SoGioThucGiangTrenLop != _originalData.SoGioThucGiangTrenLop;
					case UteKhoiLuongQuyDoiColumn.SoGioChuanTinhThem:
					return entityData.SoGioChuanTinhThem != _originalData.SoGioChuanTinhThem;
					case UteKhoiLuongQuyDoiColumn.HeSoHocKy:
					return entityData.HeSoHocKy != _originalData.HeSoHocKy;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< UteKhoiLuongQuyDoiColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.IdKhoiLuongGiangDay != _originalData.IdKhoiLuongGiangDay;
			result = result || entityData.HeSoLopDongLyThuyet != _originalData.HeSoLopDongLyThuyet;
			result = result || entityData.HeSoLopDongThTnTt != _originalData.HeSoLopDongThTnTt;
			result = result || entityData.TietQuyDoi != _originalData.TietQuyDoi;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.SoGioThucGiangTrenLop != _originalData.SoGioThucGiangTrenLop;
			result = result || entityData.SoGioChuanTinhThem != _originalData.SoGioChuanTinhThem;
			result = result || entityData.HeSoHocKy != _originalData.HeSoHocKy;
			return result;
		}	
		
		///<summary>
		///  Returns a UteKhoiLuongQuyDoi Entity with the original data.
		///</summary>
		public UteKhoiLuongQuyDoi GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateUteKhoiLuongQuyDoi(
				_originalData.IdKhoiLuongGiangDay,
				_originalData.HeSoLopDongLyThuyet,
				_originalData.HeSoLopDongThTnTt,
				_originalData.TietQuyDoi,
				_originalData.NgayCapNhat,
				_originalData.SoGioThucGiangTrenLop,
				_originalData.SoGioChuanTinhThem,
				_originalData.HeSoHocKy
				);
				
			return (UteKhoiLuongQuyDoi)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="UteKhoiLuongQuyDoiBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is UteKhoiLuongQuyDoiBase)
				return ValueEquals(this, (UteKhoiLuongQuyDoiBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="UteKhoiLuongQuyDoiBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.IdKhoiLuongGiangDay.GetHashCode() ^ 
					((this.HeSoLopDongLyThuyet == null) ? string.Empty : this.HeSoLopDongLyThuyet.ToString()).GetHashCode() ^ 
					((this.HeSoLopDongThTnTt == null) ? string.Empty : this.HeSoLopDongThTnTt.ToString()).GetHashCode() ^ 
					((this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.SoGioThucGiangTrenLop == null) ? string.Empty : this.SoGioThucGiangTrenLop.ToString()).GetHashCode() ^ 
					((this.SoGioChuanTinhThem == null) ? string.Empty : this.SoGioChuanTinhThem.ToString()).GetHashCode() ^ 
					((this.HeSoHocKy == null) ? string.Empty : this.HeSoHocKy.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="UteKhoiLuongQuyDoiBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(UteKhoiLuongQuyDoiBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="UteKhoiLuongQuyDoiBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="UteKhoiLuongQuyDoiBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="UteKhoiLuongQuyDoiBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(UteKhoiLuongQuyDoiBase Object1, UteKhoiLuongQuyDoiBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.IdKhoiLuongGiangDay != Object2.IdKhoiLuongGiangDay)
				equal = false;
			if ( Object1.HeSoLopDongLyThuyet != null && Object2.HeSoLopDongLyThuyet != null )
			{
				if (Object1.HeSoLopDongLyThuyet != Object2.HeSoLopDongLyThuyet)
					equal = false;
			}
			else if (Object1.HeSoLopDongLyThuyet == null ^ Object2.HeSoLopDongLyThuyet == null )
			{
				equal = false;
			}
			if ( Object1.HeSoLopDongThTnTt != null && Object2.HeSoLopDongThTnTt != null )
			{
				if (Object1.HeSoLopDongThTnTt != Object2.HeSoLopDongThTnTt)
					equal = false;
			}
			else if (Object1.HeSoLopDongThTnTt == null ^ Object2.HeSoLopDongThTnTt == null )
			{
				equal = false;
			}
			if ( Object1.TietQuyDoi != null && Object2.TietQuyDoi != null )
			{
				if (Object1.TietQuyDoi != Object2.TietQuyDoi)
					equal = false;
			}
			else if (Object1.TietQuyDoi == null ^ Object2.TietQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.SoGioThucGiangTrenLop != null && Object2.SoGioThucGiangTrenLop != null )
			{
				if (Object1.SoGioThucGiangTrenLop != Object2.SoGioThucGiangTrenLop)
					equal = false;
			}
			else if (Object1.SoGioThucGiangTrenLop == null ^ Object2.SoGioThucGiangTrenLop == null )
			{
				equal = false;
			}
			if ( Object1.SoGioChuanTinhThem != null && Object2.SoGioChuanTinhThem != null )
			{
				if (Object1.SoGioChuanTinhThem != Object2.SoGioChuanTinhThem)
					equal = false;
			}
			else if (Object1.SoGioChuanTinhThem == null ^ Object2.SoGioChuanTinhThem == null )
			{
				equal = false;
			}
			if ( Object1.HeSoHocKy != null && Object2.HeSoHocKy != null )
			{
				if (Object1.HeSoHocKy != Object2.HeSoHocKy)
					equal = false;
			}
			else if (Object1.HeSoHocKy == null ^ Object2.HeSoHocKy == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((UteKhoiLuongQuyDoiBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static UteKhoiLuongQuyDoiComparer GetComparer()
        {
            return new UteKhoiLuongQuyDoiComparer();
        }
        */

        // Comparer delegates back to UteKhoiLuongQuyDoi
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(UteKhoiLuongQuyDoi rhs, UteKhoiLuongQuyDoiColumn which)
        {
            switch (which)
            {
            	
            	
            	case UteKhoiLuongQuyDoiColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case UteKhoiLuongQuyDoiColumn.IdKhoiLuongGiangDay:
            		return this.IdKhoiLuongGiangDay.CompareTo(rhs.IdKhoiLuongGiangDay);
            		
            		                 
            	
            	
            	case UteKhoiLuongQuyDoiColumn.HeSoLopDongLyThuyet:
            		return this.HeSoLopDongLyThuyet.Value.CompareTo(rhs.HeSoLopDongLyThuyet.Value);
            		
            		                 
            	
            	
            	case UteKhoiLuongQuyDoiColumn.HeSoLopDongThTnTt:
            		return this.HeSoLopDongThTnTt.Value.CompareTo(rhs.HeSoLopDongThTnTt.Value);
            		
            		                 
            	
            	
            	case UteKhoiLuongQuyDoiColumn.TietQuyDoi:
            		return this.TietQuyDoi.Value.CompareTo(rhs.TietQuyDoi.Value);
            		
            		                 
            	
            	
            	case UteKhoiLuongQuyDoiColumn.NgayCapNhat:
            		return this.NgayCapNhat.Value.CompareTo(rhs.NgayCapNhat.Value);
            		
            		                 
            	
            	
            	case UteKhoiLuongQuyDoiColumn.SoGioThucGiangTrenLop:
            		return this.SoGioThucGiangTrenLop.Value.CompareTo(rhs.SoGioThucGiangTrenLop.Value);
            		
            		                 
            	
            	
            	case UteKhoiLuongQuyDoiColumn.SoGioChuanTinhThem:
            		return this.SoGioChuanTinhThem.Value.CompareTo(rhs.SoGioChuanTinhThem.Value);
            		
            		                 
            	
            	
            	case UteKhoiLuongQuyDoiColumn.HeSoHocKy:
            		return this.HeSoHocKy.Value.CompareTo(rhs.HeSoHocKy.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<UteKhoiLuongQuyDoiKey> Members
		
		// member variable for the EntityId property
		private UteKhoiLuongQuyDoiKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual UteKhoiLuongQuyDoiKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new UteKhoiLuongQuyDoiKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("UteKhoiLuongQuyDoi")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- Id: {0}{9}- IdKhoiLuongGiangDay: {1}{9}- HeSoLopDongLyThuyet: {2}{9}- HeSoLopDongThTnTt: {3}{9}- TietQuyDoi: {4}{9}- NgayCapNhat: {5}{9}- SoGioThucGiangTrenLop: {6}{9}- SoGioChuanTinhThem: {7}{9}- HeSoHocKy: {8}{9}{11}", 
				this.Id,
				this.IdKhoiLuongGiangDay,
				(this.HeSoLopDongLyThuyet == null) ? string.Empty : this.HeSoLopDongLyThuyet.ToString(),
				(this.HeSoLopDongThTnTt == null) ? string.Empty : this.HeSoLopDongThTnTt.ToString(),
				(this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.SoGioThucGiangTrenLop == null) ? string.Empty : this.SoGioThucGiangTrenLop.ToString(),
				(this.SoGioChuanTinhThem == null) ? string.Empty : this.SoGioChuanTinhThem.ToString(),
				(this.HeSoHocKy == null) ? string.Empty : this.HeSoHocKy.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Ute_KhoiLuongQuyDoi' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class UteKhoiLuongQuyDoiEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Ute_KhoiLuongQuyDoi"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// IdKhoiLuongGiangDay : 
		/// </summary>
		public System.Int32 IdKhoiLuongGiangDay = (int)0;
		
		/// <summary>
		/// HeSoLopDongLyThuyet : 
		/// </summary>
		public System.Decimal? HeSoLopDongLyThuyet = null;
		
		/// <summary>
		/// HeSoLopDongThTnTt : 
		/// </summary>
		public System.Decimal? HeSoLopDongThTnTt = null;
		
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		public System.Decimal? TietQuyDoi = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.DateTime? NgayCapNhat = null;
		
		/// <summary>
		/// SoGioThucGiangTrenLop : 
		/// </summary>
		public System.Decimal? SoGioThucGiangTrenLop = null;
		
		/// <summary>
		/// SoGioChuanTinhThem : 
		/// </summary>
		public System.Decimal? SoGioChuanTinhThem = null;
		
		/// <summary>
		/// HeSoHocKy : 
		/// </summary>
		public System.Decimal? HeSoHocKy = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private UteKhoiLuongGiangDay _idKhoiLuongGiangDaySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="UteKhoiLuongGiangDay"/>.
		/// </summary>
		/// <value>The source UteKhoiLuongGiangDay for IdKhoiLuongGiangDay.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual UteKhoiLuongGiangDay IdKhoiLuongGiangDaySource
      	{
            get { return this._idKhoiLuongGiangDaySource; }
            set { this._idKhoiLuongGiangDaySource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region UteThanhToanThuLao
		
		private UteThanhToanThuLao _uteThanhToanThuLaoIdKhoiLuongQuyDoi;
		
		/// <summary>
		///	Holds a  UteThanhToanThuLao entity object
		///	which is related to this object through the relation _uteThanhToanThuLaoIdKhoiLuongQuyDoi
		/// </summary>
		
		public UteThanhToanThuLao UteThanhToanThuLao
		{
			get {		return _uteThanhToanThuLaoIdKhoiLuongQuyDoi;		}
			set { 	_uteThanhToanThuLaoIdKhoiLuongQuyDoi = value; 	}
		}
		
		#endregion 

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			UteKhoiLuongQuyDoiEntityData _tmp = new UteKhoiLuongQuyDoiEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.IdKhoiLuongGiangDay = this.IdKhoiLuongGiangDay;
			_tmp.HeSoLopDongLyThuyet = this.HeSoLopDongLyThuyet;
			_tmp.HeSoLopDongThTnTt = this.HeSoLopDongThTnTt;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.SoGioThucGiangTrenLop = this.SoGioThucGiangTrenLop;
			_tmp.SoGioChuanTinhThem = this.SoGioChuanTinhThem;
			_tmp.HeSoHocKy = this.HeSoHocKy;
			
			#region Source Parent Composite Entities
			if (this.IdKhoiLuongGiangDaySource != null)
				_tmp.IdKhoiLuongGiangDaySource = MakeCopyOf(this.IdKhoiLuongGiangDaySource) as UteKhoiLuongGiangDay;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._uteThanhToanThuLaoIdKhoiLuongQuyDoi != null)
				_tmp.UteThanhToanThuLao = (UteThanhToanThuLao) MakeCopyOf(this.UteThanhToanThuLao); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			UteKhoiLuongQuyDoiEntityData _tmp = new UteKhoiLuongQuyDoiEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.IdKhoiLuongGiangDay = this.IdKhoiLuongGiangDay;
			_tmp.HeSoLopDongLyThuyet = this.HeSoLopDongLyThuyet;
			_tmp.HeSoLopDongThTnTt = this.HeSoLopDongThTnTt;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.SoGioThucGiangTrenLop = this.SoGioThucGiangTrenLop;
			_tmp.SoGioChuanTinhThem = this.SoGioChuanTinhThem;
			_tmp.HeSoHocKy = this.HeSoHocKy;
			
			#region Source Parent Composite Entities
			if (this.IdKhoiLuongGiangDaySource != null && existingCopies.Contains(this.IdKhoiLuongGiangDaySource))
				_tmp.IdKhoiLuongGiangDaySource = existingCopies[this.IdKhoiLuongGiangDaySource] as UteKhoiLuongGiangDay;
			else
				_tmp.IdKhoiLuongGiangDaySource = MakeCopyOf(this.IdKhoiLuongGiangDaySource, existingCopies) as UteKhoiLuongGiangDay;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.UteThanhToanThuLao = (UteThanhToanThuLao) MakeCopyOf(this.UteThanhToanThuLao, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UteKhoiLuongQuyDoiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(UteKhoiLuongQuyDoiColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UteKhoiLuongQuyDoiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(UteKhoiLuongQuyDoiColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UteKhoiLuongQuyDoiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(UteKhoiLuongQuyDoiColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				UteKhoiLuongQuyDoiEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new UteKhoiLuongQuyDoiEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UteKhoiLuongQuyDoiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(UteKhoiLuongQuyDoiColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				UteKhoiLuongQuyDoiEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new UteKhoiLuongQuyDoiEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region UteKhoiLuongQuyDoiEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="UteKhoiLuongQuyDoi"/> object.
	/// </remarks>
	public class UteKhoiLuongQuyDoiEventArgs : System.EventArgs
	{
		private UteKhoiLuongQuyDoiColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the UteKhoiLuongQuyDoiEventArgs class.
		///</summary>
		public UteKhoiLuongQuyDoiEventArgs(UteKhoiLuongQuyDoiColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the UteKhoiLuongQuyDoiEventArgs class.
		///</summary>
		public UteKhoiLuongQuyDoiEventArgs(UteKhoiLuongQuyDoiColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The UteKhoiLuongQuyDoiColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="UteKhoiLuongQuyDoiColumn" />
		public UteKhoiLuongQuyDoiColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all UteKhoiLuongQuyDoi related events.
	///</summary>
	public delegate void UteKhoiLuongQuyDoiEventHandler(object sender, UteKhoiLuongQuyDoiEventArgs e);
	
	#region UteKhoiLuongQuyDoiComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class UteKhoiLuongQuyDoiComparer : System.Collections.Generic.IComparer<UteKhoiLuongQuyDoi>
	{
		UteKhoiLuongQuyDoiColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:UteKhoiLuongQuyDoiComparer"/> class.
        /// </summary>
		public UteKhoiLuongQuyDoiComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:UteKhoiLuongQuyDoiComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public UteKhoiLuongQuyDoiComparer(UteKhoiLuongQuyDoiColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="UteKhoiLuongQuyDoi"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="UteKhoiLuongQuyDoi"/> to compare.</param>
        /// <param name="b">The second <c>UteKhoiLuongQuyDoi</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(UteKhoiLuongQuyDoi a, UteKhoiLuongQuyDoi b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(UteKhoiLuongQuyDoi entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(UteKhoiLuongQuyDoi a, UteKhoiLuongQuyDoi b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public UteKhoiLuongQuyDoiColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region UteKhoiLuongQuyDoiKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="UteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class UteKhoiLuongQuyDoiKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiKey class.
		/// </summary>
		public UteKhoiLuongQuyDoiKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiKey class.
		/// </summary>
		public UteKhoiLuongQuyDoiKey(UteKhoiLuongQuyDoiBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiKey class.
		/// </summary>
		public UteKhoiLuongQuyDoiKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private UteKhoiLuongQuyDoiBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public UteKhoiLuongQuyDoiBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region UteKhoiLuongQuyDoiColumn Enum
	
	/// <summary>
	/// Enumerate the UteKhoiLuongQuyDoi columns.
	/// </summary>
	[Serializable]
	public enum UteKhoiLuongQuyDoiColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// IdKhoiLuongGiangDay : 
		/// </summary>
		[EnumTextValue("Id Khoi Luong Giang Day")]
		[ColumnEnum("IdKhoiLuongGiangDay", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		IdKhoiLuongGiangDay = 2,
		/// <summary>
		/// HeSoLopDongLyThuyet : 
		/// </summary>
		[EnumTextValue("He So Lop Dong Ly Thuyet")]
		[ColumnEnum("HeSoLopDongLyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLopDongLyThuyet = 3,
		/// <summary>
		/// HeSoLopDongThTnTt : 
		/// </summary>
		[EnumTextValue("He So Lop Dong Th Tn Tt")]
		[ColumnEnum("HeSoLopDongThTnTt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLopDongThTnTt = 4,
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		[EnumTextValue("Tiet Quy Doi")]
		[ColumnEnum("TietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietQuyDoi = 5,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayCapNhat = 6,
		/// <summary>
		/// SoGioThucGiangTrenLop : 
		/// </summary>
		[EnumTextValue("So Gio Thuc Giang Tren Lop")]
		[ColumnEnum("SoGioThucGiangTrenLop", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoGioThucGiangTrenLop = 7,
		/// <summary>
		/// SoGioChuanTinhThem : 
		/// </summary>
		[EnumTextValue("So Gio Chuan Tinh Them")]
		[ColumnEnum("SoGioChuanTinhThem", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoGioChuanTinhThem = 8,
		/// <summary>
		/// HeSoHocKy : 
		/// </summary>
		[EnumTextValue("He So Hoc Ky")]
		[ColumnEnum("HeSoHocKy", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoHocKy = 9
	}//End enum

	#endregion UteKhoiLuongQuyDoiColumn Enum

} // end namespace
