
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file KhoiLuongGiangDayCaoDang.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'KhoiLuongGiangDayCaoDang' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class KhoiLuongGiangDayCaoDangBase : EntityBase, IKhoiLuongGiangDayCaoDang, IEntityId<KhoiLuongGiangDayCaoDangKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private KhoiLuongGiangDayCaoDangEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private KhoiLuongGiangDayCaoDangEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private KhoiLuongGiangDayCaoDangEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<KhoiLuongGiangDayCaoDang> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KhoiLuongGiangDayCaoDangEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KhoiLuongGiangDayCaoDangEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="KhoiLuongGiangDayCaoDangBase"/> instance.
		///</summary>
		public KhoiLuongGiangDayCaoDangBase()
		{
			this.entityData = new KhoiLuongGiangDayCaoDangEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="KhoiLuongGiangDayCaoDangBase"/> instance.
		///</summary>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_siSoLop"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tietThucDayLt"></param>
		///<param name="_tietThucDayTh"></param>
		///<param name="_maCauHinhChotGio"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		public KhoiLuongGiangDayCaoDangBase(System.String _maGiangVienQuanLy, System.String _maLopHocPhan, 
			System.Int32? _siSoLop, System.String _maMonHoc, System.Int32? _tietThucDayLt, 
			System.Int32? _tietThucDayTh, System.Int32? _maCauHinhChotGio, System.String _tenLopHocPhan, 
			System.Int32? _maLoaiGiangVien, System.Int32? _maHocHam, System.Int32? _maHocVi)
		{
			this.entityData = new KhoiLuongGiangDayCaoDangEntityData();
			this.backupData = null;

			this.MaGiangVienQuanLy = _maGiangVienQuanLy;
			this.MaLopHocPhan = _maLopHocPhan;
			this.SiSoLop = _siSoLop;
			this.MaMonHoc = _maMonHoc;
			this.TietThucDayLt = _tietThucDayLt;
			this.TietThucDayTh = _tietThucDayTh;
			this.MaCauHinhChotGio = _maCauHinhChotGio;
			this.TenLopHocPhan = _tenLopHocPhan;
			this.MaLoaiGiangVien = _maLoaiGiangVien;
			this.MaHocHam = _maHocHam;
			this.MaHocVi = _maHocVi;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="KhoiLuongGiangDayCaoDang"/> instance.
		///</summary>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_siSoLop"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tietThucDayLt"></param>
		///<param name="_tietThucDayTh"></param>
		///<param name="_maCauHinhChotGio"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		public static KhoiLuongGiangDayCaoDang CreateKhoiLuongGiangDayCaoDang(System.String _maGiangVienQuanLy, System.String _maLopHocPhan, 
			System.Int32? _siSoLop, System.String _maMonHoc, System.Int32? _tietThucDayLt, 
			System.Int32? _tietThucDayTh, System.Int32? _maCauHinhChotGio, System.String _tenLopHocPhan, 
			System.Int32? _maLoaiGiangVien, System.Int32? _maHocHam, System.Int32? _maHocVi)
		{
			KhoiLuongGiangDayCaoDang newKhoiLuongGiangDayCaoDang = new KhoiLuongGiangDayCaoDang();
			newKhoiLuongGiangDayCaoDang.MaGiangVienQuanLy = _maGiangVienQuanLy;
			newKhoiLuongGiangDayCaoDang.MaLopHocPhan = _maLopHocPhan;
			newKhoiLuongGiangDayCaoDang.SiSoLop = _siSoLop;
			newKhoiLuongGiangDayCaoDang.MaMonHoc = _maMonHoc;
			newKhoiLuongGiangDayCaoDang.TietThucDayLt = _tietThucDayLt;
			newKhoiLuongGiangDayCaoDang.TietThucDayTh = _tietThucDayTh;
			newKhoiLuongGiangDayCaoDang.MaCauHinhChotGio = _maCauHinhChotGio;
			newKhoiLuongGiangDayCaoDang.TenLopHocPhan = _tenLopHocPhan;
			newKhoiLuongGiangDayCaoDang.MaLoaiGiangVien = _maLoaiGiangVien;
			newKhoiLuongGiangDayCaoDang.MaHocHam = _maHocHam;
			newKhoiLuongGiangDayCaoDang.MaHocVi = _maHocVi;
			return newKhoiLuongGiangDayCaoDang;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaKhoiLuongCaoDang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaKhoiLuongCaoDang
		{
			get
			{
				return this.entityData.MaKhoiLuongCaoDang; 
			}
			
			set
			{
				if (this.entityData.MaKhoiLuongCaoDang == value)
					return;
				
                OnPropertyChanging("MaKhoiLuongCaoDang");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.MaKhoiLuongCaoDang, this.entityData.MaKhoiLuongCaoDang);
				this.entityData.MaKhoiLuongCaoDang = value;
				this.EntityId.MaKhoiLuongCaoDang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.MaKhoiLuongCaoDang, this.entityData.MaKhoiLuongCaoDang);
				OnPropertyChanged("MaKhoiLuongCaoDang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVienQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaGiangVienQuanLy
		{
			get
			{
				return this.entityData.MaGiangVienQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaGiangVienQuanLy == value)
					return;
				
                OnPropertyChanging("MaGiangVienQuanLy");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				this.entityData.MaGiangVienQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				OnPropertyChanged("MaGiangVienQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiSoLop property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiSoLop
		{
			get
			{
				return this.entityData.SiSoLop; 
			}
			
			set
			{
				if (this.entityData.SiSoLop == value)
					return;
				
                OnPropertyChanging("SiSoLop");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.SiSoLop, this.entityData.SiSoLop);
				this.entityData.SiSoLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.SiSoLop, this.entityData.SiSoLop);
				OnPropertyChanged("SiSoLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietThucDayLt property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietThucDayLt
		{
			get
			{
				return this.entityData.TietThucDayLt; 
			}
			
			set
			{
				if (this.entityData.TietThucDayLt == value)
					return;
				
                OnPropertyChanging("TietThucDayLt");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.TietThucDayLt, this.entityData.TietThucDayLt);
				this.entityData.TietThucDayLt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.TietThucDayLt, this.entityData.TietThucDayLt);
				OnPropertyChanged("TietThucDayLt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietThucDayTh property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietThucDayTh
		{
			get
			{
				return this.entityData.TietThucDayTh; 
			}
			
			set
			{
				if (this.entityData.TietThucDayTh == value)
					return;
				
                OnPropertyChanging("TietThucDayTh");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.TietThucDayTh, this.entityData.TietThucDayTh);
				this.entityData.TietThucDayTh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.TietThucDayTh, this.entityData.TietThucDayTh);
				OnPropertyChanged("TietThucDayTh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaCauHinhChotGio property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaCauHinhChotGio
		{
			get
			{
				return this.entityData.MaCauHinhChotGio; 
			}
			
			set
			{
				if (this.entityData.MaCauHinhChotGio == value)
					return;
				
                OnPropertyChanging("MaCauHinhChotGio");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.MaCauHinhChotGio, this.entityData.MaCauHinhChotGio);
				this.entityData.MaCauHinhChotGio = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.MaCauHinhChotGio, this.entityData.MaCauHinhChotGio);
				OnPropertyChanged("MaCauHinhChotGio");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenLopHocPhan
		{
			get
			{
				return this.entityData.TenLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.TenLopHocPhan == value)
					return;
				
                OnPropertyChanging("TenLopHocPhan");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.TenLopHocPhan, this.entityData.TenLopHocPhan);
				this.entityData.TenLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.TenLopHocPhan, this.entityData.TenLopHocPhan);
				OnPropertyChanged("TenLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaLoaiGiangVien
		{
			get
			{
				return this.entityData.MaLoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaLoaiGiangVien == value)
					return;
				
                OnPropertyChanging("MaLoaiGiangVien");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				this.entityData.MaLoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.MaLoaiGiangVien, this.entityData.MaLoaiGiangVien);
				OnPropertyChanged("MaLoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this.entityData.MaHocVi; 
			}
			
			set
			{
				if (this.entityData.MaHocVi == value)
					return;
				
                OnPropertyChanging("MaHocVi");                    
				OnColumnChanging(KhoiLuongGiangDayCaoDangColumn.MaHocVi, this.entityData.MaHocVi);
				this.entityData.MaHocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongGiangDayCaoDangColumn.MaHocVi, this.entityData.MaHocVi);
				OnPropertyChanged("MaHocVi");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="CauHinhChotGio"/>.
		/// </summary>
		/// <value>The source CauHinhChotGio for MaCauHinhChotGio.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CauHinhChotGio MaCauHinhChotGioSource
      	{
            get { return entityData.MaCauHinhChotGioSource; }
            set { entityData.MaCauHinhChotGioSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of KhoiLuongQuyDoiCaoDang objects
		///	which are related to this object through the relation FK_KhoiLuongQuyDoiCaoDang_KhoiLuongGiangDayCaoDang
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<KhoiLuongQuyDoiCaoDang> KhoiLuongQuyDoiCaoDangCollection
		{
			get { return entityData.KhoiLuongQuyDoiCaoDangCollection; }
			set { entityData.KhoiLuongQuyDoiCaoDangCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaGiangVienQuanLy", "Ma Giang Vien Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenLopHocPhan", "Ten Lop Hoc Phan", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "KhoiLuongGiangDayCaoDang"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaKhoiLuongCaoDang", "MaGiangVienQuanLy", "MaLopHocPhan", "SiSoLop", "MaMonHoc", "TietThucDayLT", "TietThucDayTH", "MaCauHinhChotGio", "TenLopHocPhan", "MaLoaiGiangVien", "MaHocHam", "MaHocVi"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as KhoiLuongGiangDayCaoDangEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (KhoiLuongGiangDayCaoDang) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<KhoiLuongGiangDayCaoDang>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as KhoiLuongGiangDayCaoDang);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed KhoiLuongGiangDayCaoDang Entity 
		///</summary>
		protected virtual KhoiLuongGiangDayCaoDang Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			KhoiLuongGiangDayCaoDang copy = new KhoiLuongGiangDayCaoDang();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaKhoiLuongCaoDang = this.MaKhoiLuongCaoDang;
				copy.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.SiSoLop = this.SiSoLop;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TietThucDayLt = this.TietThucDayLt;
				copy.TietThucDayTh = this.TietThucDayTh;
				copy.MaCauHinhChotGio = this.MaCauHinhChotGio;
				copy.TenLopHocPhan = this.TenLopHocPhan;
				copy.MaLoaiGiangVien = this.MaLoaiGiangVien;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
			
			if (this.MaCauHinhChotGioSource != null && existingCopies.Contains(this.MaCauHinhChotGioSource))
				copy.MaCauHinhChotGioSource = existingCopies[this.MaCauHinhChotGioSource] as CauHinhChotGio;
			else
				copy.MaCauHinhChotGioSource = MakeCopyOf(this.MaCauHinhChotGioSource, existingCopies) as CauHinhChotGio;
		
			//deep copy nested objects
			copy.KhoiLuongQuyDoiCaoDangCollection = (TList<KhoiLuongQuyDoiCaoDang>) MakeCopyOf(this.KhoiLuongQuyDoiCaoDangCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed KhoiLuongGiangDayCaoDang Entity 
		///</summary>
		public virtual KhoiLuongGiangDayCaoDang Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed KhoiLuongGiangDayCaoDang Entity which is a deep copy of the current entity.
		///</summary>
		public virtual KhoiLuongGiangDayCaoDang DeepCopy()
		{
			return EntityHelper.Clone<KhoiLuongGiangDayCaoDang>(this as KhoiLuongGiangDayCaoDang);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as KhoiLuongGiangDayCaoDangEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new KhoiLuongGiangDayCaoDangEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as KhoiLuongGiangDayCaoDangEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(KhoiLuongGiangDayCaoDangColumn column)
		{
			switch(column)
			{
					case KhoiLuongGiangDayCaoDangColumn.MaKhoiLuongCaoDang:
					return entityData.MaKhoiLuongCaoDang != _originalData.MaKhoiLuongCaoDang;
					case KhoiLuongGiangDayCaoDangColumn.MaGiangVienQuanLy:
					return entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
					case KhoiLuongGiangDayCaoDangColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case KhoiLuongGiangDayCaoDangColumn.SiSoLop:
					return entityData.SiSoLop != _originalData.SiSoLop;
					case KhoiLuongGiangDayCaoDangColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case KhoiLuongGiangDayCaoDangColumn.TietThucDayLt:
					return entityData.TietThucDayLt != _originalData.TietThucDayLt;
					case KhoiLuongGiangDayCaoDangColumn.TietThucDayTh:
					return entityData.TietThucDayTh != _originalData.TietThucDayTh;
					case KhoiLuongGiangDayCaoDangColumn.MaCauHinhChotGio:
					return entityData.MaCauHinhChotGio != _originalData.MaCauHinhChotGio;
					case KhoiLuongGiangDayCaoDangColumn.TenLopHocPhan:
					return entityData.TenLopHocPhan != _originalData.TenLopHocPhan;
					case KhoiLuongGiangDayCaoDangColumn.MaLoaiGiangVien:
					return entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
					case KhoiLuongGiangDayCaoDangColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case KhoiLuongGiangDayCaoDangColumn.MaHocVi:
					return entityData.MaHocVi != _originalData.MaHocVi;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< KhoiLuongGiangDayCaoDangColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaKhoiLuongCaoDang != _originalData.MaKhoiLuongCaoDang;
			result = result || entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.SiSoLop != _originalData.SiSoLop;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.TietThucDayLt != _originalData.TietThucDayLt;
			result = result || entityData.TietThucDayTh != _originalData.TietThucDayTh;
			result = result || entityData.MaCauHinhChotGio != _originalData.MaCauHinhChotGio;
			result = result || entityData.TenLopHocPhan != _originalData.TenLopHocPhan;
			result = result || entityData.MaLoaiGiangVien != _originalData.MaLoaiGiangVien;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.MaHocVi != _originalData.MaHocVi;
			return result;
		}	
		
		///<summary>
		///  Returns a KhoiLuongGiangDayCaoDang Entity with the original data.
		///</summary>
		public KhoiLuongGiangDayCaoDang GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateKhoiLuongGiangDayCaoDang(
				_originalData.MaGiangVienQuanLy,
				_originalData.MaLopHocPhan,
				_originalData.SiSoLop,
				_originalData.MaMonHoc,
				_originalData.TietThucDayLt,
				_originalData.TietThucDayTh,
				_originalData.MaCauHinhChotGio,
				_originalData.TenLopHocPhan,
				_originalData.MaLoaiGiangVien,
				_originalData.MaHocHam,
				_originalData.MaHocVi
				);
				
			return (KhoiLuongGiangDayCaoDang)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="KhoiLuongGiangDayCaoDangBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is KhoiLuongGiangDayCaoDangBase)
				return ValueEquals(this, (KhoiLuongGiangDayCaoDangBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="KhoiLuongGiangDayCaoDangBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaKhoiLuongCaoDang.GetHashCode() ^ 
					((this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.SiSoLop == null) ? string.Empty : this.SiSoLop.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.TietThucDayLt == null) ? string.Empty : this.TietThucDayLt.ToString()).GetHashCode() ^ 
					((this.TietThucDayTh == null) ? string.Empty : this.TietThucDayTh.ToString()).GetHashCode() ^ 
					((this.MaCauHinhChotGio == null) ? string.Empty : this.MaCauHinhChotGio.ToString()).GetHashCode() ^ 
					((this.TenLopHocPhan == null) ? string.Empty : this.TenLopHocPhan.ToString()).GetHashCode() ^ 
					((this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="KhoiLuongGiangDayCaoDangBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(KhoiLuongGiangDayCaoDangBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="KhoiLuongGiangDayCaoDangBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="KhoiLuongGiangDayCaoDangBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="KhoiLuongGiangDayCaoDangBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(KhoiLuongGiangDayCaoDangBase Object1, KhoiLuongGiangDayCaoDangBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaKhoiLuongCaoDang != Object2.MaKhoiLuongCaoDang)
				equal = false;
			if ( Object1.MaGiangVienQuanLy != null && Object2.MaGiangVienQuanLy != null )
			{
				if (Object1.MaGiangVienQuanLy != Object2.MaGiangVienQuanLy)
					equal = false;
			}
			else if (Object1.MaGiangVienQuanLy == null ^ Object2.MaGiangVienQuanLy == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.SiSoLop != null && Object2.SiSoLop != null )
			{
				if (Object1.SiSoLop != Object2.SiSoLop)
					equal = false;
			}
			else if (Object1.SiSoLop == null ^ Object2.SiSoLop == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.TietThucDayLt != null && Object2.TietThucDayLt != null )
			{
				if (Object1.TietThucDayLt != Object2.TietThucDayLt)
					equal = false;
			}
			else if (Object1.TietThucDayLt == null ^ Object2.TietThucDayLt == null )
			{
				equal = false;
			}
			if ( Object1.TietThucDayTh != null && Object2.TietThucDayTh != null )
			{
				if (Object1.TietThucDayTh != Object2.TietThucDayTh)
					equal = false;
			}
			else if (Object1.TietThucDayTh == null ^ Object2.TietThucDayTh == null )
			{
				equal = false;
			}
			if ( Object1.MaCauHinhChotGio != null && Object2.MaCauHinhChotGio != null )
			{
				if (Object1.MaCauHinhChotGio != Object2.MaCauHinhChotGio)
					equal = false;
			}
			else if (Object1.MaCauHinhChotGio == null ^ Object2.MaCauHinhChotGio == null )
			{
				equal = false;
			}
			if ( Object1.TenLopHocPhan != null && Object2.TenLopHocPhan != null )
			{
				if (Object1.TenLopHocPhan != Object2.TenLopHocPhan)
					equal = false;
			}
			else if (Object1.TenLopHocPhan == null ^ Object2.TenLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiGiangVien != null && Object2.MaLoaiGiangVien != null )
			{
				if (Object1.MaLoaiGiangVien != Object2.MaLoaiGiangVien)
					equal = false;
			}
			else if (Object1.MaLoaiGiangVien == null ^ Object2.MaLoaiGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object2.MaHocVi == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((KhoiLuongGiangDayCaoDangBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static KhoiLuongGiangDayCaoDangComparer GetComparer()
        {
            return new KhoiLuongGiangDayCaoDangComparer();
        }
        */

        // Comparer delegates back to KhoiLuongGiangDayCaoDang
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(KhoiLuongGiangDayCaoDang rhs, KhoiLuongGiangDayCaoDangColumn which)
        {
            switch (which)
            {
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.MaKhoiLuongCaoDang:
            		return this.MaKhoiLuongCaoDang.CompareTo(rhs.MaKhoiLuongCaoDang);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.MaGiangVienQuanLy:
            		return this.MaGiangVienQuanLy.CompareTo(rhs.MaGiangVienQuanLy);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.SiSoLop:
            		return this.SiSoLop.Value.CompareTo(rhs.SiSoLop.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.TietThucDayLt:
            		return this.TietThucDayLt.Value.CompareTo(rhs.TietThucDayLt.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.TietThucDayTh:
            		return this.TietThucDayTh.Value.CompareTo(rhs.TietThucDayTh.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.MaCauHinhChotGio:
            		return this.MaCauHinhChotGio.Value.CompareTo(rhs.MaCauHinhChotGio.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.TenLopHocPhan:
            		return this.TenLopHocPhan.CompareTo(rhs.TenLopHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.MaLoaiGiangVien:
            		return this.MaLoaiGiangVien.Value.CompareTo(rhs.MaLoaiGiangVien.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case KhoiLuongGiangDayCaoDangColumn.MaHocVi:
            		return this.MaHocVi.Value.CompareTo(rhs.MaHocVi.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<KhoiLuongGiangDayCaoDangKey> Members
		
		// member variable for the EntityId property
		private KhoiLuongGiangDayCaoDangKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual KhoiLuongGiangDayCaoDangKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new KhoiLuongGiangDayCaoDangKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("KhoiLuongGiangDayCaoDang")
					.Append("|").Append( this.MaKhoiLuongCaoDang.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- MaKhoiLuongCaoDang: {0}{12}- MaGiangVienQuanLy: {1}{12}- MaLopHocPhan: {2}{12}- SiSoLop: {3}{12}- MaMonHoc: {4}{12}- TietThucDayLt: {5}{12}- TietThucDayTh: {6}{12}- MaCauHinhChotGio: {7}{12}- TenLopHocPhan: {8}{12}- MaLoaiGiangVien: {9}{12}- MaHocHam: {10}{12}- MaHocVi: {11}{12}{14}", 
				this.MaKhoiLuongCaoDang,
				(this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.SiSoLop == null) ? string.Empty : this.SiSoLop.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.TietThucDayLt == null) ? string.Empty : this.TietThucDayLt.ToString(),
				(this.TietThucDayTh == null) ? string.Empty : this.TietThucDayTh.ToString(),
				(this.MaCauHinhChotGio == null) ? string.Empty : this.MaCauHinhChotGio.ToString(),
				(this.TenLopHocPhan == null) ? string.Empty : this.TenLopHocPhan.ToString(),
				(this.MaLoaiGiangVien == null) ? string.Empty : this.MaLoaiGiangVien.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'KhoiLuongGiangDayCaoDang' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class KhoiLuongGiangDayCaoDangEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaKhoiLuongCaoDang : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "KhoiLuongGiangDayCaoDang"</remarks>
		public System.Int32 MaKhoiLuongCaoDang;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		public System.String MaGiangVienQuanLy = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		public System.Int32? SiSoLop = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// TietThucDayLT : 
		/// </summary>
		public System.Int32? TietThucDayLt = null;
		
		/// <summary>
		/// TietThucDayTH : 
		/// </summary>
		public System.Int32? TietThucDayTh = null;
		
		/// <summary>
		/// MaCauHinhChotGio : 
		/// </summary>
		public System.Int32? MaCauHinhChotGio = null;
		
		/// <summary>
		/// TenLopHocPhan : 
		/// </summary>
		public System.String TenLopHocPhan = null;
		
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		public System.Int32? MaLoaiGiangVien = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		public System.Int32? MaHocVi = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private CauHinhChotGio _maCauHinhChotGioSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CauHinhChotGio"/>.
		/// </summary>
		/// <value>The source CauHinhChotGio for MaCauHinhChotGio.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CauHinhChotGio MaCauHinhChotGioSource
      	{
            get { return this._maCauHinhChotGioSource; }
            set { this._maCauHinhChotGioSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region KhoiLuongQuyDoiCaoDangCollection
		
		private TList<KhoiLuongQuyDoiCaoDang> _khoiLuongQuyDoiCaoDangMaKhoiLuongCaoDang;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _khoiLuongQuyDoiCaoDangMaKhoiLuongCaoDang
		/// </summary>
		
		public TList<KhoiLuongQuyDoiCaoDang> KhoiLuongQuyDoiCaoDangCollection
		{
			get
			{
				if (_khoiLuongQuyDoiCaoDangMaKhoiLuongCaoDang == null)
				{
				_khoiLuongQuyDoiCaoDangMaKhoiLuongCaoDang = new TList<KhoiLuongQuyDoiCaoDang>();
				}
	
				return _khoiLuongQuyDoiCaoDangMaKhoiLuongCaoDang;
			}
			set { _khoiLuongQuyDoiCaoDangMaKhoiLuongCaoDang = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			KhoiLuongGiangDayCaoDangEntityData _tmp = new KhoiLuongGiangDayCaoDangEntityData();
						
			_tmp.MaKhoiLuongCaoDang = this.MaKhoiLuongCaoDang;
			
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.SiSoLop = this.SiSoLop;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TietThucDayLt = this.TietThucDayLt;
			_tmp.TietThucDayTh = this.TietThucDayTh;
			_tmp.MaCauHinhChotGio = this.MaCauHinhChotGio;
			_tmp.TenLopHocPhan = this.TenLopHocPhan;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			
			#region Source Parent Composite Entities
			if (this.MaCauHinhChotGioSource != null)
				_tmp.MaCauHinhChotGioSource = MakeCopyOf(this.MaCauHinhChotGioSource) as CauHinhChotGio;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._khoiLuongQuyDoiCaoDangMaKhoiLuongCaoDang != null)
				_tmp.KhoiLuongQuyDoiCaoDangCollection = (TList<KhoiLuongQuyDoiCaoDang>) MakeCopyOf(this.KhoiLuongQuyDoiCaoDangCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			KhoiLuongGiangDayCaoDangEntityData _tmp = new KhoiLuongGiangDayCaoDangEntityData();
						
			_tmp.MaKhoiLuongCaoDang = this.MaKhoiLuongCaoDang;
			
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.SiSoLop = this.SiSoLop;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TietThucDayLt = this.TietThucDayLt;
			_tmp.TietThucDayTh = this.TietThucDayTh;
			_tmp.MaCauHinhChotGio = this.MaCauHinhChotGio;
			_tmp.TenLopHocPhan = this.TenLopHocPhan;
			_tmp.MaLoaiGiangVien = this.MaLoaiGiangVien;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			
			#region Source Parent Composite Entities
			if (this.MaCauHinhChotGioSource != null && existingCopies.Contains(this.MaCauHinhChotGioSource))
				_tmp.MaCauHinhChotGioSource = existingCopies[this.MaCauHinhChotGioSource] as CauHinhChotGio;
			else
				_tmp.MaCauHinhChotGioSource = MakeCopyOf(this.MaCauHinhChotGioSource, existingCopies) as CauHinhChotGio;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.KhoiLuongQuyDoiCaoDangCollection = (TList<KhoiLuongQuyDoiCaoDang>) MakeCopyOf(this.KhoiLuongQuyDoiCaoDangCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongGiangDayCaoDangColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(KhoiLuongGiangDayCaoDangColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongGiangDayCaoDangColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(KhoiLuongGiangDayCaoDangColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongGiangDayCaoDangColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(KhoiLuongGiangDayCaoDangColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				KhoiLuongGiangDayCaoDangEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new KhoiLuongGiangDayCaoDangEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongGiangDayCaoDangColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(KhoiLuongGiangDayCaoDangColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				KhoiLuongGiangDayCaoDangEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new KhoiLuongGiangDayCaoDangEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region KhoiLuongGiangDayCaoDangEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="KhoiLuongGiangDayCaoDang"/> object.
	/// </remarks>
	public class KhoiLuongGiangDayCaoDangEventArgs : System.EventArgs
	{
		private KhoiLuongGiangDayCaoDangColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the KhoiLuongGiangDayCaoDangEventArgs class.
		///</summary>
		public KhoiLuongGiangDayCaoDangEventArgs(KhoiLuongGiangDayCaoDangColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the KhoiLuongGiangDayCaoDangEventArgs class.
		///</summary>
		public KhoiLuongGiangDayCaoDangEventArgs(KhoiLuongGiangDayCaoDangColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The KhoiLuongGiangDayCaoDangColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="KhoiLuongGiangDayCaoDangColumn" />
		public KhoiLuongGiangDayCaoDangColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all KhoiLuongGiangDayCaoDang related events.
	///</summary>
	public delegate void KhoiLuongGiangDayCaoDangEventHandler(object sender, KhoiLuongGiangDayCaoDangEventArgs e);
	
	#region KhoiLuongGiangDayCaoDangComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class KhoiLuongGiangDayCaoDangComparer : System.Collections.Generic.IComparer<KhoiLuongGiangDayCaoDang>
	{
		KhoiLuongGiangDayCaoDangColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:KhoiLuongGiangDayCaoDangComparer"/> class.
        /// </summary>
		public KhoiLuongGiangDayCaoDangComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:KhoiLuongGiangDayCaoDangComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public KhoiLuongGiangDayCaoDangComparer(KhoiLuongGiangDayCaoDangColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="KhoiLuongGiangDayCaoDang"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="KhoiLuongGiangDayCaoDang"/> to compare.</param>
        /// <param name="b">The second <c>KhoiLuongGiangDayCaoDang</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(KhoiLuongGiangDayCaoDang a, KhoiLuongGiangDayCaoDang b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(KhoiLuongGiangDayCaoDang entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(KhoiLuongGiangDayCaoDang a, KhoiLuongGiangDayCaoDang b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public KhoiLuongGiangDayCaoDangColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region KhoiLuongGiangDayCaoDangKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="KhoiLuongGiangDayCaoDang"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayCaoDangKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangKey class.
		/// </summary>
		public KhoiLuongGiangDayCaoDangKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangKey class.
		/// </summary>
		public KhoiLuongGiangDayCaoDangKey(KhoiLuongGiangDayCaoDangBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaKhoiLuongCaoDang = entity.MaKhoiLuongCaoDang;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangKey class.
		/// </summary>
		public KhoiLuongGiangDayCaoDangKey(System.Int32 _maKhoiLuongCaoDang)
		{
			#region Init Properties

			this.MaKhoiLuongCaoDang = _maKhoiLuongCaoDang;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private KhoiLuongGiangDayCaoDangBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public KhoiLuongGiangDayCaoDangBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaKhoiLuongCaoDang property
		private System.Int32 _maKhoiLuongCaoDang;
		
		/// <summary>
		/// Gets or sets the MaKhoiLuongCaoDang property.
		/// </summary>
		public System.Int32 MaKhoiLuongCaoDang
		{
			get { return _maKhoiLuongCaoDang; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaKhoiLuongCaoDang = value;
				
				_maKhoiLuongCaoDang = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaKhoiLuongCaoDang = ( values["MaKhoiLuongCaoDang"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaKhoiLuongCaoDang"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaKhoiLuongCaoDang", MaKhoiLuongCaoDang);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaKhoiLuongCaoDang: {0}{1}",
								MaKhoiLuongCaoDang,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region KhoiLuongGiangDayCaoDangColumn Enum
	
	/// <summary>
	/// Enumerate the KhoiLuongGiangDayCaoDang columns.
	/// </summary>
	[Serializable]
	public enum KhoiLuongGiangDayCaoDangColumn : int
	{
		/// <summary>
		/// MaKhoiLuongCaoDang : 
		/// </summary>
		[EnumTextValue("Ma Khoi Luong Cao Dang")]
		[ColumnEnum("MaKhoiLuongCaoDang", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaKhoiLuongCaoDang = 1,
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien Quan Ly")]
		[ColumnEnum("MaGiangVienQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGiangVienQuanLy = 2,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		MaLopHocPhan = 3,
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		[EnumTextValue("Si So Lop")]
		[ColumnEnum("SiSoLop", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSoLop = 4,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 5,
		/// <summary>
		/// TietThucDayLt : 
		/// </summary>
		[EnumTextValue("Tiet Thuc Day Lt")]
		[ColumnEnum("TietThucDayLT", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietThucDayLt = 6,
		/// <summary>
		/// TietThucDayTh : 
		/// </summary>
		[EnumTextValue("Tiet Thuc Day Th")]
		[ColumnEnum("TietThucDayTH", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietThucDayTh = 7,
		/// <summary>
		/// MaCauHinhChotGio : 
		/// </summary>
		[EnumTextValue("Ma Cau Hinh Chot Gio")]
		[ColumnEnum("MaCauHinhChotGio", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaCauHinhChotGio = 8,
		/// <summary>
		/// TenLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ten Lop Hoc Phan")]
		[ColumnEnum("TenLopHocPhan", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TenLopHocPhan = 9,
		/// <summary>
		/// MaLoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Loai Giang Vien")]
		[ColumnEnum("MaLoaiGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaLoaiGiangVien = 10,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 11,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("Ma Hoc Vi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi = 12
	}//End enum

	#endregion KhoiLuongGiangDayCaoDangColumn Enum

} // end namespace
