
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThuLaoChamBai.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThuLaoChamBai' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThuLaoChamBaiBase : EntityBase, IThuLaoChamBai, IEntityId<ThuLaoChamBaiKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThuLaoChamBaiEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThuLaoChamBaiEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThuLaoChamBaiEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThuLaoChamBai> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoChamBaiEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoChamBaiEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThuLaoChamBaiBase"/> instance.
		///</summary>
		public ThuLaoChamBaiBase()
		{
			this.entityData = new ThuLaoChamBaiEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThuLaoChamBaiBase"/> instance.
		///</summary>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_lanThi"></param>
		///<param name="_kyThi"></param>
		///<param name="_soBaiGiuaKy"></param>
		///<param name="_soBaiQuaTrinh"></param>
		///<param name="_soBaiCuoiKy"></param>
		///<param name="_donGiaGiuaKy"></param>
		///<param name="_donGiaQuaTrinh"></param>
		///<param name="_donGiaCuoiKy"></param>
		///<param name="_tienGiuaKy"></param>
		///<param name="_tienQuaTrinh"></param>
		///<param name="_tienCuoiKy"></param>
		///<param name="_tongCong"></param>
		///<param name="_thue"></param>
		///<param name="_thucLanh"></param>
		///<param name="_ghiChu"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_isSync"></param>
		///<param name="_chot"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_mucChi"></param>
		///<param name="_maHinhThucThi"></param>
		public ThuLaoChamBaiBase(System.String _maGiangVienQuanLy, System.String _maMonHoc, 
			System.String _maHocPhan, System.String _maLopHocPhan, System.String _maLop, System.String _lanThi, 
			System.String _kyThi, System.Int32? _soBaiGiuaKy, System.Int32? _soBaiQuaTrinh, System.Int32? _soBaiCuoiKy, 
			System.Decimal? _donGiaGiuaKy, System.Decimal? _donGiaQuaTrinh, System.Decimal? _donGiaCuoiKy, 
			System.Decimal? _tienGiuaKy, System.Decimal? _tienQuaTrinh, System.Decimal? _tienCuoiKy, 
			System.Decimal? _tongCong, System.Decimal? _thue, System.Decimal? _thucLanh, System.String _ghiChu, 
			System.String _namHoc, System.String _hocKy, System.String _ngayCapNhat, System.String _nguoiCapNhat, 
			System.String _dotChiTra, System.Boolean? _isSync, System.Boolean? _chot, System.String _maBacDaoTao, 
			System.String _mucChi, System.String _maHinhThucThi)
		{
			this.entityData = new ThuLaoChamBaiEntityData();
			this.backupData = null;

			this.MaGiangVienQuanLy = _maGiangVienQuanLy;
			this.MaMonHoc = _maMonHoc;
			this.MaHocPhan = _maHocPhan;
			this.MaLopHocPhan = _maLopHocPhan;
			this.MaLop = _maLop;
			this.LanThi = _lanThi;
			this.KyThi = _kyThi;
			this.SoBaiGiuaKy = _soBaiGiuaKy;
			this.SoBaiQuaTrinh = _soBaiQuaTrinh;
			this.SoBaiCuoiKy = _soBaiCuoiKy;
			this.DonGiaGiuaKy = _donGiaGiuaKy;
			this.DonGiaQuaTrinh = _donGiaQuaTrinh;
			this.DonGiaCuoiKy = _donGiaCuoiKy;
			this.TienGiuaKy = _tienGiuaKy;
			this.TienQuaTrinh = _tienQuaTrinh;
			this.TienCuoiKy = _tienCuoiKy;
			this.TongCong = _tongCong;
			this.Thue = _thue;
			this.ThucLanh = _thucLanh;
			this.GhiChu = _ghiChu;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.DotChiTra = _dotChiTra;
			this.IsSync = _isSync;
			this.Chot = _chot;
			this.MaBacDaoTao = _maBacDaoTao;
			this.MucChi = _mucChi;
			this.MaHinhThucThi = _maHinhThucThi;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThuLaoChamBai"/> instance.
		///</summary>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_lanThi"></param>
		///<param name="_kyThi"></param>
		///<param name="_soBaiGiuaKy"></param>
		///<param name="_soBaiQuaTrinh"></param>
		///<param name="_soBaiCuoiKy"></param>
		///<param name="_donGiaGiuaKy"></param>
		///<param name="_donGiaQuaTrinh"></param>
		///<param name="_donGiaCuoiKy"></param>
		///<param name="_tienGiuaKy"></param>
		///<param name="_tienQuaTrinh"></param>
		///<param name="_tienCuoiKy"></param>
		///<param name="_tongCong"></param>
		///<param name="_thue"></param>
		///<param name="_thucLanh"></param>
		///<param name="_ghiChu"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_isSync"></param>
		///<param name="_chot"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_mucChi"></param>
		///<param name="_maHinhThucThi"></param>
		public static ThuLaoChamBai CreateThuLaoChamBai(System.String _maGiangVienQuanLy, System.String _maMonHoc, 
			System.String _maHocPhan, System.String _maLopHocPhan, System.String _maLop, System.String _lanThi, 
			System.String _kyThi, System.Int32? _soBaiGiuaKy, System.Int32? _soBaiQuaTrinh, System.Int32? _soBaiCuoiKy, 
			System.Decimal? _donGiaGiuaKy, System.Decimal? _donGiaQuaTrinh, System.Decimal? _donGiaCuoiKy, 
			System.Decimal? _tienGiuaKy, System.Decimal? _tienQuaTrinh, System.Decimal? _tienCuoiKy, 
			System.Decimal? _tongCong, System.Decimal? _thue, System.Decimal? _thucLanh, System.String _ghiChu, 
			System.String _namHoc, System.String _hocKy, System.String _ngayCapNhat, System.String _nguoiCapNhat, 
			System.String _dotChiTra, System.Boolean? _isSync, System.Boolean? _chot, System.String _maBacDaoTao, 
			System.String _mucChi, System.String _maHinhThucThi)
		{
			ThuLaoChamBai newThuLaoChamBai = new ThuLaoChamBai();
			newThuLaoChamBai.MaGiangVienQuanLy = _maGiangVienQuanLy;
			newThuLaoChamBai.MaMonHoc = _maMonHoc;
			newThuLaoChamBai.MaHocPhan = _maHocPhan;
			newThuLaoChamBai.MaLopHocPhan = _maLopHocPhan;
			newThuLaoChamBai.MaLop = _maLop;
			newThuLaoChamBai.LanThi = _lanThi;
			newThuLaoChamBai.KyThi = _kyThi;
			newThuLaoChamBai.SoBaiGiuaKy = _soBaiGiuaKy;
			newThuLaoChamBai.SoBaiQuaTrinh = _soBaiQuaTrinh;
			newThuLaoChamBai.SoBaiCuoiKy = _soBaiCuoiKy;
			newThuLaoChamBai.DonGiaGiuaKy = _donGiaGiuaKy;
			newThuLaoChamBai.DonGiaQuaTrinh = _donGiaQuaTrinh;
			newThuLaoChamBai.DonGiaCuoiKy = _donGiaCuoiKy;
			newThuLaoChamBai.TienGiuaKy = _tienGiuaKy;
			newThuLaoChamBai.TienQuaTrinh = _tienQuaTrinh;
			newThuLaoChamBai.TienCuoiKy = _tienCuoiKy;
			newThuLaoChamBai.TongCong = _tongCong;
			newThuLaoChamBai.Thue = _thue;
			newThuLaoChamBai.ThucLanh = _thucLanh;
			newThuLaoChamBai.GhiChu = _ghiChu;
			newThuLaoChamBai.NamHoc = _namHoc;
			newThuLaoChamBai.HocKy = _hocKy;
			newThuLaoChamBai.NgayCapNhat = _ngayCapNhat;
			newThuLaoChamBai.NguoiCapNhat = _nguoiCapNhat;
			newThuLaoChamBai.DotChiTra = _dotChiTra;
			newThuLaoChamBai.IsSync = _isSync;
			newThuLaoChamBai.Chot = _chot;
			newThuLaoChamBai.MaBacDaoTao = _maBacDaoTao;
			newThuLaoChamBai.MucChi = _mucChi;
			newThuLaoChamBai.MaHinhThucThi = _maHinhThucThi;
			return newThuLaoChamBai;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ThuLaoChamBaiColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVienQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaGiangVienQuanLy
		{
			get
			{
				return this.entityData.MaGiangVienQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaGiangVienQuanLy == value)
					return;
				
                OnPropertyChanging("MaGiangVienQuanLy");                    
				OnColumnChanging(ThuLaoChamBaiColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				this.entityData.MaGiangVienQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				OnPropertyChanged("MaGiangVienQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(ThuLaoChamBaiColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaHocPhan
		{
			get
			{
				return this.entityData.MaHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaHocPhan == value)
					return;
				
                OnPropertyChanging("MaHocPhan");                    
				OnColumnChanging(ThuLaoChamBaiColumn.MaHocPhan, this.entityData.MaHocPhan);
				this.entityData.MaHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.MaHocPhan, this.entityData.MaHocPhan);
				OnPropertyChanged("MaHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(ThuLaoChamBaiColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
				
                OnPropertyChanging("MaLop");                    
				OnColumnChanging(ThuLaoChamBaiColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String LanThi
		{
			get
			{
				return this.entityData.LanThi; 
			}
			
			set
			{
				if (this.entityData.LanThi == value)
					return;
				
                OnPropertyChanging("LanThi");                    
				OnColumnChanging(ThuLaoChamBaiColumn.LanThi, this.entityData.LanThi);
				this.entityData.LanThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.LanThi, this.entityData.LanThi);
				OnPropertyChanged("LanThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KyThi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String KyThi
		{
			get
			{
				return this.entityData.KyThi; 
			}
			
			set
			{
				if (this.entityData.KyThi == value)
					return;
				
                OnPropertyChanging("KyThi");                    
				OnColumnChanging(ThuLaoChamBaiColumn.KyThi, this.entityData.KyThi);
				this.entityData.KyThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.KyThi, this.entityData.KyThi);
				OnPropertyChanged("KyThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoBaiGiuaKy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoBaiGiuaKy
		{
			get
			{
				return this.entityData.SoBaiGiuaKy; 
			}
			
			set
			{
				if (this.entityData.SoBaiGiuaKy == value)
					return;
				
                OnPropertyChanging("SoBaiGiuaKy");                    
				OnColumnChanging(ThuLaoChamBaiColumn.SoBaiGiuaKy, this.entityData.SoBaiGiuaKy);
				this.entityData.SoBaiGiuaKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.SoBaiGiuaKy, this.entityData.SoBaiGiuaKy);
				OnPropertyChanged("SoBaiGiuaKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoBaiQuaTrinh property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoBaiQuaTrinh
		{
			get
			{
				return this.entityData.SoBaiQuaTrinh; 
			}
			
			set
			{
				if (this.entityData.SoBaiQuaTrinh == value)
					return;
				
                OnPropertyChanging("SoBaiQuaTrinh");                    
				OnColumnChanging(ThuLaoChamBaiColumn.SoBaiQuaTrinh, this.entityData.SoBaiQuaTrinh);
				this.entityData.SoBaiQuaTrinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.SoBaiQuaTrinh, this.entityData.SoBaiQuaTrinh);
				OnPropertyChanged("SoBaiQuaTrinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoBaiCuoiKy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoBaiCuoiKy
		{
			get
			{
				return this.entityData.SoBaiCuoiKy; 
			}
			
			set
			{
				if (this.entityData.SoBaiCuoiKy == value)
					return;
				
                OnPropertyChanging("SoBaiCuoiKy");                    
				OnColumnChanging(ThuLaoChamBaiColumn.SoBaiCuoiKy, this.entityData.SoBaiCuoiKy);
				this.entityData.SoBaiCuoiKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.SoBaiCuoiKy, this.entityData.SoBaiCuoiKy);
				OnPropertyChanged("SoBaiCuoiKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaGiuaKy property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaGiuaKy
		{
			get
			{
				return this.entityData.DonGiaGiuaKy; 
			}
			
			set
			{
				if (this.entityData.DonGiaGiuaKy == value)
					return;
				
                OnPropertyChanging("DonGiaGiuaKy");                    
				OnColumnChanging(ThuLaoChamBaiColumn.DonGiaGiuaKy, this.entityData.DonGiaGiuaKy);
				this.entityData.DonGiaGiuaKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.DonGiaGiuaKy, this.entityData.DonGiaGiuaKy);
				OnPropertyChanged("DonGiaGiuaKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaQuaTrinh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaQuaTrinh
		{
			get
			{
				return this.entityData.DonGiaQuaTrinh; 
			}
			
			set
			{
				if (this.entityData.DonGiaQuaTrinh == value)
					return;
				
                OnPropertyChanging("DonGiaQuaTrinh");                    
				OnColumnChanging(ThuLaoChamBaiColumn.DonGiaQuaTrinh, this.entityData.DonGiaQuaTrinh);
				this.entityData.DonGiaQuaTrinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.DonGiaQuaTrinh, this.entityData.DonGiaQuaTrinh);
				OnPropertyChanged("DonGiaQuaTrinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGiaCuoiKy property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGiaCuoiKy
		{
			get
			{
				return this.entityData.DonGiaCuoiKy; 
			}
			
			set
			{
				if (this.entityData.DonGiaCuoiKy == value)
					return;
				
                OnPropertyChanging("DonGiaCuoiKy");                    
				OnColumnChanging(ThuLaoChamBaiColumn.DonGiaCuoiKy, this.entityData.DonGiaCuoiKy);
				this.entityData.DonGiaCuoiKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.DonGiaCuoiKy, this.entityData.DonGiaCuoiKy);
				OnPropertyChanged("DonGiaCuoiKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TienGiuaKy property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TienGiuaKy
		{
			get
			{
				return this.entityData.TienGiuaKy; 
			}
			
			set
			{
				if (this.entityData.TienGiuaKy == value)
					return;
				
                OnPropertyChanging("TienGiuaKy");                    
				OnColumnChanging(ThuLaoChamBaiColumn.TienGiuaKy, this.entityData.TienGiuaKy);
				this.entityData.TienGiuaKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.TienGiuaKy, this.entityData.TienGiuaKy);
				OnPropertyChanged("TienGiuaKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TienQuaTrinh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TienQuaTrinh
		{
			get
			{
				return this.entityData.TienQuaTrinh; 
			}
			
			set
			{
				if (this.entityData.TienQuaTrinh == value)
					return;
				
                OnPropertyChanging("TienQuaTrinh");                    
				OnColumnChanging(ThuLaoChamBaiColumn.TienQuaTrinh, this.entityData.TienQuaTrinh);
				this.entityData.TienQuaTrinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.TienQuaTrinh, this.entityData.TienQuaTrinh);
				OnPropertyChanged("TienQuaTrinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TienCuoiKy property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TienCuoiKy
		{
			get
			{
				return this.entityData.TienCuoiKy; 
			}
			
			set
			{
				if (this.entityData.TienCuoiKy == value)
					return;
				
                OnPropertyChanging("TienCuoiKy");                    
				OnColumnChanging(ThuLaoChamBaiColumn.TienCuoiKy, this.entityData.TienCuoiKy);
				this.entityData.TienCuoiKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.TienCuoiKy, this.entityData.TienCuoiKy);
				OnPropertyChanged("TienCuoiKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongCong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongCong
		{
			get
			{
				return this.entityData.TongCong; 
			}
			
			set
			{
				if (this.entityData.TongCong == value)
					return;
				
                OnPropertyChanging("TongCong");                    
				OnColumnChanging(ThuLaoChamBaiColumn.TongCong, this.entityData.TongCong);
				this.entityData.TongCong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.TongCong, this.entityData.TongCong);
				OnPropertyChanged("TongCong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Thue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Thue
		{
			get
			{
				return this.entityData.Thue; 
			}
			
			set
			{
				if (this.entityData.Thue == value)
					return;
				
                OnPropertyChanging("Thue");                    
				OnColumnChanging(ThuLaoChamBaiColumn.Thue, this.entityData.Thue);
				this.entityData.Thue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.Thue, this.entityData.Thue);
				OnPropertyChanged("Thue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThucLanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ThucLanh
		{
			get
			{
				return this.entityData.ThucLanh; 
			}
			
			set
			{
				if (this.entityData.ThucLanh == value)
					return;
				
                OnPropertyChanging("ThucLanh");                    
				OnColumnChanging(ThuLaoChamBaiColumn.ThucLanh, this.entityData.ThucLanh);
				this.entityData.ThucLanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.ThucLanh, this.entityData.ThucLanh);
				OnPropertyChanged("ThucLanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(ThuLaoChamBaiColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(ThuLaoChamBaiColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(ThuLaoChamBaiColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(ThuLaoChamBaiColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(ThuLaoChamBaiColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotChiTra property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String DotChiTra
		{
			get
			{
				return this.entityData.DotChiTra; 
			}
			
			set
			{
				if (this.entityData.DotChiTra == value)
					return;
				
                OnPropertyChanging("DotChiTra");                    
				OnColumnChanging(ThuLaoChamBaiColumn.DotChiTra, this.entityData.DotChiTra);
				this.entityData.DotChiTra = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.DotChiTra, this.entityData.DotChiTra);
				OnPropertyChanged("DotChiTra");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsSync property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsSync
		{
			get
			{
				return this.entityData.IsSync; 
			}
			
			set
			{
				if (this.entityData.IsSync == value)
					return;
				
                OnPropertyChanging("IsSync");                    
				OnColumnChanging(ThuLaoChamBaiColumn.IsSync, this.entityData.IsSync);
				this.entityData.IsSync = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.IsSync, this.entityData.IsSync);
				OnPropertyChanged("IsSync");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Chot property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Chot
		{
			get
			{
				return this.entityData.Chot; 
			}
			
			set
			{
				if (this.entityData.Chot == value)
					return;
				
                OnPropertyChanging("Chot");                    
				OnColumnChanging(ThuLaoChamBaiColumn.Chot, this.entityData.Chot);
				this.entityData.Chot = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.Chot, this.entityData.Chot);
				OnPropertyChanged("Chot");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaBacDaoTao
		{
			get
			{
				return this.entityData.MaBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaBacDaoTao == value)
					return;
				
                OnPropertyChanging("MaBacDaoTao");                    
				OnColumnChanging(ThuLaoChamBaiColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				this.entityData.MaBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				OnPropertyChanged("MaBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MucChi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MucChi
		{
			get
			{
				return this.entityData.MucChi; 
			}
			
			set
			{
				if (this.entityData.MucChi == value)
					return;
				
                OnPropertyChanging("MucChi");                    
				OnColumnChanging(ThuLaoChamBaiColumn.MucChi, this.entityData.MucChi);
				this.entityData.MucChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.MucChi, this.entityData.MucChi);
				OnPropertyChanged("MucChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHinhThucThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaHinhThucThi
		{
			get
			{
				return this.entityData.MaHinhThucThi; 
			}
			
			set
			{
				if (this.entityData.MaHinhThucThi == value)
					return;
				
                OnPropertyChanging("MaHinhThucThi");                    
				OnColumnChanging(ThuLaoChamBaiColumn.MaHinhThucThi, this.entityData.MaHinhThucThi);
				this.entityData.MaHinhThucThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoChamBaiColumn.MaHinhThucThi, this.entityData.MaHinhThucThi);
				OnPropertyChanged("MaHinhThucThi");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaGiangVienQuanLy", "Ma Giang Vien Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaHocPhan", "Ma Hoc Phan", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LanThi", "Lan Thi", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KyThi", "Ky Thi", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GhiChu", "Ghi Chu", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayCapNhat", "Ngay Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DotChiTra", "Dot Chi Tra", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaBacDaoTao", "Ma Bac Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MucChi", "Muc Chi", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaHinhThucThi", "Ma Hinh Thuc Thi", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThuLaoChamBai"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "MaGiangVienQuanLy", "MaMonHoc", "MaHocPhan", "MaLopHocPhan", "MaLop", "LanThi", "KyThi", "SoBaiGiuaKy", "SoBaiQuaTrinh", "SoBaiCuoiKy", "DonGiaGiuaKy", "DonGiaQuaTrinh", "DonGiaCuoiKy", "TienGiuaKy", "TienQuaTrinh", "TienCuoiKy", "TongCong", "Thue", "ThucLanh", "GhiChu", "NamHoc", "HocKy", "NgayCapNhat", "NguoiCapNhat", "DotChiTra", "IsSync", "Chot", "MaBacDaoTao", "MucChi", "MaHinhThucThi"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThuLaoChamBaiEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThuLaoChamBai) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThuLaoChamBai>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThuLaoChamBai);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThuLaoChamBai Entity 
		///</summary>
		protected virtual ThuLaoChamBai Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThuLaoChamBai copy = new ThuLaoChamBai();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
				copy.MaMonHoc = this.MaMonHoc;
				copy.MaHocPhan = this.MaHocPhan;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaLop = this.MaLop;
				copy.LanThi = this.LanThi;
				copy.KyThi = this.KyThi;
				copy.SoBaiGiuaKy = this.SoBaiGiuaKy;
				copy.SoBaiQuaTrinh = this.SoBaiQuaTrinh;
				copy.SoBaiCuoiKy = this.SoBaiCuoiKy;
				copy.DonGiaGiuaKy = this.DonGiaGiuaKy;
				copy.DonGiaQuaTrinh = this.DonGiaQuaTrinh;
				copy.DonGiaCuoiKy = this.DonGiaCuoiKy;
				copy.TienGiuaKy = this.TienGiuaKy;
				copy.TienQuaTrinh = this.TienQuaTrinh;
				copy.TienCuoiKy = this.TienCuoiKy;
				copy.TongCong = this.TongCong;
				copy.Thue = this.Thue;
				copy.ThucLanh = this.ThucLanh;
				copy.GhiChu = this.GhiChu;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.DotChiTra = this.DotChiTra;
				copy.IsSync = this.IsSync;
				copy.Chot = this.Chot;
				copy.MaBacDaoTao = this.MaBacDaoTao;
				copy.MucChi = this.MucChi;
				copy.MaHinhThucThi = this.MaHinhThucThi;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThuLaoChamBai Entity 
		///</summary>
		public virtual ThuLaoChamBai Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThuLaoChamBai Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThuLaoChamBai DeepCopy()
		{
			return EntityHelper.Clone<ThuLaoChamBai>(this as ThuLaoChamBai);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThuLaoChamBaiEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThuLaoChamBaiEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThuLaoChamBaiEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThuLaoChamBaiColumn column)
		{
			switch(column)
			{
					case ThuLaoChamBaiColumn.Id:
					return entityData.Id != _originalData.Id;
					case ThuLaoChamBaiColumn.MaGiangVienQuanLy:
					return entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
					case ThuLaoChamBaiColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case ThuLaoChamBaiColumn.MaHocPhan:
					return entityData.MaHocPhan != _originalData.MaHocPhan;
					case ThuLaoChamBaiColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case ThuLaoChamBaiColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
					case ThuLaoChamBaiColumn.LanThi:
					return entityData.LanThi != _originalData.LanThi;
					case ThuLaoChamBaiColumn.KyThi:
					return entityData.KyThi != _originalData.KyThi;
					case ThuLaoChamBaiColumn.SoBaiGiuaKy:
					return entityData.SoBaiGiuaKy != _originalData.SoBaiGiuaKy;
					case ThuLaoChamBaiColumn.SoBaiQuaTrinh:
					return entityData.SoBaiQuaTrinh != _originalData.SoBaiQuaTrinh;
					case ThuLaoChamBaiColumn.SoBaiCuoiKy:
					return entityData.SoBaiCuoiKy != _originalData.SoBaiCuoiKy;
					case ThuLaoChamBaiColumn.DonGiaGiuaKy:
					return entityData.DonGiaGiuaKy != _originalData.DonGiaGiuaKy;
					case ThuLaoChamBaiColumn.DonGiaQuaTrinh:
					return entityData.DonGiaQuaTrinh != _originalData.DonGiaQuaTrinh;
					case ThuLaoChamBaiColumn.DonGiaCuoiKy:
					return entityData.DonGiaCuoiKy != _originalData.DonGiaCuoiKy;
					case ThuLaoChamBaiColumn.TienGiuaKy:
					return entityData.TienGiuaKy != _originalData.TienGiuaKy;
					case ThuLaoChamBaiColumn.TienQuaTrinh:
					return entityData.TienQuaTrinh != _originalData.TienQuaTrinh;
					case ThuLaoChamBaiColumn.TienCuoiKy:
					return entityData.TienCuoiKy != _originalData.TienCuoiKy;
					case ThuLaoChamBaiColumn.TongCong:
					return entityData.TongCong != _originalData.TongCong;
					case ThuLaoChamBaiColumn.Thue:
					return entityData.Thue != _originalData.Thue;
					case ThuLaoChamBaiColumn.ThucLanh:
					return entityData.ThucLanh != _originalData.ThucLanh;
					case ThuLaoChamBaiColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case ThuLaoChamBaiColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case ThuLaoChamBaiColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case ThuLaoChamBaiColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case ThuLaoChamBaiColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case ThuLaoChamBaiColumn.DotChiTra:
					return entityData.DotChiTra != _originalData.DotChiTra;
					case ThuLaoChamBaiColumn.IsSync:
					return entityData.IsSync != _originalData.IsSync;
					case ThuLaoChamBaiColumn.Chot:
					return entityData.Chot != _originalData.Chot;
					case ThuLaoChamBaiColumn.MaBacDaoTao:
					return entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
					case ThuLaoChamBaiColumn.MucChi:
					return entityData.MucChi != _originalData.MucChi;
					case ThuLaoChamBaiColumn.MaHinhThucThi:
					return entityData.MaHinhThucThi != _originalData.MaHinhThucThi;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThuLaoChamBaiColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.MaHocPhan != _originalData.MaHocPhan;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.MaLop != _originalData.MaLop;
			result = result || entityData.LanThi != _originalData.LanThi;
			result = result || entityData.KyThi != _originalData.KyThi;
			result = result || entityData.SoBaiGiuaKy != _originalData.SoBaiGiuaKy;
			result = result || entityData.SoBaiQuaTrinh != _originalData.SoBaiQuaTrinh;
			result = result || entityData.SoBaiCuoiKy != _originalData.SoBaiCuoiKy;
			result = result || entityData.DonGiaGiuaKy != _originalData.DonGiaGiuaKy;
			result = result || entityData.DonGiaQuaTrinh != _originalData.DonGiaQuaTrinh;
			result = result || entityData.DonGiaCuoiKy != _originalData.DonGiaCuoiKy;
			result = result || entityData.TienGiuaKy != _originalData.TienGiuaKy;
			result = result || entityData.TienQuaTrinh != _originalData.TienQuaTrinh;
			result = result || entityData.TienCuoiKy != _originalData.TienCuoiKy;
			result = result || entityData.TongCong != _originalData.TongCong;
			result = result || entityData.Thue != _originalData.Thue;
			result = result || entityData.ThucLanh != _originalData.ThucLanh;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.DotChiTra != _originalData.DotChiTra;
			result = result || entityData.IsSync != _originalData.IsSync;
			result = result || entityData.Chot != _originalData.Chot;
			result = result || entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
			result = result || entityData.MucChi != _originalData.MucChi;
			result = result || entityData.MaHinhThucThi != _originalData.MaHinhThucThi;
			return result;
		}	
		
		///<summary>
		///  Returns a ThuLaoChamBai Entity with the original data.
		///</summary>
		public ThuLaoChamBai GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThuLaoChamBai(
				_originalData.MaGiangVienQuanLy,
				_originalData.MaMonHoc,
				_originalData.MaHocPhan,
				_originalData.MaLopHocPhan,
				_originalData.MaLop,
				_originalData.LanThi,
				_originalData.KyThi,
				_originalData.SoBaiGiuaKy,
				_originalData.SoBaiQuaTrinh,
				_originalData.SoBaiCuoiKy,
				_originalData.DonGiaGiuaKy,
				_originalData.DonGiaQuaTrinh,
				_originalData.DonGiaCuoiKy,
				_originalData.TienGiuaKy,
				_originalData.TienQuaTrinh,
				_originalData.TienCuoiKy,
				_originalData.TongCong,
				_originalData.Thue,
				_originalData.ThucLanh,
				_originalData.GhiChu,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.DotChiTra,
				_originalData.IsSync,
				_originalData.Chot,
				_originalData.MaBacDaoTao,
				_originalData.MucChi,
				_originalData.MaHinhThucThi
				);
				
			return (ThuLaoChamBai)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThuLaoChamBaiBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThuLaoChamBaiBase)
				return ValueEquals(this, (ThuLaoChamBaiBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThuLaoChamBaiBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.MaHocPhan == null) ? string.Empty : this.MaHocPhan.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.MaLop == null) ? string.Empty : this.MaLop.ToString()).GetHashCode() ^ 
					((this.LanThi == null) ? string.Empty : this.LanThi.ToString()).GetHashCode() ^ 
					((this.KyThi == null) ? string.Empty : this.KyThi.ToString()).GetHashCode() ^ 
					((this.SoBaiGiuaKy == null) ? string.Empty : this.SoBaiGiuaKy.ToString()).GetHashCode() ^ 
					((this.SoBaiQuaTrinh == null) ? string.Empty : this.SoBaiQuaTrinh.ToString()).GetHashCode() ^ 
					((this.SoBaiCuoiKy == null) ? string.Empty : this.SoBaiCuoiKy.ToString()).GetHashCode() ^ 
					((this.DonGiaGiuaKy == null) ? string.Empty : this.DonGiaGiuaKy.ToString()).GetHashCode() ^ 
					((this.DonGiaQuaTrinh == null) ? string.Empty : this.DonGiaQuaTrinh.ToString()).GetHashCode() ^ 
					((this.DonGiaCuoiKy == null) ? string.Empty : this.DonGiaCuoiKy.ToString()).GetHashCode() ^ 
					((this.TienGiuaKy == null) ? string.Empty : this.TienGiuaKy.ToString()).GetHashCode() ^ 
					((this.TienQuaTrinh == null) ? string.Empty : this.TienQuaTrinh.ToString()).GetHashCode() ^ 
					((this.TienCuoiKy == null) ? string.Empty : this.TienCuoiKy.ToString()).GetHashCode() ^ 
					((this.TongCong == null) ? string.Empty : this.TongCong.ToString()).GetHashCode() ^ 
					((this.Thue == null) ? string.Empty : this.Thue.ToString()).GetHashCode() ^ 
					((this.ThucLanh == null) ? string.Empty : this.ThucLanh.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.DotChiTra == null) ? string.Empty : this.DotChiTra.ToString()).GetHashCode() ^ 
					((this.IsSync == null) ? string.Empty : this.IsSync.ToString()).GetHashCode() ^ 
					((this.Chot == null) ? string.Empty : this.Chot.ToString()).GetHashCode() ^ 
					((this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString()).GetHashCode() ^ 
					((this.MucChi == null) ? string.Empty : this.MucChi.ToString()).GetHashCode() ^ 
					((this.MaHinhThucThi == null) ? string.Empty : this.MaHinhThucThi.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThuLaoChamBaiBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThuLaoChamBaiBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThuLaoChamBaiBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThuLaoChamBaiBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThuLaoChamBaiBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThuLaoChamBaiBase Object1, ThuLaoChamBaiBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.MaGiangVienQuanLy != null && Object2.MaGiangVienQuanLy != null )
			{
				if (Object1.MaGiangVienQuanLy != Object2.MaGiangVienQuanLy)
					equal = false;
			}
			else if (Object1.MaGiangVienQuanLy == null ^ Object2.MaGiangVienQuanLy == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaHocPhan != null && Object2.MaHocPhan != null )
			{
				if (Object1.MaHocPhan != Object2.MaHocPhan)
					equal = false;
			}
			else if (Object1.MaHocPhan == null ^ Object2.MaHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object2.MaLop == null )
			{
				equal = false;
			}
			if ( Object1.LanThi != null && Object2.LanThi != null )
			{
				if (Object1.LanThi != Object2.LanThi)
					equal = false;
			}
			else if (Object1.LanThi == null ^ Object2.LanThi == null )
			{
				equal = false;
			}
			if ( Object1.KyThi != null && Object2.KyThi != null )
			{
				if (Object1.KyThi != Object2.KyThi)
					equal = false;
			}
			else if (Object1.KyThi == null ^ Object2.KyThi == null )
			{
				equal = false;
			}
			if ( Object1.SoBaiGiuaKy != null && Object2.SoBaiGiuaKy != null )
			{
				if (Object1.SoBaiGiuaKy != Object2.SoBaiGiuaKy)
					equal = false;
			}
			else if (Object1.SoBaiGiuaKy == null ^ Object2.SoBaiGiuaKy == null )
			{
				equal = false;
			}
			if ( Object1.SoBaiQuaTrinh != null && Object2.SoBaiQuaTrinh != null )
			{
				if (Object1.SoBaiQuaTrinh != Object2.SoBaiQuaTrinh)
					equal = false;
			}
			else if (Object1.SoBaiQuaTrinh == null ^ Object2.SoBaiQuaTrinh == null )
			{
				equal = false;
			}
			if ( Object1.SoBaiCuoiKy != null && Object2.SoBaiCuoiKy != null )
			{
				if (Object1.SoBaiCuoiKy != Object2.SoBaiCuoiKy)
					equal = false;
			}
			else if (Object1.SoBaiCuoiKy == null ^ Object2.SoBaiCuoiKy == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaGiuaKy != null && Object2.DonGiaGiuaKy != null )
			{
				if (Object1.DonGiaGiuaKy != Object2.DonGiaGiuaKy)
					equal = false;
			}
			else if (Object1.DonGiaGiuaKy == null ^ Object2.DonGiaGiuaKy == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaQuaTrinh != null && Object2.DonGiaQuaTrinh != null )
			{
				if (Object1.DonGiaQuaTrinh != Object2.DonGiaQuaTrinh)
					equal = false;
			}
			else if (Object1.DonGiaQuaTrinh == null ^ Object2.DonGiaQuaTrinh == null )
			{
				equal = false;
			}
			if ( Object1.DonGiaCuoiKy != null && Object2.DonGiaCuoiKy != null )
			{
				if (Object1.DonGiaCuoiKy != Object2.DonGiaCuoiKy)
					equal = false;
			}
			else if (Object1.DonGiaCuoiKy == null ^ Object2.DonGiaCuoiKy == null )
			{
				equal = false;
			}
			if ( Object1.TienGiuaKy != null && Object2.TienGiuaKy != null )
			{
				if (Object1.TienGiuaKy != Object2.TienGiuaKy)
					equal = false;
			}
			else if (Object1.TienGiuaKy == null ^ Object2.TienGiuaKy == null )
			{
				equal = false;
			}
			if ( Object1.TienQuaTrinh != null && Object2.TienQuaTrinh != null )
			{
				if (Object1.TienQuaTrinh != Object2.TienQuaTrinh)
					equal = false;
			}
			else if (Object1.TienQuaTrinh == null ^ Object2.TienQuaTrinh == null )
			{
				equal = false;
			}
			if ( Object1.TienCuoiKy != null && Object2.TienCuoiKy != null )
			{
				if (Object1.TienCuoiKy != Object2.TienCuoiKy)
					equal = false;
			}
			else if (Object1.TienCuoiKy == null ^ Object2.TienCuoiKy == null )
			{
				equal = false;
			}
			if ( Object1.TongCong != null && Object2.TongCong != null )
			{
				if (Object1.TongCong != Object2.TongCong)
					equal = false;
			}
			else if (Object1.TongCong == null ^ Object2.TongCong == null )
			{
				equal = false;
			}
			if ( Object1.Thue != null && Object2.Thue != null )
			{
				if (Object1.Thue != Object2.Thue)
					equal = false;
			}
			else if (Object1.Thue == null ^ Object2.Thue == null )
			{
				equal = false;
			}
			if ( Object1.ThucLanh != null && Object2.ThucLanh != null )
			{
				if (Object1.ThucLanh != Object2.ThucLanh)
					equal = false;
			}
			else if (Object1.ThucLanh == null ^ Object2.ThucLanh == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.DotChiTra != null && Object2.DotChiTra != null )
			{
				if (Object1.DotChiTra != Object2.DotChiTra)
					equal = false;
			}
			else if (Object1.DotChiTra == null ^ Object2.DotChiTra == null )
			{
				equal = false;
			}
			if ( Object1.IsSync != null && Object2.IsSync != null )
			{
				if (Object1.IsSync != Object2.IsSync)
					equal = false;
			}
			else if (Object1.IsSync == null ^ Object2.IsSync == null )
			{
				equal = false;
			}
			if ( Object1.Chot != null && Object2.Chot != null )
			{
				if (Object1.Chot != Object2.Chot)
					equal = false;
			}
			else if (Object1.Chot == null ^ Object2.Chot == null )
			{
				equal = false;
			}
			if ( Object1.MaBacDaoTao != null && Object2.MaBacDaoTao != null )
			{
				if (Object1.MaBacDaoTao != Object2.MaBacDaoTao)
					equal = false;
			}
			else if (Object1.MaBacDaoTao == null ^ Object2.MaBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.MucChi != null && Object2.MucChi != null )
			{
				if (Object1.MucChi != Object2.MucChi)
					equal = false;
			}
			else if (Object1.MucChi == null ^ Object2.MucChi == null )
			{
				equal = false;
			}
			if ( Object1.MaHinhThucThi != null && Object2.MaHinhThucThi != null )
			{
				if (Object1.MaHinhThucThi != Object2.MaHinhThucThi)
					equal = false;
			}
			else if (Object1.MaHinhThucThi == null ^ Object2.MaHinhThucThi == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThuLaoChamBaiBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThuLaoChamBaiComparer GetComparer()
        {
            return new ThuLaoChamBaiComparer();
        }
        */

        // Comparer delegates back to ThuLaoChamBai
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThuLaoChamBai rhs, ThuLaoChamBaiColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThuLaoChamBaiColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.MaGiangVienQuanLy:
            		return this.MaGiangVienQuanLy.CompareTo(rhs.MaGiangVienQuanLy);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.MaHocPhan:
            		return this.MaHocPhan.CompareTo(rhs.MaHocPhan);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.LanThi:
            		return this.LanThi.CompareTo(rhs.LanThi);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.KyThi:
            		return this.KyThi.CompareTo(rhs.KyThi);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.SoBaiGiuaKy:
            		return this.SoBaiGiuaKy.Value.CompareTo(rhs.SoBaiGiuaKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.SoBaiQuaTrinh:
            		return this.SoBaiQuaTrinh.Value.CompareTo(rhs.SoBaiQuaTrinh.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.SoBaiCuoiKy:
            		return this.SoBaiCuoiKy.Value.CompareTo(rhs.SoBaiCuoiKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.DonGiaGiuaKy:
            		return this.DonGiaGiuaKy.Value.CompareTo(rhs.DonGiaGiuaKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.DonGiaQuaTrinh:
            		return this.DonGiaQuaTrinh.Value.CompareTo(rhs.DonGiaQuaTrinh.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.DonGiaCuoiKy:
            		return this.DonGiaCuoiKy.Value.CompareTo(rhs.DonGiaCuoiKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.TienGiuaKy:
            		return this.TienGiuaKy.Value.CompareTo(rhs.TienGiuaKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.TienQuaTrinh:
            		return this.TienQuaTrinh.Value.CompareTo(rhs.TienQuaTrinh.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.TienCuoiKy:
            		return this.TienCuoiKy.Value.CompareTo(rhs.TienCuoiKy.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.TongCong:
            		return this.TongCong.Value.CompareTo(rhs.TongCong.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.Thue:
            		return this.Thue.Value.CompareTo(rhs.Thue.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.ThucLanh:
            		return this.ThucLanh.Value.CompareTo(rhs.ThucLanh.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.NgayCapNhat:
            		return this.NgayCapNhat.CompareTo(rhs.NgayCapNhat);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.DotChiTra:
            		return this.DotChiTra.CompareTo(rhs.DotChiTra);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.IsSync:
            		return this.IsSync.Value.CompareTo(rhs.IsSync.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.Chot:
            		return this.Chot.Value.CompareTo(rhs.Chot.Value);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.MaBacDaoTao:
            		return this.MaBacDaoTao.CompareTo(rhs.MaBacDaoTao);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.MucChi:
            		return this.MucChi.CompareTo(rhs.MucChi);
            		
            		                 
            	
            	
            	case ThuLaoChamBaiColumn.MaHinhThucThi:
            		return this.MaHinhThucThi.CompareTo(rhs.MaHinhThucThi);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThuLaoChamBaiKey> Members
		
		// member variable for the EntityId property
		private ThuLaoChamBaiKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThuLaoChamBaiKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThuLaoChamBaiKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThuLaoChamBai")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{32}{31}- Id: {0}{31}- MaGiangVienQuanLy: {1}{31}- MaMonHoc: {2}{31}- MaHocPhan: {3}{31}- MaLopHocPhan: {4}{31}- MaLop: {5}{31}- LanThi: {6}{31}- KyThi: {7}{31}- SoBaiGiuaKy: {8}{31}- SoBaiQuaTrinh: {9}{31}- SoBaiCuoiKy: {10}{31}- DonGiaGiuaKy: {11}{31}- DonGiaQuaTrinh: {12}{31}- DonGiaCuoiKy: {13}{31}- TienGiuaKy: {14}{31}- TienQuaTrinh: {15}{31}- TienCuoiKy: {16}{31}- TongCong: {17}{31}- Thue: {18}{31}- ThucLanh: {19}{31}- GhiChu: {20}{31}- NamHoc: {21}{31}- HocKy: {22}{31}- NgayCapNhat: {23}{31}- NguoiCapNhat: {24}{31}- DotChiTra: {25}{31}- IsSync: {26}{31}- Chot: {27}{31}- MaBacDaoTao: {28}{31}- MucChi: {29}{31}- MaHinhThucThi: {30}{31}{33}", 
				this.Id,
				(this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.MaHocPhan == null) ? string.Empty : this.MaHocPhan.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
				(this.LanThi == null) ? string.Empty : this.LanThi.ToString(),
				(this.KyThi == null) ? string.Empty : this.KyThi.ToString(),
				(this.SoBaiGiuaKy == null) ? string.Empty : this.SoBaiGiuaKy.ToString(),
				(this.SoBaiQuaTrinh == null) ? string.Empty : this.SoBaiQuaTrinh.ToString(),
				(this.SoBaiCuoiKy == null) ? string.Empty : this.SoBaiCuoiKy.ToString(),
				(this.DonGiaGiuaKy == null) ? string.Empty : this.DonGiaGiuaKy.ToString(),
				(this.DonGiaQuaTrinh == null) ? string.Empty : this.DonGiaQuaTrinh.ToString(),
				(this.DonGiaCuoiKy == null) ? string.Empty : this.DonGiaCuoiKy.ToString(),
				(this.TienGiuaKy == null) ? string.Empty : this.TienGiuaKy.ToString(),
				(this.TienQuaTrinh == null) ? string.Empty : this.TienQuaTrinh.ToString(),
				(this.TienCuoiKy == null) ? string.Empty : this.TienCuoiKy.ToString(),
				(this.TongCong == null) ? string.Empty : this.TongCong.ToString(),
				(this.Thue == null) ? string.Empty : this.Thue.ToString(),
				(this.ThucLanh == null) ? string.Empty : this.ThucLanh.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.DotChiTra == null) ? string.Empty : this.DotChiTra.ToString(),
				(this.IsSync == null) ? string.Empty : this.IsSync.ToString(),
				(this.Chot == null) ? string.Empty : this.Chot.ToString(),
				(this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString(),
				(this.MucChi == null) ? string.Empty : this.MucChi.ToString(),
				(this.MaHinhThucThi == null) ? string.Empty : this.MaHinhThucThi.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThuLaoChamBai' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThuLaoChamBaiEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThuLaoChamBai"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		public System.String MaGiangVienQuanLy = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// MaHocPhan : 
		/// </summary>
		public System.String MaHocPhan = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String MaLop = null;
		
		/// <summary>
		/// LanThi : 
		/// </summary>
		public System.String LanThi = null;
		
		/// <summary>
		/// KyThi : 
		/// </summary>
		public System.String KyThi = null;
		
		/// <summary>
		/// SoBaiGiuaKy : 
		/// </summary>
		public System.Int32? SoBaiGiuaKy = null;
		
		/// <summary>
		/// SoBaiQuaTrinh : 
		/// </summary>
		public System.Int32? SoBaiQuaTrinh = null;
		
		/// <summary>
		/// SoBaiCuoiKy : 
		/// </summary>
		public System.Int32? SoBaiCuoiKy = null;
		
		/// <summary>
		/// DonGiaGiuaKy : 
		/// </summary>
		public System.Decimal? DonGiaGiuaKy = null;
		
		/// <summary>
		/// DonGiaQuaTrinh : 
		/// </summary>
		public System.Decimal? DonGiaQuaTrinh = null;
		
		/// <summary>
		/// DonGiaCuoiKy : 
		/// </summary>
		public System.Decimal? DonGiaCuoiKy = null;
		
		/// <summary>
		/// TienGiuaKy : 
		/// </summary>
		public System.Decimal? TienGiuaKy = null;
		
		/// <summary>
		/// TienQuaTrinh : 
		/// </summary>
		public System.Decimal? TienQuaTrinh = null;
		
		/// <summary>
		/// TienCuoiKy : 
		/// </summary>
		public System.Decimal? TienCuoiKy = null;
		
		/// <summary>
		/// TongCong : 
		/// </summary>
		public System.Decimal? TongCong = null;
		
		/// <summary>
		/// Thue : 
		/// </summary>
		public System.Decimal? Thue = null;
		
		/// <summary>
		/// ThucLanh : 
		/// </summary>
		public System.Decimal? ThucLanh = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.String NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// DotChiTra : 
		/// </summary>
		public System.String DotChiTra = null;
		
		/// <summary>
		/// IsSync : 
		/// </summary>
		public System.Boolean? IsSync = null;
		
		/// <summary>
		/// Chot : 
		/// </summary>
		public System.Boolean? Chot = null;
		
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		public System.String MaBacDaoTao = null;
		
		/// <summary>
		/// MucChi : 
		/// </summary>
		public System.String MucChi = null;
		
		/// <summary>
		/// MaHinhThucThi : 
		/// </summary>
		public System.String MaHinhThucThi = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThuLaoChamBaiEntityData _tmp = new ThuLaoChamBaiEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.MaHocPhan = this.MaHocPhan;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaLop = this.MaLop;
			_tmp.LanThi = this.LanThi;
			_tmp.KyThi = this.KyThi;
			_tmp.SoBaiGiuaKy = this.SoBaiGiuaKy;
			_tmp.SoBaiQuaTrinh = this.SoBaiQuaTrinh;
			_tmp.SoBaiCuoiKy = this.SoBaiCuoiKy;
			_tmp.DonGiaGiuaKy = this.DonGiaGiuaKy;
			_tmp.DonGiaQuaTrinh = this.DonGiaQuaTrinh;
			_tmp.DonGiaCuoiKy = this.DonGiaCuoiKy;
			_tmp.TienGiuaKy = this.TienGiuaKy;
			_tmp.TienQuaTrinh = this.TienQuaTrinh;
			_tmp.TienCuoiKy = this.TienCuoiKy;
			_tmp.TongCong = this.TongCong;
			_tmp.Thue = this.Thue;
			_tmp.ThucLanh = this.ThucLanh;
			_tmp.GhiChu = this.GhiChu;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.DotChiTra = this.DotChiTra;
			_tmp.IsSync = this.IsSync;
			_tmp.Chot = this.Chot;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MucChi = this.MucChi;
			_tmp.MaHinhThucThi = this.MaHinhThucThi;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThuLaoChamBaiEntityData _tmp = new ThuLaoChamBaiEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.MaHocPhan = this.MaHocPhan;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaLop = this.MaLop;
			_tmp.LanThi = this.LanThi;
			_tmp.KyThi = this.KyThi;
			_tmp.SoBaiGiuaKy = this.SoBaiGiuaKy;
			_tmp.SoBaiQuaTrinh = this.SoBaiQuaTrinh;
			_tmp.SoBaiCuoiKy = this.SoBaiCuoiKy;
			_tmp.DonGiaGiuaKy = this.DonGiaGiuaKy;
			_tmp.DonGiaQuaTrinh = this.DonGiaQuaTrinh;
			_tmp.DonGiaCuoiKy = this.DonGiaCuoiKy;
			_tmp.TienGiuaKy = this.TienGiuaKy;
			_tmp.TienQuaTrinh = this.TienQuaTrinh;
			_tmp.TienCuoiKy = this.TienCuoiKy;
			_tmp.TongCong = this.TongCong;
			_tmp.Thue = this.Thue;
			_tmp.ThucLanh = this.ThucLanh;
			_tmp.GhiChu = this.GhiChu;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.DotChiTra = this.DotChiTra;
			_tmp.IsSync = this.IsSync;
			_tmp.Chot = this.Chot;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MucChi = this.MucChi;
			_tmp.MaHinhThucThi = this.MaHinhThucThi;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoChamBaiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThuLaoChamBaiColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoChamBaiColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThuLaoChamBaiColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoChamBaiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThuLaoChamBaiColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThuLaoChamBaiEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThuLaoChamBaiEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoChamBaiColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThuLaoChamBaiColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThuLaoChamBaiEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThuLaoChamBaiEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThuLaoChamBaiEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThuLaoChamBai"/> object.
	/// </remarks>
	public class ThuLaoChamBaiEventArgs : System.EventArgs
	{
		private ThuLaoChamBaiColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoChamBaiEventArgs class.
		///</summary>
		public ThuLaoChamBaiEventArgs(ThuLaoChamBaiColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoChamBaiEventArgs class.
		///</summary>
		public ThuLaoChamBaiEventArgs(ThuLaoChamBaiColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThuLaoChamBaiColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThuLaoChamBaiColumn" />
		public ThuLaoChamBaiColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThuLaoChamBai related events.
	///</summary>
	public delegate void ThuLaoChamBaiEventHandler(object sender, ThuLaoChamBaiEventArgs e);
	
	#region ThuLaoChamBaiComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThuLaoChamBaiComparer : System.Collections.Generic.IComparer<ThuLaoChamBai>
	{
		ThuLaoChamBaiColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoChamBaiComparer"/> class.
        /// </summary>
		public ThuLaoChamBaiComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoChamBaiComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThuLaoChamBaiComparer(ThuLaoChamBaiColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThuLaoChamBai"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThuLaoChamBai"/> to compare.</param>
        /// <param name="b">The second <c>ThuLaoChamBai</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThuLaoChamBai a, ThuLaoChamBai b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThuLaoChamBai entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThuLaoChamBai a, ThuLaoChamBai b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThuLaoChamBaiColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThuLaoChamBaiKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThuLaoChamBai"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThuLaoChamBaiKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiKey class.
		/// </summary>
		public ThuLaoChamBaiKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiKey class.
		/// </summary>
		public ThuLaoChamBaiKey(ThuLaoChamBaiBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiKey class.
		/// </summary>
		public ThuLaoChamBaiKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThuLaoChamBaiBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThuLaoChamBaiBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThuLaoChamBaiColumn Enum
	
	/// <summary>
	/// Enumerate the ThuLaoChamBai columns.
	/// </summary>
	[Serializable]
	public enum ThuLaoChamBaiColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien Quan Ly")]
		[ColumnEnum("MaGiangVienQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGiangVienQuanLy = 2,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 3,
		/// <summary>
		/// MaHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Hoc Phan")]
		[ColumnEnum("MaHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHocPhan = 4,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaLopHocPhan = 5,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("Ma Lop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		MaLop = 6,
		/// <summary>
		/// LanThi : 
		/// </summary>
		[EnumTextValue("Lan Thi")]
		[ColumnEnum("LanThi", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		LanThi = 7,
		/// <summary>
		/// KyThi : 
		/// </summary>
		[EnumTextValue("Ky Thi")]
		[ColumnEnum("KyThi", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		KyThi = 8,
		/// <summary>
		/// SoBaiGiuaKy : 
		/// </summary>
		[EnumTextValue("So Bai Giua Ky")]
		[ColumnEnum("SoBaiGiuaKy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoBaiGiuaKy = 9,
		/// <summary>
		/// SoBaiQuaTrinh : 
		/// </summary>
		[EnumTextValue("So Bai Qua Trinh")]
		[ColumnEnum("SoBaiQuaTrinh", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoBaiQuaTrinh = 10,
		/// <summary>
		/// SoBaiCuoiKy : 
		/// </summary>
		[EnumTextValue("So Bai Cuoi Ky")]
		[ColumnEnum("SoBaiCuoiKy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoBaiCuoiKy = 11,
		/// <summary>
		/// DonGiaGiuaKy : 
		/// </summary>
		[EnumTextValue("Don Gia Giua Ky")]
		[ColumnEnum("DonGiaGiuaKy", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaGiuaKy = 12,
		/// <summary>
		/// DonGiaQuaTrinh : 
		/// </summary>
		[EnumTextValue("Don Gia Qua Trinh")]
		[ColumnEnum("DonGiaQuaTrinh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaQuaTrinh = 13,
		/// <summary>
		/// DonGiaCuoiKy : 
		/// </summary>
		[EnumTextValue("Don Gia Cuoi Ky")]
		[ColumnEnum("DonGiaCuoiKy", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGiaCuoiKy = 14,
		/// <summary>
		/// TienGiuaKy : 
		/// </summary>
		[EnumTextValue("Tien Giua Ky")]
		[ColumnEnum("TienGiuaKy", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TienGiuaKy = 15,
		/// <summary>
		/// TienQuaTrinh : 
		/// </summary>
		[EnumTextValue("Tien Qua Trinh")]
		[ColumnEnum("TienQuaTrinh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TienQuaTrinh = 16,
		/// <summary>
		/// TienCuoiKy : 
		/// </summary>
		[EnumTextValue("Tien Cuoi Ky")]
		[ColumnEnum("TienCuoiKy", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TienCuoiKy = 17,
		/// <summary>
		/// TongCong : 
		/// </summary>
		[EnumTextValue("Tong Cong")]
		[ColumnEnum("TongCong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongCong = 18,
		/// <summary>
		/// Thue : 
		/// </summary>
		[EnumTextValue("Thue")]
		[ColumnEnum("Thue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Thue = 19,
		/// <summary>
		/// ThucLanh : 
		/// </summary>
		[EnumTextValue("Thuc Lanh")]
		[ColumnEnum("ThucLanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ThucLanh = 20,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		GhiChu = 21,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 22,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 23,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgayCapNhat = 24,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 25,
		/// <summary>
		/// DotChiTra : 
		/// </summary>
		[EnumTextValue("Dot Chi Tra")]
		[ColumnEnum("DotChiTra", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		DotChiTra = 26,
		/// <summary>
		/// IsSync : 
		/// </summary>
		[EnumTextValue("Is Sync")]
		[ColumnEnum("IsSync", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsSync = 27,
		/// <summary>
		/// Chot : 
		/// </summary>
		[EnumTextValue("Chot")]
		[ColumnEnum("Chot", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Chot = 28,
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Bac Dao Tao")]
		[ColumnEnum("MaBacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaBacDaoTao = 29,
		/// <summary>
		/// MucChi : 
		/// </summary>
		[EnumTextValue("Muc Chi")]
		[ColumnEnum("MucChi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MucChi = 30,
		/// <summary>
		/// MaHinhThucThi : 
		/// </summary>
		[EnumTextValue("Ma Hinh Thuc Thi")]
		[ColumnEnum("MaHinhThucThi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHinhThucThi = 31
	}//End enum

	#endregion ThuLaoChamBaiColumn Enum

} // end namespace
