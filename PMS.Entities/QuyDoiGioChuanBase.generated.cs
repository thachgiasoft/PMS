
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file QuyDoiGioChuan.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'QuyDoiGioChuan' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class QuyDoiGioChuanBase : EntityBase, IQuyDoiGioChuan, IEntityId<QuyDoiGioChuanKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private QuyDoiGioChuanEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private QuyDoiGioChuanEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private QuyDoiGioChuanEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<QuyDoiGioChuan> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuyDoiGioChuanEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuyDoiGioChuanEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="QuyDoiGioChuanBase"/> instance.
		///</summary>
		public QuyDoiGioChuanBase()
		{
			this.entityData = new QuyDoiGioChuanEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="QuyDoiGioChuanBase"/> instance.
		///</summary>
		///<param name="_maDonVi"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_tenQuyDoi"></param>
		///<param name="_soLuong"></param>
		///<param name="_heSo"></param>
		///<param name="_congDon"></param>
		///<param name="_loaiQuyDoi"></param>
		///<param name="_thuTu"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_ghiChu"></param>
		///<param name="_maLoaiKhoiLuong"></param>
		///<param name="_coSuDungHeSoChucDanh"></param>
		///<param name="_nhomMonHoc"></param>
		///<param name="_khoaNhapLieu"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinh"></param>
		public QuyDoiGioChuanBase(System.Int32? _maDonVi, System.String _maQuanLy, System.String _tenQuyDoi, 
			System.Int32? _soLuong, System.Decimal? _heSo, System.Boolean? _congDon, System.Int32? _loaiQuyDoi, 
			System.Int32? _thuTu, System.String _namHoc, System.String _hocKy, System.String _ngayCapNhat, 
			System.String _nguoiCapNhat, System.String _ghiChu, System.String _maLoaiKhoiLuong, 
			System.Boolean? _coSuDungHeSoChucDanh, System.String _nhomMonHoc, System.Boolean? _khoaNhapLieu, 
			System.String _maBacDaoTao, System.String _maLoaiHinh)
		{
			this.entityData = new QuyDoiGioChuanEntityData();
			this.backupData = null;

			this.MaDonVi = _maDonVi;
			this.MaQuanLy = _maQuanLy;
			this.TenQuyDoi = _tenQuyDoi;
			this.SoLuong = _soLuong;
			this.HeSo = _heSo;
			this.CongDon = _congDon;
			this.LoaiQuyDoi = _loaiQuyDoi;
			this.ThuTu = _thuTu;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.GhiChu = _ghiChu;
			this.MaLoaiKhoiLuong = _maLoaiKhoiLuong;
			this.CoSuDungHeSoChucDanh = _coSuDungHeSoChucDanh;
			this.NhomMonHoc = _nhomMonHoc;
			this.KhoaNhapLieu = _khoaNhapLieu;
			this.MaBacDaoTao = _maBacDaoTao;
			this.MaLoaiHinh = _maLoaiHinh;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="QuyDoiGioChuan"/> instance.
		///</summary>
		///<param name="_maDonVi"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_tenQuyDoi"></param>
		///<param name="_soLuong"></param>
		///<param name="_heSo"></param>
		///<param name="_congDon"></param>
		///<param name="_loaiQuyDoi"></param>
		///<param name="_thuTu"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_ghiChu"></param>
		///<param name="_maLoaiKhoiLuong"></param>
		///<param name="_coSuDungHeSoChucDanh"></param>
		///<param name="_nhomMonHoc"></param>
		///<param name="_khoaNhapLieu"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinh"></param>
		public static QuyDoiGioChuan CreateQuyDoiGioChuan(System.Int32? _maDonVi, System.String _maQuanLy, System.String _tenQuyDoi, 
			System.Int32? _soLuong, System.Decimal? _heSo, System.Boolean? _congDon, System.Int32? _loaiQuyDoi, 
			System.Int32? _thuTu, System.String _namHoc, System.String _hocKy, System.String _ngayCapNhat, 
			System.String _nguoiCapNhat, System.String _ghiChu, System.String _maLoaiKhoiLuong, 
			System.Boolean? _coSuDungHeSoChucDanh, System.String _nhomMonHoc, System.Boolean? _khoaNhapLieu, 
			System.String _maBacDaoTao, System.String _maLoaiHinh)
		{
			QuyDoiGioChuan newQuyDoiGioChuan = new QuyDoiGioChuan();
			newQuyDoiGioChuan.MaDonVi = _maDonVi;
			newQuyDoiGioChuan.MaQuanLy = _maQuanLy;
			newQuyDoiGioChuan.TenQuyDoi = _tenQuyDoi;
			newQuyDoiGioChuan.SoLuong = _soLuong;
			newQuyDoiGioChuan.HeSo = _heSo;
			newQuyDoiGioChuan.CongDon = _congDon;
			newQuyDoiGioChuan.LoaiQuyDoi = _loaiQuyDoi;
			newQuyDoiGioChuan.ThuTu = _thuTu;
			newQuyDoiGioChuan.NamHoc = _namHoc;
			newQuyDoiGioChuan.HocKy = _hocKy;
			newQuyDoiGioChuan.NgayCapNhat = _ngayCapNhat;
			newQuyDoiGioChuan.NguoiCapNhat = _nguoiCapNhat;
			newQuyDoiGioChuan.GhiChu = _ghiChu;
			newQuyDoiGioChuan.MaLoaiKhoiLuong = _maLoaiKhoiLuong;
			newQuyDoiGioChuan.CoSuDungHeSoChucDanh = _coSuDungHeSoChucDanh;
			newQuyDoiGioChuan.NhomMonHoc = _nhomMonHoc;
			newQuyDoiGioChuan.KhoaNhapLieu = _khoaNhapLieu;
			newQuyDoiGioChuan.MaBacDaoTao = _maBacDaoTao;
			newQuyDoiGioChuan.MaLoaiHinh = _maLoaiHinh;
			return newQuyDoiGioChuan;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaQuyDoi
		{
			get
			{
				return this.entityData.MaQuyDoi; 
			}
			
			set
			{
				if (this.entityData.MaQuyDoi == value)
					return;
				
                OnPropertyChanging("MaQuyDoi");                    
				OnColumnChanging(QuyDoiGioChuanColumn.MaQuyDoi, this.entityData.MaQuyDoi);
				this.entityData.MaQuyDoi = value;
				this.EntityId.MaQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.MaQuyDoi, this.entityData.MaQuyDoi);
				OnPropertyChanged("MaQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaDonVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaDonVi
		{
			get
			{
				return this.entityData.MaDonVi; 
			}
			
			set
			{
				if (this.entityData.MaDonVi == value)
					return;
				
                OnPropertyChanging("MaDonVi");                    
				OnColumnChanging(QuyDoiGioChuanColumn.MaDonVi, this.entityData.MaDonVi);
				this.entityData.MaDonVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.MaDonVi, this.entityData.MaDonVi);
				OnPropertyChanged("MaDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this.entityData.MaQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaQuanLy == value)
					return;
				
                OnPropertyChanging("MaQuanLy");                    
				OnColumnChanging(QuyDoiGioChuanColumn.MaQuanLy, this.entityData.MaQuanLy);
				this.entityData.MaQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.MaQuanLy, this.entityData.MaQuanLy);
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String TenQuyDoi
		{
			get
			{
				return this.entityData.TenQuyDoi; 
			}
			
			set
			{
				if (this.entityData.TenQuyDoi == value)
					return;
				
                OnPropertyChanging("TenQuyDoi");                    
				OnColumnChanging(QuyDoiGioChuanColumn.TenQuyDoi, this.entityData.TenQuyDoi);
				this.entityData.TenQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.TenQuyDoi, this.entityData.TenQuyDoi);
				OnPropertyChanged("TenQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoLuong property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoLuong
		{
			get
			{
				return this.entityData.SoLuong; 
			}
			
			set
			{
				if (this.entityData.SoLuong == value)
					return;
				
                OnPropertyChanging("SoLuong");                    
				OnColumnChanging(QuyDoiGioChuanColumn.SoLuong, this.entityData.SoLuong);
				this.entityData.SoLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.SoLuong, this.entityData.SoLuong);
				OnPropertyChanged("SoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSo property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSo
		{
			get
			{
				return this.entityData.HeSo; 
			}
			
			set
			{
				if (this.entityData.HeSo == value)
					return;
				
                OnPropertyChanging("HeSo");                    
				OnColumnChanging(QuyDoiGioChuanColumn.HeSo, this.entityData.HeSo);
				this.entityData.HeSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.HeSo, this.entityData.HeSo);
				OnPropertyChanged("HeSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CongDon property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CongDon
		{
			get
			{
				return this.entityData.CongDon; 
			}
			
			set
			{
				if (this.entityData.CongDon == value)
					return;
				
                OnPropertyChanging("CongDon");                    
				OnColumnChanging(QuyDoiGioChuanColumn.CongDon, this.entityData.CongDon);
				this.entityData.CongDon = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.CongDon, this.entityData.CongDon);
				OnPropertyChanged("CongDon");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LoaiQuyDoi
		{
			get
			{
				return this.entityData.LoaiQuyDoi; 
			}
			
			set
			{
				if (this.entityData.LoaiQuyDoi == value)
					return;
				
                OnPropertyChanging("LoaiQuyDoi");                    
				OnColumnChanging(QuyDoiGioChuanColumn.LoaiQuyDoi, this.entityData.LoaiQuyDoi);
				this.entityData.LoaiQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.LoaiQuyDoi, this.entityData.LoaiQuyDoi);
				OnPropertyChanged("LoaiQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThuTu property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ThuTu
		{
			get
			{
				return this.entityData.ThuTu; 
			}
			
			set
			{
				if (this.entityData.ThuTu == value)
					return;
				
                OnPropertyChanging("ThuTu");                    
				OnColumnChanging(QuyDoiGioChuanColumn.ThuTu, this.entityData.ThuTu);
				this.entityData.ThuTu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.ThuTu, this.entityData.ThuTu);
				OnPropertyChanged("ThuTu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(QuyDoiGioChuanColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(QuyDoiGioChuanColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(QuyDoiGioChuanColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(QuyDoiGioChuanColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(QuyDoiGioChuanColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiKhoiLuong property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaLoaiKhoiLuong
		{
			get
			{
				return this.entityData.MaLoaiKhoiLuong; 
			}
			
			set
			{
				if (this.entityData.MaLoaiKhoiLuong == value)
					return;
				
                OnPropertyChanging("MaLoaiKhoiLuong");                    
				OnColumnChanging(QuyDoiGioChuanColumn.MaLoaiKhoiLuong, this.entityData.MaLoaiKhoiLuong);
				this.entityData.MaLoaiKhoiLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.MaLoaiKhoiLuong, this.entityData.MaLoaiKhoiLuong);
				OnPropertyChanged("MaLoaiKhoiLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoSuDungHeSoChucDanh property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CoSuDungHeSoChucDanh
		{
			get
			{
				return this.entityData.CoSuDungHeSoChucDanh; 
			}
			
			set
			{
				if (this.entityData.CoSuDungHeSoChucDanh == value)
					return;
				
                OnPropertyChanging("CoSuDungHeSoChucDanh");                    
				OnColumnChanging(QuyDoiGioChuanColumn.CoSuDungHeSoChucDanh, this.entityData.CoSuDungHeSoChucDanh);
				this.entityData.CoSuDungHeSoChucDanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.CoSuDungHeSoChucDanh, this.entityData.CoSuDungHeSoChucDanh);
				OnPropertyChanged("CoSuDungHeSoChucDanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NhomMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String NhomMonHoc
		{
			get
			{
				return this.entityData.NhomMonHoc; 
			}
			
			set
			{
				if (this.entityData.NhomMonHoc == value)
					return;
				
                OnPropertyChanging("NhomMonHoc");                    
				OnColumnChanging(QuyDoiGioChuanColumn.NhomMonHoc, this.entityData.NhomMonHoc);
				this.entityData.NhomMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.NhomMonHoc, this.entityData.NhomMonHoc);
				OnPropertyChanged("NhomMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KhoaNhapLieu property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? KhoaNhapLieu
		{
			get
			{
				return this.entityData.KhoaNhapLieu; 
			}
			
			set
			{
				if (this.entityData.KhoaNhapLieu == value)
					return;
				
                OnPropertyChanging("KhoaNhapLieu");                    
				OnColumnChanging(QuyDoiGioChuanColumn.KhoaNhapLieu, this.entityData.KhoaNhapLieu);
				this.entityData.KhoaNhapLieu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.KhoaNhapLieu, this.entityData.KhoaNhapLieu);
				OnPropertyChanged("KhoaNhapLieu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaBacDaoTao
		{
			get
			{
				return this.entityData.MaBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaBacDaoTao == value)
					return;
				
                OnPropertyChanging("MaBacDaoTao");                    
				OnColumnChanging(QuyDoiGioChuanColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				this.entityData.MaBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				OnPropertyChanged("MaBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiHinh property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaLoaiHinh
		{
			get
			{
				return this.entityData.MaLoaiHinh; 
			}
			
			set
			{
				if (this.entityData.MaLoaiHinh == value)
					return;
				
                OnPropertyChanging("MaLoaiHinh");                    
				OnColumnChanging(QuyDoiGioChuanColumn.MaLoaiHinh, this.entityData.MaLoaiHinh);
				this.entityData.MaLoaiHinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuyDoiGioChuanColumn.MaLoaiHinh, this.entityData.MaLoaiHinh);
				OnPropertyChanged("MaLoaiHinh");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="DonViTinh"/>.
		/// </summary>
		/// <value>The source DonViTinh for MaDonVi.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DonViTinh MaDonViSource
      	{
            get { return entityData.MaDonViSource; }
            set { entityData.MaDonViSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LoaiKhoiLuong"/>.
		/// </summary>
		/// <value>The source LoaiKhoiLuong for MaLoaiKhoiLuong.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LoaiKhoiLuong MaLoaiKhoiLuongSource
      	{
            get { return entityData.MaLoaiKhoiLuongSource; }
            set { entityData.MaLoaiKhoiLuongSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of KhoiLuongCacCongViecKhac objects
		///	which are related to this object through the relation FK_KhoiLuongCacCongViecKhac_QuyDoiGioChuan
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<KhoiLuongCacCongViecKhac> KhoiLuongCacCongViecKhacCollection
		{
			get { return entityData.KhoiLuongCacCongViecKhacCollection; }
			set { entityData.KhoiLuongCacCongViecKhacCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of KhoanQuyDoi objects
		///	which are related to this object through the relation FK_KhoanQuyDoi_QuyDoiGioChuan
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<KhoanQuyDoi> KhoanQuyDoiCollection
		{
			get { return entityData.KhoanQuyDoiCollection; }
			set { entityData.KhoanQuyDoiCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaQuanLy", "Ma Quan Ly"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaQuanLy", "Ma Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenQuyDoi", "Ten Quy Doi", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayCapNhat", "Ngay Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GhiChu", "Ghi Chu", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLoaiKhoiLuong", "Ma Loai Khoi Luong", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NhomMonHoc", "Nhom Mon Hoc", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaBacDaoTao", "Ma Bac Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLoaiHinh", "Ma Loai Hinh", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "QuyDoiGioChuan"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaQuyDoi", "MaDonVi", "MaQuanLy", "TenQuyDoi", "SoLuong", "HeSo", "CongDon", "LoaiQuyDoi", "ThuTu", "NamHoc", "HocKy", "NgayCapNhat", "NguoiCapNhat", "GhiChu", "MaLoaiKhoiLuong", "CoSuDungHeSoChucDanh", "NhomMonHoc", "KhoaNhapLieu", "MaBacDaoTao", "MaLoaiHinh"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as QuyDoiGioChuanEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (QuyDoiGioChuan) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<QuyDoiGioChuan>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as QuyDoiGioChuan);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed QuyDoiGioChuan Entity 
		///</summary>
		protected virtual QuyDoiGioChuan Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			QuyDoiGioChuan copy = new QuyDoiGioChuan();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaQuyDoi = this.MaQuyDoi;
				copy.MaDonVi = this.MaDonVi;
				copy.MaQuanLy = this.MaQuanLy;
				copy.TenQuyDoi = this.TenQuyDoi;
				copy.SoLuong = this.SoLuong;
				copy.HeSo = this.HeSo;
				copy.CongDon = this.CongDon;
				copy.LoaiQuyDoi = this.LoaiQuyDoi;
				copy.ThuTu = this.ThuTu;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.GhiChu = this.GhiChu;
				copy.MaLoaiKhoiLuong = this.MaLoaiKhoiLuong;
				copy.CoSuDungHeSoChucDanh = this.CoSuDungHeSoChucDanh;
				copy.NhomMonHoc = this.NhomMonHoc;
				copy.KhoaNhapLieu = this.KhoaNhapLieu;
				copy.MaBacDaoTao = this.MaBacDaoTao;
				copy.MaLoaiHinh = this.MaLoaiHinh;
			
			if (this.MaDonViSource != null && existingCopies.Contains(this.MaDonViSource))
				copy.MaDonViSource = existingCopies[this.MaDonViSource] as DonViTinh;
			else
				copy.MaDonViSource = MakeCopyOf(this.MaDonViSource, existingCopies) as DonViTinh;
			if (this.MaLoaiKhoiLuongSource != null && existingCopies.Contains(this.MaLoaiKhoiLuongSource))
				copy.MaLoaiKhoiLuongSource = existingCopies[this.MaLoaiKhoiLuongSource] as LoaiKhoiLuong;
			else
				copy.MaLoaiKhoiLuongSource = MakeCopyOf(this.MaLoaiKhoiLuongSource, existingCopies) as LoaiKhoiLuong;
		
			//deep copy nested objects
			copy.KhoiLuongCacCongViecKhacCollection = (TList<KhoiLuongCacCongViecKhac>) MakeCopyOf(this.KhoiLuongCacCongViecKhacCollection, existingCopies); 
			copy.KhoanQuyDoiCollection = (TList<KhoanQuyDoi>) MakeCopyOf(this.KhoanQuyDoiCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed QuyDoiGioChuan Entity 
		///</summary>
		public virtual QuyDoiGioChuan Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed QuyDoiGioChuan Entity which is a deep copy of the current entity.
		///</summary>
		public virtual QuyDoiGioChuan DeepCopy()
		{
			return EntityHelper.Clone<QuyDoiGioChuan>(this as QuyDoiGioChuan);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as QuyDoiGioChuanEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new QuyDoiGioChuanEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as QuyDoiGioChuanEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(QuyDoiGioChuanColumn column)
		{
			switch(column)
			{
					case QuyDoiGioChuanColumn.MaQuyDoi:
					return entityData.MaQuyDoi != _originalData.MaQuyDoi;
					case QuyDoiGioChuanColumn.MaDonVi:
					return entityData.MaDonVi != _originalData.MaDonVi;
					case QuyDoiGioChuanColumn.MaQuanLy:
					return entityData.MaQuanLy != _originalData.MaQuanLy;
					case QuyDoiGioChuanColumn.TenQuyDoi:
					return entityData.TenQuyDoi != _originalData.TenQuyDoi;
					case QuyDoiGioChuanColumn.SoLuong:
					return entityData.SoLuong != _originalData.SoLuong;
					case QuyDoiGioChuanColumn.HeSo:
					return entityData.HeSo != _originalData.HeSo;
					case QuyDoiGioChuanColumn.CongDon:
					return entityData.CongDon != _originalData.CongDon;
					case QuyDoiGioChuanColumn.LoaiQuyDoi:
					return entityData.LoaiQuyDoi != _originalData.LoaiQuyDoi;
					case QuyDoiGioChuanColumn.ThuTu:
					return entityData.ThuTu != _originalData.ThuTu;
					case QuyDoiGioChuanColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case QuyDoiGioChuanColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case QuyDoiGioChuanColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case QuyDoiGioChuanColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case QuyDoiGioChuanColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case QuyDoiGioChuanColumn.MaLoaiKhoiLuong:
					return entityData.MaLoaiKhoiLuong != _originalData.MaLoaiKhoiLuong;
					case QuyDoiGioChuanColumn.CoSuDungHeSoChucDanh:
					return entityData.CoSuDungHeSoChucDanh != _originalData.CoSuDungHeSoChucDanh;
					case QuyDoiGioChuanColumn.NhomMonHoc:
					return entityData.NhomMonHoc != _originalData.NhomMonHoc;
					case QuyDoiGioChuanColumn.KhoaNhapLieu:
					return entityData.KhoaNhapLieu != _originalData.KhoaNhapLieu;
					case QuyDoiGioChuanColumn.MaBacDaoTao:
					return entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
					case QuyDoiGioChuanColumn.MaLoaiHinh:
					return entityData.MaLoaiHinh != _originalData.MaLoaiHinh;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< QuyDoiGioChuanColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaQuyDoi != _originalData.MaQuyDoi;
			result = result || entityData.MaDonVi != _originalData.MaDonVi;
			result = result || entityData.MaQuanLy != _originalData.MaQuanLy;
			result = result || entityData.TenQuyDoi != _originalData.TenQuyDoi;
			result = result || entityData.SoLuong != _originalData.SoLuong;
			result = result || entityData.HeSo != _originalData.HeSo;
			result = result || entityData.CongDon != _originalData.CongDon;
			result = result || entityData.LoaiQuyDoi != _originalData.LoaiQuyDoi;
			result = result || entityData.ThuTu != _originalData.ThuTu;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.MaLoaiKhoiLuong != _originalData.MaLoaiKhoiLuong;
			result = result || entityData.CoSuDungHeSoChucDanh != _originalData.CoSuDungHeSoChucDanh;
			result = result || entityData.NhomMonHoc != _originalData.NhomMonHoc;
			result = result || entityData.KhoaNhapLieu != _originalData.KhoaNhapLieu;
			result = result || entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
			result = result || entityData.MaLoaiHinh != _originalData.MaLoaiHinh;
			return result;
		}	
		
		///<summary>
		///  Returns a QuyDoiGioChuan Entity with the original data.
		///</summary>
		public QuyDoiGioChuan GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateQuyDoiGioChuan(
				_originalData.MaDonVi,
				_originalData.MaQuanLy,
				_originalData.TenQuyDoi,
				_originalData.SoLuong,
				_originalData.HeSo,
				_originalData.CongDon,
				_originalData.LoaiQuyDoi,
				_originalData.ThuTu,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.GhiChu,
				_originalData.MaLoaiKhoiLuong,
				_originalData.CoSuDungHeSoChucDanh,
				_originalData.NhomMonHoc,
				_originalData.KhoaNhapLieu,
				_originalData.MaBacDaoTao,
				_originalData.MaLoaiHinh
				);
				
			return (QuyDoiGioChuan)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="QuyDoiGioChuanBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is QuyDoiGioChuanBase)
				return ValueEquals(this, (QuyDoiGioChuanBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="QuyDoiGioChuanBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaQuyDoi.GetHashCode() ^ 
					((this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString()).GetHashCode() ^ 
					this.MaQuanLy.GetHashCode() ^ 
					((this.TenQuyDoi == null) ? string.Empty : this.TenQuyDoi.ToString()).GetHashCode() ^ 
					((this.SoLuong == null) ? string.Empty : this.SoLuong.ToString()).GetHashCode() ^ 
					((this.HeSo == null) ? string.Empty : this.HeSo.ToString()).GetHashCode() ^ 
					((this.CongDon == null) ? string.Empty : this.CongDon.ToString()).GetHashCode() ^ 
					((this.LoaiQuyDoi == null) ? string.Empty : this.LoaiQuyDoi.ToString()).GetHashCode() ^ 
					((this.ThuTu == null) ? string.Empty : this.ThuTu.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.MaLoaiKhoiLuong == null) ? string.Empty : this.MaLoaiKhoiLuong.ToString()).GetHashCode() ^ 
					((this.CoSuDungHeSoChucDanh == null) ? string.Empty : this.CoSuDungHeSoChucDanh.ToString()).GetHashCode() ^ 
					((this.NhomMonHoc == null) ? string.Empty : this.NhomMonHoc.ToString()).GetHashCode() ^ 
					((this.KhoaNhapLieu == null) ? string.Empty : this.KhoaNhapLieu.ToString()).GetHashCode() ^ 
					((this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString()).GetHashCode() ^ 
					((this.MaLoaiHinh == null) ? string.Empty : this.MaLoaiHinh.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="QuyDoiGioChuanBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(QuyDoiGioChuanBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="QuyDoiGioChuanBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="QuyDoiGioChuanBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="QuyDoiGioChuanBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(QuyDoiGioChuanBase Object1, QuyDoiGioChuanBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaQuyDoi != Object2.MaQuyDoi)
				equal = false;
			if ( Object1.MaDonVi != null && Object2.MaDonVi != null )
			{
				if (Object1.MaDonVi != Object2.MaDonVi)
					equal = false;
			}
			else if (Object1.MaDonVi == null ^ Object2.MaDonVi == null )
			{
				equal = false;
			}
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if ( Object1.TenQuyDoi != null && Object2.TenQuyDoi != null )
			{
				if (Object1.TenQuyDoi != Object2.TenQuyDoi)
					equal = false;
			}
			else if (Object1.TenQuyDoi == null ^ Object2.TenQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.SoLuong != null && Object2.SoLuong != null )
			{
				if (Object1.SoLuong != Object2.SoLuong)
					equal = false;
			}
			else if (Object1.SoLuong == null ^ Object2.SoLuong == null )
			{
				equal = false;
			}
			if ( Object1.HeSo != null && Object2.HeSo != null )
			{
				if (Object1.HeSo != Object2.HeSo)
					equal = false;
			}
			else if (Object1.HeSo == null ^ Object2.HeSo == null )
			{
				equal = false;
			}
			if ( Object1.CongDon != null && Object2.CongDon != null )
			{
				if (Object1.CongDon != Object2.CongDon)
					equal = false;
			}
			else if (Object1.CongDon == null ^ Object2.CongDon == null )
			{
				equal = false;
			}
			if ( Object1.LoaiQuyDoi != null && Object2.LoaiQuyDoi != null )
			{
				if (Object1.LoaiQuyDoi != Object2.LoaiQuyDoi)
					equal = false;
			}
			else if (Object1.LoaiQuyDoi == null ^ Object2.LoaiQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.ThuTu != null && Object2.ThuTu != null )
			{
				if (Object1.ThuTu != Object2.ThuTu)
					equal = false;
			}
			else if (Object1.ThuTu == null ^ Object2.ThuTu == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiKhoiLuong != null && Object2.MaLoaiKhoiLuong != null )
			{
				if (Object1.MaLoaiKhoiLuong != Object2.MaLoaiKhoiLuong)
					equal = false;
			}
			else if (Object1.MaLoaiKhoiLuong == null ^ Object2.MaLoaiKhoiLuong == null )
			{
				equal = false;
			}
			if ( Object1.CoSuDungHeSoChucDanh != null && Object2.CoSuDungHeSoChucDanh != null )
			{
				if (Object1.CoSuDungHeSoChucDanh != Object2.CoSuDungHeSoChucDanh)
					equal = false;
			}
			else if (Object1.CoSuDungHeSoChucDanh == null ^ Object2.CoSuDungHeSoChucDanh == null )
			{
				equal = false;
			}
			if ( Object1.NhomMonHoc != null && Object2.NhomMonHoc != null )
			{
				if (Object1.NhomMonHoc != Object2.NhomMonHoc)
					equal = false;
			}
			else if (Object1.NhomMonHoc == null ^ Object2.NhomMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.KhoaNhapLieu != null && Object2.KhoaNhapLieu != null )
			{
				if (Object1.KhoaNhapLieu != Object2.KhoaNhapLieu)
					equal = false;
			}
			else if (Object1.KhoaNhapLieu == null ^ Object2.KhoaNhapLieu == null )
			{
				equal = false;
			}
			if ( Object1.MaBacDaoTao != null && Object2.MaBacDaoTao != null )
			{
				if (Object1.MaBacDaoTao != Object2.MaBacDaoTao)
					equal = false;
			}
			else if (Object1.MaBacDaoTao == null ^ Object2.MaBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiHinh != null && Object2.MaLoaiHinh != null )
			{
				if (Object1.MaLoaiHinh != Object2.MaLoaiHinh)
					equal = false;
			}
			else if (Object1.MaLoaiHinh == null ^ Object2.MaLoaiHinh == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((QuyDoiGioChuanBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static QuyDoiGioChuanComparer GetComparer()
        {
            return new QuyDoiGioChuanComparer();
        }
        */

        // Comparer delegates back to QuyDoiGioChuan
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(QuyDoiGioChuan rhs, QuyDoiGioChuanColumn which)
        {
            switch (which)
            {
            	
            	
            	case QuyDoiGioChuanColumn.MaQuyDoi:
            		return this.MaQuyDoi.CompareTo(rhs.MaQuyDoi);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.MaDonVi:
            		return this.MaDonVi.Value.CompareTo(rhs.MaDonVi.Value);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.MaQuanLy:
            		return this.MaQuanLy.CompareTo(rhs.MaQuanLy);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.TenQuyDoi:
            		return this.TenQuyDoi.CompareTo(rhs.TenQuyDoi);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.SoLuong:
            		return this.SoLuong.Value.CompareTo(rhs.SoLuong.Value);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.HeSo:
            		return this.HeSo.Value.CompareTo(rhs.HeSo.Value);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.CongDon:
            		return this.CongDon.Value.CompareTo(rhs.CongDon.Value);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.LoaiQuyDoi:
            		return this.LoaiQuyDoi.Value.CompareTo(rhs.LoaiQuyDoi.Value);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.ThuTu:
            		return this.ThuTu.Value.CompareTo(rhs.ThuTu.Value);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.NgayCapNhat:
            		return this.NgayCapNhat.CompareTo(rhs.NgayCapNhat);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.MaLoaiKhoiLuong:
            		return this.MaLoaiKhoiLuong.CompareTo(rhs.MaLoaiKhoiLuong);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.CoSuDungHeSoChucDanh:
            		return this.CoSuDungHeSoChucDanh.Value.CompareTo(rhs.CoSuDungHeSoChucDanh.Value);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.NhomMonHoc:
            		return this.NhomMonHoc.CompareTo(rhs.NhomMonHoc);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.KhoaNhapLieu:
            		return this.KhoaNhapLieu.Value.CompareTo(rhs.KhoaNhapLieu.Value);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.MaBacDaoTao:
            		return this.MaBacDaoTao.CompareTo(rhs.MaBacDaoTao);
            		
            		                 
            	
            	
            	case QuyDoiGioChuanColumn.MaLoaiHinh:
            		return this.MaLoaiHinh.CompareTo(rhs.MaLoaiHinh);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<QuyDoiGioChuanKey> Members
		
		// member variable for the EntityId property
		private QuyDoiGioChuanKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual QuyDoiGioChuanKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new QuyDoiGioChuanKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("QuyDoiGioChuan")
					.Append("|").Append( this.MaQuyDoi.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- MaQuyDoi: {0}{20}- MaDonVi: {1}{20}- MaQuanLy: {2}{20}- TenQuyDoi: {3}{20}- SoLuong: {4}{20}- HeSo: {5}{20}- CongDon: {6}{20}- LoaiQuyDoi: {7}{20}- ThuTu: {8}{20}- NamHoc: {9}{20}- HocKy: {10}{20}- NgayCapNhat: {11}{20}- NguoiCapNhat: {12}{20}- GhiChu: {13}{20}- MaLoaiKhoiLuong: {14}{20}- CoSuDungHeSoChucDanh: {15}{20}- NhomMonHoc: {16}{20}- KhoaNhapLieu: {17}{20}- MaBacDaoTao: {18}{20}- MaLoaiHinh: {19}{20}{22}", 
				this.MaQuyDoi,
				(this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString(),
				this.MaQuanLy,
				(this.TenQuyDoi == null) ? string.Empty : this.TenQuyDoi.ToString(),
				(this.SoLuong == null) ? string.Empty : this.SoLuong.ToString(),
				(this.HeSo == null) ? string.Empty : this.HeSo.ToString(),
				(this.CongDon == null) ? string.Empty : this.CongDon.ToString(),
				(this.LoaiQuyDoi == null) ? string.Empty : this.LoaiQuyDoi.ToString(),
				(this.ThuTu == null) ? string.Empty : this.ThuTu.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.MaLoaiKhoiLuong == null) ? string.Empty : this.MaLoaiKhoiLuong.ToString(),
				(this.CoSuDungHeSoChucDanh == null) ? string.Empty : this.CoSuDungHeSoChucDanh.ToString(),
				(this.NhomMonHoc == null) ? string.Empty : this.NhomMonHoc.ToString(),
				(this.KhoaNhapLieu == null) ? string.Empty : this.KhoaNhapLieu.ToString(),
				(this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString(),
				(this.MaLoaiHinh == null) ? string.Empty : this.MaLoaiHinh.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'QuyDoiGioChuan' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class QuyDoiGioChuanEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaQuyDoi : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "QuyDoiGioChuan"</remarks>
		public System.Int32 MaQuyDoi;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		public System.Int32? MaDonVi = null;
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		public System.String MaQuanLy = string.Empty;
		
		/// <summary>
		/// TenQuyDoi : 
		/// </summary>
		public System.String TenQuyDoi = null;
		
		/// <summary>
		/// SoLuong : 
		/// </summary>
		public System.Int32? SoLuong = null;
		
		/// <summary>
		/// HeSo : 
		/// </summary>
		public System.Decimal? HeSo = null;
		
		/// <summary>
		/// CongDon : 
		/// </summary>
		public System.Boolean? CongDon = null;
		
		/// <summary>
		/// LoaiQuyDoi : 
		/// </summary>
		public System.Int32? LoaiQuyDoi = null;
		
		/// <summary>
		/// ThuTu : 
		/// </summary>
		public System.Int32? ThuTu = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.String NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// MaLoaiKhoiLuong : 
		/// </summary>
		public System.String MaLoaiKhoiLuong = null;
		
		/// <summary>
		/// CoSuDungHeSoChucDanh : 
		/// </summary>
		public System.Boolean? CoSuDungHeSoChucDanh = null;
		
		/// <summary>
		/// NhomMonHoc : 
		/// </summary>
		public System.String NhomMonHoc = null;
		
		/// <summary>
		/// KhoaNhapLieu : 
		/// </summary>
		public System.Boolean? KhoaNhapLieu = null;
		
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		public System.String MaBacDaoTao = null;
		
		/// <summary>
		/// MaLoaiHinh : 
		/// </summary>
		public System.String MaLoaiHinh = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private DonViTinh _maDonViSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DonViTinh"/>.
		/// </summary>
		/// <value>The source DonViTinh for MaDonVi.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DonViTinh MaDonViSource
      	{
            get { return this._maDonViSource; }
            set { this._maDonViSource = value; }
      	}
		private LoaiKhoiLuong _maLoaiKhoiLuongSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LoaiKhoiLuong"/>.
		/// </summary>
		/// <value>The source LoaiKhoiLuong for MaLoaiKhoiLuong.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual LoaiKhoiLuong MaLoaiKhoiLuongSource
      	{
            get { return this._maLoaiKhoiLuongSource; }
            set { this._maLoaiKhoiLuongSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region KhoiLuongCacCongViecKhacCollection
		
		private TList<KhoiLuongCacCongViecKhac> _khoiLuongCacCongViecKhacMaLoaiCongViec;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _khoiLuongCacCongViecKhacMaLoaiCongViec
		/// </summary>
		
		public TList<KhoiLuongCacCongViecKhac> KhoiLuongCacCongViecKhacCollection
		{
			get
			{
				if (_khoiLuongCacCongViecKhacMaLoaiCongViec == null)
				{
				_khoiLuongCacCongViecKhacMaLoaiCongViec = new TList<KhoiLuongCacCongViecKhac>();
				}
	
				return _khoiLuongCacCongViecKhacMaLoaiCongViec;
			}
			set { _khoiLuongCacCongViecKhacMaLoaiCongViec = value; }
		}
		
		#endregion

		#region KhoanQuyDoiCollection
		
		private TList<KhoanQuyDoi> _khoanQuyDoiMaQuyDoi;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _khoanQuyDoiMaQuyDoi
		/// </summary>
		
		public TList<KhoanQuyDoi> KhoanQuyDoiCollection
		{
			get
			{
				if (_khoanQuyDoiMaQuyDoi == null)
				{
				_khoanQuyDoiMaQuyDoi = new TList<KhoanQuyDoi>();
				}
	
				return _khoanQuyDoiMaQuyDoi;
			}
			set { _khoanQuyDoiMaQuyDoi = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			QuyDoiGioChuanEntityData _tmp = new QuyDoiGioChuanEntityData();
						
			_tmp.MaQuyDoi = this.MaQuyDoi;
			
			_tmp.MaDonVi = this.MaDonVi;
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.TenQuyDoi = this.TenQuyDoi;
			_tmp.SoLuong = this.SoLuong;
			_tmp.HeSo = this.HeSo;
			_tmp.CongDon = this.CongDon;
			_tmp.LoaiQuyDoi = this.LoaiQuyDoi;
			_tmp.ThuTu = this.ThuTu;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.GhiChu = this.GhiChu;
			_tmp.MaLoaiKhoiLuong = this.MaLoaiKhoiLuong;
			_tmp.CoSuDungHeSoChucDanh = this.CoSuDungHeSoChucDanh;
			_tmp.NhomMonHoc = this.NhomMonHoc;
			_tmp.KhoaNhapLieu = this.KhoaNhapLieu;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaLoaiHinh = this.MaLoaiHinh;
			
			#region Source Parent Composite Entities
			if (this.MaDonViSource != null)
				_tmp.MaDonViSource = MakeCopyOf(this.MaDonViSource) as DonViTinh;
			if (this.MaLoaiKhoiLuongSource != null)
				_tmp.MaLoaiKhoiLuongSource = MakeCopyOf(this.MaLoaiKhoiLuongSource) as LoaiKhoiLuong;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._khoiLuongCacCongViecKhacMaLoaiCongViec != null)
				_tmp.KhoiLuongCacCongViecKhacCollection = (TList<KhoiLuongCacCongViecKhac>) MakeCopyOf(this.KhoiLuongCacCongViecKhacCollection); 
			if (this._khoanQuyDoiMaQuyDoi != null)
				_tmp.KhoanQuyDoiCollection = (TList<KhoanQuyDoi>) MakeCopyOf(this.KhoanQuyDoiCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			QuyDoiGioChuanEntityData _tmp = new QuyDoiGioChuanEntityData();
						
			_tmp.MaQuyDoi = this.MaQuyDoi;
			
			_tmp.MaDonVi = this.MaDonVi;
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.TenQuyDoi = this.TenQuyDoi;
			_tmp.SoLuong = this.SoLuong;
			_tmp.HeSo = this.HeSo;
			_tmp.CongDon = this.CongDon;
			_tmp.LoaiQuyDoi = this.LoaiQuyDoi;
			_tmp.ThuTu = this.ThuTu;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.GhiChu = this.GhiChu;
			_tmp.MaLoaiKhoiLuong = this.MaLoaiKhoiLuong;
			_tmp.CoSuDungHeSoChucDanh = this.CoSuDungHeSoChucDanh;
			_tmp.NhomMonHoc = this.NhomMonHoc;
			_tmp.KhoaNhapLieu = this.KhoaNhapLieu;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaLoaiHinh = this.MaLoaiHinh;
			
			#region Source Parent Composite Entities
			if (this.MaDonViSource != null && existingCopies.Contains(this.MaDonViSource))
				_tmp.MaDonViSource = existingCopies[this.MaDonViSource] as DonViTinh;
			else
				_tmp.MaDonViSource = MakeCopyOf(this.MaDonViSource, existingCopies) as DonViTinh;
			if (this.MaLoaiKhoiLuongSource != null && existingCopies.Contains(this.MaLoaiKhoiLuongSource))
				_tmp.MaLoaiKhoiLuongSource = existingCopies[this.MaLoaiKhoiLuongSource] as LoaiKhoiLuong;
			else
				_tmp.MaLoaiKhoiLuongSource = MakeCopyOf(this.MaLoaiKhoiLuongSource, existingCopies) as LoaiKhoiLuong;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.KhoiLuongCacCongViecKhacCollection = (TList<KhoiLuongCacCongViecKhac>) MakeCopyOf(this.KhoiLuongCacCongViecKhacCollection, existingCopies); 
			_tmp.KhoanQuyDoiCollection = (TList<KhoanQuyDoi>) MakeCopyOf(this.KhoanQuyDoiCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuyDoiGioChuanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(QuyDoiGioChuanColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuyDoiGioChuanColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(QuyDoiGioChuanColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuyDoiGioChuanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(QuyDoiGioChuanColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				QuyDoiGioChuanEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new QuyDoiGioChuanEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuyDoiGioChuanColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(QuyDoiGioChuanColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				QuyDoiGioChuanEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new QuyDoiGioChuanEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region QuyDoiGioChuanEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="QuyDoiGioChuan"/> object.
	/// </remarks>
	public class QuyDoiGioChuanEventArgs : System.EventArgs
	{
		private QuyDoiGioChuanColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the QuyDoiGioChuanEventArgs class.
		///</summary>
		public QuyDoiGioChuanEventArgs(QuyDoiGioChuanColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the QuyDoiGioChuanEventArgs class.
		///</summary>
		public QuyDoiGioChuanEventArgs(QuyDoiGioChuanColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The QuyDoiGioChuanColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="QuyDoiGioChuanColumn" />
		public QuyDoiGioChuanColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all QuyDoiGioChuan related events.
	///</summary>
	public delegate void QuyDoiGioChuanEventHandler(object sender, QuyDoiGioChuanEventArgs e);
	
	#region QuyDoiGioChuanComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class QuyDoiGioChuanComparer : System.Collections.Generic.IComparer<QuyDoiGioChuan>
	{
		QuyDoiGioChuanColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:QuyDoiGioChuanComparer"/> class.
        /// </summary>
		public QuyDoiGioChuanComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:QuyDoiGioChuanComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public QuyDoiGioChuanComparer(QuyDoiGioChuanColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="QuyDoiGioChuan"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="QuyDoiGioChuan"/> to compare.</param>
        /// <param name="b">The second <c>QuyDoiGioChuan</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(QuyDoiGioChuan a, QuyDoiGioChuan b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(QuyDoiGioChuan entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(QuyDoiGioChuan a, QuyDoiGioChuan b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public QuyDoiGioChuanColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region QuyDoiGioChuanKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="QuyDoiGioChuan"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class QuyDoiGioChuanKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanKey class.
		/// </summary>
		public QuyDoiGioChuanKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanKey class.
		/// </summary>
		public QuyDoiGioChuanKey(QuyDoiGioChuanBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaQuyDoi = entity.MaQuyDoi;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanKey class.
		/// </summary>
		public QuyDoiGioChuanKey(System.Int32 _maQuyDoi)
		{
			#region Init Properties

			this.MaQuyDoi = _maQuyDoi;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private QuyDoiGioChuanBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public QuyDoiGioChuanBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaQuyDoi property
		private System.Int32 _maQuyDoi;
		
		/// <summary>
		/// Gets or sets the MaQuyDoi property.
		/// </summary>
		public System.Int32 MaQuyDoi
		{
			get { return _maQuyDoi; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaQuyDoi = value;
				
				_maQuyDoi = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaQuyDoi = ( values["MaQuyDoi"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaQuyDoi"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaQuyDoi", MaQuyDoi);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaQuyDoi: {0}{1}",
								MaQuyDoi,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region QuyDoiGioChuanColumn Enum
	
	/// <summary>
	/// Enumerate the QuyDoiGioChuan columns.
	/// </summary>
	[Serializable]
	public enum QuyDoiGioChuanColumn : int
	{
		/// <summary>
		/// MaQuyDoi : 
		/// </summary>
		[EnumTextValue("Ma Quy Doi")]
		[ColumnEnum("MaQuyDoi", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaQuyDoi = 1,
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		[EnumTextValue("Ma Don Vi")]
		[ColumnEnum("MaDonVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaDonVi = 2,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Quan Ly")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaQuanLy = 3,
		/// <summary>
		/// TenQuyDoi : 
		/// </summary>
		[EnumTextValue("Ten Quy Doi")]
		[ColumnEnum("TenQuyDoi", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TenQuyDoi = 4,
		/// <summary>
		/// SoLuong : 
		/// </summary>
		[EnumTextValue("So Luong")]
		[ColumnEnum("SoLuong", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuong = 5,
		/// <summary>
		/// HeSo : 
		/// </summary>
		[EnumTextValue("He So")]
		[ColumnEnum("HeSo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSo = 6,
		/// <summary>
		/// CongDon : 
		/// </summary>
		[EnumTextValue("Cong Don")]
		[ColumnEnum("CongDon", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CongDon = 7,
		/// <summary>
		/// LoaiQuyDoi : 
		/// </summary>
		[EnumTextValue("Loai Quy Doi")]
		[ColumnEnum("LoaiQuyDoi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LoaiQuyDoi = 8,
		/// <summary>
		/// ThuTu : 
		/// </summary>
		[EnumTextValue("Thu Tu")]
		[ColumnEnum("ThuTu", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ThuTu = 9,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 10,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 11,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		NgayCapNhat = 12,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 13,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		GhiChu = 14,
		/// <summary>
		/// MaLoaiKhoiLuong : 
		/// </summary>
		[EnumTextValue("Ma Loai Khoi Luong")]
		[ColumnEnum("MaLoaiKhoiLuong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaLoaiKhoiLuong = 15,
		/// <summary>
		/// CoSuDungHeSoChucDanh : 
		/// </summary>
		[EnumTextValue("Co Su Dung He So Chuc Danh")]
		[ColumnEnum("CoSuDungHeSoChucDanh", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CoSuDungHeSoChucDanh = 16,
		/// <summary>
		/// NhomMonHoc : 
		/// </summary>
		[EnumTextValue("Nhom Mon Hoc")]
		[ColumnEnum("NhomMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		NhomMonHoc = 17,
		/// <summary>
		/// KhoaNhapLieu : 
		/// </summary>
		[EnumTextValue("Khoa Nhap Lieu")]
		[ColumnEnum("KhoaNhapLieu", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		KhoaNhapLieu = 18,
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Bac Dao Tao")]
		[ColumnEnum("MaBacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaBacDaoTao = 19,
		/// <summary>
		/// MaLoaiHinh : 
		/// </summary>
		[EnumTextValue("Ma Loai Hinh")]
		[ColumnEnum("MaLoaiHinh", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaLoaiHinh = 20
	}//End enum

	#endregion QuyDoiGioChuanColumn Enum

} // end namespace
