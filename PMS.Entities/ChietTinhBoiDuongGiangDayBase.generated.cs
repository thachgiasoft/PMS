
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ChietTinhBoiDuongGiangDay.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ChietTinhBoiDuongGiangDay' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ChietTinhBoiDuongGiangDayBase : EntityBase, IChietTinhBoiDuongGiangDay, IEntityId<ChietTinhBoiDuongGiangDayKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ChietTinhBoiDuongGiangDayEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ChietTinhBoiDuongGiangDayEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ChietTinhBoiDuongGiangDayEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ChietTinhBoiDuongGiangDay> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ChietTinhBoiDuongGiangDayEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ChietTinhBoiDuongGiangDayEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ChietTinhBoiDuongGiangDayBase"/> instance.
		///</summary>
		public ChietTinhBoiDuongGiangDayBase()
		{
			this.entityData = new ChietTinhBoiDuongGiangDayEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ChietTinhBoiDuongGiangDayBase"/> instance.
		///</summary>
		///<param name="_maQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_maPhong"></param>
		///<param name="_tenPhong"></param>
		///<param name="_maCoSo"></param>
		///<param name="_tenCoSo"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTiet"></param>
		///<param name="_siSoLop"></param>
		///<param name="_heSoLd"></param>
		///<param name="_heSoTinChi"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_tienThem"></param>
		///<param name="_tongCong"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maLopSinhVien"></param>
		///<param name="_tenLopSinhVien"></param>
		///<param name="_hoanTat"></param>
		///<param name="_soLanDiLai"></param>
		///<param name="_soNgayLuuTru"></param>
		///<param name="_chiPhiLuuTru"></param>
		///<param name="_chiPhiDiLai"></param>
		///<param name="_soDeThiDapAn"></param>
		public ChietTinhBoiDuongGiangDayBase(System.String _maQuanLy, System.String _hoTen, 
			System.String _maLopHocPhan, System.String _tenLopHocPhan, System.String _maPhong, 
			System.String _tenPhong, System.String _maCoSo, System.String _tenCoSo, 
			System.String _maMonHoc, System.String _tenMonHoc, System.Int32? _soTiet, 
			System.Int32? _siSoLop, System.Decimal? _heSoLd, System.Decimal _heSoTinChi, 
			System.Decimal? _tietQuyDoi, System.Decimal _donGia, System.Decimal _tienThem, 
			System.Decimal? _tongCong, System.String _namHoc, System.String _hocKy, 
			System.String _maLopSinhVien, System.String _tenLopSinhVien, System.Boolean? _hoanTat, 
			System.Int32? _soLanDiLai, System.Int32? _soNgayLuuTru, System.Decimal? _chiPhiLuuTru, 
			System.Decimal? _chiPhiDiLai, System.Int32? _soDeThiDapAn)
		{
			this.entityData = new ChietTinhBoiDuongGiangDayEntityData();
			this.backupData = null;

			this.MaQuanLy = _maQuanLy;
			this.HoTen = _hoTen;
			this.MaLopHocPhan = _maLopHocPhan;
			this.TenLopHocPhan = _tenLopHocPhan;
			this.MaPhong = _maPhong;
			this.TenPhong = _tenPhong;
			this.MaCoSo = _maCoSo;
			this.TenCoSo = _tenCoSo;
			this.MaMonHoc = _maMonHoc;
			this.TenMonHoc = _tenMonHoc;
			this.SoTiet = _soTiet;
			this.SiSoLop = _siSoLop;
			this.HeSoLd = _heSoLd;
			this.HeSoTinChi = _heSoTinChi;
			this.TietQuyDoi = _tietQuyDoi;
			this.DonGia = _donGia;
			this.TienThem = _tienThem;
			this.TongCong = _tongCong;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaLopSinhVien = _maLopSinhVien;
			this.TenLopSinhVien = _tenLopSinhVien;
			this.HoanTat = _hoanTat;
			this.SoLanDiLai = _soLanDiLai;
			this.SoNgayLuuTru = _soNgayLuuTru;
			this.ChiPhiLuuTru = _chiPhiLuuTru;
			this.ChiPhiDiLai = _chiPhiDiLai;
			this.SoDeThiDapAn = _soDeThiDapAn;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ChietTinhBoiDuongGiangDay"/> instance.
		///</summary>
		///<param name="_maQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_maPhong"></param>
		///<param name="_tenPhong"></param>
		///<param name="_maCoSo"></param>
		///<param name="_tenCoSo"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_soTiet"></param>
		///<param name="_siSoLop"></param>
		///<param name="_heSoLd"></param>
		///<param name="_heSoTinChi"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_tienThem"></param>
		///<param name="_tongCong"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maLopSinhVien"></param>
		///<param name="_tenLopSinhVien"></param>
		///<param name="_hoanTat"></param>
		///<param name="_soLanDiLai"></param>
		///<param name="_soNgayLuuTru"></param>
		///<param name="_chiPhiLuuTru"></param>
		///<param name="_chiPhiDiLai"></param>
		///<param name="_soDeThiDapAn"></param>
		public static ChietTinhBoiDuongGiangDay CreateChietTinhBoiDuongGiangDay(System.String _maQuanLy, System.String _hoTen, 
			System.String _maLopHocPhan, System.String _tenLopHocPhan, System.String _maPhong, 
			System.String _tenPhong, System.String _maCoSo, System.String _tenCoSo, 
			System.String _maMonHoc, System.String _tenMonHoc, System.Int32? _soTiet, 
			System.Int32? _siSoLop, System.Decimal? _heSoLd, System.Decimal _heSoTinChi, 
			System.Decimal? _tietQuyDoi, System.Decimal _donGia, System.Decimal _tienThem, 
			System.Decimal? _tongCong, System.String _namHoc, System.String _hocKy, 
			System.String _maLopSinhVien, System.String _tenLopSinhVien, System.Boolean? _hoanTat, 
			System.Int32? _soLanDiLai, System.Int32? _soNgayLuuTru, System.Decimal? _chiPhiLuuTru, 
			System.Decimal? _chiPhiDiLai, System.Int32? _soDeThiDapAn)
		{
			ChietTinhBoiDuongGiangDay newChietTinhBoiDuongGiangDay = new ChietTinhBoiDuongGiangDay();
			newChietTinhBoiDuongGiangDay.MaQuanLy = _maQuanLy;
			newChietTinhBoiDuongGiangDay.HoTen = _hoTen;
			newChietTinhBoiDuongGiangDay.MaLopHocPhan = _maLopHocPhan;
			newChietTinhBoiDuongGiangDay.TenLopHocPhan = _tenLopHocPhan;
			newChietTinhBoiDuongGiangDay.MaPhong = _maPhong;
			newChietTinhBoiDuongGiangDay.TenPhong = _tenPhong;
			newChietTinhBoiDuongGiangDay.MaCoSo = _maCoSo;
			newChietTinhBoiDuongGiangDay.TenCoSo = _tenCoSo;
			newChietTinhBoiDuongGiangDay.MaMonHoc = _maMonHoc;
			newChietTinhBoiDuongGiangDay.TenMonHoc = _tenMonHoc;
			newChietTinhBoiDuongGiangDay.SoTiet = _soTiet;
			newChietTinhBoiDuongGiangDay.SiSoLop = _siSoLop;
			newChietTinhBoiDuongGiangDay.HeSoLd = _heSoLd;
			newChietTinhBoiDuongGiangDay.HeSoTinChi = _heSoTinChi;
			newChietTinhBoiDuongGiangDay.TietQuyDoi = _tietQuyDoi;
			newChietTinhBoiDuongGiangDay.DonGia = _donGia;
			newChietTinhBoiDuongGiangDay.TienThem = _tienThem;
			newChietTinhBoiDuongGiangDay.TongCong = _tongCong;
			newChietTinhBoiDuongGiangDay.NamHoc = _namHoc;
			newChietTinhBoiDuongGiangDay.HocKy = _hocKy;
			newChietTinhBoiDuongGiangDay.MaLopSinhVien = _maLopSinhVien;
			newChietTinhBoiDuongGiangDay.TenLopSinhVien = _tenLopSinhVien;
			newChietTinhBoiDuongGiangDay.HoanTat = _hoanTat;
			newChietTinhBoiDuongGiangDay.SoLanDiLai = _soLanDiLai;
			newChietTinhBoiDuongGiangDay.SoNgayLuuTru = _soNgayLuuTru;
			newChietTinhBoiDuongGiangDay.ChiPhiLuuTru = _chiPhiLuuTru;
			newChietTinhBoiDuongGiangDay.ChiPhiDiLai = _chiPhiDiLai;
			newChietTinhBoiDuongGiangDay.SoDeThiDapAn = _soDeThiDapAn;
			return newChietTinhBoiDuongGiangDay;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this.entityData.MaQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaQuanLy == value)
					return;
				
                OnPropertyChanging("MaQuanLy");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.MaQuanLy, this.entityData.MaQuanLy);
				this.entityData.MaQuanLy = value;
				this.EntityId.MaQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.MaQuanLy, this.entityData.MaQuanLy);
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaQuanLy property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaQuanLy property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMaQuanLy
		{
			get { return this.entityData.OriginalMaQuanLy; }
			set { this.entityData.OriginalMaQuanLy = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 152)]
		public virtual System.String HoTen
		{
			get
			{
				return this.entityData.HoTen; 
			}
			
			set
			{
				if (this.entityData.HoTen == value)
					return;
				
                OnPropertyChanging("HoTen");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.HoTen, this.entityData.HoTen);
				this.entityData.HoTen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.HoTen, this.entityData.HoTen);
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 30)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				this.EntityId.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaLopHocPhan property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaLopHocPhan property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMaLopHocPhan
		{
			get { return this.entityData.OriginalMaLopHocPhan; }
			set { this.entityData.OriginalMaLopHocPhan = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the TenLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String TenLopHocPhan
		{
			get
			{
				return this.entityData.TenLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.TenLopHocPhan == value)
					return;
				
                OnPropertyChanging("TenLopHocPhan");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.TenLopHocPhan, this.entityData.TenLopHocPhan);
				this.entityData.TenLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.TenLopHocPhan, this.entityData.TenLopHocPhan);
				OnPropertyChanged("TenLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaPhong property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaPhong
		{
			get
			{
				return this.entityData.MaPhong; 
			}
			
			set
			{
				if (this.entityData.MaPhong == value)
					return;
				
                OnPropertyChanging("MaPhong");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.MaPhong, this.entityData.MaPhong);
				this.entityData.MaPhong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.MaPhong, this.entityData.MaPhong);
				OnPropertyChanged("MaPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenPhong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TenPhong
		{
			get
			{
				return this.entityData.TenPhong; 
			}
			
			set
			{
				if (this.entityData.TenPhong == value)
					return;
				
                OnPropertyChanging("TenPhong");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.TenPhong, this.entityData.TenPhong);
				this.entityData.TenPhong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.TenPhong, this.entityData.TenPhong);
				OnPropertyChanged("TenPhong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaCoSo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaCoSo
		{
			get
			{
				return this.entityData.MaCoSo; 
			}
			
			set
			{
				if (this.entityData.MaCoSo == value)
					return;
				
                OnPropertyChanging("MaCoSo");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.MaCoSo, this.entityData.MaCoSo);
				this.entityData.MaCoSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.MaCoSo, this.entityData.MaCoSo);
				OnPropertyChanged("MaCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenCoSo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TenCoSo
		{
			get
			{
				return this.entityData.TenCoSo; 
			}
			
			set
			{
				if (this.entityData.TenCoSo == value)
					return;
				
                OnPropertyChanging("TenCoSo");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.TenCoSo, this.entityData.TenCoSo);
				this.entityData.TenCoSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.TenCoSo, this.entityData.TenCoSo);
				OnPropertyChanged("TenCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this.entityData.TenMonHoc; 
			}
			
			set
			{
				if (this.entityData.TenMonHoc == value)
					return;
				
                OnPropertyChanging("TenMonHoc");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.TenMonHoc, this.entityData.TenMonHoc);
				this.entityData.TenMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.TenMonHoc, this.entityData.TenMonHoc);
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoTiet
		{
			get
			{
				return this.entityData.SoTiet; 
			}
			
			set
			{
				if (this.entityData.SoTiet == value)
					return;
				
                OnPropertyChanging("SoTiet");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.SoTiet, this.entityData.SoTiet);
				this.entityData.SoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.SoTiet, this.entityData.SoTiet);
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiSoLop property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiSoLop
		{
			get
			{
				return this.entityData.SiSoLop; 
			}
			
			set
			{
				if (this.entityData.SiSoLop == value)
					return;
				
                OnPropertyChanging("SiSoLop");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.SiSoLop, this.entityData.SiSoLop);
				this.entityData.SiSoLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.SiSoLop, this.entityData.SiSoLop);
				OnPropertyChanged("SiSoLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoLd property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoLd
		{
			get
			{
				return this.entityData.HeSoLd; 
			}
			
			set
			{
				if (this.entityData.HeSoLd == value)
					return;
				
                OnPropertyChanging("HeSoLd");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.HeSoLd, this.entityData.HeSoLd);
				this.entityData.HeSoLd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.HeSoLd, this.entityData.HeSoLd);
				OnPropertyChanged("HeSoLd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoTinChi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal HeSoTinChi
		{
			get
			{
				return this.entityData.HeSoTinChi; 
			}
			
			set
			{
				if (this.entityData.HeSoTinChi == value)
					return;
				
                OnPropertyChanging("HeSoTinChi");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.HeSoTinChi, this.entityData.HeSoTinChi);
				this.entityData.HeSoTinChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.HeSoTinChi, this.entityData.HeSoTinChi);
				OnPropertyChanged("HeSoTinChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietQuyDoi
		{
			get
			{
				return this.entityData.TietQuyDoi; 
			}
			
			set
			{
				if (this.entityData.TietQuyDoi == value)
					return;
				
                OnPropertyChanging("TietQuyDoi");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				this.entityData.TietQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				OnPropertyChanged("TietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DonGia
		{
			get
			{
				return this.entityData.DonGia; 
			}
			
			set
			{
				if (this.entityData.DonGia == value)
					return;
				
                OnPropertyChanging("DonGia");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.DonGia, this.entityData.DonGia);
				this.entityData.DonGia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.DonGia, this.entityData.DonGia);
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TienThem property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TienThem
		{
			get
			{
				return this.entityData.TienThem; 
			}
			
			set
			{
				if (this.entityData.TienThem == value)
					return;
				
                OnPropertyChanging("TienThem");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.TienThem, this.entityData.TienThem);
				this.entityData.TienThem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.TienThem, this.entityData.TienThem);
				OnPropertyChanged("TienThem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongCong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongCong
		{
			get
			{
				return this.entityData.TongCong; 
			}
			
			set
			{
				if (this.entityData.TongCong == value)
					return;
				
                OnPropertyChanging("TongCong");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.TongCong, this.entityData.TongCong);
				this.entityData.TongCong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.TongCong, this.entityData.TongCong);
				OnPropertyChanged("TongCong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopSinhVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String MaLopSinhVien
		{
			get
			{
				return this.entityData.MaLopSinhVien; 
			}
			
			set
			{
				if (this.entityData.MaLopSinhVien == value)
					return;
				
                OnPropertyChanging("MaLopSinhVien");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.MaLopSinhVien, this.entityData.MaLopSinhVien);
				this.entityData.MaLopSinhVien = value;
				this.EntityId.MaLopSinhVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.MaLopSinhVien, this.entityData.MaLopSinhVien);
				OnPropertyChanged("MaLopSinhVien");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaLopSinhVien property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaLopSinhVien property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMaLopSinhVien
		{
			get { return this.entityData.OriginalMaLopSinhVien; }
			set { this.entityData.OriginalMaLopSinhVien = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the TenLopSinhVien property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String TenLopSinhVien
		{
			get
			{
				return this.entityData.TenLopSinhVien; 
			}
			
			set
			{
				if (this.entityData.TenLopSinhVien == value)
					return;
				
                OnPropertyChanging("TenLopSinhVien");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.TenLopSinhVien, this.entityData.TenLopSinhVien);
				this.entityData.TenLopSinhVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.TenLopSinhVien, this.entityData.TenLopSinhVien);
				OnPropertyChanged("TenLopSinhVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HoanTat property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? HoanTat
		{
			get
			{
				return this.entityData.HoanTat; 
			}
			
			set
			{
				if (this.entityData.HoanTat == value)
					return;
				
                OnPropertyChanging("HoanTat");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.HoanTat, this.entityData.HoanTat);
				this.entityData.HoanTat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.HoanTat, this.entityData.HoanTat);
				OnPropertyChanged("HoanTat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoLanDiLai property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoLanDiLai
		{
			get
			{
				return this.entityData.SoLanDiLai; 
			}
			
			set
			{
				if (this.entityData.SoLanDiLai == value)
					return;
				
                OnPropertyChanging("SoLanDiLai");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.SoLanDiLai, this.entityData.SoLanDiLai);
				this.entityData.SoLanDiLai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.SoLanDiLai, this.entityData.SoLanDiLai);
				OnPropertyChanged("SoLanDiLai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoNgayLuuTru property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoNgayLuuTru
		{
			get
			{
				return this.entityData.SoNgayLuuTru; 
			}
			
			set
			{
				if (this.entityData.SoNgayLuuTru == value)
					return;
				
                OnPropertyChanging("SoNgayLuuTru");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.SoNgayLuuTru, this.entityData.SoNgayLuuTru);
				this.entityData.SoNgayLuuTru = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.SoNgayLuuTru, this.entityData.SoNgayLuuTru);
				OnPropertyChanged("SoNgayLuuTru");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChiPhiLuuTru property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ChiPhiLuuTru
		{
			get
			{
				return this.entityData.ChiPhiLuuTru; 
			}
			
			set
			{
				if (this.entityData.ChiPhiLuuTru == value)
					return;
				
                OnPropertyChanging("ChiPhiLuuTru");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.ChiPhiLuuTru, this.entityData.ChiPhiLuuTru);
				this.entityData.ChiPhiLuuTru = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.ChiPhiLuuTru, this.entityData.ChiPhiLuuTru);
				OnPropertyChanged("ChiPhiLuuTru");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChiPhiDiLai property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ChiPhiDiLai
		{
			get
			{
				return this.entityData.ChiPhiDiLai; 
			}
			
			set
			{
				if (this.entityData.ChiPhiDiLai == value)
					return;
				
                OnPropertyChanging("ChiPhiDiLai");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.ChiPhiDiLai, this.entityData.ChiPhiDiLai);
				this.entityData.ChiPhiDiLai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.ChiPhiDiLai, this.entityData.ChiPhiDiLai);
				OnPropertyChanged("ChiPhiDiLai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoDeThiDapAn property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoDeThiDapAn
		{
			get
			{
				return this.entityData.SoDeThiDapAn; 
			}
			
			set
			{
				if (this.entityData.SoDeThiDapAn == value)
					return;
				
                OnPropertyChanging("SoDeThiDapAn");                    
				OnColumnChanging(ChietTinhBoiDuongGiangDayColumn.SoDeThiDapAn, this.entityData.SoDeThiDapAn);
				this.entityData.SoDeThiDapAn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ChietTinhBoiDuongGiangDayColumn.SoDeThiDapAn, this.entityData.SoDeThiDapAn);
				OnPropertyChanged("SoDeThiDapAn");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaQuanLy", "Ma Quan Ly"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaQuanLy", "Ma Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HoTen", "Ho Ten", 152));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenLopHocPhan", "Ten Lop Hoc Phan", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaPhong", "Ma Phong", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenPhong", "Ten Phong", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaCoSo", "Ma Co So", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenCoSo", "Ten Co So", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaMonHoc", "Ma Mon Hoc"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TenMonHoc", "Ten Mon Hoc"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenMonHoc", "Ten Mon Hoc", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("NamHoc", "Nam Hoc"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("HocKy", "Hoc Ky"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaLopSinhVien", "Ma Lop Sinh Vien"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopSinhVien", "Ma Lop Sinh Vien", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TenLopSinhVien", "Ten Lop Sinh Vien"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenLopSinhVien", "Ten Lop Sinh Vien", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ChietTinhBoiDuongGiangDay"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaQuanLy", "HoTen", "MaLopHocPhan", "TenLopHocPhan", "MaPhong", "TenPhong", "MaCoSo", "TenCoSo", "MaMonHoc", "TenMonHoc", "SoTiet", "SiSoLop", "HeSoLD", "HeSoTinChi", "TietQuyDoi", "DonGia", "TienThem", "TongCong", "NamHoc", "HocKy", "MaLopSinhVien", "TenLopSinhVien", "HoanTat", "SoLanDiLai", "SoNgayLuuTru", "ChiPhiLuuTru", "ChiPhiDiLai", "SoDeThiDapAn"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ChietTinhBoiDuongGiangDayEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ChietTinhBoiDuongGiangDay) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ChietTinhBoiDuongGiangDay>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ChietTinhBoiDuongGiangDay);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ChietTinhBoiDuongGiangDay Entity 
		///</summary>
		protected virtual ChietTinhBoiDuongGiangDay Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ChietTinhBoiDuongGiangDay copy = new ChietTinhBoiDuongGiangDay();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaQuanLy = this.MaQuanLy;
					copy.OriginalMaQuanLy = this.OriginalMaQuanLy;
				copy.HoTen = this.HoTen;
				copy.MaLopHocPhan = this.MaLopHocPhan;
					copy.OriginalMaLopHocPhan = this.OriginalMaLopHocPhan;
				copy.TenLopHocPhan = this.TenLopHocPhan;
				copy.MaPhong = this.MaPhong;
				copy.TenPhong = this.TenPhong;
				copy.MaCoSo = this.MaCoSo;
				copy.TenCoSo = this.TenCoSo;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.SoTiet = this.SoTiet;
				copy.SiSoLop = this.SiSoLop;
				copy.HeSoLd = this.HeSoLd;
				copy.HeSoTinChi = this.HeSoTinChi;
				copy.TietQuyDoi = this.TietQuyDoi;
				copy.DonGia = this.DonGia;
				copy.TienThem = this.TienThem;
				copy.TongCong = this.TongCong;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaLopSinhVien = this.MaLopSinhVien;
					copy.OriginalMaLopSinhVien = this.OriginalMaLopSinhVien;
				copy.TenLopSinhVien = this.TenLopSinhVien;
				copy.HoanTat = this.HoanTat;
				copy.SoLanDiLai = this.SoLanDiLai;
				copy.SoNgayLuuTru = this.SoNgayLuuTru;
				copy.ChiPhiLuuTru = this.ChiPhiLuuTru;
				copy.ChiPhiDiLai = this.ChiPhiDiLai;
				copy.SoDeThiDapAn = this.SoDeThiDapAn;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ChietTinhBoiDuongGiangDay Entity 
		///</summary>
		public virtual ChietTinhBoiDuongGiangDay Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ChietTinhBoiDuongGiangDay Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ChietTinhBoiDuongGiangDay DeepCopy()
		{
			return EntityHelper.Clone<ChietTinhBoiDuongGiangDay>(this as ChietTinhBoiDuongGiangDay);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ChietTinhBoiDuongGiangDayEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ChietTinhBoiDuongGiangDayEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ChietTinhBoiDuongGiangDayEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ChietTinhBoiDuongGiangDayColumn column)
		{
			switch(column)
			{
					case ChietTinhBoiDuongGiangDayColumn.MaQuanLy:
					return entityData.MaQuanLy != _originalData.MaQuanLy;
					case ChietTinhBoiDuongGiangDayColumn.HoTen:
					return entityData.HoTen != _originalData.HoTen;
					case ChietTinhBoiDuongGiangDayColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case ChietTinhBoiDuongGiangDayColumn.TenLopHocPhan:
					return entityData.TenLopHocPhan != _originalData.TenLopHocPhan;
					case ChietTinhBoiDuongGiangDayColumn.MaPhong:
					return entityData.MaPhong != _originalData.MaPhong;
					case ChietTinhBoiDuongGiangDayColumn.TenPhong:
					return entityData.TenPhong != _originalData.TenPhong;
					case ChietTinhBoiDuongGiangDayColumn.MaCoSo:
					return entityData.MaCoSo != _originalData.MaCoSo;
					case ChietTinhBoiDuongGiangDayColumn.TenCoSo:
					return entityData.TenCoSo != _originalData.TenCoSo;
					case ChietTinhBoiDuongGiangDayColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case ChietTinhBoiDuongGiangDayColumn.TenMonHoc:
					return entityData.TenMonHoc != _originalData.TenMonHoc;
					case ChietTinhBoiDuongGiangDayColumn.SoTiet:
					return entityData.SoTiet != _originalData.SoTiet;
					case ChietTinhBoiDuongGiangDayColumn.SiSoLop:
					return entityData.SiSoLop != _originalData.SiSoLop;
					case ChietTinhBoiDuongGiangDayColumn.HeSoLd:
					return entityData.HeSoLd != _originalData.HeSoLd;
					case ChietTinhBoiDuongGiangDayColumn.HeSoTinChi:
					return entityData.HeSoTinChi != _originalData.HeSoTinChi;
					case ChietTinhBoiDuongGiangDayColumn.TietQuyDoi:
					return entityData.TietQuyDoi != _originalData.TietQuyDoi;
					case ChietTinhBoiDuongGiangDayColumn.DonGia:
					return entityData.DonGia != _originalData.DonGia;
					case ChietTinhBoiDuongGiangDayColumn.TienThem:
					return entityData.TienThem != _originalData.TienThem;
					case ChietTinhBoiDuongGiangDayColumn.TongCong:
					return entityData.TongCong != _originalData.TongCong;
					case ChietTinhBoiDuongGiangDayColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case ChietTinhBoiDuongGiangDayColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case ChietTinhBoiDuongGiangDayColumn.MaLopSinhVien:
					return entityData.MaLopSinhVien != _originalData.MaLopSinhVien;
					case ChietTinhBoiDuongGiangDayColumn.TenLopSinhVien:
					return entityData.TenLopSinhVien != _originalData.TenLopSinhVien;
					case ChietTinhBoiDuongGiangDayColumn.HoanTat:
					return entityData.HoanTat != _originalData.HoanTat;
					case ChietTinhBoiDuongGiangDayColumn.SoLanDiLai:
					return entityData.SoLanDiLai != _originalData.SoLanDiLai;
					case ChietTinhBoiDuongGiangDayColumn.SoNgayLuuTru:
					return entityData.SoNgayLuuTru != _originalData.SoNgayLuuTru;
					case ChietTinhBoiDuongGiangDayColumn.ChiPhiLuuTru:
					return entityData.ChiPhiLuuTru != _originalData.ChiPhiLuuTru;
					case ChietTinhBoiDuongGiangDayColumn.ChiPhiDiLai:
					return entityData.ChiPhiDiLai != _originalData.ChiPhiDiLai;
					case ChietTinhBoiDuongGiangDayColumn.SoDeThiDapAn:
					return entityData.SoDeThiDapAn != _originalData.SoDeThiDapAn;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ChietTinhBoiDuongGiangDayColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaQuanLy != _originalData.MaQuanLy;
			result = result || entityData.HoTen != _originalData.HoTen;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.TenLopHocPhan != _originalData.TenLopHocPhan;
			result = result || entityData.MaPhong != _originalData.MaPhong;
			result = result || entityData.TenPhong != _originalData.TenPhong;
			result = result || entityData.MaCoSo != _originalData.MaCoSo;
			result = result || entityData.TenCoSo != _originalData.TenCoSo;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.TenMonHoc != _originalData.TenMonHoc;
			result = result || entityData.SoTiet != _originalData.SoTiet;
			result = result || entityData.SiSoLop != _originalData.SiSoLop;
			result = result || entityData.HeSoLd != _originalData.HeSoLd;
			result = result || entityData.HeSoTinChi != _originalData.HeSoTinChi;
			result = result || entityData.TietQuyDoi != _originalData.TietQuyDoi;
			result = result || entityData.DonGia != _originalData.DonGia;
			result = result || entityData.TienThem != _originalData.TienThem;
			result = result || entityData.TongCong != _originalData.TongCong;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaLopSinhVien != _originalData.MaLopSinhVien;
			result = result || entityData.TenLopSinhVien != _originalData.TenLopSinhVien;
			result = result || entityData.HoanTat != _originalData.HoanTat;
			result = result || entityData.SoLanDiLai != _originalData.SoLanDiLai;
			result = result || entityData.SoNgayLuuTru != _originalData.SoNgayLuuTru;
			result = result || entityData.ChiPhiLuuTru != _originalData.ChiPhiLuuTru;
			result = result || entityData.ChiPhiDiLai != _originalData.ChiPhiDiLai;
			result = result || entityData.SoDeThiDapAn != _originalData.SoDeThiDapAn;
			return result;
		}	
		
		///<summary>
		///  Returns a ChietTinhBoiDuongGiangDay Entity with the original data.
		///</summary>
		public ChietTinhBoiDuongGiangDay GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateChietTinhBoiDuongGiangDay(
				_originalData.MaQuanLy,
				_originalData.HoTen,
				_originalData.MaLopHocPhan,
				_originalData.TenLopHocPhan,
				_originalData.MaPhong,
				_originalData.TenPhong,
				_originalData.MaCoSo,
				_originalData.TenCoSo,
				_originalData.MaMonHoc,
				_originalData.TenMonHoc,
				_originalData.SoTiet,
				_originalData.SiSoLop,
				_originalData.HeSoLd,
				_originalData.HeSoTinChi,
				_originalData.TietQuyDoi,
				_originalData.DonGia,
				_originalData.TienThem,
				_originalData.TongCong,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaLopSinhVien,
				_originalData.TenLopSinhVien,
				_originalData.HoanTat,
				_originalData.SoLanDiLai,
				_originalData.SoNgayLuuTru,
				_originalData.ChiPhiLuuTru,
				_originalData.ChiPhiDiLai,
				_originalData.SoDeThiDapAn
				);
				
			return (ChietTinhBoiDuongGiangDay)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ChietTinhBoiDuongGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ChietTinhBoiDuongGiangDayBase)
				return ValueEquals(this, (ChietTinhBoiDuongGiangDayBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ChietTinhBoiDuongGiangDayBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaQuanLy.GetHashCode() ^ 
					((this.HoTen == null) ? string.Empty : this.HoTen.ToString()).GetHashCode() ^ 
					this.MaLopHocPhan.GetHashCode() ^ 
					((this.TenLopHocPhan == null) ? string.Empty : this.TenLopHocPhan.ToString()).GetHashCode() ^ 
					((this.MaPhong == null) ? string.Empty : this.MaPhong.ToString()).GetHashCode() ^ 
					((this.TenPhong == null) ? string.Empty : this.TenPhong.ToString()).GetHashCode() ^ 
					((this.MaCoSo == null) ? string.Empty : this.MaCoSo.ToString()).GetHashCode() ^ 
					((this.TenCoSo == null) ? string.Empty : this.TenCoSo.ToString()).GetHashCode() ^ 
					this.MaMonHoc.GetHashCode() ^ 
					this.TenMonHoc.GetHashCode() ^ 
					((this.SoTiet == null) ? string.Empty : this.SoTiet.ToString()).GetHashCode() ^ 
					((this.SiSoLop == null) ? string.Empty : this.SiSoLop.ToString()).GetHashCode() ^ 
					((this.HeSoLd == null) ? string.Empty : this.HeSoLd.ToString()).GetHashCode() ^ 
					this.HeSoTinChi.GetHashCode() ^ 
					((this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString()).GetHashCode() ^ 
					this.DonGia.GetHashCode() ^ 
					this.TienThem.GetHashCode() ^ 
					((this.TongCong == null) ? string.Empty : this.TongCong.ToString()).GetHashCode() ^ 
					this.NamHoc.GetHashCode() ^ 
					this.HocKy.GetHashCode() ^ 
					this.MaLopSinhVien.GetHashCode() ^ 
					this.TenLopSinhVien.GetHashCode() ^ 
					((this.HoanTat == null) ? string.Empty : this.HoanTat.ToString()).GetHashCode() ^ 
					((this.SoLanDiLai == null) ? string.Empty : this.SoLanDiLai.ToString()).GetHashCode() ^ 
					((this.SoNgayLuuTru == null) ? string.Empty : this.SoNgayLuuTru.ToString()).GetHashCode() ^ 
					((this.ChiPhiLuuTru == null) ? string.Empty : this.ChiPhiLuuTru.ToString()).GetHashCode() ^ 
					((this.ChiPhiDiLai == null) ? string.Empty : this.ChiPhiDiLai.ToString()).GetHashCode() ^ 
					((this.SoDeThiDapAn == null) ? string.Empty : this.SoDeThiDapAn.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ChietTinhBoiDuongGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ChietTinhBoiDuongGiangDayBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ChietTinhBoiDuongGiangDayBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ChietTinhBoiDuongGiangDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ChietTinhBoiDuongGiangDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ChietTinhBoiDuongGiangDayBase Object1, ChietTinhBoiDuongGiangDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if ( Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object2.HoTen == null )
			{
				equal = false;
			}
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if ( Object1.TenLopHocPhan != null && Object2.TenLopHocPhan != null )
			{
				if (Object1.TenLopHocPhan != Object2.TenLopHocPhan)
					equal = false;
			}
			else if (Object1.TenLopHocPhan == null ^ Object2.TenLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaPhong != null && Object2.MaPhong != null )
			{
				if (Object1.MaPhong != Object2.MaPhong)
					equal = false;
			}
			else if (Object1.MaPhong == null ^ Object2.MaPhong == null )
			{
				equal = false;
			}
			if ( Object1.TenPhong != null && Object2.TenPhong != null )
			{
				if (Object1.TenPhong != Object2.TenPhong)
					equal = false;
			}
			else if (Object1.TenPhong == null ^ Object2.TenPhong == null )
			{
				equal = false;
			}
			if ( Object1.MaCoSo != null && Object2.MaCoSo != null )
			{
				if (Object1.MaCoSo != Object2.MaCoSo)
					equal = false;
			}
			else if (Object1.MaCoSo == null ^ Object2.MaCoSo == null )
			{
				equal = false;
			}
			if ( Object1.TenCoSo != null && Object2.TenCoSo != null )
			{
				if (Object1.TenCoSo != Object2.TenCoSo)
					equal = false;
			}
			else if (Object1.TenCoSo == null ^ Object2.TenCoSo == null )
			{
				equal = false;
			}
			if (Object1.MaMonHoc != Object2.MaMonHoc)
				equal = false;
			if (Object1.TenMonHoc != Object2.TenMonHoc)
				equal = false;
			if ( Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object2.SoTiet == null )
			{
				equal = false;
			}
			if ( Object1.SiSoLop != null && Object2.SiSoLop != null )
			{
				if (Object1.SiSoLop != Object2.SiSoLop)
					equal = false;
			}
			else if (Object1.SiSoLop == null ^ Object2.SiSoLop == null )
			{
				equal = false;
			}
			if ( Object1.HeSoLd != null && Object2.HeSoLd != null )
			{
				if (Object1.HeSoLd != Object2.HeSoLd)
					equal = false;
			}
			else if (Object1.HeSoLd == null ^ Object2.HeSoLd == null )
			{
				equal = false;
			}
			if (Object1.HeSoTinChi != Object2.HeSoTinChi)
				equal = false;
			if ( Object1.TietQuyDoi != null && Object2.TietQuyDoi != null )
			{
				if (Object1.TietQuyDoi != Object2.TietQuyDoi)
					equal = false;
			}
			else if (Object1.TietQuyDoi == null ^ Object2.TietQuyDoi == null )
			{
				equal = false;
			}
			if (Object1.DonGia != Object2.DonGia)
				equal = false;
			if (Object1.TienThem != Object2.TienThem)
				equal = false;
			if ( Object1.TongCong != null && Object2.TongCong != null )
			{
				if (Object1.TongCong != Object2.TongCong)
					equal = false;
			}
			else if (Object1.TongCong == null ^ Object2.TongCong == null )
			{
				equal = false;
			}
			if (Object1.NamHoc != Object2.NamHoc)
				equal = false;
			if (Object1.HocKy != Object2.HocKy)
				equal = false;
			if (Object1.MaLopSinhVien != Object2.MaLopSinhVien)
				equal = false;
			if (Object1.TenLopSinhVien != Object2.TenLopSinhVien)
				equal = false;
			if ( Object1.HoanTat != null && Object2.HoanTat != null )
			{
				if (Object1.HoanTat != Object2.HoanTat)
					equal = false;
			}
			else if (Object1.HoanTat == null ^ Object2.HoanTat == null )
			{
				equal = false;
			}
			if ( Object1.SoLanDiLai != null && Object2.SoLanDiLai != null )
			{
				if (Object1.SoLanDiLai != Object2.SoLanDiLai)
					equal = false;
			}
			else if (Object1.SoLanDiLai == null ^ Object2.SoLanDiLai == null )
			{
				equal = false;
			}
			if ( Object1.SoNgayLuuTru != null && Object2.SoNgayLuuTru != null )
			{
				if (Object1.SoNgayLuuTru != Object2.SoNgayLuuTru)
					equal = false;
			}
			else if (Object1.SoNgayLuuTru == null ^ Object2.SoNgayLuuTru == null )
			{
				equal = false;
			}
			if ( Object1.ChiPhiLuuTru != null && Object2.ChiPhiLuuTru != null )
			{
				if (Object1.ChiPhiLuuTru != Object2.ChiPhiLuuTru)
					equal = false;
			}
			else if (Object1.ChiPhiLuuTru == null ^ Object2.ChiPhiLuuTru == null )
			{
				equal = false;
			}
			if ( Object1.ChiPhiDiLai != null && Object2.ChiPhiDiLai != null )
			{
				if (Object1.ChiPhiDiLai != Object2.ChiPhiDiLai)
					equal = false;
			}
			else if (Object1.ChiPhiDiLai == null ^ Object2.ChiPhiDiLai == null )
			{
				equal = false;
			}
			if ( Object1.SoDeThiDapAn != null && Object2.SoDeThiDapAn != null )
			{
				if (Object1.SoDeThiDapAn != Object2.SoDeThiDapAn)
					equal = false;
			}
			else if (Object1.SoDeThiDapAn == null ^ Object2.SoDeThiDapAn == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ChietTinhBoiDuongGiangDayBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ChietTinhBoiDuongGiangDayComparer GetComparer()
        {
            return new ChietTinhBoiDuongGiangDayComparer();
        }
        */

        // Comparer delegates back to ChietTinhBoiDuongGiangDay
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ChietTinhBoiDuongGiangDay rhs, ChietTinhBoiDuongGiangDayColumn which)
        {
            switch (which)
            {
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.MaQuanLy:
            		return this.MaQuanLy.CompareTo(rhs.MaQuanLy);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.HoTen:
            		return this.HoTen.CompareTo(rhs.HoTen);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.TenLopHocPhan:
            		return this.TenLopHocPhan.CompareTo(rhs.TenLopHocPhan);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.MaPhong:
            		return this.MaPhong.CompareTo(rhs.MaPhong);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.TenPhong:
            		return this.TenPhong.CompareTo(rhs.TenPhong);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.MaCoSo:
            		return this.MaCoSo.CompareTo(rhs.MaCoSo);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.TenCoSo:
            		return this.TenCoSo.CompareTo(rhs.TenCoSo);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.TenMonHoc:
            		return this.TenMonHoc.CompareTo(rhs.TenMonHoc);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.SoTiet:
            		return this.SoTiet.Value.CompareTo(rhs.SoTiet.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.SiSoLop:
            		return this.SiSoLop.Value.CompareTo(rhs.SiSoLop.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.HeSoLd:
            		return this.HeSoLd.Value.CompareTo(rhs.HeSoLd.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.HeSoTinChi:
            		return this.HeSoTinChi.CompareTo(rhs.HeSoTinChi);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.TietQuyDoi:
            		return this.TietQuyDoi.Value.CompareTo(rhs.TietQuyDoi.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.DonGia:
            		return this.DonGia.CompareTo(rhs.DonGia);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.TienThem:
            		return this.TienThem.CompareTo(rhs.TienThem);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.TongCong:
            		return this.TongCong.Value.CompareTo(rhs.TongCong.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.MaLopSinhVien:
            		return this.MaLopSinhVien.CompareTo(rhs.MaLopSinhVien);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.TenLopSinhVien:
            		return this.TenLopSinhVien.CompareTo(rhs.TenLopSinhVien);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.HoanTat:
            		return this.HoanTat.Value.CompareTo(rhs.HoanTat.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.SoLanDiLai:
            		return this.SoLanDiLai.Value.CompareTo(rhs.SoLanDiLai.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.SoNgayLuuTru:
            		return this.SoNgayLuuTru.Value.CompareTo(rhs.SoNgayLuuTru.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.ChiPhiLuuTru:
            		return this.ChiPhiLuuTru.Value.CompareTo(rhs.ChiPhiLuuTru.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.ChiPhiDiLai:
            		return this.ChiPhiDiLai.Value.CompareTo(rhs.ChiPhiDiLai.Value);
            		
            		                 
            	
            	
            	case ChietTinhBoiDuongGiangDayColumn.SoDeThiDapAn:
            		return this.SoDeThiDapAn.Value.CompareTo(rhs.SoDeThiDapAn.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ChietTinhBoiDuongGiangDayKey> Members
		
		// member variable for the EntityId property
		private ChietTinhBoiDuongGiangDayKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ChietTinhBoiDuongGiangDayKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ChietTinhBoiDuongGiangDayKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ChietTinhBoiDuongGiangDay")
					.Append("|").Append( this.MaQuanLy.ToString())
					.Append("|").Append( this.MaLopHocPhan.ToString())
					.Append("|").Append( this.MaLopSinhVien.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{29}{28}- MaQuanLy: {0}{28}- HoTen: {1}{28}- MaLopHocPhan: {2}{28}- TenLopHocPhan: {3}{28}- MaPhong: {4}{28}- TenPhong: {5}{28}- MaCoSo: {6}{28}- TenCoSo: {7}{28}- MaMonHoc: {8}{28}- TenMonHoc: {9}{28}- SoTiet: {10}{28}- SiSoLop: {11}{28}- HeSoLd: {12}{28}- HeSoTinChi: {13}{28}- TietQuyDoi: {14}{28}- DonGia: {15}{28}- TienThem: {16}{28}- TongCong: {17}{28}- NamHoc: {18}{28}- HocKy: {19}{28}- MaLopSinhVien: {20}{28}- TenLopSinhVien: {21}{28}- HoanTat: {22}{28}- SoLanDiLai: {23}{28}- SoNgayLuuTru: {24}{28}- ChiPhiLuuTru: {25}{28}- ChiPhiDiLai: {26}{28}- SoDeThiDapAn: {27}{28}{30}", 
				this.MaQuanLy,
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
				this.MaLopHocPhan,
				(this.TenLopHocPhan == null) ? string.Empty : this.TenLopHocPhan.ToString(),
				(this.MaPhong == null) ? string.Empty : this.MaPhong.ToString(),
				(this.TenPhong == null) ? string.Empty : this.TenPhong.ToString(),
				(this.MaCoSo == null) ? string.Empty : this.MaCoSo.ToString(),
				(this.TenCoSo == null) ? string.Empty : this.TenCoSo.ToString(),
				this.MaMonHoc,
				this.TenMonHoc,
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
				(this.SiSoLop == null) ? string.Empty : this.SiSoLop.ToString(),
				(this.HeSoLd == null) ? string.Empty : this.HeSoLd.ToString(),
				this.HeSoTinChi,
				(this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString(),
				this.DonGia,
				this.TienThem,
				(this.TongCong == null) ? string.Empty : this.TongCong.ToString(),
				this.NamHoc,
				this.HocKy,
				this.MaLopSinhVien,
				this.TenLopSinhVien,
				(this.HoanTat == null) ? string.Empty : this.HoanTat.ToString(),
				(this.SoLanDiLai == null) ? string.Empty : this.SoLanDiLai.ToString(),
				(this.SoNgayLuuTru == null) ? string.Empty : this.SoNgayLuuTru.ToString(),
				(this.ChiPhiLuuTru == null) ? string.Empty : this.ChiPhiLuuTru.ToString(),
				(this.ChiPhiDiLai == null) ? string.Empty : this.ChiPhiDiLai.ToString(),
				(this.SoDeThiDapAn == null) ? string.Empty : this.SoDeThiDapAn.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ChietTinhBoiDuongGiangDay' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ChietTinhBoiDuongGiangDayEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaQuanLy : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ChietTinhBoiDuongGiangDay"</remarks>
		public System.String MaQuanLy;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalMaQuanLy;
		
		/// <summary>			
		/// MaLopHocPhan : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ChietTinhBoiDuongGiangDay"</remarks>
		public System.String MaLopHocPhan;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalMaLopHocPhan;
		
		/// <summary>			
		/// MaLopSinhVien : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ChietTinhBoiDuongGiangDay"</remarks>
		public System.String MaLopSinhVien;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalMaLopSinhVien;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		public System.String HoTen = null;
		
		/// <summary>
		/// TenLopHocPhan : 
		/// </summary>
		public System.String TenLopHocPhan = null;
		
		/// <summary>
		/// MaPhong : 
		/// </summary>
		public System.String MaPhong = null;
		
		/// <summary>
		/// TenPhong : 
		/// </summary>
		public System.String TenPhong = null;
		
		/// <summary>
		/// MaCoSo : 
		/// </summary>
		public System.String MaCoSo = null;
		
		/// <summary>
		/// TenCoSo : 
		/// </summary>
		public System.String TenCoSo = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = string.Empty;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		public System.String TenMonHoc = string.Empty;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		public System.Int32? SoTiet = null;
		
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		public System.Int32? SiSoLop = null;
		
		/// <summary>
		/// HeSoLD : 
		/// </summary>
		public System.Decimal? HeSoLd = null;
		
		/// <summary>
		/// HeSoTinChi : 
		/// </summary>
		public System.Decimal HeSoTinChi = 0.0m;
		
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		public System.Decimal? TietQuyDoi = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		public System.Decimal DonGia = 0.0m;
		
		/// <summary>
		/// TienThem : 
		/// </summary>
		public System.Decimal TienThem = 0.0m;
		
		/// <summary>
		/// TongCong : 
		/// </summary>
		public System.Decimal? TongCong = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = string.Empty;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = string.Empty;
		
		/// <summary>
		/// TenLopSinhVien : 
		/// </summary>
		public System.String TenLopSinhVien = string.Empty;
		
		/// <summary>
		/// HoanTat : 
		/// </summary>
		public System.Boolean? HoanTat = null;
		
		/// <summary>
		/// SoLanDiLai : 
		/// </summary>
		public System.Int32? SoLanDiLai = null;
		
		/// <summary>
		/// SoNgayLuuTru : 
		/// </summary>
		public System.Int32? SoNgayLuuTru = null;
		
		/// <summary>
		/// ChiPhiLuuTru : 
		/// </summary>
		public System.Decimal? ChiPhiLuuTru = null;
		
		/// <summary>
		/// ChiPhiDiLai : 
		/// </summary>
		public System.Decimal? ChiPhiDiLai = null;
		
		/// <summary>
		/// SoDeThiDapAn : 
		/// </summary>
		public System.Int32? SoDeThiDapAn = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ChietTinhBoiDuongGiangDayEntityData _tmp = new ChietTinhBoiDuongGiangDayEntityData();
						
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.OriginalMaQuanLy = this.OriginalMaQuanLy;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.OriginalMaLopHocPhan = this.OriginalMaLopHocPhan;
			_tmp.MaLopSinhVien = this.MaLopSinhVien;
			_tmp.OriginalMaLopSinhVien = this.OriginalMaLopSinhVien;
			
			_tmp.HoTen = this.HoTen;
			_tmp.TenLopHocPhan = this.TenLopHocPhan;
			_tmp.MaPhong = this.MaPhong;
			_tmp.TenPhong = this.TenPhong;
			_tmp.MaCoSo = this.MaCoSo;
			_tmp.TenCoSo = this.TenCoSo;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.SoTiet = this.SoTiet;
			_tmp.SiSoLop = this.SiSoLop;
			_tmp.HeSoLd = this.HeSoLd;
			_tmp.HeSoTinChi = this.HeSoTinChi;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.DonGia = this.DonGia;
			_tmp.TienThem = this.TienThem;
			_tmp.TongCong = this.TongCong;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.TenLopSinhVien = this.TenLopSinhVien;
			_tmp.HoanTat = this.HoanTat;
			_tmp.SoLanDiLai = this.SoLanDiLai;
			_tmp.SoNgayLuuTru = this.SoNgayLuuTru;
			_tmp.ChiPhiLuuTru = this.ChiPhiLuuTru;
			_tmp.ChiPhiDiLai = this.ChiPhiDiLai;
			_tmp.SoDeThiDapAn = this.SoDeThiDapAn;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ChietTinhBoiDuongGiangDayEntityData _tmp = new ChietTinhBoiDuongGiangDayEntityData();
						
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.OriginalMaQuanLy = this.OriginalMaQuanLy;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.OriginalMaLopHocPhan = this.OriginalMaLopHocPhan;
			_tmp.MaLopSinhVien = this.MaLopSinhVien;
			_tmp.OriginalMaLopSinhVien = this.OriginalMaLopSinhVien;
			
			_tmp.HoTen = this.HoTen;
			_tmp.TenLopHocPhan = this.TenLopHocPhan;
			_tmp.MaPhong = this.MaPhong;
			_tmp.TenPhong = this.TenPhong;
			_tmp.MaCoSo = this.MaCoSo;
			_tmp.TenCoSo = this.TenCoSo;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.SoTiet = this.SoTiet;
			_tmp.SiSoLop = this.SiSoLop;
			_tmp.HeSoLd = this.HeSoLd;
			_tmp.HeSoTinChi = this.HeSoTinChi;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.DonGia = this.DonGia;
			_tmp.TienThem = this.TienThem;
			_tmp.TongCong = this.TongCong;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.TenLopSinhVien = this.TenLopSinhVien;
			_tmp.HoanTat = this.HoanTat;
			_tmp.SoLanDiLai = this.SoLanDiLai;
			_tmp.SoNgayLuuTru = this.SoNgayLuuTru;
			_tmp.ChiPhiLuuTru = this.ChiPhiLuuTru;
			_tmp.ChiPhiDiLai = this.ChiPhiDiLai;
			_tmp.SoDeThiDapAn = this.SoDeThiDapAn;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ChietTinhBoiDuongGiangDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ChietTinhBoiDuongGiangDayColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ChietTinhBoiDuongGiangDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ChietTinhBoiDuongGiangDayColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ChietTinhBoiDuongGiangDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ChietTinhBoiDuongGiangDayColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ChietTinhBoiDuongGiangDayEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ChietTinhBoiDuongGiangDayEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ChietTinhBoiDuongGiangDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ChietTinhBoiDuongGiangDayColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ChietTinhBoiDuongGiangDayEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ChietTinhBoiDuongGiangDayEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ChietTinhBoiDuongGiangDayEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ChietTinhBoiDuongGiangDay"/> object.
	/// </remarks>
	public class ChietTinhBoiDuongGiangDayEventArgs : System.EventArgs
	{
		private ChietTinhBoiDuongGiangDayColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ChietTinhBoiDuongGiangDayEventArgs class.
		///</summary>
		public ChietTinhBoiDuongGiangDayEventArgs(ChietTinhBoiDuongGiangDayColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ChietTinhBoiDuongGiangDayEventArgs class.
		///</summary>
		public ChietTinhBoiDuongGiangDayEventArgs(ChietTinhBoiDuongGiangDayColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ChietTinhBoiDuongGiangDayColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ChietTinhBoiDuongGiangDayColumn" />
		public ChietTinhBoiDuongGiangDayColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ChietTinhBoiDuongGiangDay related events.
	///</summary>
	public delegate void ChietTinhBoiDuongGiangDayEventHandler(object sender, ChietTinhBoiDuongGiangDayEventArgs e);
	
	#region ChietTinhBoiDuongGiangDayComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ChietTinhBoiDuongGiangDayComparer : System.Collections.Generic.IComparer<ChietTinhBoiDuongGiangDay>
	{
		ChietTinhBoiDuongGiangDayColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ChietTinhBoiDuongGiangDayComparer"/> class.
        /// </summary>
		public ChietTinhBoiDuongGiangDayComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ChietTinhBoiDuongGiangDayComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ChietTinhBoiDuongGiangDayComparer(ChietTinhBoiDuongGiangDayColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ChietTinhBoiDuongGiangDay"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ChietTinhBoiDuongGiangDay"/> to compare.</param>
        /// <param name="b">The second <c>ChietTinhBoiDuongGiangDay</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ChietTinhBoiDuongGiangDay a, ChietTinhBoiDuongGiangDay b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ChietTinhBoiDuongGiangDay entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ChietTinhBoiDuongGiangDay a, ChietTinhBoiDuongGiangDay b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ChietTinhBoiDuongGiangDayColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ChietTinhBoiDuongGiangDayKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ChietTinhBoiDuongGiangDay"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ChietTinhBoiDuongGiangDayKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayKey class.
		/// </summary>
		public ChietTinhBoiDuongGiangDayKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayKey class.
		/// </summary>
		public ChietTinhBoiDuongGiangDayKey(ChietTinhBoiDuongGiangDayBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaQuanLy = entity.MaQuanLy;
				this.MaLopHocPhan = entity.MaLopHocPhan;
				this.MaLopSinhVien = entity.MaLopSinhVien;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayKey class.
		/// </summary>
		public ChietTinhBoiDuongGiangDayKey(System.String _maQuanLy, System.String _maLopHocPhan, System.String _maLopSinhVien)
		{
			#region Init Properties

			this.MaQuanLy = _maQuanLy;
			this.MaLopHocPhan = _maLopHocPhan;
			this.MaLopSinhVien = _maLopSinhVien;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ChietTinhBoiDuongGiangDayBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ChietTinhBoiDuongGiangDayBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaQuanLy property
		private System.String _maQuanLy;
		
		/// <summary>
		/// Gets or sets the MaQuanLy property.
		/// </summary>
		public System.String MaQuanLy
		{
			get { return _maQuanLy; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaQuanLy = value;
				
				_maQuanLy = value;
			}
		}
		
		// member variable for the MaLopHocPhan property
		private System.String _maLopHocPhan;
		
		/// <summary>
		/// Gets or sets the MaLopHocPhan property.
		/// </summary>
		public System.String MaLopHocPhan
		{
			get { return _maLopHocPhan; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaLopHocPhan = value;
				
				_maLopHocPhan = value;
			}
		}
		
		// member variable for the MaLopSinhVien property
		private System.String _maLopSinhVien;
		
		/// <summary>
		/// Gets or sets the MaLopSinhVien property.
		/// </summary>
		public System.String MaLopSinhVien
		{
			get { return _maLopSinhVien; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaLopSinhVien = value;
				
				_maLopSinhVien = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaQuanLy = ( values["MaQuanLy"] != null ) ? (System.String) EntityUtil.ChangeType(values["MaQuanLy"], typeof(System.String)) : string.Empty;
				MaLopHocPhan = ( values["MaLopHocPhan"] != null ) ? (System.String) EntityUtil.ChangeType(values["MaLopHocPhan"], typeof(System.String)) : string.Empty;
				MaLopSinhVien = ( values["MaLopSinhVien"] != null ) ? (System.String) EntityUtil.ChangeType(values["MaLopSinhVien"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaQuanLy", MaQuanLy);
			values.Add("MaLopHocPhan", MaLopHocPhan);
			values.Add("MaLopSinhVien", MaLopSinhVien);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaQuanLy: {0}{3}MaLopHocPhan: {1}{3}MaLopSinhVien: {2}{3}",
								MaQuanLy,
								MaLopHocPhan,
								MaLopSinhVien,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ChietTinhBoiDuongGiangDayColumn Enum
	
	/// <summary>
	/// Enumerate the ChietTinhBoiDuongGiangDay columns.
	/// </summary>
	[Serializable]
	public enum ChietTinhBoiDuongGiangDayColumn : int
	{
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Quan Ly")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 20)]
		MaQuanLy = 1,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("Ho Ten")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		HoTen = 2,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 30)]
		MaLopHocPhan = 3,
		/// <summary>
		/// TenLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ten Lop Hoc Phan")]
		[ColumnEnum("TenLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		TenLopHocPhan = 4,
		/// <summary>
		/// MaPhong : 
		/// </summary>
		[EnumTextValue("Ma Phong")]
		[ColumnEnum("MaPhong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaPhong = 5,
		/// <summary>
		/// TenPhong : 
		/// </summary>
		[EnumTextValue("Ten Phong")]
		[ColumnEnum("TenPhong", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TenPhong = 6,
		/// <summary>
		/// MaCoSo : 
		/// </summary>
		[EnumTextValue("Ma Co So")]
		[ColumnEnum("MaCoSo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaCoSo = 7,
		/// <summary>
		/// TenCoSo : 
		/// </summary>
		[EnumTextValue("Ten Co So")]
		[ColumnEnum("TenCoSo", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TenCoSo = 8,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MaMonHoc = 9,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("Ten Mon Hoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		TenMonHoc = 10,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("So Tiet")]
		[ColumnEnum("SoTiet", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTiet = 11,
		/// <summary>
		/// SiSoLop : 
		/// </summary>
		[EnumTextValue("Si So Lop")]
		[ColumnEnum("SiSoLop", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSoLop = 12,
		/// <summary>
		/// HeSoLd : 
		/// </summary>
		[EnumTextValue("He So Ld")]
		[ColumnEnum("HeSoLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLd = 13,
		/// <summary>
		/// HeSoTinChi : 
		/// </summary>
		[EnumTextValue("He So Tin Chi")]
		[ColumnEnum("HeSoTinChi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HeSoTinChi = 14,
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		[EnumTextValue("Tiet Quy Doi")]
		[ColumnEnum("TietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietQuyDoi = 15,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("Don Gia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DonGia = 16,
		/// <summary>
		/// TienThem : 
		/// </summary>
		[EnumTextValue("Tien Them")]
		[ColumnEnum("TienThem", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TienThem = 17,
		/// <summary>
		/// TongCong : 
		/// </summary>
		[EnumTextValue("Tong Cong")]
		[ColumnEnum("TongCong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongCong = 18,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		NamHoc = 19,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		HocKy = 20,
		/// <summary>
		/// MaLopSinhVien : 
		/// </summary>
		[EnumTextValue("Ma Lop Sinh Vien")]
		[ColumnEnum("MaLopSinhVien", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 20)]
		MaLopSinhVien = 21,
		/// <summary>
		/// TenLopSinhVien : 
		/// </summary>
		[EnumTextValue("Ten Lop Sinh Vien")]
		[ColumnEnum("TenLopSinhVien", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		TenLopSinhVien = 22,
		/// <summary>
		/// HoanTat : 
		/// </summary>
		[EnumTextValue("Hoan Tat")]
		[ColumnEnum("HoanTat", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		HoanTat = 23,
		/// <summary>
		/// SoLanDiLai : 
		/// </summary>
		[EnumTextValue("So Lan Di Lai")]
		[ColumnEnum("SoLanDiLai", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLanDiLai = 24,
		/// <summary>
		/// SoNgayLuuTru : 
		/// </summary>
		[EnumTextValue("So Ngay Luu Tru")]
		[ColumnEnum("SoNgayLuuTru", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoNgayLuuTru = 25,
		/// <summary>
		/// ChiPhiLuuTru : 
		/// </summary>
		[EnumTextValue("Chi Phi Luu Tru")]
		[ColumnEnum("ChiPhiLuuTru", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ChiPhiLuuTru = 26,
		/// <summary>
		/// ChiPhiDiLai : 
		/// </summary>
		[EnumTextValue("Chi Phi Di Lai")]
		[ColumnEnum("ChiPhiDiLai", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ChiPhiDiLai = 27,
		/// <summary>
		/// SoDeThiDapAn : 
		/// </summary>
		[EnumTextValue("So De Thi Dap An")]
		[ColumnEnum("SoDeThiDapAn", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoDeThiDapAn = 28
	}//End enum

	#endregion ChietTinhBoiDuongGiangDayColumn Enum

} // end namespace
