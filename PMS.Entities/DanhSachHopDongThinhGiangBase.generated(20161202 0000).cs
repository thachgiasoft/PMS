
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file DanhSachHopDongThinhGiang.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'DanhSachHopDongThinhGiang' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DanhSachHopDongThinhGiangBase : EntityBase, IDanhSachHopDongThinhGiang, IEntityId<DanhSachHopDongThinhGiangKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DanhSachHopDongThinhGiangEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DanhSachHopDongThinhGiangEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DanhSachHopDongThinhGiangEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DanhSachHopDongThinhGiang> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DanhSachHopDongThinhGiangEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DanhSachHopDongThinhGiangEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DanhSachHopDongThinhGiangBase"/> instance.
		///</summary>
		public DanhSachHopDongThinhGiangBase()
		{
			this.entityData = new DanhSachHopDongThinhGiangEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DanhSachHopDongThinhGiangBase"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_soCmnd"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maSoThue"></param>
		///<param name="_coQuanCongTac"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_soHopDong"></param>
		///<param name="_maDonVi"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_soTietLyThuyet"></param>
		///<param name="_soTietThucHanh"></param>
		///<param name="_heSoQuyDoiThucHanh"></param>
		///<param name="_soNhomThucHanh"></param>
		///<param name="_tongSoTiet"></param>
		///<param name="_soTietLyThuyetTrenTuan"></param>
		///<param name="_soTietThucHanhTrenTuan"></param>
		///<param name="_tongSoTietTrenTuan"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_siSo"></param>
		///<param name="_trangThaiHoSo"></param>
		///<param name="_donGia"></param>
		///<param name="_donViTienTe"></param>
		///<param name="_tongGiaTriHopDong"></param>
		///<param name="_giaTriHopDongConLai"></param>
		///<param name="_thue"></param>
		///<param name="_ghiChu"></param>
		///<param name="_daXacNhan"></param>
		///<param name="_isLock"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		public DanhSachHopDongThinhGiangBase(System.String _namHoc, System.String _hocKy, 
			System.Int32? _maGiangVien, System.String _hoTen, System.String _ngaySinh, 
			System.String _soCmnd, System.Int32? _maHocHam, System.Int32? _maHocVi, 
			System.String _chuyenNganh, System.String _maSoThue, System.String _coQuanCongTac, 
			System.String _maMonHoc, System.String _maLopHocPhan, System.String _maLop, 
			System.String _soHopDong, System.String _maDonVi, System.DateTime? _ngayBatDau, 
			System.DateTime? _ngayKetThuc, System.Decimal? _soTietLyThuyet, System.Decimal? _soTietThucHanh, 
			System.Decimal? _heSoQuyDoiThucHanh, System.Int32? _soNhomThucHanh, System.Decimal? _tongSoTiet, 
			System.Decimal? _soTietLyThuyetTrenTuan, System.Decimal? _soTietThucHanhTrenTuan, 
			System.Decimal? _tongSoTietTrenTuan, System.Decimal? _heSoLopDong, System.Int32? _siSo, 
			System.String _trangThaiHoSo, System.Decimal? _donGia, System.String _donViTienTe, 
			System.Decimal? _tongGiaTriHopDong, System.Decimal? _giaTriHopDongConLai, 
			System.Decimal? _thue, System.String _ghiChu, System.Boolean? _daXacNhan, 
			System.Boolean? _isLock, System.String _ngayCapNhat, System.String _nguoiCapNhat)
		{
			this.entityData = new DanhSachHopDongThinhGiangEntityData();
			this.backupData = null;

			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaGiangVien = _maGiangVien;
			this.HoTen = _hoTen;
			this.NgaySinh = _ngaySinh;
			this.SoCmnd = _soCmnd;
			this.MaHocHam = _maHocHam;
			this.MaHocVi = _maHocVi;
			this.ChuyenNganh = _chuyenNganh;
			this.MaSoThue = _maSoThue;
			this.CoQuanCongTac = _coQuanCongTac;
			this.MaMonHoc = _maMonHoc;
			this.MaLopHocPhan = _maLopHocPhan;
			this.MaLop = _maLop;
			this.SoHopDong = _soHopDong;
			this.MaDonVi = _maDonVi;
			this.NgayBatDau = _ngayBatDau;
			this.NgayKetThuc = _ngayKetThuc;
			this.SoTietLyThuyet = _soTietLyThuyet;
			this.SoTietThucHanh = _soTietThucHanh;
			this.HeSoQuyDoiThucHanh = _heSoQuyDoiThucHanh;
			this.SoNhomThucHanh = _soNhomThucHanh;
			this.TongSoTiet = _tongSoTiet;
			this.SoTietLyThuyetTrenTuan = _soTietLyThuyetTrenTuan;
			this.SoTietThucHanhTrenTuan = _soTietThucHanhTrenTuan;
			this.TongSoTietTrenTuan = _tongSoTietTrenTuan;
			this.HeSoLopDong = _heSoLopDong;
			this.SiSo = _siSo;
			this.TrangThaiHoSo = _trangThaiHoSo;
			this.DonGia = _donGia;
			this.DonViTienTe = _donViTienTe;
			this.TongGiaTriHopDong = _tongGiaTriHopDong;
			this.GiaTriHopDongConLai = _giaTriHopDongConLai;
			this.Thue = _thue;
			this.GhiChu = _ghiChu;
			this.DaXacNhan = _daXacNhan;
			this.IsLock = _isLock;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DanhSachHopDongThinhGiang"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_hoTen"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_soCmnd"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maSoThue"></param>
		///<param name="_coQuanCongTac"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_soHopDong"></param>
		///<param name="_maDonVi"></param>
		///<param name="_ngayBatDau"></param>
		///<param name="_ngayKetThuc"></param>
		///<param name="_soTietLyThuyet"></param>
		///<param name="_soTietThucHanh"></param>
		///<param name="_heSoQuyDoiThucHanh"></param>
		///<param name="_soNhomThucHanh"></param>
		///<param name="_tongSoTiet"></param>
		///<param name="_soTietLyThuyetTrenTuan"></param>
		///<param name="_soTietThucHanhTrenTuan"></param>
		///<param name="_tongSoTietTrenTuan"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_siSo"></param>
		///<param name="_trangThaiHoSo"></param>
		///<param name="_donGia"></param>
		///<param name="_donViTienTe"></param>
		///<param name="_tongGiaTriHopDong"></param>
		///<param name="_giaTriHopDongConLai"></param>
		///<param name="_thue"></param>
		///<param name="_ghiChu"></param>
		///<param name="_daXacNhan"></param>
		///<param name="_isLock"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		public static DanhSachHopDongThinhGiang CreateDanhSachHopDongThinhGiang(System.String _namHoc, System.String _hocKy, 
			System.Int32? _maGiangVien, System.String _hoTen, System.String _ngaySinh, 
			System.String _soCmnd, System.Int32? _maHocHam, System.Int32? _maHocVi, 
			System.String _chuyenNganh, System.String _maSoThue, System.String _coQuanCongTac, 
			System.String _maMonHoc, System.String _maLopHocPhan, System.String _maLop, 
			System.String _soHopDong, System.String _maDonVi, System.DateTime? _ngayBatDau, 
			System.DateTime? _ngayKetThuc, System.Decimal? _soTietLyThuyet, System.Decimal? _soTietThucHanh, 
			System.Decimal? _heSoQuyDoiThucHanh, System.Int32? _soNhomThucHanh, System.Decimal? _tongSoTiet, 
			System.Decimal? _soTietLyThuyetTrenTuan, System.Decimal? _soTietThucHanhTrenTuan, 
			System.Decimal? _tongSoTietTrenTuan, System.Decimal? _heSoLopDong, System.Int32? _siSo, 
			System.String _trangThaiHoSo, System.Decimal? _donGia, System.String _donViTienTe, 
			System.Decimal? _tongGiaTriHopDong, System.Decimal? _giaTriHopDongConLai, 
			System.Decimal? _thue, System.String _ghiChu, System.Boolean? _daXacNhan, 
			System.Boolean? _isLock, System.String _ngayCapNhat, System.String _nguoiCapNhat)
		{
			DanhSachHopDongThinhGiang newDanhSachHopDongThinhGiang = new DanhSachHopDongThinhGiang();
			newDanhSachHopDongThinhGiang.NamHoc = _namHoc;
			newDanhSachHopDongThinhGiang.HocKy = _hocKy;
			newDanhSachHopDongThinhGiang.MaGiangVien = _maGiangVien;
			newDanhSachHopDongThinhGiang.HoTen = _hoTen;
			newDanhSachHopDongThinhGiang.NgaySinh = _ngaySinh;
			newDanhSachHopDongThinhGiang.SoCmnd = _soCmnd;
			newDanhSachHopDongThinhGiang.MaHocHam = _maHocHam;
			newDanhSachHopDongThinhGiang.MaHocVi = _maHocVi;
			newDanhSachHopDongThinhGiang.ChuyenNganh = _chuyenNganh;
			newDanhSachHopDongThinhGiang.MaSoThue = _maSoThue;
			newDanhSachHopDongThinhGiang.CoQuanCongTac = _coQuanCongTac;
			newDanhSachHopDongThinhGiang.MaMonHoc = _maMonHoc;
			newDanhSachHopDongThinhGiang.MaLopHocPhan = _maLopHocPhan;
			newDanhSachHopDongThinhGiang.MaLop = _maLop;
			newDanhSachHopDongThinhGiang.SoHopDong = _soHopDong;
			newDanhSachHopDongThinhGiang.MaDonVi = _maDonVi;
			newDanhSachHopDongThinhGiang.NgayBatDau = _ngayBatDau;
			newDanhSachHopDongThinhGiang.NgayKetThuc = _ngayKetThuc;
			newDanhSachHopDongThinhGiang.SoTietLyThuyet = _soTietLyThuyet;
			newDanhSachHopDongThinhGiang.SoTietThucHanh = _soTietThucHanh;
			newDanhSachHopDongThinhGiang.HeSoQuyDoiThucHanh = _heSoQuyDoiThucHanh;
			newDanhSachHopDongThinhGiang.SoNhomThucHanh = _soNhomThucHanh;
			newDanhSachHopDongThinhGiang.TongSoTiet = _tongSoTiet;
			newDanhSachHopDongThinhGiang.SoTietLyThuyetTrenTuan = _soTietLyThuyetTrenTuan;
			newDanhSachHopDongThinhGiang.SoTietThucHanhTrenTuan = _soTietThucHanhTrenTuan;
			newDanhSachHopDongThinhGiang.TongSoTietTrenTuan = _tongSoTietTrenTuan;
			newDanhSachHopDongThinhGiang.HeSoLopDong = _heSoLopDong;
			newDanhSachHopDongThinhGiang.SiSo = _siSo;
			newDanhSachHopDongThinhGiang.TrangThaiHoSo = _trangThaiHoSo;
			newDanhSachHopDongThinhGiang.DonGia = _donGia;
			newDanhSachHopDongThinhGiang.DonViTienTe = _donViTienTe;
			newDanhSachHopDongThinhGiang.TongGiaTriHopDong = _tongGiaTriHopDong;
			newDanhSachHopDongThinhGiang.GiaTriHopDongConLai = _giaTriHopDongConLai;
			newDanhSachHopDongThinhGiang.Thue = _thue;
			newDanhSachHopDongThinhGiang.GhiChu = _ghiChu;
			newDanhSachHopDongThinhGiang.DaXacNhan = _daXacNhan;
			newDanhSachHopDongThinhGiang.IsLock = _isLock;
			newDanhSachHopDongThinhGiang.NgayCapNhat = _ngayCapNhat;
			newDanhSachHopDongThinhGiang.NguoiCapNhat = _nguoiCapNhat;
			return newDanhSachHopDongThinhGiang;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this.entityData.MaGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaGiangVien == value)
					return;
				
                OnPropertyChanging("MaGiangVien");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.MaGiangVien, this.entityData.MaGiangVien);
				this.entityData.MaGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.MaGiangVien, this.entityData.MaGiangVien);
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String HoTen
		{
			get
			{
				return this.entityData.HoTen; 
			}
			
			set
			{
				if (this.entityData.HoTen == value)
					return;
				
                OnPropertyChanging("HoTen");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.HoTen, this.entityData.HoTen);
				this.entityData.HoTen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.HoTen, this.entityData.HoTen);
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgaySinh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String NgaySinh
		{
			get
			{
				return this.entityData.NgaySinh; 
			}
			
			set
			{
				if (this.entityData.NgaySinh == value)
					return;
				
                OnPropertyChanging("NgaySinh");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.NgaySinh, this.entityData.NgaySinh);
				this.entityData.NgaySinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.NgaySinh, this.entityData.NgaySinh);
				OnPropertyChanged("NgaySinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoCmnd property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String SoCmnd
		{
			get
			{
				return this.entityData.SoCmnd; 
			}
			
			set
			{
				if (this.entityData.SoCmnd == value)
					return;
				
                OnPropertyChanging("SoCmnd");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.SoCmnd, this.entityData.SoCmnd);
				this.entityData.SoCmnd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.SoCmnd, this.entityData.SoCmnd);
				OnPropertyChanged("SoCmnd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocHam property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocHam
		{
			get
			{
				return this.entityData.MaHocHam; 
			}
			
			set
			{
				if (this.entityData.MaHocHam == value)
					return;
				
                OnPropertyChanging("MaHocHam");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.MaHocHam, this.entityData.MaHocHam);
				this.entityData.MaHocHam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.MaHocHam, this.entityData.MaHocHam);
				OnPropertyChanged("MaHocHam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHocVi property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaHocVi
		{
			get
			{
				return this.entityData.MaHocVi; 
			}
			
			set
			{
				if (this.entityData.MaHocVi == value)
					return;
				
                OnPropertyChanging("MaHocVi");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.MaHocVi, this.entityData.MaHocVi);
				this.entityData.MaHocVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.MaHocVi, this.entityData.MaHocVi);
				OnPropertyChanged("MaHocVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChuyenNganh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ChuyenNganh
		{
			get
			{
				return this.entityData.ChuyenNganh; 
			}
			
			set
			{
				if (this.entityData.ChuyenNganh == value)
					return;
				
                OnPropertyChanging("ChuyenNganh");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.ChuyenNganh, this.entityData.ChuyenNganh);
				this.entityData.ChuyenNganh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.ChuyenNganh, this.entityData.ChuyenNganh);
				OnPropertyChanged("ChuyenNganh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaSoThue property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaSoThue
		{
			get
			{
				return this.entityData.MaSoThue; 
			}
			
			set
			{
				if (this.entityData.MaSoThue == value)
					return;
				
                OnPropertyChanging("MaSoThue");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.MaSoThue, this.entityData.MaSoThue);
				this.entityData.MaSoThue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.MaSoThue, this.entityData.MaSoThue);
				OnPropertyChanged("MaSoThue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoQuanCongTac property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String CoQuanCongTac
		{
			get
			{
				return this.entityData.CoQuanCongTac; 
			}
			
			set
			{
				if (this.entityData.CoQuanCongTac == value)
					return;
				
                OnPropertyChanging("CoQuanCongTac");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.CoQuanCongTac, this.entityData.CoQuanCongTac);
				this.entityData.CoQuanCongTac = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.CoQuanCongTac, this.entityData.CoQuanCongTac);
				OnPropertyChanged("CoQuanCongTac");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
				
                OnPropertyChanging("MaLop");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoHopDong property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String SoHopDong
		{
			get
			{
				return this.entityData.SoHopDong; 
			}
			
			set
			{
				if (this.entityData.SoHopDong == value)
					return;
				
                OnPropertyChanging("SoHopDong");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.SoHopDong, this.entityData.SoHopDong);
				this.entityData.SoHopDong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.SoHopDong, this.entityData.SoHopDong);
				OnPropertyChanged("SoHopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaDonVi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaDonVi
		{
			get
			{
				return this.entityData.MaDonVi; 
			}
			
			set
			{
				if (this.entityData.MaDonVi == value)
					return;
				
                OnPropertyChanging("MaDonVi");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.MaDonVi, this.entityData.MaDonVi);
				this.entityData.MaDonVi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.MaDonVi, this.entityData.MaDonVi);
				OnPropertyChanged("MaDonVi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayBatDau property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayBatDau
		{
			get
			{
				return this.entityData.NgayBatDau; 
			}
			
			set
			{
				if (this.entityData.NgayBatDau == value)
					return;
				
                OnPropertyChanging("NgayBatDau");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.NgayBatDau, this.entityData.NgayBatDau);
				this.entityData.NgayBatDau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.NgayBatDau, this.entityData.NgayBatDau);
				OnPropertyChanged("NgayBatDau");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayKetThuc property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayKetThuc
		{
			get
			{
				return this.entityData.NgayKetThuc; 
			}
			
			set
			{
				if (this.entityData.NgayKetThuc == value)
					return;
				
                OnPropertyChanging("NgayKetThuc");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.NgayKetThuc, this.entityData.NgayKetThuc);
				this.entityData.NgayKetThuc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.NgayKetThuc, this.entityData.NgayKetThuc);
				OnPropertyChanged("NgayKetThuc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTietLyThuyet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTietLyThuyet
		{
			get
			{
				return this.entityData.SoTietLyThuyet; 
			}
			
			set
			{
				if (this.entityData.SoTietLyThuyet == value)
					return;
				
                OnPropertyChanging("SoTietLyThuyet");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.SoTietLyThuyet, this.entityData.SoTietLyThuyet);
				this.entityData.SoTietLyThuyet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.SoTietLyThuyet, this.entityData.SoTietLyThuyet);
				OnPropertyChanged("SoTietLyThuyet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTietThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTietThucHanh
		{
			get
			{
				return this.entityData.SoTietThucHanh; 
			}
			
			set
			{
				if (this.entityData.SoTietThucHanh == value)
					return;
				
                OnPropertyChanging("SoTietThucHanh");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.SoTietThucHanh, this.entityData.SoTietThucHanh);
				this.entityData.SoTietThucHanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.SoTietThucHanh, this.entityData.SoTietThucHanh);
				OnPropertyChanged("SoTietThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoQuyDoiThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoQuyDoiThucHanh
		{
			get
			{
				return this.entityData.HeSoQuyDoiThucHanh; 
			}
			
			set
			{
				if (this.entityData.HeSoQuyDoiThucHanh == value)
					return;
				
                OnPropertyChanging("HeSoQuyDoiThucHanh");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.HeSoQuyDoiThucHanh, this.entityData.HeSoQuyDoiThucHanh);
				this.entityData.HeSoQuyDoiThucHanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.HeSoQuyDoiThucHanh, this.entityData.HeSoQuyDoiThucHanh);
				OnPropertyChanged("HeSoQuyDoiThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoNhomThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoNhomThucHanh
		{
			get
			{
				return this.entityData.SoNhomThucHanh; 
			}
			
			set
			{
				if (this.entityData.SoNhomThucHanh == value)
					return;
				
                OnPropertyChanging("SoNhomThucHanh");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.SoNhomThucHanh, this.entityData.SoNhomThucHanh);
				this.entityData.SoNhomThucHanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.SoNhomThucHanh, this.entityData.SoNhomThucHanh);
				OnPropertyChanged("SoNhomThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongSoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongSoTiet
		{
			get
			{
				return this.entityData.TongSoTiet; 
			}
			
			set
			{
				if (this.entityData.TongSoTiet == value)
					return;
				
                OnPropertyChanging("TongSoTiet");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.TongSoTiet, this.entityData.TongSoTiet);
				this.entityData.TongSoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.TongSoTiet, this.entityData.TongSoTiet);
				OnPropertyChanged("TongSoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTietLyThuyetTrenTuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTietLyThuyetTrenTuan
		{
			get
			{
				return this.entityData.SoTietLyThuyetTrenTuan; 
			}
			
			set
			{
				if (this.entityData.SoTietLyThuyetTrenTuan == value)
					return;
				
                OnPropertyChanging("SoTietLyThuyetTrenTuan");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.SoTietLyThuyetTrenTuan, this.entityData.SoTietLyThuyetTrenTuan);
				this.entityData.SoTietLyThuyetTrenTuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.SoTietLyThuyetTrenTuan, this.entityData.SoTietLyThuyetTrenTuan);
				OnPropertyChanged("SoTietLyThuyetTrenTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTietThucHanhTrenTuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTietThucHanhTrenTuan
		{
			get
			{
				return this.entityData.SoTietThucHanhTrenTuan; 
			}
			
			set
			{
				if (this.entityData.SoTietThucHanhTrenTuan == value)
					return;
				
                OnPropertyChanging("SoTietThucHanhTrenTuan");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.SoTietThucHanhTrenTuan, this.entityData.SoTietThucHanhTrenTuan);
				this.entityData.SoTietThucHanhTrenTuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.SoTietThucHanhTrenTuan, this.entityData.SoTietThucHanhTrenTuan);
				OnPropertyChanged("SoTietThucHanhTrenTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongSoTietTrenTuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongSoTietTrenTuan
		{
			get
			{
				return this.entityData.TongSoTietTrenTuan; 
			}
			
			set
			{
				if (this.entityData.TongSoTietTrenTuan == value)
					return;
				
                OnPropertyChanging("TongSoTietTrenTuan");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.TongSoTietTrenTuan, this.entityData.TongSoTietTrenTuan);
				this.entityData.TongSoTietTrenTuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.TongSoTietTrenTuan, this.entityData.TongSoTietTrenTuan);
				OnPropertyChanged("TongSoTietTrenTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoLopDong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoLopDong
		{
			get
			{
				return this.entityData.HeSoLopDong; 
			}
			
			set
			{
				if (this.entityData.HeSoLopDong == value)
					return;
				
                OnPropertyChanging("HeSoLopDong");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.HeSoLopDong, this.entityData.HeSoLopDong);
				this.entityData.HeSoLopDong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.HeSoLopDong, this.entityData.HeSoLopDong);
				OnPropertyChanged("HeSoLopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiSo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiSo
		{
			get
			{
				return this.entityData.SiSo; 
			}
			
			set
			{
				if (this.entityData.SiSo == value)
					return;
				
                OnPropertyChanging("SiSo");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.SiSo, this.entityData.SiSo);
				this.entityData.SiSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.SiSo, this.entityData.SiSo);
				OnPropertyChanged("SiSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrangThaiHoSo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TrangThaiHoSo
		{
			get
			{
				return this.entityData.TrangThaiHoSo; 
			}
			
			set
			{
				if (this.entityData.TrangThaiHoSo == value)
					return;
				
                OnPropertyChanging("TrangThaiHoSo");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.TrangThaiHoSo, this.entityData.TrangThaiHoSo);
				this.entityData.TrangThaiHoSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.TrangThaiHoSo, this.entityData.TrangThaiHoSo);
				OnPropertyChanged("TrangThaiHoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGia
		{
			get
			{
				return this.entityData.DonGia; 
			}
			
			set
			{
				if (this.entityData.DonGia == value)
					return;
				
                OnPropertyChanging("DonGia");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.DonGia, this.entityData.DonGia);
				this.entityData.DonGia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.DonGia, this.entityData.DonGia);
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonViTienTe property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DonViTienTe
		{
			get
			{
				return this.entityData.DonViTienTe; 
			}
			
			set
			{
				if (this.entityData.DonViTienTe == value)
					return;
				
                OnPropertyChanging("DonViTienTe");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.DonViTienTe, this.entityData.DonViTienTe);
				this.entityData.DonViTienTe = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.DonViTienTe, this.entityData.DonViTienTe);
				OnPropertyChanged("DonViTienTe");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongGiaTriHopDong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongGiaTriHopDong
		{
			get
			{
				return this.entityData.TongGiaTriHopDong; 
			}
			
			set
			{
				if (this.entityData.TongGiaTriHopDong == value)
					return;
				
                OnPropertyChanging("TongGiaTriHopDong");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.TongGiaTriHopDong, this.entityData.TongGiaTriHopDong);
				this.entityData.TongGiaTriHopDong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.TongGiaTriHopDong, this.entityData.TongGiaTriHopDong);
				OnPropertyChanged("TongGiaTriHopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GiaTriHopDongConLai property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GiaTriHopDongConLai
		{
			get
			{
				return this.entityData.GiaTriHopDongConLai; 
			}
			
			set
			{
				if (this.entityData.GiaTriHopDongConLai == value)
					return;
				
                OnPropertyChanging("GiaTriHopDongConLai");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.GiaTriHopDongConLai, this.entityData.GiaTriHopDongConLai);
				this.entityData.GiaTriHopDongConLai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.GiaTriHopDongConLai, this.entityData.GiaTriHopDongConLai);
				OnPropertyChanged("GiaTriHopDongConLai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Thue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Thue
		{
			get
			{
				return this.entityData.Thue; 
			}
			
			set
			{
				if (this.entityData.Thue == value)
					return;
				
                OnPropertyChanging("Thue");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.Thue, this.entityData.Thue);
				this.entityData.Thue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.Thue, this.entityData.Thue);
				OnPropertyChanged("Thue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaXacNhan property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DaXacNhan
		{
			get
			{
				return this.entityData.DaXacNhan; 
			}
			
			set
			{
				if (this.entityData.DaXacNhan == value)
					return;
				
                OnPropertyChanging("DaXacNhan");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.DaXacNhan, this.entityData.DaXacNhan);
				this.entityData.DaXacNhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.DaXacNhan, this.entityData.DaXacNhan);
				OnPropertyChanged("DaXacNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLock property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsLock
		{
			get
			{
				return this.entityData.IsLock; 
			}
			
			set
			{
				if (this.entityData.IsLock == value)
					return;
				
                OnPropertyChanging("IsLock");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.IsLock, this.entityData.IsLock);
				this.entityData.IsLock = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.IsLock, this.entityData.IsLock);
				OnPropertyChanged("IsLock");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(DanhSachHopDongThinhGiangColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DanhSachHopDongThinhGiangColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HoTen", "Ho Ten", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgaySinh", "Ngay Sinh", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SoCmnd", "So Cmnd", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ChuyenNganh", "Chuyen Nganh", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaSoThue", "Ma So Thue", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CoQuanCongTac", "Co Quan Cong Tac", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SoHopDong", "So Hop Dong", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaDonVi", "Ma Don Vi", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrangThaiHoSo", "Trang Thai Ho So", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DonViTienTe", "Don Vi Tien Te", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NgayCapNhat", "Ngay Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DanhSachHopDongThinhGiang"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "NamHoc", "HocKy", "MaGiangVien", "HoTen", "NgaySinh", "SoCmnd", "MaHocHam", "MaHocVi", "ChuyenNganh", "MaSoThue", "CoQuanCongTac", "MaMonHoc", "MaLopHocPhan", "MaLop", "SoHopDong", "MaDonVi", "NgayBatDau", "NgayKetThuc", "SoTietLyThuyet", "SoTietThucHanh", "HeSoQuyDoiThucHanh", "SoNhomThucHanh", "TongSoTiet", "SoTietLyThuyetTrenTuan", "SoTietThucHanhTrenTuan", "TongSoTietTrenTuan", "HeSoLopDong", "SiSo", "TrangThaiHoSo", "DonGia", "DonViTienTe", "TongGiaTriHopDong", "GiaTriHopDongConLai", "Thue", "GhiChu", "DaXacNhan", "IsLock", "NgayCapNhat", "NguoiCapNhat"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DanhSachHopDongThinhGiangEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DanhSachHopDongThinhGiang) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DanhSachHopDongThinhGiang>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DanhSachHopDongThinhGiang);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DanhSachHopDongThinhGiang Entity 
		///</summary>
		protected virtual DanhSachHopDongThinhGiang Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DanhSachHopDongThinhGiang copy = new DanhSachHopDongThinhGiang();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaGiangVien = this.MaGiangVien;
				copy.HoTen = this.HoTen;
				copy.NgaySinh = this.NgaySinh;
				copy.SoCmnd = this.SoCmnd;
				copy.MaHocHam = this.MaHocHam;
				copy.MaHocVi = this.MaHocVi;
				copy.ChuyenNganh = this.ChuyenNganh;
				copy.MaSoThue = this.MaSoThue;
				copy.CoQuanCongTac = this.CoQuanCongTac;
				copy.MaMonHoc = this.MaMonHoc;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaLop = this.MaLop;
				copy.SoHopDong = this.SoHopDong;
				copy.MaDonVi = this.MaDonVi;
				copy.NgayBatDau = this.NgayBatDau;
				copy.NgayKetThuc = this.NgayKetThuc;
				copy.SoTietLyThuyet = this.SoTietLyThuyet;
				copy.SoTietThucHanh = this.SoTietThucHanh;
				copy.HeSoQuyDoiThucHanh = this.HeSoQuyDoiThucHanh;
				copy.SoNhomThucHanh = this.SoNhomThucHanh;
				copy.TongSoTiet = this.TongSoTiet;
				copy.SoTietLyThuyetTrenTuan = this.SoTietLyThuyetTrenTuan;
				copy.SoTietThucHanhTrenTuan = this.SoTietThucHanhTrenTuan;
				copy.TongSoTietTrenTuan = this.TongSoTietTrenTuan;
				copy.HeSoLopDong = this.HeSoLopDong;
				copy.SiSo = this.SiSo;
				copy.TrangThaiHoSo = this.TrangThaiHoSo;
				copy.DonGia = this.DonGia;
				copy.DonViTienTe = this.DonViTienTe;
				copy.TongGiaTriHopDong = this.TongGiaTriHopDong;
				copy.GiaTriHopDongConLai = this.GiaTriHopDongConLai;
				copy.Thue = this.Thue;
				copy.GhiChu = this.GhiChu;
				copy.DaXacNhan = this.DaXacNhan;
				copy.IsLock = this.IsLock;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DanhSachHopDongThinhGiang Entity 
		///</summary>
		public virtual DanhSachHopDongThinhGiang Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DanhSachHopDongThinhGiang Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DanhSachHopDongThinhGiang DeepCopy()
		{
			return EntityHelper.Clone<DanhSachHopDongThinhGiang>(this as DanhSachHopDongThinhGiang);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DanhSachHopDongThinhGiangEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DanhSachHopDongThinhGiangEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DanhSachHopDongThinhGiangEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DanhSachHopDongThinhGiangColumn column)
		{
			switch(column)
			{
					case DanhSachHopDongThinhGiangColumn.Id:
					return entityData.Id != _originalData.Id;
					case DanhSachHopDongThinhGiangColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case DanhSachHopDongThinhGiangColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case DanhSachHopDongThinhGiangColumn.MaGiangVien:
					return entityData.MaGiangVien != _originalData.MaGiangVien;
					case DanhSachHopDongThinhGiangColumn.HoTen:
					return entityData.HoTen != _originalData.HoTen;
					case DanhSachHopDongThinhGiangColumn.NgaySinh:
					return entityData.NgaySinh != _originalData.NgaySinh;
					case DanhSachHopDongThinhGiangColumn.SoCmnd:
					return entityData.SoCmnd != _originalData.SoCmnd;
					case DanhSachHopDongThinhGiangColumn.MaHocHam:
					return entityData.MaHocHam != _originalData.MaHocHam;
					case DanhSachHopDongThinhGiangColumn.MaHocVi:
					return entityData.MaHocVi != _originalData.MaHocVi;
					case DanhSachHopDongThinhGiangColumn.ChuyenNganh:
					return entityData.ChuyenNganh != _originalData.ChuyenNganh;
					case DanhSachHopDongThinhGiangColumn.MaSoThue:
					return entityData.MaSoThue != _originalData.MaSoThue;
					case DanhSachHopDongThinhGiangColumn.CoQuanCongTac:
					return entityData.CoQuanCongTac != _originalData.CoQuanCongTac;
					case DanhSachHopDongThinhGiangColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case DanhSachHopDongThinhGiangColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case DanhSachHopDongThinhGiangColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
					case DanhSachHopDongThinhGiangColumn.SoHopDong:
					return entityData.SoHopDong != _originalData.SoHopDong;
					case DanhSachHopDongThinhGiangColumn.MaDonVi:
					return entityData.MaDonVi != _originalData.MaDonVi;
					case DanhSachHopDongThinhGiangColumn.NgayBatDau:
					return entityData.NgayBatDau != _originalData.NgayBatDau;
					case DanhSachHopDongThinhGiangColumn.NgayKetThuc:
					return entityData.NgayKetThuc != _originalData.NgayKetThuc;
					case DanhSachHopDongThinhGiangColumn.SoTietLyThuyet:
					return entityData.SoTietLyThuyet != _originalData.SoTietLyThuyet;
					case DanhSachHopDongThinhGiangColumn.SoTietThucHanh:
					return entityData.SoTietThucHanh != _originalData.SoTietThucHanh;
					case DanhSachHopDongThinhGiangColumn.HeSoQuyDoiThucHanh:
					return entityData.HeSoQuyDoiThucHanh != _originalData.HeSoQuyDoiThucHanh;
					case DanhSachHopDongThinhGiangColumn.SoNhomThucHanh:
					return entityData.SoNhomThucHanh != _originalData.SoNhomThucHanh;
					case DanhSachHopDongThinhGiangColumn.TongSoTiet:
					return entityData.TongSoTiet != _originalData.TongSoTiet;
					case DanhSachHopDongThinhGiangColumn.SoTietLyThuyetTrenTuan:
					return entityData.SoTietLyThuyetTrenTuan != _originalData.SoTietLyThuyetTrenTuan;
					case DanhSachHopDongThinhGiangColumn.SoTietThucHanhTrenTuan:
					return entityData.SoTietThucHanhTrenTuan != _originalData.SoTietThucHanhTrenTuan;
					case DanhSachHopDongThinhGiangColumn.TongSoTietTrenTuan:
					return entityData.TongSoTietTrenTuan != _originalData.TongSoTietTrenTuan;
					case DanhSachHopDongThinhGiangColumn.HeSoLopDong:
					return entityData.HeSoLopDong != _originalData.HeSoLopDong;
					case DanhSachHopDongThinhGiangColumn.SiSo:
					return entityData.SiSo != _originalData.SiSo;
					case DanhSachHopDongThinhGiangColumn.TrangThaiHoSo:
					return entityData.TrangThaiHoSo != _originalData.TrangThaiHoSo;
					case DanhSachHopDongThinhGiangColumn.DonGia:
					return entityData.DonGia != _originalData.DonGia;
					case DanhSachHopDongThinhGiangColumn.DonViTienTe:
					return entityData.DonViTienTe != _originalData.DonViTienTe;
					case DanhSachHopDongThinhGiangColumn.TongGiaTriHopDong:
					return entityData.TongGiaTriHopDong != _originalData.TongGiaTriHopDong;
					case DanhSachHopDongThinhGiangColumn.GiaTriHopDongConLai:
					return entityData.GiaTriHopDongConLai != _originalData.GiaTriHopDongConLai;
					case DanhSachHopDongThinhGiangColumn.Thue:
					return entityData.Thue != _originalData.Thue;
					case DanhSachHopDongThinhGiangColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case DanhSachHopDongThinhGiangColumn.DaXacNhan:
					return entityData.DaXacNhan != _originalData.DaXacNhan;
					case DanhSachHopDongThinhGiangColumn.IsLock:
					return entityData.IsLock != _originalData.IsLock;
					case DanhSachHopDongThinhGiangColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case DanhSachHopDongThinhGiangColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DanhSachHopDongThinhGiangColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaGiangVien != _originalData.MaGiangVien;
			result = result || entityData.HoTen != _originalData.HoTen;
			result = result || entityData.NgaySinh != _originalData.NgaySinh;
			result = result || entityData.SoCmnd != _originalData.SoCmnd;
			result = result || entityData.MaHocHam != _originalData.MaHocHam;
			result = result || entityData.MaHocVi != _originalData.MaHocVi;
			result = result || entityData.ChuyenNganh != _originalData.ChuyenNganh;
			result = result || entityData.MaSoThue != _originalData.MaSoThue;
			result = result || entityData.CoQuanCongTac != _originalData.CoQuanCongTac;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.MaLop != _originalData.MaLop;
			result = result || entityData.SoHopDong != _originalData.SoHopDong;
			result = result || entityData.MaDonVi != _originalData.MaDonVi;
			result = result || entityData.NgayBatDau != _originalData.NgayBatDau;
			result = result || entityData.NgayKetThuc != _originalData.NgayKetThuc;
			result = result || entityData.SoTietLyThuyet != _originalData.SoTietLyThuyet;
			result = result || entityData.SoTietThucHanh != _originalData.SoTietThucHanh;
			result = result || entityData.HeSoQuyDoiThucHanh != _originalData.HeSoQuyDoiThucHanh;
			result = result || entityData.SoNhomThucHanh != _originalData.SoNhomThucHanh;
			result = result || entityData.TongSoTiet != _originalData.TongSoTiet;
			result = result || entityData.SoTietLyThuyetTrenTuan != _originalData.SoTietLyThuyetTrenTuan;
			result = result || entityData.SoTietThucHanhTrenTuan != _originalData.SoTietThucHanhTrenTuan;
			result = result || entityData.TongSoTietTrenTuan != _originalData.TongSoTietTrenTuan;
			result = result || entityData.HeSoLopDong != _originalData.HeSoLopDong;
			result = result || entityData.SiSo != _originalData.SiSo;
			result = result || entityData.TrangThaiHoSo != _originalData.TrangThaiHoSo;
			result = result || entityData.DonGia != _originalData.DonGia;
			result = result || entityData.DonViTienTe != _originalData.DonViTienTe;
			result = result || entityData.TongGiaTriHopDong != _originalData.TongGiaTriHopDong;
			result = result || entityData.GiaTriHopDongConLai != _originalData.GiaTriHopDongConLai;
			result = result || entityData.Thue != _originalData.Thue;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.DaXacNhan != _originalData.DaXacNhan;
			result = result || entityData.IsLock != _originalData.IsLock;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			return result;
		}	
		
		///<summary>
		///  Returns a DanhSachHopDongThinhGiang Entity with the original data.
		///</summary>
		public DanhSachHopDongThinhGiang GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDanhSachHopDongThinhGiang(
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaGiangVien,
				_originalData.HoTen,
				_originalData.NgaySinh,
				_originalData.SoCmnd,
				_originalData.MaHocHam,
				_originalData.MaHocVi,
				_originalData.ChuyenNganh,
				_originalData.MaSoThue,
				_originalData.CoQuanCongTac,
				_originalData.MaMonHoc,
				_originalData.MaLopHocPhan,
				_originalData.MaLop,
				_originalData.SoHopDong,
				_originalData.MaDonVi,
				_originalData.NgayBatDau,
				_originalData.NgayKetThuc,
				_originalData.SoTietLyThuyet,
				_originalData.SoTietThucHanh,
				_originalData.HeSoQuyDoiThucHanh,
				_originalData.SoNhomThucHanh,
				_originalData.TongSoTiet,
				_originalData.SoTietLyThuyetTrenTuan,
				_originalData.SoTietThucHanhTrenTuan,
				_originalData.TongSoTietTrenTuan,
				_originalData.HeSoLopDong,
				_originalData.SiSo,
				_originalData.TrangThaiHoSo,
				_originalData.DonGia,
				_originalData.DonViTienTe,
				_originalData.TongGiaTriHopDong,
				_originalData.GiaTriHopDongConLai,
				_originalData.Thue,
				_originalData.GhiChu,
				_originalData.DaXacNhan,
				_originalData.IsLock,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat
				);
				
			return (DanhSachHopDongThinhGiang)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DanhSachHopDongThinhGiangBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DanhSachHopDongThinhGiangBase)
				return ValueEquals(this, (DanhSachHopDongThinhGiangBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DanhSachHopDongThinhGiangBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString()).GetHashCode() ^ 
					((this.HoTen == null) ? string.Empty : this.HoTen.ToString()).GetHashCode() ^ 
					((this.NgaySinh == null) ? string.Empty : this.NgaySinh.ToString()).GetHashCode() ^ 
					((this.SoCmnd == null) ? string.Empty : this.SoCmnd.ToString()).GetHashCode() ^ 
					((this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString()).GetHashCode() ^ 
					((this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString()).GetHashCode() ^ 
					((this.ChuyenNganh == null) ? string.Empty : this.ChuyenNganh.ToString()).GetHashCode() ^ 
					((this.MaSoThue == null) ? string.Empty : this.MaSoThue.ToString()).GetHashCode() ^ 
					((this.CoQuanCongTac == null) ? string.Empty : this.CoQuanCongTac.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.MaLop == null) ? string.Empty : this.MaLop.ToString()).GetHashCode() ^ 
					((this.SoHopDong == null) ? string.Empty : this.SoHopDong.ToString()).GetHashCode() ^ 
					((this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString()).GetHashCode() ^ 
					((this.NgayBatDau == null) ? string.Empty : this.NgayBatDau.ToString()).GetHashCode() ^ 
					((this.NgayKetThuc == null) ? string.Empty : this.NgayKetThuc.ToString()).GetHashCode() ^ 
					((this.SoTietLyThuyet == null) ? string.Empty : this.SoTietLyThuyet.ToString()).GetHashCode() ^ 
					((this.SoTietThucHanh == null) ? string.Empty : this.SoTietThucHanh.ToString()).GetHashCode() ^ 
					((this.HeSoQuyDoiThucHanh == null) ? string.Empty : this.HeSoQuyDoiThucHanh.ToString()).GetHashCode() ^ 
					((this.SoNhomThucHanh == null) ? string.Empty : this.SoNhomThucHanh.ToString()).GetHashCode() ^ 
					((this.TongSoTiet == null) ? string.Empty : this.TongSoTiet.ToString()).GetHashCode() ^ 
					((this.SoTietLyThuyetTrenTuan == null) ? string.Empty : this.SoTietLyThuyetTrenTuan.ToString()).GetHashCode() ^ 
					((this.SoTietThucHanhTrenTuan == null) ? string.Empty : this.SoTietThucHanhTrenTuan.ToString()).GetHashCode() ^ 
					((this.TongSoTietTrenTuan == null) ? string.Empty : this.TongSoTietTrenTuan.ToString()).GetHashCode() ^ 
					((this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString()).GetHashCode() ^ 
					((this.SiSo == null) ? string.Empty : this.SiSo.ToString()).GetHashCode() ^ 
					((this.TrangThaiHoSo == null) ? string.Empty : this.TrangThaiHoSo.ToString()).GetHashCode() ^ 
					((this.DonGia == null) ? string.Empty : this.DonGia.ToString()).GetHashCode() ^ 
					((this.DonViTienTe == null) ? string.Empty : this.DonViTienTe.ToString()).GetHashCode() ^ 
					((this.TongGiaTriHopDong == null) ? string.Empty : this.TongGiaTriHopDong.ToString()).GetHashCode() ^ 
					((this.GiaTriHopDongConLai == null) ? string.Empty : this.GiaTriHopDongConLai.ToString()).GetHashCode() ^ 
					((this.Thue == null) ? string.Empty : this.Thue.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.DaXacNhan == null) ? string.Empty : this.DaXacNhan.ToString()).GetHashCode() ^ 
					((this.IsLock == null) ? string.Empty : this.IsLock.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DanhSachHopDongThinhGiangBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DanhSachHopDongThinhGiangBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DanhSachHopDongThinhGiangBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DanhSachHopDongThinhGiangBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DanhSachHopDongThinhGiangBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DanhSachHopDongThinhGiangBase Object1, DanhSachHopDongThinhGiangBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object2.MaGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object2.HoTen == null )
			{
				equal = false;
			}
			if ( Object1.NgaySinh != null && Object2.NgaySinh != null )
			{
				if (Object1.NgaySinh != Object2.NgaySinh)
					equal = false;
			}
			else if (Object1.NgaySinh == null ^ Object2.NgaySinh == null )
			{
				equal = false;
			}
			if ( Object1.SoCmnd != null && Object2.SoCmnd != null )
			{
				if (Object1.SoCmnd != Object2.SoCmnd)
					equal = false;
			}
			else if (Object1.SoCmnd == null ^ Object2.SoCmnd == null )
			{
				equal = false;
			}
			if ( Object1.MaHocHam != null && Object2.MaHocHam != null )
			{
				if (Object1.MaHocHam != Object2.MaHocHam)
					equal = false;
			}
			else if (Object1.MaHocHam == null ^ Object2.MaHocHam == null )
			{
				equal = false;
			}
			if ( Object1.MaHocVi != null && Object2.MaHocVi != null )
			{
				if (Object1.MaHocVi != Object2.MaHocVi)
					equal = false;
			}
			else if (Object1.MaHocVi == null ^ Object2.MaHocVi == null )
			{
				equal = false;
			}
			if ( Object1.ChuyenNganh != null && Object2.ChuyenNganh != null )
			{
				if (Object1.ChuyenNganh != Object2.ChuyenNganh)
					equal = false;
			}
			else if (Object1.ChuyenNganh == null ^ Object2.ChuyenNganh == null )
			{
				equal = false;
			}
			if ( Object1.MaSoThue != null && Object2.MaSoThue != null )
			{
				if (Object1.MaSoThue != Object2.MaSoThue)
					equal = false;
			}
			else if (Object1.MaSoThue == null ^ Object2.MaSoThue == null )
			{
				equal = false;
			}
			if ( Object1.CoQuanCongTac != null && Object2.CoQuanCongTac != null )
			{
				if (Object1.CoQuanCongTac != Object2.CoQuanCongTac)
					equal = false;
			}
			else if (Object1.CoQuanCongTac == null ^ Object2.CoQuanCongTac == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object2.MaLop == null )
			{
				equal = false;
			}
			if ( Object1.SoHopDong != null && Object2.SoHopDong != null )
			{
				if (Object1.SoHopDong != Object2.SoHopDong)
					equal = false;
			}
			else if (Object1.SoHopDong == null ^ Object2.SoHopDong == null )
			{
				equal = false;
			}
			if ( Object1.MaDonVi != null && Object2.MaDonVi != null )
			{
				if (Object1.MaDonVi != Object2.MaDonVi)
					equal = false;
			}
			else if (Object1.MaDonVi == null ^ Object2.MaDonVi == null )
			{
				equal = false;
			}
			if ( Object1.NgayBatDau != null && Object2.NgayBatDau != null )
			{
				if (Object1.NgayBatDau != Object2.NgayBatDau)
					equal = false;
			}
			else if (Object1.NgayBatDau == null ^ Object2.NgayBatDau == null )
			{
				equal = false;
			}
			if ( Object1.NgayKetThuc != null && Object2.NgayKetThuc != null )
			{
				if (Object1.NgayKetThuc != Object2.NgayKetThuc)
					equal = false;
			}
			else if (Object1.NgayKetThuc == null ^ Object2.NgayKetThuc == null )
			{
				equal = false;
			}
			if ( Object1.SoTietLyThuyet != null && Object2.SoTietLyThuyet != null )
			{
				if (Object1.SoTietLyThuyet != Object2.SoTietLyThuyet)
					equal = false;
			}
			else if (Object1.SoTietLyThuyet == null ^ Object2.SoTietLyThuyet == null )
			{
				equal = false;
			}
			if ( Object1.SoTietThucHanh != null && Object2.SoTietThucHanh != null )
			{
				if (Object1.SoTietThucHanh != Object2.SoTietThucHanh)
					equal = false;
			}
			else if (Object1.SoTietThucHanh == null ^ Object2.SoTietThucHanh == null )
			{
				equal = false;
			}
			if ( Object1.HeSoQuyDoiThucHanh != null && Object2.HeSoQuyDoiThucHanh != null )
			{
				if (Object1.HeSoQuyDoiThucHanh != Object2.HeSoQuyDoiThucHanh)
					equal = false;
			}
			else if (Object1.HeSoQuyDoiThucHanh == null ^ Object2.HeSoQuyDoiThucHanh == null )
			{
				equal = false;
			}
			if ( Object1.SoNhomThucHanh != null && Object2.SoNhomThucHanh != null )
			{
				if (Object1.SoNhomThucHanh != Object2.SoNhomThucHanh)
					equal = false;
			}
			else if (Object1.SoNhomThucHanh == null ^ Object2.SoNhomThucHanh == null )
			{
				equal = false;
			}
			if ( Object1.TongSoTiet != null && Object2.TongSoTiet != null )
			{
				if (Object1.TongSoTiet != Object2.TongSoTiet)
					equal = false;
			}
			else if (Object1.TongSoTiet == null ^ Object2.TongSoTiet == null )
			{
				equal = false;
			}
			if ( Object1.SoTietLyThuyetTrenTuan != null && Object2.SoTietLyThuyetTrenTuan != null )
			{
				if (Object1.SoTietLyThuyetTrenTuan != Object2.SoTietLyThuyetTrenTuan)
					equal = false;
			}
			else if (Object1.SoTietLyThuyetTrenTuan == null ^ Object2.SoTietLyThuyetTrenTuan == null )
			{
				equal = false;
			}
			if ( Object1.SoTietThucHanhTrenTuan != null && Object2.SoTietThucHanhTrenTuan != null )
			{
				if (Object1.SoTietThucHanhTrenTuan != Object2.SoTietThucHanhTrenTuan)
					equal = false;
			}
			else if (Object1.SoTietThucHanhTrenTuan == null ^ Object2.SoTietThucHanhTrenTuan == null )
			{
				equal = false;
			}
			if ( Object1.TongSoTietTrenTuan != null && Object2.TongSoTietTrenTuan != null )
			{
				if (Object1.TongSoTietTrenTuan != Object2.TongSoTietTrenTuan)
					equal = false;
			}
			else if (Object1.TongSoTietTrenTuan == null ^ Object2.TongSoTietTrenTuan == null )
			{
				equal = false;
			}
			if ( Object1.HeSoLopDong != null && Object2.HeSoLopDong != null )
			{
				if (Object1.HeSoLopDong != Object2.HeSoLopDong)
					equal = false;
			}
			else if (Object1.HeSoLopDong == null ^ Object2.HeSoLopDong == null )
			{
				equal = false;
			}
			if ( Object1.SiSo != null && Object2.SiSo != null )
			{
				if (Object1.SiSo != Object2.SiSo)
					equal = false;
			}
			else if (Object1.SiSo == null ^ Object2.SiSo == null )
			{
				equal = false;
			}
			if ( Object1.TrangThaiHoSo != null && Object2.TrangThaiHoSo != null )
			{
				if (Object1.TrangThaiHoSo != Object2.TrangThaiHoSo)
					equal = false;
			}
			else if (Object1.TrangThaiHoSo == null ^ Object2.TrangThaiHoSo == null )
			{
				equal = false;
			}
			if ( Object1.DonGia != null && Object2.DonGia != null )
			{
				if (Object1.DonGia != Object2.DonGia)
					equal = false;
			}
			else if (Object1.DonGia == null ^ Object2.DonGia == null )
			{
				equal = false;
			}
			if ( Object1.DonViTienTe != null && Object2.DonViTienTe != null )
			{
				if (Object1.DonViTienTe != Object2.DonViTienTe)
					equal = false;
			}
			else if (Object1.DonViTienTe == null ^ Object2.DonViTienTe == null )
			{
				equal = false;
			}
			if ( Object1.TongGiaTriHopDong != null && Object2.TongGiaTriHopDong != null )
			{
				if (Object1.TongGiaTriHopDong != Object2.TongGiaTriHopDong)
					equal = false;
			}
			else if (Object1.TongGiaTriHopDong == null ^ Object2.TongGiaTriHopDong == null )
			{
				equal = false;
			}
			if ( Object1.GiaTriHopDongConLai != null && Object2.GiaTriHopDongConLai != null )
			{
				if (Object1.GiaTriHopDongConLai != Object2.GiaTriHopDongConLai)
					equal = false;
			}
			else if (Object1.GiaTriHopDongConLai == null ^ Object2.GiaTriHopDongConLai == null )
			{
				equal = false;
			}
			if ( Object1.Thue != null && Object2.Thue != null )
			{
				if (Object1.Thue != Object2.Thue)
					equal = false;
			}
			else if (Object1.Thue == null ^ Object2.Thue == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.DaXacNhan != null && Object2.DaXacNhan != null )
			{
				if (Object1.DaXacNhan != Object2.DaXacNhan)
					equal = false;
			}
			else if (Object1.DaXacNhan == null ^ Object2.DaXacNhan == null )
			{
				equal = false;
			}
			if ( Object1.IsLock != null && Object2.IsLock != null )
			{
				if (Object1.IsLock != Object2.IsLock)
					equal = false;
			}
			else if (Object1.IsLock == null ^ Object2.IsLock == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DanhSachHopDongThinhGiangBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DanhSachHopDongThinhGiangComparer GetComparer()
        {
            return new DanhSachHopDongThinhGiangComparer();
        }
        */

        // Comparer delegates back to DanhSachHopDongThinhGiang
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DanhSachHopDongThinhGiang rhs, DanhSachHopDongThinhGiangColumn which)
        {
            switch (which)
            {
            	
            	
            	case DanhSachHopDongThinhGiangColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.MaGiangVien:
            		return this.MaGiangVien.Value.CompareTo(rhs.MaGiangVien.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.HoTen:
            		return this.HoTen.CompareTo(rhs.HoTen);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.NgaySinh:
            		return this.NgaySinh.CompareTo(rhs.NgaySinh);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.SoCmnd:
            		return this.SoCmnd.CompareTo(rhs.SoCmnd);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.MaHocHam:
            		return this.MaHocHam.Value.CompareTo(rhs.MaHocHam.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.MaHocVi:
            		return this.MaHocVi.Value.CompareTo(rhs.MaHocVi.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.ChuyenNganh:
            		return this.ChuyenNganh.CompareTo(rhs.ChuyenNganh);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.MaSoThue:
            		return this.MaSoThue.CompareTo(rhs.MaSoThue);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.CoQuanCongTac:
            		return this.CoQuanCongTac.CompareTo(rhs.CoQuanCongTac);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.SoHopDong:
            		return this.SoHopDong.CompareTo(rhs.SoHopDong);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.MaDonVi:
            		return this.MaDonVi.CompareTo(rhs.MaDonVi);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.NgayBatDau:
            		return this.NgayBatDau.Value.CompareTo(rhs.NgayBatDau.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.NgayKetThuc:
            		return this.NgayKetThuc.Value.CompareTo(rhs.NgayKetThuc.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.SoTietLyThuyet:
            		return this.SoTietLyThuyet.Value.CompareTo(rhs.SoTietLyThuyet.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.SoTietThucHanh:
            		return this.SoTietThucHanh.Value.CompareTo(rhs.SoTietThucHanh.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.HeSoQuyDoiThucHanh:
            		return this.HeSoQuyDoiThucHanh.Value.CompareTo(rhs.HeSoQuyDoiThucHanh.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.SoNhomThucHanh:
            		return this.SoNhomThucHanh.Value.CompareTo(rhs.SoNhomThucHanh.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.TongSoTiet:
            		return this.TongSoTiet.Value.CompareTo(rhs.TongSoTiet.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.SoTietLyThuyetTrenTuan:
            		return this.SoTietLyThuyetTrenTuan.Value.CompareTo(rhs.SoTietLyThuyetTrenTuan.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.SoTietThucHanhTrenTuan:
            		return this.SoTietThucHanhTrenTuan.Value.CompareTo(rhs.SoTietThucHanhTrenTuan.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.TongSoTietTrenTuan:
            		return this.TongSoTietTrenTuan.Value.CompareTo(rhs.TongSoTietTrenTuan.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.HeSoLopDong:
            		return this.HeSoLopDong.Value.CompareTo(rhs.HeSoLopDong.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.SiSo:
            		return this.SiSo.Value.CompareTo(rhs.SiSo.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.TrangThaiHoSo:
            		return this.TrangThaiHoSo.CompareTo(rhs.TrangThaiHoSo);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.DonGia:
            		return this.DonGia.Value.CompareTo(rhs.DonGia.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.DonViTienTe:
            		return this.DonViTienTe.CompareTo(rhs.DonViTienTe);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.TongGiaTriHopDong:
            		return this.TongGiaTriHopDong.Value.CompareTo(rhs.TongGiaTriHopDong.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.GiaTriHopDongConLai:
            		return this.GiaTriHopDongConLai.Value.CompareTo(rhs.GiaTriHopDongConLai.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.Thue:
            		return this.Thue.Value.CompareTo(rhs.Thue.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.DaXacNhan:
            		return this.DaXacNhan.Value.CompareTo(rhs.DaXacNhan.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.IsLock:
            		return this.IsLock.Value.CompareTo(rhs.IsLock.Value);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.NgayCapNhat:
            		return this.NgayCapNhat.CompareTo(rhs.NgayCapNhat);
            		
            		                 
            	
            	
            	case DanhSachHopDongThinhGiangColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DanhSachHopDongThinhGiangKey> Members
		
		// member variable for the EntityId property
		private DanhSachHopDongThinhGiangKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DanhSachHopDongThinhGiangKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DanhSachHopDongThinhGiangKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DanhSachHopDongThinhGiang")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{41}{40}- Id: {0}{40}- NamHoc: {1}{40}- HocKy: {2}{40}- MaGiangVien: {3}{40}- HoTen: {4}{40}- NgaySinh: {5}{40}- SoCmnd: {6}{40}- MaHocHam: {7}{40}- MaHocVi: {8}{40}- ChuyenNganh: {9}{40}- MaSoThue: {10}{40}- CoQuanCongTac: {11}{40}- MaMonHoc: {12}{40}- MaLopHocPhan: {13}{40}- MaLop: {14}{40}- SoHopDong: {15}{40}- MaDonVi: {16}{40}- NgayBatDau: {17}{40}- NgayKetThuc: {18}{40}- SoTietLyThuyet: {19}{40}- SoTietThucHanh: {20}{40}- HeSoQuyDoiThucHanh: {21}{40}- SoNhomThucHanh: {22}{40}- TongSoTiet: {23}{40}- SoTietLyThuyetTrenTuan: {24}{40}- SoTietThucHanhTrenTuan: {25}{40}- TongSoTietTrenTuan: {26}{40}- HeSoLopDong: {27}{40}- SiSo: {28}{40}- TrangThaiHoSo: {29}{40}- DonGia: {30}{40}- DonViTienTe: {31}{40}- TongGiaTriHopDong: {32}{40}- GiaTriHopDongConLai: {33}{40}- Thue: {34}{40}- GhiChu: {35}{40}- DaXacNhan: {36}{40}- IsLock: {37}{40}- NgayCapNhat: {38}{40}- NguoiCapNhat: {39}{40}{42}", 
				this.Id,
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
				(this.NgaySinh == null) ? string.Empty : this.NgaySinh.ToString(),
				(this.SoCmnd == null) ? string.Empty : this.SoCmnd.ToString(),
				(this.MaHocHam == null) ? string.Empty : this.MaHocHam.ToString(),
				(this.MaHocVi == null) ? string.Empty : this.MaHocVi.ToString(),
				(this.ChuyenNganh == null) ? string.Empty : this.ChuyenNganh.ToString(),
				(this.MaSoThue == null) ? string.Empty : this.MaSoThue.ToString(),
				(this.CoQuanCongTac == null) ? string.Empty : this.CoQuanCongTac.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
				(this.SoHopDong == null) ? string.Empty : this.SoHopDong.ToString(),
				(this.MaDonVi == null) ? string.Empty : this.MaDonVi.ToString(),
				(this.NgayBatDau == null) ? string.Empty : this.NgayBatDau.ToString(),
				(this.NgayKetThuc == null) ? string.Empty : this.NgayKetThuc.ToString(),
				(this.SoTietLyThuyet == null) ? string.Empty : this.SoTietLyThuyet.ToString(),
				(this.SoTietThucHanh == null) ? string.Empty : this.SoTietThucHanh.ToString(),
				(this.HeSoQuyDoiThucHanh == null) ? string.Empty : this.HeSoQuyDoiThucHanh.ToString(),
				(this.SoNhomThucHanh == null) ? string.Empty : this.SoNhomThucHanh.ToString(),
				(this.TongSoTiet == null) ? string.Empty : this.TongSoTiet.ToString(),
				(this.SoTietLyThuyetTrenTuan == null) ? string.Empty : this.SoTietLyThuyetTrenTuan.ToString(),
				(this.SoTietThucHanhTrenTuan == null) ? string.Empty : this.SoTietThucHanhTrenTuan.ToString(),
				(this.TongSoTietTrenTuan == null) ? string.Empty : this.TongSoTietTrenTuan.ToString(),
				(this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString(),
				(this.SiSo == null) ? string.Empty : this.SiSo.ToString(),
				(this.TrangThaiHoSo == null) ? string.Empty : this.TrangThaiHoSo.ToString(),
				(this.DonGia == null) ? string.Empty : this.DonGia.ToString(),
				(this.DonViTienTe == null) ? string.Empty : this.DonViTienTe.ToString(),
				(this.TongGiaTriHopDong == null) ? string.Empty : this.TongGiaTriHopDong.ToString(),
				(this.GiaTriHopDongConLai == null) ? string.Empty : this.GiaTriHopDongConLai.ToString(),
				(this.Thue == null) ? string.Empty : this.Thue.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.DaXacNhan == null) ? string.Empty : this.DaXacNhan.ToString(),
				(this.IsLock == null) ? string.Empty : this.IsLock.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DanhSachHopDongThinhGiang' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DanhSachHopDongThinhGiangEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DanhSachHopDongThinhGiang"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		public System.Int32? MaGiangVien = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		public System.String HoTen = null;
		
		/// <summary>
		/// NgaySinh : 
		/// </summary>
		public System.String NgaySinh = null;
		
		/// <summary>
		/// SoCmnd : 
		/// </summary>
		public System.String SoCmnd = null;
		
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		public System.Int32? MaHocHam = null;
		
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		public System.Int32? MaHocVi = null;
		
		/// <summary>
		/// ChuyenNganh : 
		/// </summary>
		public System.String ChuyenNganh = null;
		
		/// <summary>
		/// MaSoThue : 
		/// </summary>
		public System.String MaSoThue = null;
		
		/// <summary>
		/// CoQuanCongTac : 
		/// </summary>
		public System.String CoQuanCongTac = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String MaLop = null;
		
		/// <summary>
		/// SoHopDong : 
		/// </summary>
		public System.String SoHopDong = null;
		
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		public System.String MaDonVi = null;
		
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		public System.DateTime? NgayBatDau = null;
		
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		public System.DateTime? NgayKetThuc = null;
		
		/// <summary>
		/// SoTietLyThuyet : 
		/// </summary>
		public System.Decimal? SoTietLyThuyet = null;
		
		/// <summary>
		/// SoTietThucHanh : 
		/// </summary>
		public System.Decimal? SoTietThucHanh = null;
		
		/// <summary>
		/// HeSoQuyDoiThucHanh : 
		/// </summary>
		public System.Decimal? HeSoQuyDoiThucHanh = null;
		
		/// <summary>
		/// SoNhomThucHanh : 
		/// </summary>
		public System.Int32? SoNhomThucHanh = null;
		
		/// <summary>
		/// TongSoTiet : 
		/// </summary>
		public System.Decimal? TongSoTiet = null;
		
		/// <summary>
		/// SoTietLyThuyetTrenTuan : 
		/// </summary>
		public System.Decimal? SoTietLyThuyetTrenTuan = null;
		
		/// <summary>
		/// SoTietThucHanhTrenTuan : 
		/// </summary>
		public System.Decimal? SoTietThucHanhTrenTuan = null;
		
		/// <summary>
		/// TongSoTietTrenTuan : 
		/// </summary>
		public System.Decimal? TongSoTietTrenTuan = null;
		
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		public System.Decimal? HeSoLopDong = null;
		
		/// <summary>
		/// SiSo : 
		/// </summary>
		public System.Int32? SiSo = null;
		
		/// <summary>
		/// TrangThaiHoSo : 
		/// </summary>
		public System.String TrangThaiHoSo = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		public System.Decimal? DonGia = null;
		
		/// <summary>
		/// DonViTienTe : 
		/// </summary>
		public System.String DonViTienTe = null;
		
		/// <summary>
		/// TongGiaTriHopDong : 
		/// </summary>
		public System.Decimal? TongGiaTriHopDong = null;
		
		/// <summary>
		/// GiaTriHopDongConLai : 
		/// </summary>
		public System.Decimal? GiaTriHopDongConLai = null;
		
		/// <summary>
		/// Thue : 
		/// </summary>
		public System.Decimal? Thue = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// DaXacNhan : 
		/// </summary>
		public System.Boolean? DaXacNhan = null;
		
		/// <summary>
		/// IsLock : 
		/// </summary>
		public System.Boolean? IsLock = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.String NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DanhSachHopDongThinhGiangEntityData _tmp = new DanhSachHopDongThinhGiangEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.HoTen = this.HoTen;
			_tmp.NgaySinh = this.NgaySinh;
			_tmp.SoCmnd = this.SoCmnd;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.ChuyenNganh = this.ChuyenNganh;
			_tmp.MaSoThue = this.MaSoThue;
			_tmp.CoQuanCongTac = this.CoQuanCongTac;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaLop = this.MaLop;
			_tmp.SoHopDong = this.SoHopDong;
			_tmp.MaDonVi = this.MaDonVi;
			_tmp.NgayBatDau = this.NgayBatDau;
			_tmp.NgayKetThuc = this.NgayKetThuc;
			_tmp.SoTietLyThuyet = this.SoTietLyThuyet;
			_tmp.SoTietThucHanh = this.SoTietThucHanh;
			_tmp.HeSoQuyDoiThucHanh = this.HeSoQuyDoiThucHanh;
			_tmp.SoNhomThucHanh = this.SoNhomThucHanh;
			_tmp.TongSoTiet = this.TongSoTiet;
			_tmp.SoTietLyThuyetTrenTuan = this.SoTietLyThuyetTrenTuan;
			_tmp.SoTietThucHanhTrenTuan = this.SoTietThucHanhTrenTuan;
			_tmp.TongSoTietTrenTuan = this.TongSoTietTrenTuan;
			_tmp.HeSoLopDong = this.HeSoLopDong;
			_tmp.SiSo = this.SiSo;
			_tmp.TrangThaiHoSo = this.TrangThaiHoSo;
			_tmp.DonGia = this.DonGia;
			_tmp.DonViTienTe = this.DonViTienTe;
			_tmp.TongGiaTriHopDong = this.TongGiaTriHopDong;
			_tmp.GiaTriHopDongConLai = this.GiaTriHopDongConLai;
			_tmp.Thue = this.Thue;
			_tmp.GhiChu = this.GhiChu;
			_tmp.DaXacNhan = this.DaXacNhan;
			_tmp.IsLock = this.IsLock;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DanhSachHopDongThinhGiangEntityData _tmp = new DanhSachHopDongThinhGiangEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.HoTen = this.HoTen;
			_tmp.NgaySinh = this.NgaySinh;
			_tmp.SoCmnd = this.SoCmnd;
			_tmp.MaHocHam = this.MaHocHam;
			_tmp.MaHocVi = this.MaHocVi;
			_tmp.ChuyenNganh = this.ChuyenNganh;
			_tmp.MaSoThue = this.MaSoThue;
			_tmp.CoQuanCongTac = this.CoQuanCongTac;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaLop = this.MaLop;
			_tmp.SoHopDong = this.SoHopDong;
			_tmp.MaDonVi = this.MaDonVi;
			_tmp.NgayBatDau = this.NgayBatDau;
			_tmp.NgayKetThuc = this.NgayKetThuc;
			_tmp.SoTietLyThuyet = this.SoTietLyThuyet;
			_tmp.SoTietThucHanh = this.SoTietThucHanh;
			_tmp.HeSoQuyDoiThucHanh = this.HeSoQuyDoiThucHanh;
			_tmp.SoNhomThucHanh = this.SoNhomThucHanh;
			_tmp.TongSoTiet = this.TongSoTiet;
			_tmp.SoTietLyThuyetTrenTuan = this.SoTietLyThuyetTrenTuan;
			_tmp.SoTietThucHanhTrenTuan = this.SoTietThucHanhTrenTuan;
			_tmp.TongSoTietTrenTuan = this.TongSoTietTrenTuan;
			_tmp.HeSoLopDong = this.HeSoLopDong;
			_tmp.SiSo = this.SiSo;
			_tmp.TrangThaiHoSo = this.TrangThaiHoSo;
			_tmp.DonGia = this.DonGia;
			_tmp.DonViTienTe = this.DonViTienTe;
			_tmp.TongGiaTriHopDong = this.TongGiaTriHopDong;
			_tmp.GiaTriHopDongConLai = this.GiaTriHopDongConLai;
			_tmp.Thue = this.Thue;
			_tmp.GhiChu = this.GhiChu;
			_tmp.DaXacNhan = this.DaXacNhan;
			_tmp.IsLock = this.IsLock;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DanhSachHopDongThinhGiangColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DanhSachHopDongThinhGiangColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DanhSachHopDongThinhGiangColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DanhSachHopDongThinhGiangColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DanhSachHopDongThinhGiangColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DanhSachHopDongThinhGiangColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				DanhSachHopDongThinhGiangEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DanhSachHopDongThinhGiangEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DanhSachHopDongThinhGiangColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DanhSachHopDongThinhGiangColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DanhSachHopDongThinhGiangEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DanhSachHopDongThinhGiangEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DanhSachHopDongThinhGiangEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DanhSachHopDongThinhGiang"/> object.
	/// </remarks>
	public class DanhSachHopDongThinhGiangEventArgs : System.EventArgs
	{
		private DanhSachHopDongThinhGiangColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DanhSachHopDongThinhGiangEventArgs class.
		///</summary>
		public DanhSachHopDongThinhGiangEventArgs(DanhSachHopDongThinhGiangColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DanhSachHopDongThinhGiangEventArgs class.
		///</summary>
		public DanhSachHopDongThinhGiangEventArgs(DanhSachHopDongThinhGiangColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DanhSachHopDongThinhGiangColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DanhSachHopDongThinhGiangColumn" />
		public DanhSachHopDongThinhGiangColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DanhSachHopDongThinhGiang related events.
	///</summary>
	public delegate void DanhSachHopDongThinhGiangEventHandler(object sender, DanhSachHopDongThinhGiangEventArgs e);
	
	#region DanhSachHopDongThinhGiangComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DanhSachHopDongThinhGiangComparer : System.Collections.Generic.IComparer<DanhSachHopDongThinhGiang>
	{
		DanhSachHopDongThinhGiangColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DanhSachHopDongThinhGiangComparer"/> class.
        /// </summary>
		public DanhSachHopDongThinhGiangComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DanhSachHopDongThinhGiangComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DanhSachHopDongThinhGiangComparer(DanhSachHopDongThinhGiangColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="DanhSachHopDongThinhGiang"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="DanhSachHopDongThinhGiang"/> to compare.</param>
        /// <param name="b">The second <c>DanhSachHopDongThinhGiang</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DanhSachHopDongThinhGiang a, DanhSachHopDongThinhGiang b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DanhSachHopDongThinhGiang entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DanhSachHopDongThinhGiang a, DanhSachHopDongThinhGiang b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DanhSachHopDongThinhGiangColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DanhSachHopDongThinhGiangKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DanhSachHopDongThinhGiang"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DanhSachHopDongThinhGiangKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangKey class.
		/// </summary>
		public DanhSachHopDongThinhGiangKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangKey class.
		/// </summary>
		public DanhSachHopDongThinhGiangKey(DanhSachHopDongThinhGiangBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangKey class.
		/// </summary>
		public DanhSachHopDongThinhGiangKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DanhSachHopDongThinhGiangBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DanhSachHopDongThinhGiangBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DanhSachHopDongThinhGiangColumn Enum
	
	/// <summary>
	/// Enumerate the DanhSachHopDongThinhGiang columns.
	/// </summary>
	[Serializable]
	public enum DanhSachHopDongThinhGiangColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 2,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 3,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien = 4,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("Ho Ten")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		HoTen = 5,
		/// <summary>
		/// NgaySinh : 
		/// </summary>
		[EnumTextValue("Ngay Sinh")]
		[ColumnEnum("NgaySinh", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		NgaySinh = 6,
		/// <summary>
		/// SoCmnd : 
		/// </summary>
		[EnumTextValue("So Cmnd")]
		[ColumnEnum("SoCmnd", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		SoCmnd = 7,
		/// <summary>
		/// MaHocHam : 
		/// </summary>
		[EnumTextValue("Ma Hoc Ham")]
		[ColumnEnum("MaHocHam", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocHam = 8,
		/// <summary>
		/// MaHocVi : 
		/// </summary>
		[EnumTextValue("Ma Hoc Vi")]
		[ColumnEnum("MaHocVi", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaHocVi = 9,
		/// <summary>
		/// ChuyenNganh : 
		/// </summary>
		[EnumTextValue("Chuyen Nganh")]
		[ColumnEnum("ChuyenNganh", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ChuyenNganh = 10,
		/// <summary>
		/// MaSoThue : 
		/// </summary>
		[EnumTextValue("Ma So Thue")]
		[ColumnEnum("MaSoThue", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaSoThue = 11,
		/// <summary>
		/// CoQuanCongTac : 
		/// </summary>
		[EnumTextValue("Co Quan Cong Tac")]
		[ColumnEnum("CoQuanCongTac", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		CoQuanCongTac = 12,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 13,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MaLopHocPhan = 14,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("Ma Lop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		MaLop = 15,
		/// <summary>
		/// SoHopDong : 
		/// </summary>
		[EnumTextValue("So Hop Dong")]
		[ColumnEnum("SoHopDong", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		SoHopDong = 16,
		/// <summary>
		/// MaDonVi : 
		/// </summary>
		[EnumTextValue("Ma Don Vi")]
		[ColumnEnum("MaDonVi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaDonVi = 17,
		/// <summary>
		/// NgayBatDau : 
		/// </summary>
		[EnumTextValue("Ngay Bat Dau")]
		[ColumnEnum("NgayBatDau", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayBatDau = 18,
		/// <summary>
		/// NgayKetThuc : 
		/// </summary>
		[EnumTextValue("Ngay Ket Thuc")]
		[ColumnEnum("NgayKetThuc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayKetThuc = 19,
		/// <summary>
		/// SoTietLyThuyet : 
		/// </summary>
		[EnumTextValue("So Tiet Ly Thuyet")]
		[ColumnEnum("SoTietLyThuyet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietLyThuyet = 20,
		/// <summary>
		/// SoTietThucHanh : 
		/// </summary>
		[EnumTextValue("So Tiet Thuc Hanh")]
		[ColumnEnum("SoTietThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietThucHanh = 21,
		/// <summary>
		/// HeSoQuyDoiThucHanh : 
		/// </summary>
		[EnumTextValue("He So Quy Doi Thuc Hanh")]
		[ColumnEnum("HeSoQuyDoiThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoQuyDoiThucHanh = 22,
		/// <summary>
		/// SoNhomThucHanh : 
		/// </summary>
		[EnumTextValue("So Nhom Thuc Hanh")]
		[ColumnEnum("SoNhomThucHanh", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoNhomThucHanh = 23,
		/// <summary>
		/// TongSoTiet : 
		/// </summary>
		[EnumTextValue("Tong So Tiet")]
		[ColumnEnum("TongSoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongSoTiet = 24,
		/// <summary>
		/// SoTietLyThuyetTrenTuan : 
		/// </summary>
		[EnumTextValue("So Tiet Ly Thuyet Tren Tuan")]
		[ColumnEnum("SoTietLyThuyetTrenTuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietLyThuyetTrenTuan = 25,
		/// <summary>
		/// SoTietThucHanhTrenTuan : 
		/// </summary>
		[EnumTextValue("So Tiet Thuc Hanh Tren Tuan")]
		[ColumnEnum("SoTietThucHanhTrenTuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTietThucHanhTrenTuan = 26,
		/// <summary>
		/// TongSoTietTrenTuan : 
		/// </summary>
		[EnumTextValue("Tong So Tiet Tren Tuan")]
		[ColumnEnum("TongSoTietTrenTuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongSoTietTrenTuan = 27,
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		[EnumTextValue("He So Lop Dong")]
		[ColumnEnum("HeSoLopDong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLopDong = 28,
		/// <summary>
		/// SiSo : 
		/// </summary>
		[EnumTextValue("Si So")]
		[ColumnEnum("SiSo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSo = 29,
		/// <summary>
		/// TrangThaiHoSo : 
		/// </summary>
		[EnumTextValue("Trang Thai Ho So")]
		[ColumnEnum("TrangThaiHoSo", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TrangThaiHoSo = 30,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("Don Gia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGia = 31,
		/// <summary>
		/// DonViTienTe : 
		/// </summary>
		[EnumTextValue("Don Vi Tien Te")]
		[ColumnEnum("DonViTienTe", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DonViTienTe = 32,
		/// <summary>
		/// TongGiaTriHopDong : 
		/// </summary>
		[EnumTextValue("Tong Gia Tri Hop Dong")]
		[ColumnEnum("TongGiaTriHopDong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongGiaTriHopDong = 33,
		/// <summary>
		/// GiaTriHopDongConLai : 
		/// </summary>
		[EnumTextValue("Gia Tri Hop Dong Con Lai")]
		[ColumnEnum("GiaTriHopDongConLai", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GiaTriHopDongConLai = 34,
		/// <summary>
		/// Thue : 
		/// </summary>
		[EnumTextValue("Thue")]
		[ColumnEnum("Thue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Thue = 35,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true)]
		GhiChu = 36,
		/// <summary>
		/// DaXacNhan : 
		/// </summary>
		[EnumTextValue("Da Xac Nhan")]
		[ColumnEnum("DaXacNhan", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DaXacNhan = 37,
		/// <summary>
		/// IsLock : 
		/// </summary>
		[EnumTextValue("Is Lock")]
		[ColumnEnum("IsLock", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsLock = 38,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NgayCapNhat = 39,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 40
	}//End enum

	#endregion DanhSachHopDongThinhGiangColumn Enum

} // end namespace
