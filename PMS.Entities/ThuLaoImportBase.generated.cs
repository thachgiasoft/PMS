
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThuLaoImport.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThuLaoImport' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThuLaoImportBase : EntityBase, IThuLaoImport, IEntityId<ThuLaoImportKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThuLaoImportEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThuLaoImportEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThuLaoImportEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThuLaoImport> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoImportEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThuLaoImportEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThuLaoImportBase"/> instance.
		///</summary>
		public ThuLaoImportBase()
		{
			this.entityData = new ThuLaoImportEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThuLaoImportBase"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maCauHinhChotGio"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_noiDungChi"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_siSo"></param>
		///<param name="_cuNhanTaiNang"></param>
		///<param name="_soTiet"></param>
		///<param name="_heSoChucDanh"></param>
		///<param name="_heSoCoSo"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_heSoKhac"></param>
		///<param name="_tongCongHeSo"></param>
		///<param name="_tietGiangGoc"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_chiPhiDiLai"></param>
		///<param name="_donGia"></param>
		///<param name="_thanhTien"></param>
		///<param name="_tongCong"></param>
		///<param name="_tietNoKyTruoc"></param>
		///<param name="_tietNoKyNay"></param>
		///<param name="_tongNoGioChuan"></param>
		///<param name="_thue"></param>
		///<param name="_thucLanh"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_heSoBacDaoTao"></param>
		///<param name="_heSoThucHanh"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinhDaoTao"></param>
		public ThuLaoImportBase(System.String _namHoc, System.String _hocKy, System.Int32? _maCauHinhChotGio, 
			System.String _dotChiTra, System.String _maGiangVienQuanLy, System.String _hoTen, System.String _noiDungChi, 
			System.String _maMonHoc, System.String _tenMonHoc, System.String _maLop, System.Int32? _siSo, 
			System.Int32? _cuNhanTaiNang, System.Decimal? _soTiet, System.Decimal? _heSoChucDanh, 
			System.Decimal? _heSoCoSo, System.Decimal? _heSoLopDong, System.Decimal? _heSoKhac, System.Decimal? _tongCongHeSo, 
			System.Decimal? _tietGiangGoc, System.Decimal? _tietQuyDoi, System.Decimal? _chiPhiDiLai, 
			System.Decimal? _donGia, System.Decimal? _thanhTien, System.Decimal? _tongCong, System.Decimal? _tietNoKyTruoc, 
			System.Decimal? _tietNoKyNay, System.Decimal? _tongNoGioChuan, System.Decimal? _thue, 
			System.Decimal? _thucLanh, System.DateTime? _ngayCapNhat, System.String _nguoiCapNhat, 
			System.Decimal? _heSoBacDaoTao, System.Decimal? _heSoThucHanh, System.String _maBacDaoTao, 
			System.String _maLoaiHinhDaoTao)
		{
			this.entityData = new ThuLaoImportEntityData();
			this.backupData = null;

			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.MaCauHinhChotGio = _maCauHinhChotGio;
			this.DotChiTra = _dotChiTra;
			this.MaGiangVienQuanLy = _maGiangVienQuanLy;
			this.HoTen = _hoTen;
			this.NoiDungChi = _noiDungChi;
			this.MaMonHoc = _maMonHoc;
			this.TenMonHoc = _tenMonHoc;
			this.MaLop = _maLop;
			this.SiSo = _siSo;
			this.CuNhanTaiNang = _cuNhanTaiNang;
			this.SoTiet = _soTiet;
			this.HeSoChucDanh = _heSoChucDanh;
			this.HeSoCoSo = _heSoCoSo;
			this.HeSoLopDong = _heSoLopDong;
			this.HeSoKhac = _heSoKhac;
			this.TongCongHeSo = _tongCongHeSo;
			this.TietGiangGoc = _tietGiangGoc;
			this.TietQuyDoi = _tietQuyDoi;
			this.ChiPhiDiLai = _chiPhiDiLai;
			this.DonGia = _donGia;
			this.ThanhTien = _thanhTien;
			this.TongCong = _tongCong;
			this.TietNoKyTruoc = _tietNoKyTruoc;
			this.TietNoKyNay = _tietNoKyNay;
			this.TongNoGioChuan = _tongNoGioChuan;
			this.Thue = _thue;
			this.ThucLanh = _thucLanh;
			this.NgayCapNhat = _ngayCapNhat;
			this.NguoiCapNhat = _nguoiCapNhat;
			this.HeSoBacDaoTao = _heSoBacDaoTao;
			this.HeSoThucHanh = _heSoThucHanh;
			this.MaBacDaoTao = _maBacDaoTao;
			this.MaLoaiHinhDaoTao = _maLoaiHinhDaoTao;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThuLaoImport"/> instance.
		///</summary>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maCauHinhChotGio"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_maGiangVienQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_noiDungChi"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_siSo"></param>
		///<param name="_cuNhanTaiNang"></param>
		///<param name="_soTiet"></param>
		///<param name="_heSoChucDanh"></param>
		///<param name="_heSoCoSo"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_heSoKhac"></param>
		///<param name="_tongCongHeSo"></param>
		///<param name="_tietGiangGoc"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_chiPhiDiLai"></param>
		///<param name="_donGia"></param>
		///<param name="_thanhTien"></param>
		///<param name="_tongCong"></param>
		///<param name="_tietNoKyTruoc"></param>
		///<param name="_tietNoKyNay"></param>
		///<param name="_tongNoGioChuan"></param>
		///<param name="_thue"></param>
		///<param name="_thucLanh"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_heSoBacDaoTao"></param>
		///<param name="_heSoThucHanh"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinhDaoTao"></param>
		public static ThuLaoImport CreateThuLaoImport(System.String _namHoc, System.String _hocKy, System.Int32? _maCauHinhChotGio, 
			System.String _dotChiTra, System.String _maGiangVienQuanLy, System.String _hoTen, System.String _noiDungChi, 
			System.String _maMonHoc, System.String _tenMonHoc, System.String _maLop, System.Int32? _siSo, 
			System.Int32? _cuNhanTaiNang, System.Decimal? _soTiet, System.Decimal? _heSoChucDanh, 
			System.Decimal? _heSoCoSo, System.Decimal? _heSoLopDong, System.Decimal? _heSoKhac, System.Decimal? _tongCongHeSo, 
			System.Decimal? _tietGiangGoc, System.Decimal? _tietQuyDoi, System.Decimal? _chiPhiDiLai, 
			System.Decimal? _donGia, System.Decimal? _thanhTien, System.Decimal? _tongCong, System.Decimal? _tietNoKyTruoc, 
			System.Decimal? _tietNoKyNay, System.Decimal? _tongNoGioChuan, System.Decimal? _thue, 
			System.Decimal? _thucLanh, System.DateTime? _ngayCapNhat, System.String _nguoiCapNhat, 
			System.Decimal? _heSoBacDaoTao, System.Decimal? _heSoThucHanh, System.String _maBacDaoTao, 
			System.String _maLoaiHinhDaoTao)
		{
			ThuLaoImport newThuLaoImport = new ThuLaoImport();
			newThuLaoImport.NamHoc = _namHoc;
			newThuLaoImport.HocKy = _hocKy;
			newThuLaoImport.MaCauHinhChotGio = _maCauHinhChotGio;
			newThuLaoImport.DotChiTra = _dotChiTra;
			newThuLaoImport.MaGiangVienQuanLy = _maGiangVienQuanLy;
			newThuLaoImport.HoTen = _hoTen;
			newThuLaoImport.NoiDungChi = _noiDungChi;
			newThuLaoImport.MaMonHoc = _maMonHoc;
			newThuLaoImport.TenMonHoc = _tenMonHoc;
			newThuLaoImport.MaLop = _maLop;
			newThuLaoImport.SiSo = _siSo;
			newThuLaoImport.CuNhanTaiNang = _cuNhanTaiNang;
			newThuLaoImport.SoTiet = _soTiet;
			newThuLaoImport.HeSoChucDanh = _heSoChucDanh;
			newThuLaoImport.HeSoCoSo = _heSoCoSo;
			newThuLaoImport.HeSoLopDong = _heSoLopDong;
			newThuLaoImport.HeSoKhac = _heSoKhac;
			newThuLaoImport.TongCongHeSo = _tongCongHeSo;
			newThuLaoImport.TietGiangGoc = _tietGiangGoc;
			newThuLaoImport.TietQuyDoi = _tietQuyDoi;
			newThuLaoImport.ChiPhiDiLai = _chiPhiDiLai;
			newThuLaoImport.DonGia = _donGia;
			newThuLaoImport.ThanhTien = _thanhTien;
			newThuLaoImport.TongCong = _tongCong;
			newThuLaoImport.TietNoKyTruoc = _tietNoKyTruoc;
			newThuLaoImport.TietNoKyNay = _tietNoKyNay;
			newThuLaoImport.TongNoGioChuan = _tongNoGioChuan;
			newThuLaoImport.Thue = _thue;
			newThuLaoImport.ThucLanh = _thucLanh;
			newThuLaoImport.NgayCapNhat = _ngayCapNhat;
			newThuLaoImport.NguoiCapNhat = _nguoiCapNhat;
			newThuLaoImport.HeSoBacDaoTao = _heSoBacDaoTao;
			newThuLaoImport.HeSoThucHanh = _heSoThucHanh;
			newThuLaoImport.MaBacDaoTao = _maBacDaoTao;
			newThuLaoImport.MaLoaiHinhDaoTao = _maLoaiHinhDaoTao;
			return newThuLaoImport;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(ThuLaoImportColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(ThuLaoImportColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(ThuLaoImportColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaCauHinhChotGio property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaCauHinhChotGio
		{
			get
			{
				return this.entityData.MaCauHinhChotGio; 
			}
			
			set
			{
				if (this.entityData.MaCauHinhChotGio == value)
					return;
				
                OnPropertyChanging("MaCauHinhChotGio");                    
				OnColumnChanging(ThuLaoImportColumn.MaCauHinhChotGio, this.entityData.MaCauHinhChotGio);
				this.entityData.MaCauHinhChotGio = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.MaCauHinhChotGio, this.entityData.MaCauHinhChotGio);
				OnPropertyChanged("MaCauHinhChotGio");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DotChiTra property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String DotChiTra
		{
			get
			{
				return this.entityData.DotChiTra; 
			}
			
			set
			{
				if (this.entityData.DotChiTra == value)
					return;
				
                OnPropertyChanging("DotChiTra");                    
				OnColumnChanging(ThuLaoImportColumn.DotChiTra, this.entityData.DotChiTra);
				this.entityData.DotChiTra = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.DotChiTra, this.entityData.DotChiTra);
				OnPropertyChanged("DotChiTra");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVienQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaGiangVienQuanLy
		{
			get
			{
				return this.entityData.MaGiangVienQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaGiangVienQuanLy == value)
					return;
				
                OnPropertyChanging("MaGiangVienQuanLy");                    
				OnColumnChanging(ThuLaoImportColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				this.entityData.MaGiangVienQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.MaGiangVienQuanLy, this.entityData.MaGiangVienQuanLy);
				OnPropertyChanged("MaGiangVienQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HoTen property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String HoTen
		{
			get
			{
				return this.entityData.HoTen; 
			}
			
			set
			{
				if (this.entityData.HoTen == value)
					return;
				
                OnPropertyChanging("HoTen");                    
				OnColumnChanging(ThuLaoImportColumn.HoTen, this.entityData.HoTen);
				this.entityData.HoTen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.HoTen, this.entityData.HoTen);
				OnPropertyChanged("HoTen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoiDungChi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String NoiDungChi
		{
			get
			{
				return this.entityData.NoiDungChi; 
			}
			
			set
			{
				if (this.entityData.NoiDungChi == value)
					return;
				
                OnPropertyChanging("NoiDungChi");                    
				OnColumnChanging(ThuLaoImportColumn.NoiDungChi, this.entityData.NoiDungChi);
				this.entityData.NoiDungChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.NoiDungChi, this.entityData.NoiDungChi);
				OnPropertyChanged("NoiDungChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(ThuLaoImportColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String TenMonHoc
		{
			get
			{
				return this.entityData.TenMonHoc; 
			}
			
			set
			{
				if (this.entityData.TenMonHoc == value)
					return;
				
                OnPropertyChanging("TenMonHoc");                    
				OnColumnChanging(ThuLaoImportColumn.TenMonHoc, this.entityData.TenMonHoc);
				this.entityData.TenMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.TenMonHoc, this.entityData.TenMonHoc);
				OnPropertyChanged("TenMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
				
                OnPropertyChanging("MaLop");                    
				OnColumnChanging(ThuLaoImportColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SiSo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SiSo
		{
			get
			{
				return this.entityData.SiSo; 
			}
			
			set
			{
				if (this.entityData.SiSo == value)
					return;
				
                OnPropertyChanging("SiSo");                    
				OnColumnChanging(ThuLaoImportColumn.SiSo, this.entityData.SiSo);
				this.entityData.SiSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.SiSo, this.entityData.SiSo);
				OnPropertyChanged("SiSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CuNhanTaiNang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CuNhanTaiNang
		{
			get
			{
				return this.entityData.CuNhanTaiNang; 
			}
			
			set
			{
				if (this.entityData.CuNhanTaiNang == value)
					return;
				
                OnPropertyChanging("CuNhanTaiNang");                    
				OnColumnChanging(ThuLaoImportColumn.CuNhanTaiNang, this.entityData.CuNhanTaiNang);
				this.entityData.CuNhanTaiNang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.CuNhanTaiNang, this.entityData.CuNhanTaiNang);
				OnPropertyChanged("CuNhanTaiNang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTiet
		{
			get
			{
				return this.entityData.SoTiet; 
			}
			
			set
			{
				if (this.entityData.SoTiet == value)
					return;
				
                OnPropertyChanging("SoTiet");                    
				OnColumnChanging(ThuLaoImportColumn.SoTiet, this.entityData.SoTiet);
				this.entityData.SoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.SoTiet, this.entityData.SoTiet);
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoChucDanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoChucDanh
		{
			get
			{
				return this.entityData.HeSoChucDanh; 
			}
			
			set
			{
				if (this.entityData.HeSoChucDanh == value)
					return;
				
                OnPropertyChanging("HeSoChucDanh");                    
				OnColumnChanging(ThuLaoImportColumn.HeSoChucDanh, this.entityData.HeSoChucDanh);
				this.entityData.HeSoChucDanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.HeSoChucDanh, this.entityData.HeSoChucDanh);
				OnPropertyChanged("HeSoChucDanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoCoSo property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoCoSo
		{
			get
			{
				return this.entityData.HeSoCoSo; 
			}
			
			set
			{
				if (this.entityData.HeSoCoSo == value)
					return;
				
                OnPropertyChanging("HeSoCoSo");                    
				OnColumnChanging(ThuLaoImportColumn.HeSoCoSo, this.entityData.HeSoCoSo);
				this.entityData.HeSoCoSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.HeSoCoSo, this.entityData.HeSoCoSo);
				OnPropertyChanged("HeSoCoSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoLopDong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoLopDong
		{
			get
			{
				return this.entityData.HeSoLopDong; 
			}
			
			set
			{
				if (this.entityData.HeSoLopDong == value)
					return;
				
                OnPropertyChanging("HeSoLopDong");                    
				OnColumnChanging(ThuLaoImportColumn.HeSoLopDong, this.entityData.HeSoLopDong);
				this.entityData.HeSoLopDong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.HeSoLopDong, this.entityData.HeSoLopDong);
				OnPropertyChanged("HeSoLopDong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoKhac property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoKhac
		{
			get
			{
				return this.entityData.HeSoKhac; 
			}
			
			set
			{
				if (this.entityData.HeSoKhac == value)
					return;
				
                OnPropertyChanging("HeSoKhac");                    
				OnColumnChanging(ThuLaoImportColumn.HeSoKhac, this.entityData.HeSoKhac);
				this.entityData.HeSoKhac = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.HeSoKhac, this.entityData.HeSoKhac);
				OnPropertyChanged("HeSoKhac");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongCongHeSo property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongCongHeSo
		{
			get
			{
				return this.entityData.TongCongHeSo; 
			}
			
			set
			{
				if (this.entityData.TongCongHeSo == value)
					return;
				
                OnPropertyChanging("TongCongHeSo");                    
				OnColumnChanging(ThuLaoImportColumn.TongCongHeSo, this.entityData.TongCongHeSo);
				this.entityData.TongCongHeSo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.TongCongHeSo, this.entityData.TongCongHeSo);
				OnPropertyChanged("TongCongHeSo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietGiangGoc property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietGiangGoc
		{
			get
			{
				return this.entityData.TietGiangGoc; 
			}
			
			set
			{
				if (this.entityData.TietGiangGoc == value)
					return;
				
                OnPropertyChanging("TietGiangGoc");                    
				OnColumnChanging(ThuLaoImportColumn.TietGiangGoc, this.entityData.TietGiangGoc);
				this.entityData.TietGiangGoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.TietGiangGoc, this.entityData.TietGiangGoc);
				OnPropertyChanged("TietGiangGoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietQuyDoi
		{
			get
			{
				return this.entityData.TietQuyDoi; 
			}
			
			set
			{
				if (this.entityData.TietQuyDoi == value)
					return;
				
                OnPropertyChanging("TietQuyDoi");                    
				OnColumnChanging(ThuLaoImportColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				this.entityData.TietQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				OnPropertyChanged("TietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChiPhiDiLai property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ChiPhiDiLai
		{
			get
			{
				return this.entityData.ChiPhiDiLai; 
			}
			
			set
			{
				if (this.entityData.ChiPhiDiLai == value)
					return;
				
                OnPropertyChanging("ChiPhiDiLai");                    
				OnColumnChanging(ThuLaoImportColumn.ChiPhiDiLai, this.entityData.ChiPhiDiLai);
				this.entityData.ChiPhiDiLai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.ChiPhiDiLai, this.entityData.ChiPhiDiLai);
				OnPropertyChanged("ChiPhiDiLai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGia
		{
			get
			{
				return this.entityData.DonGia; 
			}
			
			set
			{
				if (this.entityData.DonGia == value)
					return;
				
                OnPropertyChanging("DonGia");                    
				OnColumnChanging(ThuLaoImportColumn.DonGia, this.entityData.DonGia);
				this.entityData.DonGia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.DonGia, this.entityData.DonGia);
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThanhTien property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ThanhTien
		{
			get
			{
				return this.entityData.ThanhTien; 
			}
			
			set
			{
				if (this.entityData.ThanhTien == value)
					return;
				
                OnPropertyChanging("ThanhTien");                    
				OnColumnChanging(ThuLaoImportColumn.ThanhTien, this.entityData.ThanhTien);
				this.entityData.ThanhTien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.ThanhTien, this.entityData.ThanhTien);
				OnPropertyChanged("ThanhTien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongCong property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongCong
		{
			get
			{
				return this.entityData.TongCong; 
			}
			
			set
			{
				if (this.entityData.TongCong == value)
					return;
				
                OnPropertyChanging("TongCong");                    
				OnColumnChanging(ThuLaoImportColumn.TongCong, this.entityData.TongCong);
				this.entityData.TongCong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.TongCong, this.entityData.TongCong);
				OnPropertyChanged("TongCong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietNoKyTruoc property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietNoKyTruoc
		{
			get
			{
				return this.entityData.TietNoKyTruoc; 
			}
			
			set
			{
				if (this.entityData.TietNoKyTruoc == value)
					return;
				
                OnPropertyChanging("TietNoKyTruoc");                    
				OnColumnChanging(ThuLaoImportColumn.TietNoKyTruoc, this.entityData.TietNoKyTruoc);
				this.entityData.TietNoKyTruoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.TietNoKyTruoc, this.entityData.TietNoKyTruoc);
				OnPropertyChanged("TietNoKyTruoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietNoKyNay property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietNoKyNay
		{
			get
			{
				return this.entityData.TietNoKyNay; 
			}
			
			set
			{
				if (this.entityData.TietNoKyNay == value)
					return;
				
                OnPropertyChanging("TietNoKyNay");                    
				OnColumnChanging(ThuLaoImportColumn.TietNoKyNay, this.entityData.TietNoKyNay);
				this.entityData.TietNoKyNay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.TietNoKyNay, this.entityData.TietNoKyNay);
				OnPropertyChanged("TietNoKyNay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongNoGioChuan property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongNoGioChuan
		{
			get
			{
				return this.entityData.TongNoGioChuan; 
			}
			
			set
			{
				if (this.entityData.TongNoGioChuan == value)
					return;
				
                OnPropertyChanging("TongNoGioChuan");                    
				OnColumnChanging(ThuLaoImportColumn.TongNoGioChuan, this.entityData.TongNoGioChuan);
				this.entityData.TongNoGioChuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.TongNoGioChuan, this.entityData.TongNoGioChuan);
				OnPropertyChanged("TongNoGioChuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Thue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Thue
		{
			get
			{
				return this.entityData.Thue; 
			}
			
			set
			{
				if (this.entityData.Thue == value)
					return;
				
                OnPropertyChanging("Thue");                    
				OnColumnChanging(ThuLaoImportColumn.Thue, this.entityData.Thue);
				this.entityData.Thue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.Thue, this.entityData.Thue);
				OnPropertyChanged("Thue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThucLanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ThucLanh
		{
			get
			{
				return this.entityData.ThucLanh; 
			}
			
			set
			{
				if (this.entityData.ThucLanh == value)
					return;
				
                OnPropertyChanging("ThucLanh");                    
				OnColumnChanging(ThuLaoImportColumn.ThucLanh, this.entityData.ThucLanh);
				this.entityData.ThucLanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.ThucLanh, this.entityData.ThucLanh);
				OnPropertyChanged("ThucLanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayCapNhat
		{
			get
			{
				return this.entityData.NgayCapNhat; 
			}
			
			set
			{
				if (this.entityData.NgayCapNhat == value)
					return;
				
                OnPropertyChanging("NgayCapNhat");                    
				OnColumnChanging(ThuLaoImportColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				this.entityData.NgayCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.NgayCapNhat, this.entityData.NgayCapNhat);
				OnPropertyChanged("NgayCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiCapNhat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NguoiCapNhat
		{
			get
			{
				return this.entityData.NguoiCapNhat; 
			}
			
			set
			{
				if (this.entityData.NguoiCapNhat == value)
					return;
				
                OnPropertyChanging("NguoiCapNhat");                    
				OnColumnChanging(ThuLaoImportColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				this.entityData.NguoiCapNhat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.NguoiCapNhat, this.entityData.NguoiCapNhat);
				OnPropertyChanged("NguoiCapNhat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoBacDaoTao
		{
			get
			{
				return this.entityData.HeSoBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.HeSoBacDaoTao == value)
					return;
				
                OnPropertyChanging("HeSoBacDaoTao");                    
				OnColumnChanging(ThuLaoImportColumn.HeSoBacDaoTao, this.entityData.HeSoBacDaoTao);
				this.entityData.HeSoBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.HeSoBacDaoTao, this.entityData.HeSoBacDaoTao);
				OnPropertyChanged("HeSoBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeSoThucHanh property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeSoThucHanh
		{
			get
			{
				return this.entityData.HeSoThucHanh; 
			}
			
			set
			{
				if (this.entityData.HeSoThucHanh == value)
					return;
				
                OnPropertyChanging("HeSoThucHanh");                    
				OnColumnChanging(ThuLaoImportColumn.HeSoThucHanh, this.entityData.HeSoThucHanh);
				this.entityData.HeSoThucHanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.HeSoThucHanh, this.entityData.HeSoThucHanh);
				OnPropertyChanged("HeSoThucHanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaBacDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaBacDaoTao
		{
			get
			{
				return this.entityData.MaBacDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaBacDaoTao == value)
					return;
				
                OnPropertyChanging("MaBacDaoTao");                    
				OnColumnChanging(ThuLaoImportColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				this.entityData.MaBacDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.MaBacDaoTao, this.entityData.MaBacDaoTao);
				OnPropertyChanged("MaBacDaoTao");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLoaiHinhDaoTao property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaLoaiHinhDaoTao
		{
			get
			{
				return this.entityData.MaLoaiHinhDaoTao; 
			}
			
			set
			{
				if (this.entityData.MaLoaiHinhDaoTao == value)
					return;
				
                OnPropertyChanging("MaLoaiHinhDaoTao");                    
				OnColumnChanging(ThuLaoImportColumn.MaLoaiHinhDaoTao, this.entityData.MaLoaiHinhDaoTao);
				this.entityData.MaLoaiHinhDaoTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThuLaoImportColumn.MaLoaiHinhDaoTao, this.entityData.MaLoaiHinhDaoTao);
				OnPropertyChanged("MaLoaiHinhDaoTao");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DotChiTra", "Dot Chi Tra", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaGiangVienQuanLy", "Ma Giang Vien Quan Ly", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HoTen", "Ho Ten", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NoiDungChi", "Noi Dung Chi", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenMonHoc", "Ten Mon Hoc", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiCapNhat", "Nguoi Cap Nhat", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaBacDaoTao", "Ma Bac Dao Tao", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLoaiHinhDaoTao", "Ma Loai Hinh Dao Tao", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThuLaoImport"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "NamHoc", "HocKy", "MaCauHinhChotGio", "DotChiTra", "MaGiangVienQuanLy", "HoTen", "NoiDungChi", "MaMonHoc", "TenMonHoc", "MaLop", "SiSo", "CuNhanTaiNang", "SoTiet", "HeSoChucDanh", "HeSoCoSo", "HeSoLopDong", "HeSoKhac", "TongCongHeSo", "TietGiangGoc", "TietQuyDoi", "ChiPhiDiLai", "DonGia", "ThanhTien", "TongCong", "TietNoKyTruoc", "TietNoKyNay", "TongNoGioChuan", "Thue", "ThucLanh", "NgayCapNhat", "NguoiCapNhat", "HeSoBacDaoTao", "HeSoThucHanh", "MaBacDaoTao", "MaLoaiHinhDaoTao"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThuLaoImportEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThuLaoImport) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThuLaoImport>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThuLaoImport);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThuLaoImport Entity 
		///</summary>
		protected virtual ThuLaoImport Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThuLaoImport copy = new ThuLaoImport();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.MaCauHinhChotGio = this.MaCauHinhChotGio;
				copy.DotChiTra = this.DotChiTra;
				copy.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
				copy.HoTen = this.HoTen;
				copy.NoiDungChi = this.NoiDungChi;
				copy.MaMonHoc = this.MaMonHoc;
				copy.TenMonHoc = this.TenMonHoc;
				copy.MaLop = this.MaLop;
				copy.SiSo = this.SiSo;
				copy.CuNhanTaiNang = this.CuNhanTaiNang;
				copy.SoTiet = this.SoTiet;
				copy.HeSoChucDanh = this.HeSoChucDanh;
				copy.HeSoCoSo = this.HeSoCoSo;
				copy.HeSoLopDong = this.HeSoLopDong;
				copy.HeSoKhac = this.HeSoKhac;
				copy.TongCongHeSo = this.TongCongHeSo;
				copy.TietGiangGoc = this.TietGiangGoc;
				copy.TietQuyDoi = this.TietQuyDoi;
				copy.ChiPhiDiLai = this.ChiPhiDiLai;
				copy.DonGia = this.DonGia;
				copy.ThanhTien = this.ThanhTien;
				copy.TongCong = this.TongCong;
				copy.TietNoKyTruoc = this.TietNoKyTruoc;
				copy.TietNoKyNay = this.TietNoKyNay;
				copy.TongNoGioChuan = this.TongNoGioChuan;
				copy.Thue = this.Thue;
				copy.ThucLanh = this.ThucLanh;
				copy.NgayCapNhat = this.NgayCapNhat;
				copy.NguoiCapNhat = this.NguoiCapNhat;
				copy.HeSoBacDaoTao = this.HeSoBacDaoTao;
				copy.HeSoThucHanh = this.HeSoThucHanh;
				copy.MaBacDaoTao = this.MaBacDaoTao;
				copy.MaLoaiHinhDaoTao = this.MaLoaiHinhDaoTao;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThuLaoImport Entity 
		///</summary>
		public virtual ThuLaoImport Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThuLaoImport Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThuLaoImport DeepCopy()
		{
			return EntityHelper.Clone<ThuLaoImport>(this as ThuLaoImport);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThuLaoImportEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThuLaoImportEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThuLaoImportEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThuLaoImportColumn column)
		{
			switch(column)
			{
					case ThuLaoImportColumn.Id:
					return entityData.Id != _originalData.Id;
					case ThuLaoImportColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case ThuLaoImportColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case ThuLaoImportColumn.MaCauHinhChotGio:
					return entityData.MaCauHinhChotGio != _originalData.MaCauHinhChotGio;
					case ThuLaoImportColumn.DotChiTra:
					return entityData.DotChiTra != _originalData.DotChiTra;
					case ThuLaoImportColumn.MaGiangVienQuanLy:
					return entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
					case ThuLaoImportColumn.HoTen:
					return entityData.HoTen != _originalData.HoTen;
					case ThuLaoImportColumn.NoiDungChi:
					return entityData.NoiDungChi != _originalData.NoiDungChi;
					case ThuLaoImportColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case ThuLaoImportColumn.TenMonHoc:
					return entityData.TenMonHoc != _originalData.TenMonHoc;
					case ThuLaoImportColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
					case ThuLaoImportColumn.SiSo:
					return entityData.SiSo != _originalData.SiSo;
					case ThuLaoImportColumn.CuNhanTaiNang:
					return entityData.CuNhanTaiNang != _originalData.CuNhanTaiNang;
					case ThuLaoImportColumn.SoTiet:
					return entityData.SoTiet != _originalData.SoTiet;
					case ThuLaoImportColumn.HeSoChucDanh:
					return entityData.HeSoChucDanh != _originalData.HeSoChucDanh;
					case ThuLaoImportColumn.HeSoCoSo:
					return entityData.HeSoCoSo != _originalData.HeSoCoSo;
					case ThuLaoImportColumn.HeSoLopDong:
					return entityData.HeSoLopDong != _originalData.HeSoLopDong;
					case ThuLaoImportColumn.HeSoKhac:
					return entityData.HeSoKhac != _originalData.HeSoKhac;
					case ThuLaoImportColumn.TongCongHeSo:
					return entityData.TongCongHeSo != _originalData.TongCongHeSo;
					case ThuLaoImportColumn.TietGiangGoc:
					return entityData.TietGiangGoc != _originalData.TietGiangGoc;
					case ThuLaoImportColumn.TietQuyDoi:
					return entityData.TietQuyDoi != _originalData.TietQuyDoi;
					case ThuLaoImportColumn.ChiPhiDiLai:
					return entityData.ChiPhiDiLai != _originalData.ChiPhiDiLai;
					case ThuLaoImportColumn.DonGia:
					return entityData.DonGia != _originalData.DonGia;
					case ThuLaoImportColumn.ThanhTien:
					return entityData.ThanhTien != _originalData.ThanhTien;
					case ThuLaoImportColumn.TongCong:
					return entityData.TongCong != _originalData.TongCong;
					case ThuLaoImportColumn.TietNoKyTruoc:
					return entityData.TietNoKyTruoc != _originalData.TietNoKyTruoc;
					case ThuLaoImportColumn.TietNoKyNay:
					return entityData.TietNoKyNay != _originalData.TietNoKyNay;
					case ThuLaoImportColumn.TongNoGioChuan:
					return entityData.TongNoGioChuan != _originalData.TongNoGioChuan;
					case ThuLaoImportColumn.Thue:
					return entityData.Thue != _originalData.Thue;
					case ThuLaoImportColumn.ThucLanh:
					return entityData.ThucLanh != _originalData.ThucLanh;
					case ThuLaoImportColumn.NgayCapNhat:
					return entityData.NgayCapNhat != _originalData.NgayCapNhat;
					case ThuLaoImportColumn.NguoiCapNhat:
					return entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
					case ThuLaoImportColumn.HeSoBacDaoTao:
					return entityData.HeSoBacDaoTao != _originalData.HeSoBacDaoTao;
					case ThuLaoImportColumn.HeSoThucHanh:
					return entityData.HeSoThucHanh != _originalData.HeSoThucHanh;
					case ThuLaoImportColumn.MaBacDaoTao:
					return entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
					case ThuLaoImportColumn.MaLoaiHinhDaoTao:
					return entityData.MaLoaiHinhDaoTao != _originalData.MaLoaiHinhDaoTao;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThuLaoImportColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.MaCauHinhChotGio != _originalData.MaCauHinhChotGio;
			result = result || entityData.DotChiTra != _originalData.DotChiTra;
			result = result || entityData.MaGiangVienQuanLy != _originalData.MaGiangVienQuanLy;
			result = result || entityData.HoTen != _originalData.HoTen;
			result = result || entityData.NoiDungChi != _originalData.NoiDungChi;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.TenMonHoc != _originalData.TenMonHoc;
			result = result || entityData.MaLop != _originalData.MaLop;
			result = result || entityData.SiSo != _originalData.SiSo;
			result = result || entityData.CuNhanTaiNang != _originalData.CuNhanTaiNang;
			result = result || entityData.SoTiet != _originalData.SoTiet;
			result = result || entityData.HeSoChucDanh != _originalData.HeSoChucDanh;
			result = result || entityData.HeSoCoSo != _originalData.HeSoCoSo;
			result = result || entityData.HeSoLopDong != _originalData.HeSoLopDong;
			result = result || entityData.HeSoKhac != _originalData.HeSoKhac;
			result = result || entityData.TongCongHeSo != _originalData.TongCongHeSo;
			result = result || entityData.TietGiangGoc != _originalData.TietGiangGoc;
			result = result || entityData.TietQuyDoi != _originalData.TietQuyDoi;
			result = result || entityData.ChiPhiDiLai != _originalData.ChiPhiDiLai;
			result = result || entityData.DonGia != _originalData.DonGia;
			result = result || entityData.ThanhTien != _originalData.ThanhTien;
			result = result || entityData.TongCong != _originalData.TongCong;
			result = result || entityData.TietNoKyTruoc != _originalData.TietNoKyTruoc;
			result = result || entityData.TietNoKyNay != _originalData.TietNoKyNay;
			result = result || entityData.TongNoGioChuan != _originalData.TongNoGioChuan;
			result = result || entityData.Thue != _originalData.Thue;
			result = result || entityData.ThucLanh != _originalData.ThucLanh;
			result = result || entityData.NgayCapNhat != _originalData.NgayCapNhat;
			result = result || entityData.NguoiCapNhat != _originalData.NguoiCapNhat;
			result = result || entityData.HeSoBacDaoTao != _originalData.HeSoBacDaoTao;
			result = result || entityData.HeSoThucHanh != _originalData.HeSoThucHanh;
			result = result || entityData.MaBacDaoTao != _originalData.MaBacDaoTao;
			result = result || entityData.MaLoaiHinhDaoTao != _originalData.MaLoaiHinhDaoTao;
			return result;
		}	
		
		///<summary>
		///  Returns a ThuLaoImport Entity with the original data.
		///</summary>
		public ThuLaoImport GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThuLaoImport(
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.MaCauHinhChotGio,
				_originalData.DotChiTra,
				_originalData.MaGiangVienQuanLy,
				_originalData.HoTen,
				_originalData.NoiDungChi,
				_originalData.MaMonHoc,
				_originalData.TenMonHoc,
				_originalData.MaLop,
				_originalData.SiSo,
				_originalData.CuNhanTaiNang,
				_originalData.SoTiet,
				_originalData.HeSoChucDanh,
				_originalData.HeSoCoSo,
				_originalData.HeSoLopDong,
				_originalData.HeSoKhac,
				_originalData.TongCongHeSo,
				_originalData.TietGiangGoc,
				_originalData.TietQuyDoi,
				_originalData.ChiPhiDiLai,
				_originalData.DonGia,
				_originalData.ThanhTien,
				_originalData.TongCong,
				_originalData.TietNoKyTruoc,
				_originalData.TietNoKyNay,
				_originalData.TongNoGioChuan,
				_originalData.Thue,
				_originalData.ThucLanh,
				_originalData.NgayCapNhat,
				_originalData.NguoiCapNhat,
				_originalData.HeSoBacDaoTao,
				_originalData.HeSoThucHanh,
				_originalData.MaBacDaoTao,
				_originalData.MaLoaiHinhDaoTao
				);
				
			return (ThuLaoImport)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThuLaoImportBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThuLaoImportBase)
				return ValueEquals(this, (ThuLaoImportBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThuLaoImportBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.MaCauHinhChotGio == null) ? string.Empty : this.MaCauHinhChotGio.ToString()).GetHashCode() ^ 
					((this.DotChiTra == null) ? string.Empty : this.DotChiTra.ToString()).GetHashCode() ^ 
					((this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString()).GetHashCode() ^ 
					((this.HoTen == null) ? string.Empty : this.HoTen.ToString()).GetHashCode() ^ 
					((this.NoiDungChi == null) ? string.Empty : this.NoiDungChi.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString()).GetHashCode() ^ 
					((this.MaLop == null) ? string.Empty : this.MaLop.ToString()).GetHashCode() ^ 
					((this.SiSo == null) ? string.Empty : this.SiSo.ToString()).GetHashCode() ^ 
					((this.CuNhanTaiNang == null) ? string.Empty : this.CuNhanTaiNang.ToString()).GetHashCode() ^ 
					((this.SoTiet == null) ? string.Empty : this.SoTiet.ToString()).GetHashCode() ^ 
					((this.HeSoChucDanh == null) ? string.Empty : this.HeSoChucDanh.ToString()).GetHashCode() ^ 
					((this.HeSoCoSo == null) ? string.Empty : this.HeSoCoSo.ToString()).GetHashCode() ^ 
					((this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString()).GetHashCode() ^ 
					((this.HeSoKhac == null) ? string.Empty : this.HeSoKhac.ToString()).GetHashCode() ^ 
					((this.TongCongHeSo == null) ? string.Empty : this.TongCongHeSo.ToString()).GetHashCode() ^ 
					((this.TietGiangGoc == null) ? string.Empty : this.TietGiangGoc.ToString()).GetHashCode() ^ 
					((this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString()).GetHashCode() ^ 
					((this.ChiPhiDiLai == null) ? string.Empty : this.ChiPhiDiLai.ToString()).GetHashCode() ^ 
					((this.DonGia == null) ? string.Empty : this.DonGia.ToString()).GetHashCode() ^ 
					((this.ThanhTien == null) ? string.Empty : this.ThanhTien.ToString()).GetHashCode() ^ 
					((this.TongCong == null) ? string.Empty : this.TongCong.ToString()).GetHashCode() ^ 
					((this.TietNoKyTruoc == null) ? string.Empty : this.TietNoKyTruoc.ToString()).GetHashCode() ^ 
					((this.TietNoKyNay == null) ? string.Empty : this.TietNoKyNay.ToString()).GetHashCode() ^ 
					((this.TongNoGioChuan == null) ? string.Empty : this.TongNoGioChuan.ToString()).GetHashCode() ^ 
					((this.Thue == null) ? string.Empty : this.Thue.ToString()).GetHashCode() ^ 
					((this.ThucLanh == null) ? string.Empty : this.ThucLanh.ToString()).GetHashCode() ^ 
					((this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString()).GetHashCode() ^ 
					((this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString()).GetHashCode() ^ 
					((this.HeSoBacDaoTao == null) ? string.Empty : this.HeSoBacDaoTao.ToString()).GetHashCode() ^ 
					((this.HeSoThucHanh == null) ? string.Empty : this.HeSoThucHanh.ToString()).GetHashCode() ^ 
					((this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString()).GetHashCode() ^ 
					((this.MaLoaiHinhDaoTao == null) ? string.Empty : this.MaLoaiHinhDaoTao.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThuLaoImportBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThuLaoImportBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThuLaoImportBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThuLaoImportBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThuLaoImportBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThuLaoImportBase Object1, ThuLaoImportBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.MaCauHinhChotGio != null && Object2.MaCauHinhChotGio != null )
			{
				if (Object1.MaCauHinhChotGio != Object2.MaCauHinhChotGio)
					equal = false;
			}
			else if (Object1.MaCauHinhChotGio == null ^ Object2.MaCauHinhChotGio == null )
			{
				equal = false;
			}
			if ( Object1.DotChiTra != null && Object2.DotChiTra != null )
			{
				if (Object1.DotChiTra != Object2.DotChiTra)
					equal = false;
			}
			else if (Object1.DotChiTra == null ^ Object2.DotChiTra == null )
			{
				equal = false;
			}
			if ( Object1.MaGiangVienQuanLy != null && Object2.MaGiangVienQuanLy != null )
			{
				if (Object1.MaGiangVienQuanLy != Object2.MaGiangVienQuanLy)
					equal = false;
			}
			else if (Object1.MaGiangVienQuanLy == null ^ Object2.MaGiangVienQuanLy == null )
			{
				equal = false;
			}
			if ( Object1.HoTen != null && Object2.HoTen != null )
			{
				if (Object1.HoTen != Object2.HoTen)
					equal = false;
			}
			else if (Object1.HoTen == null ^ Object2.HoTen == null )
			{
				equal = false;
			}
			if ( Object1.NoiDungChi != null && Object2.NoiDungChi != null )
			{
				if (Object1.NoiDungChi != Object2.NoiDungChi)
					equal = false;
			}
			else if (Object1.NoiDungChi == null ^ Object2.NoiDungChi == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.TenMonHoc != null && Object2.TenMonHoc != null )
			{
				if (Object1.TenMonHoc != Object2.TenMonHoc)
					equal = false;
			}
			else if (Object1.TenMonHoc == null ^ Object2.TenMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object2.MaLop == null )
			{
				equal = false;
			}
			if ( Object1.SiSo != null && Object2.SiSo != null )
			{
				if (Object1.SiSo != Object2.SiSo)
					equal = false;
			}
			else if (Object1.SiSo == null ^ Object2.SiSo == null )
			{
				equal = false;
			}
			if ( Object1.CuNhanTaiNang != null && Object2.CuNhanTaiNang != null )
			{
				if (Object1.CuNhanTaiNang != Object2.CuNhanTaiNang)
					equal = false;
			}
			else if (Object1.CuNhanTaiNang == null ^ Object2.CuNhanTaiNang == null )
			{
				equal = false;
			}
			if ( Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object2.SoTiet == null )
			{
				equal = false;
			}
			if ( Object1.HeSoChucDanh != null && Object2.HeSoChucDanh != null )
			{
				if (Object1.HeSoChucDanh != Object2.HeSoChucDanh)
					equal = false;
			}
			else if (Object1.HeSoChucDanh == null ^ Object2.HeSoChucDanh == null )
			{
				equal = false;
			}
			if ( Object1.HeSoCoSo != null && Object2.HeSoCoSo != null )
			{
				if (Object1.HeSoCoSo != Object2.HeSoCoSo)
					equal = false;
			}
			else if (Object1.HeSoCoSo == null ^ Object2.HeSoCoSo == null )
			{
				equal = false;
			}
			if ( Object1.HeSoLopDong != null && Object2.HeSoLopDong != null )
			{
				if (Object1.HeSoLopDong != Object2.HeSoLopDong)
					equal = false;
			}
			else if (Object1.HeSoLopDong == null ^ Object2.HeSoLopDong == null )
			{
				equal = false;
			}
			if ( Object1.HeSoKhac != null && Object2.HeSoKhac != null )
			{
				if (Object1.HeSoKhac != Object2.HeSoKhac)
					equal = false;
			}
			else if (Object1.HeSoKhac == null ^ Object2.HeSoKhac == null )
			{
				equal = false;
			}
			if ( Object1.TongCongHeSo != null && Object2.TongCongHeSo != null )
			{
				if (Object1.TongCongHeSo != Object2.TongCongHeSo)
					equal = false;
			}
			else if (Object1.TongCongHeSo == null ^ Object2.TongCongHeSo == null )
			{
				equal = false;
			}
			if ( Object1.TietGiangGoc != null && Object2.TietGiangGoc != null )
			{
				if (Object1.TietGiangGoc != Object2.TietGiangGoc)
					equal = false;
			}
			else if (Object1.TietGiangGoc == null ^ Object2.TietGiangGoc == null )
			{
				equal = false;
			}
			if ( Object1.TietQuyDoi != null && Object2.TietQuyDoi != null )
			{
				if (Object1.TietQuyDoi != Object2.TietQuyDoi)
					equal = false;
			}
			else if (Object1.TietQuyDoi == null ^ Object2.TietQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.ChiPhiDiLai != null && Object2.ChiPhiDiLai != null )
			{
				if (Object1.ChiPhiDiLai != Object2.ChiPhiDiLai)
					equal = false;
			}
			else if (Object1.ChiPhiDiLai == null ^ Object2.ChiPhiDiLai == null )
			{
				equal = false;
			}
			if ( Object1.DonGia != null && Object2.DonGia != null )
			{
				if (Object1.DonGia != Object2.DonGia)
					equal = false;
			}
			else if (Object1.DonGia == null ^ Object2.DonGia == null )
			{
				equal = false;
			}
			if ( Object1.ThanhTien != null && Object2.ThanhTien != null )
			{
				if (Object1.ThanhTien != Object2.ThanhTien)
					equal = false;
			}
			else if (Object1.ThanhTien == null ^ Object2.ThanhTien == null )
			{
				equal = false;
			}
			if ( Object1.TongCong != null && Object2.TongCong != null )
			{
				if (Object1.TongCong != Object2.TongCong)
					equal = false;
			}
			else if (Object1.TongCong == null ^ Object2.TongCong == null )
			{
				equal = false;
			}
			if ( Object1.TietNoKyTruoc != null && Object2.TietNoKyTruoc != null )
			{
				if (Object1.TietNoKyTruoc != Object2.TietNoKyTruoc)
					equal = false;
			}
			else if (Object1.TietNoKyTruoc == null ^ Object2.TietNoKyTruoc == null )
			{
				equal = false;
			}
			if ( Object1.TietNoKyNay != null && Object2.TietNoKyNay != null )
			{
				if (Object1.TietNoKyNay != Object2.TietNoKyNay)
					equal = false;
			}
			else if (Object1.TietNoKyNay == null ^ Object2.TietNoKyNay == null )
			{
				equal = false;
			}
			if ( Object1.TongNoGioChuan != null && Object2.TongNoGioChuan != null )
			{
				if (Object1.TongNoGioChuan != Object2.TongNoGioChuan)
					equal = false;
			}
			else if (Object1.TongNoGioChuan == null ^ Object2.TongNoGioChuan == null )
			{
				equal = false;
			}
			if ( Object1.Thue != null && Object2.Thue != null )
			{
				if (Object1.Thue != Object2.Thue)
					equal = false;
			}
			else if (Object1.Thue == null ^ Object2.Thue == null )
			{
				equal = false;
			}
			if ( Object1.ThucLanh != null && Object2.ThucLanh != null )
			{
				if (Object1.ThucLanh != Object2.ThucLanh)
					equal = false;
			}
			else if (Object1.ThucLanh == null ^ Object2.ThucLanh == null )
			{
				equal = false;
			}
			if ( Object1.NgayCapNhat != null && Object2.NgayCapNhat != null )
			{
				if (Object1.NgayCapNhat != Object2.NgayCapNhat)
					equal = false;
			}
			else if (Object1.NgayCapNhat == null ^ Object2.NgayCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.NguoiCapNhat != null && Object2.NguoiCapNhat != null )
			{
				if (Object1.NguoiCapNhat != Object2.NguoiCapNhat)
					equal = false;
			}
			else if (Object1.NguoiCapNhat == null ^ Object2.NguoiCapNhat == null )
			{
				equal = false;
			}
			if ( Object1.HeSoBacDaoTao != null && Object2.HeSoBacDaoTao != null )
			{
				if (Object1.HeSoBacDaoTao != Object2.HeSoBacDaoTao)
					equal = false;
			}
			else if (Object1.HeSoBacDaoTao == null ^ Object2.HeSoBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.HeSoThucHanh != null && Object2.HeSoThucHanh != null )
			{
				if (Object1.HeSoThucHanh != Object2.HeSoThucHanh)
					equal = false;
			}
			else if (Object1.HeSoThucHanh == null ^ Object2.HeSoThucHanh == null )
			{
				equal = false;
			}
			if ( Object1.MaBacDaoTao != null && Object2.MaBacDaoTao != null )
			{
				if (Object1.MaBacDaoTao != Object2.MaBacDaoTao)
					equal = false;
			}
			else if (Object1.MaBacDaoTao == null ^ Object2.MaBacDaoTao == null )
			{
				equal = false;
			}
			if ( Object1.MaLoaiHinhDaoTao != null && Object2.MaLoaiHinhDaoTao != null )
			{
				if (Object1.MaLoaiHinhDaoTao != Object2.MaLoaiHinhDaoTao)
					equal = false;
			}
			else if (Object1.MaLoaiHinhDaoTao == null ^ Object2.MaLoaiHinhDaoTao == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThuLaoImportBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThuLaoImportComparer GetComparer()
        {
            return new ThuLaoImportComparer();
        }
        */

        // Comparer delegates back to ThuLaoImport
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThuLaoImport rhs, ThuLaoImportColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThuLaoImportColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.MaCauHinhChotGio:
            		return this.MaCauHinhChotGio.Value.CompareTo(rhs.MaCauHinhChotGio.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.DotChiTra:
            		return this.DotChiTra.CompareTo(rhs.DotChiTra);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.MaGiangVienQuanLy:
            		return this.MaGiangVienQuanLy.CompareTo(rhs.MaGiangVienQuanLy);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.HoTen:
            		return this.HoTen.CompareTo(rhs.HoTen);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.NoiDungChi:
            		return this.NoiDungChi.CompareTo(rhs.NoiDungChi);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.TenMonHoc:
            		return this.TenMonHoc.CompareTo(rhs.TenMonHoc);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.SiSo:
            		return this.SiSo.Value.CompareTo(rhs.SiSo.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.CuNhanTaiNang:
            		return this.CuNhanTaiNang.Value.CompareTo(rhs.CuNhanTaiNang.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.SoTiet:
            		return this.SoTiet.Value.CompareTo(rhs.SoTiet.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.HeSoChucDanh:
            		return this.HeSoChucDanh.Value.CompareTo(rhs.HeSoChucDanh.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.HeSoCoSo:
            		return this.HeSoCoSo.Value.CompareTo(rhs.HeSoCoSo.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.HeSoLopDong:
            		return this.HeSoLopDong.Value.CompareTo(rhs.HeSoLopDong.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.HeSoKhac:
            		return this.HeSoKhac.Value.CompareTo(rhs.HeSoKhac.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.TongCongHeSo:
            		return this.TongCongHeSo.Value.CompareTo(rhs.TongCongHeSo.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.TietGiangGoc:
            		return this.TietGiangGoc.Value.CompareTo(rhs.TietGiangGoc.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.TietQuyDoi:
            		return this.TietQuyDoi.Value.CompareTo(rhs.TietQuyDoi.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.ChiPhiDiLai:
            		return this.ChiPhiDiLai.Value.CompareTo(rhs.ChiPhiDiLai.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.DonGia:
            		return this.DonGia.Value.CompareTo(rhs.DonGia.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.ThanhTien:
            		return this.ThanhTien.Value.CompareTo(rhs.ThanhTien.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.TongCong:
            		return this.TongCong.Value.CompareTo(rhs.TongCong.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.TietNoKyTruoc:
            		return this.TietNoKyTruoc.Value.CompareTo(rhs.TietNoKyTruoc.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.TietNoKyNay:
            		return this.TietNoKyNay.Value.CompareTo(rhs.TietNoKyNay.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.TongNoGioChuan:
            		return this.TongNoGioChuan.Value.CompareTo(rhs.TongNoGioChuan.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.Thue:
            		return this.Thue.Value.CompareTo(rhs.Thue.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.ThucLanh:
            		return this.ThucLanh.Value.CompareTo(rhs.ThucLanh.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.NgayCapNhat:
            		return this.NgayCapNhat.Value.CompareTo(rhs.NgayCapNhat.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.NguoiCapNhat:
            		return this.NguoiCapNhat.CompareTo(rhs.NguoiCapNhat);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.HeSoBacDaoTao:
            		return this.HeSoBacDaoTao.Value.CompareTo(rhs.HeSoBacDaoTao.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.HeSoThucHanh:
            		return this.HeSoThucHanh.Value.CompareTo(rhs.HeSoThucHanh.Value);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.MaBacDaoTao:
            		return this.MaBacDaoTao.CompareTo(rhs.MaBacDaoTao);
            		
            		                 
            	
            	
            	case ThuLaoImportColumn.MaLoaiHinhDaoTao:
            		return this.MaLoaiHinhDaoTao.CompareTo(rhs.MaLoaiHinhDaoTao);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThuLaoImportKey> Members
		
		// member variable for the EntityId property
		private ThuLaoImportKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThuLaoImportKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThuLaoImportKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThuLaoImport")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{37}{36}- Id: {0}{36}- NamHoc: {1}{36}- HocKy: {2}{36}- MaCauHinhChotGio: {3}{36}- DotChiTra: {4}{36}- MaGiangVienQuanLy: {5}{36}- HoTen: {6}{36}- NoiDungChi: {7}{36}- MaMonHoc: {8}{36}- TenMonHoc: {9}{36}- MaLop: {10}{36}- SiSo: {11}{36}- CuNhanTaiNang: {12}{36}- SoTiet: {13}{36}- HeSoChucDanh: {14}{36}- HeSoCoSo: {15}{36}- HeSoLopDong: {16}{36}- HeSoKhac: {17}{36}- TongCongHeSo: {18}{36}- TietGiangGoc: {19}{36}- TietQuyDoi: {20}{36}- ChiPhiDiLai: {21}{36}- DonGia: {22}{36}- ThanhTien: {23}{36}- TongCong: {24}{36}- TietNoKyTruoc: {25}{36}- TietNoKyNay: {26}{36}- TongNoGioChuan: {27}{36}- Thue: {28}{36}- ThucLanh: {29}{36}- NgayCapNhat: {30}{36}- NguoiCapNhat: {31}{36}- HeSoBacDaoTao: {32}{36}- HeSoThucHanh: {33}{36}- MaBacDaoTao: {34}{36}- MaLoaiHinhDaoTao: {35}{36}{38}", 
				this.Id,
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.MaCauHinhChotGio == null) ? string.Empty : this.MaCauHinhChotGio.ToString(),
				(this.DotChiTra == null) ? string.Empty : this.DotChiTra.ToString(),
				(this.MaGiangVienQuanLy == null) ? string.Empty : this.MaGiangVienQuanLy.ToString(),
				(this.HoTen == null) ? string.Empty : this.HoTen.ToString(),
				(this.NoiDungChi == null) ? string.Empty : this.NoiDungChi.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.TenMonHoc == null) ? string.Empty : this.TenMonHoc.ToString(),
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
				(this.SiSo == null) ? string.Empty : this.SiSo.ToString(),
				(this.CuNhanTaiNang == null) ? string.Empty : this.CuNhanTaiNang.ToString(),
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
				(this.HeSoChucDanh == null) ? string.Empty : this.HeSoChucDanh.ToString(),
				(this.HeSoCoSo == null) ? string.Empty : this.HeSoCoSo.ToString(),
				(this.HeSoLopDong == null) ? string.Empty : this.HeSoLopDong.ToString(),
				(this.HeSoKhac == null) ? string.Empty : this.HeSoKhac.ToString(),
				(this.TongCongHeSo == null) ? string.Empty : this.TongCongHeSo.ToString(),
				(this.TietGiangGoc == null) ? string.Empty : this.TietGiangGoc.ToString(),
				(this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString(),
				(this.ChiPhiDiLai == null) ? string.Empty : this.ChiPhiDiLai.ToString(),
				(this.DonGia == null) ? string.Empty : this.DonGia.ToString(),
				(this.ThanhTien == null) ? string.Empty : this.ThanhTien.ToString(),
				(this.TongCong == null) ? string.Empty : this.TongCong.ToString(),
				(this.TietNoKyTruoc == null) ? string.Empty : this.TietNoKyTruoc.ToString(),
				(this.TietNoKyNay == null) ? string.Empty : this.TietNoKyNay.ToString(),
				(this.TongNoGioChuan == null) ? string.Empty : this.TongNoGioChuan.ToString(),
				(this.Thue == null) ? string.Empty : this.Thue.ToString(),
				(this.ThucLanh == null) ? string.Empty : this.ThucLanh.ToString(),
				(this.NgayCapNhat == null) ? string.Empty : this.NgayCapNhat.ToString(),
				(this.NguoiCapNhat == null) ? string.Empty : this.NguoiCapNhat.ToString(),
				(this.HeSoBacDaoTao == null) ? string.Empty : this.HeSoBacDaoTao.ToString(),
				(this.HeSoThucHanh == null) ? string.Empty : this.HeSoThucHanh.ToString(),
				(this.MaBacDaoTao == null) ? string.Empty : this.MaBacDaoTao.ToString(),
				(this.MaLoaiHinhDaoTao == null) ? string.Empty : this.MaLoaiHinhDaoTao.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThuLaoImport' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThuLaoImportEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThuLaoImport"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// MaCauHinhChotGio : 
		/// </summary>
		public System.Int32? MaCauHinhChotGio = null;
		
		/// <summary>
		/// DotChiTra : 
		/// </summary>
		public System.String DotChiTra = null;
		
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		public System.String MaGiangVienQuanLy = null;
		
		/// <summary>
		/// HoTen : 
		/// </summary>
		public System.String HoTen = null;
		
		/// <summary>
		/// NoiDungChi : 
		/// </summary>
		public System.String NoiDungChi = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		public System.String TenMonHoc = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String MaLop = null;
		
		/// <summary>
		/// SiSo : 
		/// </summary>
		public System.Int32? SiSo = null;
		
		/// <summary>
		/// CuNhanTaiNang : 
		/// </summary>
		public System.Int32? CuNhanTaiNang = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		public System.Decimal? SoTiet = null;
		
		/// <summary>
		/// HeSoChucDanh : 
		/// </summary>
		public System.Decimal? HeSoChucDanh = null;
		
		/// <summary>
		/// HeSoCoSo : 
		/// </summary>
		public System.Decimal? HeSoCoSo = null;
		
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		public System.Decimal? HeSoLopDong = null;
		
		/// <summary>
		/// HeSoKhac : 
		/// </summary>
		public System.Decimal? HeSoKhac = null;
		
		/// <summary>
		/// TongCongHeSo : 
		/// </summary>
		public System.Decimal? TongCongHeSo = null;
		
		/// <summary>
		/// TietGiangGoc : 
		/// </summary>
		public System.Decimal? TietGiangGoc = null;
		
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		public System.Decimal? TietQuyDoi = null;
		
		/// <summary>
		/// ChiPhiDiLai : 
		/// </summary>
		public System.Decimal? ChiPhiDiLai = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		public System.Decimal? DonGia = null;
		
		/// <summary>
		/// ThanhTien : 
		/// </summary>
		public System.Decimal? ThanhTien = null;
		
		/// <summary>
		/// TongCong : 
		/// </summary>
		public System.Decimal? TongCong = null;
		
		/// <summary>
		/// TietNoKyTruoc : 
		/// </summary>
		public System.Decimal? TietNoKyTruoc = null;
		
		/// <summary>
		/// TietNoKyNay : 
		/// </summary>
		public System.Decimal? TietNoKyNay = null;
		
		/// <summary>
		/// TongNoGioChuan : 
		/// </summary>
		public System.Decimal? TongNoGioChuan = null;
		
		/// <summary>
		/// Thue : 
		/// </summary>
		public System.Decimal? Thue = null;
		
		/// <summary>
		/// ThucLanh : 
		/// </summary>
		public System.Decimal? ThucLanh = null;
		
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		public System.DateTime? NgayCapNhat = null;
		
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		public System.String NguoiCapNhat = null;
		
		/// <summary>
		/// HeSoBacDaoTao : 
		/// </summary>
		public System.Decimal? HeSoBacDaoTao = null;
		
		/// <summary>
		/// HeSoThucHanh : 
		/// </summary>
		public System.Decimal? HeSoThucHanh = null;
		
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		public System.String MaBacDaoTao = null;
		
		/// <summary>
		/// MaLoaiHinhDaoTao : 
		/// </summary>
		public System.String MaLoaiHinhDaoTao = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThuLaoImportEntityData _tmp = new ThuLaoImportEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaCauHinhChotGio = this.MaCauHinhChotGio;
			_tmp.DotChiTra = this.DotChiTra;
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.HoTen = this.HoTen;
			_tmp.NoiDungChi = this.NoiDungChi;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.MaLop = this.MaLop;
			_tmp.SiSo = this.SiSo;
			_tmp.CuNhanTaiNang = this.CuNhanTaiNang;
			_tmp.SoTiet = this.SoTiet;
			_tmp.HeSoChucDanh = this.HeSoChucDanh;
			_tmp.HeSoCoSo = this.HeSoCoSo;
			_tmp.HeSoLopDong = this.HeSoLopDong;
			_tmp.HeSoKhac = this.HeSoKhac;
			_tmp.TongCongHeSo = this.TongCongHeSo;
			_tmp.TietGiangGoc = this.TietGiangGoc;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.ChiPhiDiLai = this.ChiPhiDiLai;
			_tmp.DonGia = this.DonGia;
			_tmp.ThanhTien = this.ThanhTien;
			_tmp.TongCong = this.TongCong;
			_tmp.TietNoKyTruoc = this.TietNoKyTruoc;
			_tmp.TietNoKyNay = this.TietNoKyNay;
			_tmp.TongNoGioChuan = this.TongNoGioChuan;
			_tmp.Thue = this.Thue;
			_tmp.ThucLanh = this.ThucLanh;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.HeSoBacDaoTao = this.HeSoBacDaoTao;
			_tmp.HeSoThucHanh = this.HeSoThucHanh;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaLoaiHinhDaoTao = this.MaLoaiHinhDaoTao;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThuLaoImportEntityData _tmp = new ThuLaoImportEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.MaCauHinhChotGio = this.MaCauHinhChotGio;
			_tmp.DotChiTra = this.DotChiTra;
			_tmp.MaGiangVienQuanLy = this.MaGiangVienQuanLy;
			_tmp.HoTen = this.HoTen;
			_tmp.NoiDungChi = this.NoiDungChi;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.TenMonHoc = this.TenMonHoc;
			_tmp.MaLop = this.MaLop;
			_tmp.SiSo = this.SiSo;
			_tmp.CuNhanTaiNang = this.CuNhanTaiNang;
			_tmp.SoTiet = this.SoTiet;
			_tmp.HeSoChucDanh = this.HeSoChucDanh;
			_tmp.HeSoCoSo = this.HeSoCoSo;
			_tmp.HeSoLopDong = this.HeSoLopDong;
			_tmp.HeSoKhac = this.HeSoKhac;
			_tmp.TongCongHeSo = this.TongCongHeSo;
			_tmp.TietGiangGoc = this.TietGiangGoc;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.ChiPhiDiLai = this.ChiPhiDiLai;
			_tmp.DonGia = this.DonGia;
			_tmp.ThanhTien = this.ThanhTien;
			_tmp.TongCong = this.TongCong;
			_tmp.TietNoKyTruoc = this.TietNoKyTruoc;
			_tmp.TietNoKyNay = this.TietNoKyNay;
			_tmp.TongNoGioChuan = this.TongNoGioChuan;
			_tmp.Thue = this.Thue;
			_tmp.ThucLanh = this.ThucLanh;
			_tmp.NgayCapNhat = this.NgayCapNhat;
			_tmp.NguoiCapNhat = this.NguoiCapNhat;
			_tmp.HeSoBacDaoTao = this.HeSoBacDaoTao;
			_tmp.HeSoThucHanh = this.HeSoThucHanh;
			_tmp.MaBacDaoTao = this.MaBacDaoTao;
			_tmp.MaLoaiHinhDaoTao = this.MaLoaiHinhDaoTao;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoImportColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThuLaoImportColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoImportColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThuLaoImportColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoImportColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThuLaoImportColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThuLaoImportEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThuLaoImportEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThuLaoImportColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThuLaoImportColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThuLaoImportEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThuLaoImportEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThuLaoImportEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThuLaoImport"/> object.
	/// </remarks>
	public class ThuLaoImportEventArgs : System.EventArgs
	{
		private ThuLaoImportColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoImportEventArgs class.
		///</summary>
		public ThuLaoImportEventArgs(ThuLaoImportColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThuLaoImportEventArgs class.
		///</summary>
		public ThuLaoImportEventArgs(ThuLaoImportColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThuLaoImportColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThuLaoImportColumn" />
		public ThuLaoImportColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThuLaoImport related events.
	///</summary>
	public delegate void ThuLaoImportEventHandler(object sender, ThuLaoImportEventArgs e);
	
	#region ThuLaoImportComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThuLaoImportComparer : System.Collections.Generic.IComparer<ThuLaoImport>
	{
		ThuLaoImportColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoImportComparer"/> class.
        /// </summary>
		public ThuLaoImportComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThuLaoImportComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThuLaoImportComparer(ThuLaoImportColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThuLaoImport"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThuLaoImport"/> to compare.</param>
        /// <param name="b">The second <c>ThuLaoImport</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThuLaoImport a, ThuLaoImport b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThuLaoImport entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThuLaoImport a, ThuLaoImport b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThuLaoImportColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThuLaoImportKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThuLaoImport"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThuLaoImportKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoImportKey class.
		/// </summary>
		public ThuLaoImportKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoImportKey class.
		/// </summary>
		public ThuLaoImportKey(ThuLaoImportBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThuLaoImportKey class.
		/// </summary>
		public ThuLaoImportKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThuLaoImportBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThuLaoImportBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThuLaoImportColumn Enum
	
	/// <summary>
	/// Enumerate the ThuLaoImport columns.
	/// </summary>
	[Serializable]
	public enum ThuLaoImportColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 2,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 3,
		/// <summary>
		/// MaCauHinhChotGio : 
		/// </summary>
		[EnumTextValue("Ma Cau Hinh Chot Gio")]
		[ColumnEnum("MaCauHinhChotGio", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaCauHinhChotGio = 4,
		/// <summary>
		/// DotChiTra : 
		/// </summary>
		[EnumTextValue("Dot Chi Tra")]
		[ColumnEnum("DotChiTra", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DotChiTra = 5,
		/// <summary>
		/// MaGiangVienQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien Quan Ly")]
		[ColumnEnum("MaGiangVienQuanLy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaGiangVienQuanLy = 6,
		/// <summary>
		/// HoTen : 
		/// </summary>
		[EnumTextValue("Ho Ten")]
		[ColumnEnum("HoTen", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		HoTen = 7,
		/// <summary>
		/// NoiDungChi : 
		/// </summary>
		[EnumTextValue("Noi Dung Chi")]
		[ColumnEnum("NoiDungChi", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		NoiDungChi = 8,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 9,
		/// <summary>
		/// TenMonHoc : 
		/// </summary>
		[EnumTextValue("Ten Mon Hoc")]
		[ColumnEnum("TenMonHoc", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		TenMonHoc = 10,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("Ma Lop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		MaLop = 11,
		/// <summary>
		/// SiSo : 
		/// </summary>
		[EnumTextValue("Si So")]
		[ColumnEnum("SiSo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SiSo = 12,
		/// <summary>
		/// CuNhanTaiNang : 
		/// </summary>
		[EnumTextValue("Cu Nhan Tai Nang")]
		[ColumnEnum("CuNhanTaiNang", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CuNhanTaiNang = 13,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("So Tiet")]
		[ColumnEnum("SoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet = 14,
		/// <summary>
		/// HeSoChucDanh : 
		/// </summary>
		[EnumTextValue("He So Chuc Danh")]
		[ColumnEnum("HeSoChucDanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoChucDanh = 15,
		/// <summary>
		/// HeSoCoSo : 
		/// </summary>
		[EnumTextValue("He So Co So")]
		[ColumnEnum("HeSoCoSo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoCoSo = 16,
		/// <summary>
		/// HeSoLopDong : 
		/// </summary>
		[EnumTextValue("He So Lop Dong")]
		[ColumnEnum("HeSoLopDong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoLopDong = 17,
		/// <summary>
		/// HeSoKhac : 
		/// </summary>
		[EnumTextValue("He So Khac")]
		[ColumnEnum("HeSoKhac", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoKhac = 18,
		/// <summary>
		/// TongCongHeSo : 
		/// </summary>
		[EnumTextValue("Tong Cong He So")]
		[ColumnEnum("TongCongHeSo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongCongHeSo = 19,
		/// <summary>
		/// TietGiangGoc : 
		/// </summary>
		[EnumTextValue("Tiet Giang Goc")]
		[ColumnEnum("TietGiangGoc", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietGiangGoc = 20,
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		[EnumTextValue("Tiet Quy Doi")]
		[ColumnEnum("TietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietQuyDoi = 21,
		/// <summary>
		/// ChiPhiDiLai : 
		/// </summary>
		[EnumTextValue("Chi Phi Di Lai")]
		[ColumnEnum("ChiPhiDiLai", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ChiPhiDiLai = 22,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("Don Gia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGia = 23,
		/// <summary>
		/// ThanhTien : 
		/// </summary>
		[EnumTextValue("Thanh Tien")]
		[ColumnEnum("ThanhTien", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ThanhTien = 24,
		/// <summary>
		/// TongCong : 
		/// </summary>
		[EnumTextValue("Tong Cong")]
		[ColumnEnum("TongCong", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongCong = 25,
		/// <summary>
		/// TietNoKyTruoc : 
		/// </summary>
		[EnumTextValue("Tiet No Ky Truoc")]
		[ColumnEnum("TietNoKyTruoc", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietNoKyTruoc = 26,
		/// <summary>
		/// TietNoKyNay : 
		/// </summary>
		[EnumTextValue("Tiet No Ky Nay")]
		[ColumnEnum("TietNoKyNay", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietNoKyNay = 27,
		/// <summary>
		/// TongNoGioChuan : 
		/// </summary>
		[EnumTextValue("Tong No Gio Chuan")]
		[ColumnEnum("TongNoGioChuan", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongNoGioChuan = 28,
		/// <summary>
		/// Thue : 
		/// </summary>
		[EnumTextValue("Thue")]
		[ColumnEnum("Thue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Thue = 29,
		/// <summary>
		/// ThucLanh : 
		/// </summary>
		[EnumTextValue("Thuc Lanh")]
		[ColumnEnum("ThucLanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ThucLanh = 30,
		/// <summary>
		/// NgayCapNhat : 
		/// </summary>
		[EnumTextValue("Ngay Cap Nhat")]
		[ColumnEnum("NgayCapNhat", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayCapNhat = 31,
		/// <summary>
		/// NguoiCapNhat : 
		/// </summary>
		[EnumTextValue("Nguoi Cap Nhat")]
		[ColumnEnum("NguoiCapNhat", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NguoiCapNhat = 32,
		/// <summary>
		/// HeSoBacDaoTao : 
		/// </summary>
		[EnumTextValue("He So Bac Dao Tao")]
		[ColumnEnum("HeSoBacDaoTao", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoBacDaoTao = 33,
		/// <summary>
		/// HeSoThucHanh : 
		/// </summary>
		[EnumTextValue("He So Thuc Hanh")]
		[ColumnEnum("HeSoThucHanh", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeSoThucHanh = 34,
		/// <summary>
		/// MaBacDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Bac Dao Tao")]
		[ColumnEnum("MaBacDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaBacDaoTao = 35,
		/// <summary>
		/// MaLoaiHinhDaoTao : 
		/// </summary>
		[EnumTextValue("Ma Loai Hinh Dao Tao")]
		[ColumnEnum("MaLoaiHinhDaoTao", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaLoaiHinhDaoTao = 36
	}//End enum

	#endregion ThuLaoImportColumn Enum

} // end namespace
