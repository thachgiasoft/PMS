
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file KhoiLuongKhac.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'KhoiLuongKhac' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class KhoiLuongKhacBase : EntityBase, IKhoiLuongKhac, IEntityId<KhoiLuongKhacKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private KhoiLuongKhacEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private KhoiLuongKhacEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private KhoiLuongKhacEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<KhoiLuongKhac> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KhoiLuongKhacEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event KhoiLuongKhacEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="KhoiLuongKhacBase"/> instance.
		///</summary>
		public KhoiLuongKhacBase()
		{
			this.entityData = new KhoiLuongKhacEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="KhoiLuongKhacBase"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maNhom"></param>
		///<param name="_soTiet"></param>
		///<param name="_soTuan"></param>
		///<param name="_donGia"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_soLuong"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_dienGiai"></param>
		///<param name="_phanLoai">1. Khoi luong trung tam, 2. Khoi luong khac</param>
		///<param name="_ngayTao"></param>
		public KhoiLuongKhacBase(System.Int32? _maGiangVien, System.String _loaiHocPhan, 
			System.String _maLopHocPhan, System.String _maLop, System.String _maMonHoc, System.String _maNhom, 
			System.Decimal? _soTiet, System.Int32? _soTuan, System.Decimal? _donGia, System.String _namHoc, 
			System.String _hocKy, System.Int32? _soLuong, System.Decimal? _tietQuyDoi, System.String _dienGiai, 
			System.Int32? _phanLoai, System.DateTime? _ngayTao)
		{
			this.entityData = new KhoiLuongKhacEntityData();
			this.backupData = null;

			this.MaGiangVien = _maGiangVien;
			this.LoaiHocPhan = _loaiHocPhan;
			this.MaLopHocPhan = _maLopHocPhan;
			this.MaLop = _maLop;
			this.MaMonHoc = _maMonHoc;
			this.MaNhom = _maNhom;
			this.SoTiet = _soTiet;
			this.SoTuan = _soTuan;
			this.DonGia = _donGia;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
			this.SoLuong = _soLuong;
			this.TietQuyDoi = _tietQuyDoi;
			this.DienGiai = _dienGiai;
			this.PhanLoai = _phanLoai;
			this.NgayTao = _ngayTao;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="KhoiLuongKhac"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_maNhom"></param>
		///<param name="_soTiet"></param>
		///<param name="_soTuan"></param>
		///<param name="_donGia"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_soLuong"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_dienGiai"></param>
		///<param name="_phanLoai">1. Khoi luong trung tam, 2. Khoi luong khac</param>
		///<param name="_ngayTao"></param>
		public static KhoiLuongKhac CreateKhoiLuongKhac(System.Int32? _maGiangVien, System.String _loaiHocPhan, 
			System.String _maLopHocPhan, System.String _maLop, System.String _maMonHoc, System.String _maNhom, 
			System.Decimal? _soTiet, System.Int32? _soTuan, System.Decimal? _donGia, System.String _namHoc, 
			System.String _hocKy, System.Int32? _soLuong, System.Decimal? _tietQuyDoi, System.String _dienGiai, 
			System.Int32? _phanLoai, System.DateTime? _ngayTao)
		{
			KhoiLuongKhac newKhoiLuongKhac = new KhoiLuongKhac();
			newKhoiLuongKhac.MaGiangVien = _maGiangVien;
			newKhoiLuongKhac.LoaiHocPhan = _loaiHocPhan;
			newKhoiLuongKhac.MaLopHocPhan = _maLopHocPhan;
			newKhoiLuongKhac.MaLop = _maLop;
			newKhoiLuongKhac.MaMonHoc = _maMonHoc;
			newKhoiLuongKhac.MaNhom = _maNhom;
			newKhoiLuongKhac.SoTiet = _soTiet;
			newKhoiLuongKhac.SoTuan = _soTuan;
			newKhoiLuongKhac.DonGia = _donGia;
			newKhoiLuongKhac.NamHoc = _namHoc;
			newKhoiLuongKhac.HocKy = _hocKy;
			newKhoiLuongKhac.SoLuong = _soLuong;
			newKhoiLuongKhac.TietQuyDoi = _tietQuyDoi;
			newKhoiLuongKhac.DienGiai = _dienGiai;
			newKhoiLuongKhac.PhanLoai = _phanLoai;
			newKhoiLuongKhac.NgayTao = _ngayTao;
			return newKhoiLuongKhac;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaKhoiLuong property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaKhoiLuong
		{
			get
			{
				return this.entityData.MaKhoiLuong; 
			}
			
			set
			{
				if (this.entityData.MaKhoiLuong == value)
					return;
				
                OnPropertyChanging("MaKhoiLuong");                    
				OnColumnChanging(KhoiLuongKhacColumn.MaKhoiLuong, this.entityData.MaKhoiLuong);
				this.entityData.MaKhoiLuong = value;
				this.EntityId.MaKhoiLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.MaKhoiLuong, this.entityData.MaKhoiLuong);
				OnPropertyChanged("MaKhoiLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaGiangVien
		{
			get
			{
				return this.entityData.MaGiangVien; 
			}
			
			set
			{
				if (this.entityData.MaGiangVien == value)
					return;
				
                OnPropertyChanging("MaGiangVien");                    
				OnColumnChanging(KhoiLuongKhacColumn.MaGiangVien, this.entityData.MaGiangVien);
				this.entityData.MaGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.MaGiangVien, this.entityData.MaGiangVien);
				OnPropertyChanged("MaGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String LoaiHocPhan
		{
			get
			{
				return this.entityData.LoaiHocPhan; 
			}
			
			set
			{
				if (this.entityData.LoaiHocPhan == value)
					return;
				
                OnPropertyChanging("LoaiHocPhan");                    
				OnColumnChanging(KhoiLuongKhacColumn.LoaiHocPhan, this.entityData.LoaiHocPhan);
				this.entityData.LoaiHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.LoaiHocPhan, this.entityData.LoaiHocPhan);
				OnPropertyChanged("LoaiHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(KhoiLuongKhacColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
				
                OnPropertyChanging("MaLop");                    
				OnColumnChanging(KhoiLuongKhacColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaMonHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaMonHoc
		{
			get
			{
				return this.entityData.MaMonHoc; 
			}
			
			set
			{
				if (this.entityData.MaMonHoc == value)
					return;
				
                OnPropertyChanging("MaMonHoc");                    
				OnColumnChanging(KhoiLuongKhacColumn.MaMonHoc, this.entityData.MaMonHoc);
				this.entityData.MaMonHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.MaMonHoc, this.entityData.MaMonHoc);
				OnPropertyChanged("MaMonHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaNhom property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaNhom
		{
			get
			{
				return this.entityData.MaNhom; 
			}
			
			set
			{
				if (this.entityData.MaNhom == value)
					return;
				
                OnPropertyChanging("MaNhom");                    
				OnColumnChanging(KhoiLuongKhacColumn.MaNhom, this.entityData.MaNhom);
				this.entityData.MaNhom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.MaNhom, this.entityData.MaNhom);
				OnPropertyChanged("MaNhom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTiet property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SoTiet
		{
			get
			{
				return this.entityData.SoTiet; 
			}
			
			set
			{
				if (this.entityData.SoTiet == value)
					return;
				
                OnPropertyChanging("SoTiet");                    
				OnColumnChanging(KhoiLuongKhacColumn.SoTiet, this.entityData.SoTiet);
				this.entityData.SoTiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.SoTiet, this.entityData.SoTiet);
				OnPropertyChanged("SoTiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoTuan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoTuan
		{
			get
			{
				return this.entityData.SoTuan; 
			}
			
			set
			{
				if (this.entityData.SoTuan == value)
					return;
				
                OnPropertyChanging("SoTuan");                    
				OnColumnChanging(KhoiLuongKhacColumn.SoTuan, this.entityData.SoTuan);
				this.entityData.SoTuan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.SoTuan, this.entityData.SoTuan);
				OnPropertyChanged("SoTuan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DonGia property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DonGia
		{
			get
			{
				return this.entityData.DonGia; 
			}
			
			set
			{
				if (this.entityData.DonGia == value)
					return;
				
                OnPropertyChanging("DonGia");                    
				OnColumnChanging(KhoiLuongKhacColumn.DonGia, this.entityData.DonGia);
				this.entityData.DonGia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.DonGia, this.entityData.DonGia);
				OnPropertyChanged("DonGia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(KhoiLuongKhacColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(KhoiLuongKhacColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoLuong property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SoLuong
		{
			get
			{
				return this.entityData.SoLuong; 
			}
			
			set
			{
				if (this.entityData.SoLuong == value)
					return;
				
                OnPropertyChanging("SoLuong");                    
				OnColumnChanging(KhoiLuongKhacColumn.SoLuong, this.entityData.SoLuong);
				this.entityData.SoLuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.SoLuong, this.entityData.SoLuong);
				OnPropertyChanged("SoLuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietQuyDoi property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TietQuyDoi
		{
			get
			{
				return this.entityData.TietQuyDoi; 
			}
			
			set
			{
				if (this.entityData.TietQuyDoi == value)
					return;
				
                OnPropertyChanging("TietQuyDoi");                    
				OnColumnChanging(KhoiLuongKhacColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				this.entityData.TietQuyDoi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.TietQuyDoi, this.entityData.TietQuyDoi);
				OnPropertyChanged("TietQuyDoi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DienGiai property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String DienGiai
		{
			get
			{
				return this.entityData.DienGiai; 
			}
			
			set
			{
				if (this.entityData.DienGiai == value)
					return;
				
                OnPropertyChanging("DienGiai");                    
				OnColumnChanging(KhoiLuongKhacColumn.DienGiai, this.entityData.DienGiai);
				this.entityData.DienGiai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.DienGiai, this.entityData.DienGiai);
				OnPropertyChanged("DienGiai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhanLoai property. 
		///		1. Khoi luong trung tam, 2. Khoi luong khac
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"1. Khoi luong trung tam, 2. Khoi luong khac"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PhanLoai
		{
			get
			{
				return this.entityData.PhanLoai; 
			}
			
			set
			{
				if (this.entityData.PhanLoai == value)
					return;
				
                OnPropertyChanging("PhanLoai");                    
				OnColumnChanging(KhoiLuongKhacColumn.PhanLoai, this.entityData.PhanLoai);
				this.entityData.PhanLoai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.PhanLoai, this.entityData.PhanLoai);
				OnPropertyChanged("PhanLoai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayTao property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayTao
		{
			get
			{
				return this.entityData.NgayTao; 
			}
			
			set
			{
				if (this.entityData.NgayTao == value)
					return;
				
                OnPropertyChanging("NgayTao");                    
				OnColumnChanging(KhoiLuongKhacColumn.NgayTao, this.entityData.NgayTao);
				this.entityData.NgayTao = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(KhoiLuongKhacColumn.NgayTao, this.entityData.NgayTao);
				OnPropertyChanged("NgayTao");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="GiangVien"/>.
		/// </summary>
		/// <value>The source GiangVien for MaGiangVien.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GiangVien MaGiangVienSource
      	{
            get { return entityData.MaGiangVienSource; }
            set { entityData.MaGiangVienSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ChiTietKhoiLuong objects
		///	which are related to this object through the relation FK_ChiTietKhoiLuong_KhoiLuongKhac
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ChiTietKhoiLuong> ChiTietKhoiLuongCollection
		{
			get { return entityData.ChiTietKhoiLuongCollection; }
			set { entityData.ChiTietKhoiLuongCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LoaiHocPhan", "Loai Hoc Phan", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaMonHoc", "Ma Mon Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaNhom", "Ma Nhom", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DienGiai", "Dien Giai", 500));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "KhoiLuongKhac"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaKhoiLuong", "MaGiangVien", "LoaiHocPhan", "MaLopHocPhan", "MaLop", "MaMonHoc", "MaNhom", "SoTiet", "SoTuan", "DonGia", "NamHoc", "HocKy", "SoLuong", "TietQuyDoi", "DienGiai", "PhanLoai", "NgayTao"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as KhoiLuongKhacEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (KhoiLuongKhac) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<KhoiLuongKhac>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as KhoiLuongKhac);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed KhoiLuongKhac Entity 
		///</summary>
		protected virtual KhoiLuongKhac Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			KhoiLuongKhac copy = new KhoiLuongKhac();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaKhoiLuong = this.MaKhoiLuong;
				copy.MaGiangVien = this.MaGiangVien;
				copy.LoaiHocPhan = this.LoaiHocPhan;
				copy.MaLopHocPhan = this.MaLopHocPhan;
				copy.MaLop = this.MaLop;
				copy.MaMonHoc = this.MaMonHoc;
				copy.MaNhom = this.MaNhom;
				copy.SoTiet = this.SoTiet;
				copy.SoTuan = this.SoTuan;
				copy.DonGia = this.DonGia;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
				copy.SoLuong = this.SoLuong;
				copy.TietQuyDoi = this.TietQuyDoi;
				copy.DienGiai = this.DienGiai;
				copy.PhanLoai = this.PhanLoai;
				copy.NgayTao = this.NgayTao;
			
			if (this.MaGiangVienSource != null && existingCopies.Contains(this.MaGiangVienSource))
				copy.MaGiangVienSource = existingCopies[this.MaGiangVienSource] as GiangVien;
			else
				copy.MaGiangVienSource = MakeCopyOf(this.MaGiangVienSource, existingCopies) as GiangVien;
		
			//deep copy nested objects
			copy.ChiTietKhoiLuongCollection = (TList<ChiTietKhoiLuong>) MakeCopyOf(this.ChiTietKhoiLuongCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed KhoiLuongKhac Entity 
		///</summary>
		public virtual KhoiLuongKhac Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed KhoiLuongKhac Entity which is a deep copy of the current entity.
		///</summary>
		public virtual KhoiLuongKhac DeepCopy()
		{
			return EntityHelper.Clone<KhoiLuongKhac>(this as KhoiLuongKhac);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as KhoiLuongKhacEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new KhoiLuongKhacEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as KhoiLuongKhacEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(KhoiLuongKhacColumn column)
		{
			switch(column)
			{
					case KhoiLuongKhacColumn.MaKhoiLuong:
					return entityData.MaKhoiLuong != _originalData.MaKhoiLuong;
					case KhoiLuongKhacColumn.MaGiangVien:
					return entityData.MaGiangVien != _originalData.MaGiangVien;
					case KhoiLuongKhacColumn.LoaiHocPhan:
					return entityData.LoaiHocPhan != _originalData.LoaiHocPhan;
					case KhoiLuongKhacColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case KhoiLuongKhacColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
					case KhoiLuongKhacColumn.MaMonHoc:
					return entityData.MaMonHoc != _originalData.MaMonHoc;
					case KhoiLuongKhacColumn.MaNhom:
					return entityData.MaNhom != _originalData.MaNhom;
					case KhoiLuongKhacColumn.SoTiet:
					return entityData.SoTiet != _originalData.SoTiet;
					case KhoiLuongKhacColumn.SoTuan:
					return entityData.SoTuan != _originalData.SoTuan;
					case KhoiLuongKhacColumn.DonGia:
					return entityData.DonGia != _originalData.DonGia;
					case KhoiLuongKhacColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case KhoiLuongKhacColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
					case KhoiLuongKhacColumn.SoLuong:
					return entityData.SoLuong != _originalData.SoLuong;
					case KhoiLuongKhacColumn.TietQuyDoi:
					return entityData.TietQuyDoi != _originalData.TietQuyDoi;
					case KhoiLuongKhacColumn.DienGiai:
					return entityData.DienGiai != _originalData.DienGiai;
					case KhoiLuongKhacColumn.PhanLoai:
					return entityData.PhanLoai != _originalData.PhanLoai;
					case KhoiLuongKhacColumn.NgayTao:
					return entityData.NgayTao != _originalData.NgayTao;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< KhoiLuongKhacColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaKhoiLuong != _originalData.MaKhoiLuong;
			result = result || entityData.MaGiangVien != _originalData.MaGiangVien;
			result = result || entityData.LoaiHocPhan != _originalData.LoaiHocPhan;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.MaLop != _originalData.MaLop;
			result = result || entityData.MaMonHoc != _originalData.MaMonHoc;
			result = result || entityData.MaNhom != _originalData.MaNhom;
			result = result || entityData.SoTiet != _originalData.SoTiet;
			result = result || entityData.SoTuan != _originalData.SoTuan;
			result = result || entityData.DonGia != _originalData.DonGia;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			result = result || entityData.SoLuong != _originalData.SoLuong;
			result = result || entityData.TietQuyDoi != _originalData.TietQuyDoi;
			result = result || entityData.DienGiai != _originalData.DienGiai;
			result = result || entityData.PhanLoai != _originalData.PhanLoai;
			result = result || entityData.NgayTao != _originalData.NgayTao;
			return result;
		}	
		
		///<summary>
		///  Returns a KhoiLuongKhac Entity with the original data.
		///</summary>
		public KhoiLuongKhac GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateKhoiLuongKhac(
				_originalData.MaGiangVien,
				_originalData.LoaiHocPhan,
				_originalData.MaLopHocPhan,
				_originalData.MaLop,
				_originalData.MaMonHoc,
				_originalData.MaNhom,
				_originalData.SoTiet,
				_originalData.SoTuan,
				_originalData.DonGia,
				_originalData.NamHoc,
				_originalData.HocKy,
				_originalData.SoLuong,
				_originalData.TietQuyDoi,
				_originalData.DienGiai,
				_originalData.PhanLoai,
				_originalData.NgayTao
				);
				
			return (KhoiLuongKhac)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="KhoiLuongKhacBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is KhoiLuongKhacBase)
				return ValueEquals(this, (KhoiLuongKhacBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="KhoiLuongKhacBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaKhoiLuong.GetHashCode() ^ 
					((this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString()).GetHashCode() ^ 
					((this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString()).GetHashCode() ^ 
					((this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString()).GetHashCode() ^ 
					((this.MaLop == null) ? string.Empty : this.MaLop.ToString()).GetHashCode() ^ 
					((this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString()).GetHashCode() ^ 
					((this.MaNhom == null) ? string.Empty : this.MaNhom.ToString()).GetHashCode() ^ 
					((this.SoTiet == null) ? string.Empty : this.SoTiet.ToString()).GetHashCode() ^ 
					((this.SoTuan == null) ? string.Empty : this.SoTuan.ToString()).GetHashCode() ^ 
					((this.DonGia == null) ? string.Empty : this.DonGia.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode() ^ 
					((this.SoLuong == null) ? string.Empty : this.SoLuong.ToString()).GetHashCode() ^ 
					((this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString()).GetHashCode() ^ 
					((this.DienGiai == null) ? string.Empty : this.DienGiai.ToString()).GetHashCode() ^ 
					((this.PhanLoai == null) ? string.Empty : this.PhanLoai.ToString()).GetHashCode() ^ 
					((this.NgayTao == null) ? string.Empty : this.NgayTao.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="KhoiLuongKhacBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(KhoiLuongKhacBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="KhoiLuongKhacBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="KhoiLuongKhacBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="KhoiLuongKhacBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(KhoiLuongKhacBase Object1, KhoiLuongKhacBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaKhoiLuong != Object2.MaKhoiLuong)
				equal = false;
			if ( Object1.MaGiangVien != null && Object2.MaGiangVien != null )
			{
				if (Object1.MaGiangVien != Object2.MaGiangVien)
					equal = false;
			}
			else if (Object1.MaGiangVien == null ^ Object2.MaGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.LoaiHocPhan != null && Object2.LoaiHocPhan != null )
			{
				if (Object1.LoaiHocPhan != Object2.LoaiHocPhan)
					equal = false;
			}
			else if (Object1.LoaiHocPhan == null ^ Object2.LoaiHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHocPhan != null && Object2.MaLopHocPhan != null )
			{
				if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
					equal = false;
			}
			else if (Object1.MaLopHocPhan == null ^ Object2.MaLopHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.MaLop != null && Object2.MaLop != null )
			{
				if (Object1.MaLop != Object2.MaLop)
					equal = false;
			}
			else if (Object1.MaLop == null ^ Object2.MaLop == null )
			{
				equal = false;
			}
			if ( Object1.MaMonHoc != null && Object2.MaMonHoc != null )
			{
				if (Object1.MaMonHoc != Object2.MaMonHoc)
					equal = false;
			}
			else if (Object1.MaMonHoc == null ^ Object2.MaMonHoc == null )
			{
				equal = false;
			}
			if ( Object1.MaNhom != null && Object2.MaNhom != null )
			{
				if (Object1.MaNhom != Object2.MaNhom)
					equal = false;
			}
			else if (Object1.MaNhom == null ^ Object2.MaNhom == null )
			{
				equal = false;
			}
			if ( Object1.SoTiet != null && Object2.SoTiet != null )
			{
				if (Object1.SoTiet != Object2.SoTiet)
					equal = false;
			}
			else if (Object1.SoTiet == null ^ Object2.SoTiet == null )
			{
				equal = false;
			}
			if ( Object1.SoTuan != null && Object2.SoTuan != null )
			{
				if (Object1.SoTuan != Object2.SoTuan)
					equal = false;
			}
			else if (Object1.SoTuan == null ^ Object2.SoTuan == null )
			{
				equal = false;
			}
			if ( Object1.DonGia != null && Object2.DonGia != null )
			{
				if (Object1.DonGia != Object2.DonGia)
					equal = false;
			}
			else if (Object1.DonGia == null ^ Object2.DonGia == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
			if ( Object1.SoLuong != null && Object2.SoLuong != null )
			{
				if (Object1.SoLuong != Object2.SoLuong)
					equal = false;
			}
			else if (Object1.SoLuong == null ^ Object2.SoLuong == null )
			{
				equal = false;
			}
			if ( Object1.TietQuyDoi != null && Object2.TietQuyDoi != null )
			{
				if (Object1.TietQuyDoi != Object2.TietQuyDoi)
					equal = false;
			}
			else if (Object1.TietQuyDoi == null ^ Object2.TietQuyDoi == null )
			{
				equal = false;
			}
			if ( Object1.DienGiai != null && Object2.DienGiai != null )
			{
				if (Object1.DienGiai != Object2.DienGiai)
					equal = false;
			}
			else if (Object1.DienGiai == null ^ Object2.DienGiai == null )
			{
				equal = false;
			}
			if ( Object1.PhanLoai != null && Object2.PhanLoai != null )
			{
				if (Object1.PhanLoai != Object2.PhanLoai)
					equal = false;
			}
			else if (Object1.PhanLoai == null ^ Object2.PhanLoai == null )
			{
				equal = false;
			}
			if ( Object1.NgayTao != null && Object2.NgayTao != null )
			{
				if (Object1.NgayTao != Object2.NgayTao)
					equal = false;
			}
			else if (Object1.NgayTao == null ^ Object2.NgayTao == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((KhoiLuongKhacBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static KhoiLuongKhacComparer GetComparer()
        {
            return new KhoiLuongKhacComparer();
        }
        */

        // Comparer delegates back to KhoiLuongKhac
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(KhoiLuongKhac rhs, KhoiLuongKhacColumn which)
        {
            switch (which)
            {
            	
            	
            	case KhoiLuongKhacColumn.MaKhoiLuong:
            		return this.MaKhoiLuong.CompareTo(rhs.MaKhoiLuong);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.MaGiangVien:
            		return this.MaGiangVien.Value.CompareTo(rhs.MaGiangVien.Value);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.LoaiHocPhan:
            		return this.LoaiHocPhan.CompareTo(rhs.LoaiHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.MaMonHoc:
            		return this.MaMonHoc.CompareTo(rhs.MaMonHoc);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.MaNhom:
            		return this.MaNhom.CompareTo(rhs.MaNhom);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.SoTiet:
            		return this.SoTiet.Value.CompareTo(rhs.SoTiet.Value);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.SoTuan:
            		return this.SoTuan.Value.CompareTo(rhs.SoTuan.Value);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.DonGia:
            		return this.DonGia.Value.CompareTo(rhs.DonGia.Value);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.SoLuong:
            		return this.SoLuong.Value.CompareTo(rhs.SoLuong.Value);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.TietQuyDoi:
            		return this.TietQuyDoi.Value.CompareTo(rhs.TietQuyDoi.Value);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.DienGiai:
            		return this.DienGiai.CompareTo(rhs.DienGiai);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.PhanLoai:
            		return this.PhanLoai.Value.CompareTo(rhs.PhanLoai.Value);
            		
            		                 
            	
            	
            	case KhoiLuongKhacColumn.NgayTao:
            		return this.NgayTao.Value.CompareTo(rhs.NgayTao.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<KhoiLuongKhacKey> Members
		
		// member variable for the EntityId property
		private KhoiLuongKhacKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual KhoiLuongKhacKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new KhoiLuongKhacKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("KhoiLuongKhac")
					.Append("|").Append( this.MaKhoiLuong.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- MaKhoiLuong: {0}{17}- MaGiangVien: {1}{17}- LoaiHocPhan: {2}{17}- MaLopHocPhan: {3}{17}- MaLop: {4}{17}- MaMonHoc: {5}{17}- MaNhom: {6}{17}- SoTiet: {7}{17}- SoTuan: {8}{17}- DonGia: {9}{17}- NamHoc: {10}{17}- HocKy: {11}{17}- SoLuong: {12}{17}- TietQuyDoi: {13}{17}- DienGiai: {14}{17}- PhanLoai: {15}{17}- NgayTao: {16}{17}{19}", 
				this.MaKhoiLuong,
				(this.MaGiangVien == null) ? string.Empty : this.MaGiangVien.ToString(),
				(this.LoaiHocPhan == null) ? string.Empty : this.LoaiHocPhan.ToString(),
				(this.MaLopHocPhan == null) ? string.Empty : this.MaLopHocPhan.ToString(),
				(this.MaLop == null) ? string.Empty : this.MaLop.ToString(),
				(this.MaMonHoc == null) ? string.Empty : this.MaMonHoc.ToString(),
				(this.MaNhom == null) ? string.Empty : this.MaNhom.ToString(),
				(this.SoTiet == null) ? string.Empty : this.SoTiet.ToString(),
				(this.SoTuan == null) ? string.Empty : this.SoTuan.ToString(),
				(this.DonGia == null) ? string.Empty : this.DonGia.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				(this.SoLuong == null) ? string.Empty : this.SoLuong.ToString(),
				(this.TietQuyDoi == null) ? string.Empty : this.TietQuyDoi.ToString(),
				(this.DienGiai == null) ? string.Empty : this.DienGiai.ToString(),
				(this.PhanLoai == null) ? string.Empty : this.PhanLoai.ToString(),
				(this.NgayTao == null) ? string.Empty : this.NgayTao.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'KhoiLuongKhac' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class KhoiLuongKhacEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaKhoiLuong : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "KhoiLuongKhac"</remarks>
		public System.Int32 MaKhoiLuong;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		public System.Int32? MaGiangVien = null;
		
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		public System.String LoaiHocPhan = null;
		
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		public System.String MaLopHocPhan = null;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String MaLop = null;
		
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		public System.String MaMonHoc = null;
		
		/// <summary>
		/// MaNhom : 
		/// </summary>
		public System.String MaNhom = null;
		
		/// <summary>
		/// SoTiet : 
		/// </summary>
		public System.Decimal? SoTiet = null;
		
		/// <summary>
		/// SoTuan : 
		/// </summary>
		public System.Int32? SoTuan = null;
		
		/// <summary>
		/// DonGia : 
		/// </summary>
		public System.Decimal? DonGia = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		
		/// <summary>
		/// SoLuong : 
		/// </summary>
		public System.Int32? SoLuong = null;
		
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		public System.Decimal? TietQuyDoi = null;
		
		/// <summary>
		/// DienGiai : 
		/// </summary>
		public System.String DienGiai = null;
		
		/// <summary>
		/// PhanLoai : 1. Khoi luong trung tam, 2. Khoi luong khac
		/// </summary>
		public System.Int32? PhanLoai = null;
		
		/// <summary>
		/// NgayTao : 
		/// </summary>
		public System.DateTime? NgayTao = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private GiangVien _maGiangVienSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GiangVien"/>.
		/// </summary>
		/// <value>The source GiangVien for MaGiangVien.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GiangVien MaGiangVienSource
      	{
            get { return this._maGiangVienSource; }
            set { this._maGiangVienSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region ChiTietKhoiLuongCollection
		
		private TList<ChiTietKhoiLuong> _chiTietKhoiLuongMaKhoiLuong;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _chiTietKhoiLuongMaKhoiLuong
		/// </summary>
		
		public TList<ChiTietKhoiLuong> ChiTietKhoiLuongCollection
		{
			get
			{
				if (_chiTietKhoiLuongMaKhoiLuong == null)
				{
				_chiTietKhoiLuongMaKhoiLuong = new TList<ChiTietKhoiLuong>();
				}
	
				return _chiTietKhoiLuongMaKhoiLuong;
			}
			set { _chiTietKhoiLuongMaKhoiLuong = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			KhoiLuongKhacEntityData _tmp = new KhoiLuongKhacEntityData();
						
			_tmp.MaKhoiLuong = this.MaKhoiLuong;
			
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.LoaiHocPhan = this.LoaiHocPhan;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaLop = this.MaLop;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.MaNhom = this.MaNhom;
			_tmp.SoTiet = this.SoTiet;
			_tmp.SoTuan = this.SoTuan;
			_tmp.DonGia = this.DonGia;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.SoLuong = this.SoLuong;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.DienGiai = this.DienGiai;
			_tmp.PhanLoai = this.PhanLoai;
			_tmp.NgayTao = this.NgayTao;
			
			#region Source Parent Composite Entities
			if (this.MaGiangVienSource != null)
				_tmp.MaGiangVienSource = MakeCopyOf(this.MaGiangVienSource) as GiangVien;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._chiTietKhoiLuongMaKhoiLuong != null)
				_tmp.ChiTietKhoiLuongCollection = (TList<ChiTietKhoiLuong>) MakeCopyOf(this.ChiTietKhoiLuongCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			KhoiLuongKhacEntityData _tmp = new KhoiLuongKhacEntityData();
						
			_tmp.MaKhoiLuong = this.MaKhoiLuong;
			
			_tmp.MaGiangVien = this.MaGiangVien;
			_tmp.LoaiHocPhan = this.LoaiHocPhan;
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.MaLop = this.MaLop;
			_tmp.MaMonHoc = this.MaMonHoc;
			_tmp.MaNhom = this.MaNhom;
			_tmp.SoTiet = this.SoTiet;
			_tmp.SoTuan = this.SoTuan;
			_tmp.DonGia = this.DonGia;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			_tmp.SoLuong = this.SoLuong;
			_tmp.TietQuyDoi = this.TietQuyDoi;
			_tmp.DienGiai = this.DienGiai;
			_tmp.PhanLoai = this.PhanLoai;
			_tmp.NgayTao = this.NgayTao;
			
			#region Source Parent Composite Entities
			if (this.MaGiangVienSource != null && existingCopies.Contains(this.MaGiangVienSource))
				_tmp.MaGiangVienSource = existingCopies[this.MaGiangVienSource] as GiangVien;
			else
				_tmp.MaGiangVienSource = MakeCopyOf(this.MaGiangVienSource, existingCopies) as GiangVien;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ChiTietKhoiLuongCollection = (TList<ChiTietKhoiLuong>) MakeCopyOf(this.ChiTietKhoiLuongCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongKhacColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(KhoiLuongKhacColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongKhacColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(KhoiLuongKhacColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongKhacColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(KhoiLuongKhacColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				KhoiLuongKhacEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new KhoiLuongKhacEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="KhoiLuongKhacColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(KhoiLuongKhacColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				KhoiLuongKhacEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new KhoiLuongKhacEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region KhoiLuongKhacEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="KhoiLuongKhac"/> object.
	/// </remarks>
	public class KhoiLuongKhacEventArgs : System.EventArgs
	{
		private KhoiLuongKhacColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the KhoiLuongKhacEventArgs class.
		///</summary>
		public KhoiLuongKhacEventArgs(KhoiLuongKhacColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the KhoiLuongKhacEventArgs class.
		///</summary>
		public KhoiLuongKhacEventArgs(KhoiLuongKhacColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The KhoiLuongKhacColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="KhoiLuongKhacColumn" />
		public KhoiLuongKhacColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all KhoiLuongKhac related events.
	///</summary>
	public delegate void KhoiLuongKhacEventHandler(object sender, KhoiLuongKhacEventArgs e);
	
	#region KhoiLuongKhacComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class KhoiLuongKhacComparer : System.Collections.Generic.IComparer<KhoiLuongKhac>
	{
		KhoiLuongKhacColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:KhoiLuongKhacComparer"/> class.
        /// </summary>
		public KhoiLuongKhacComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:KhoiLuongKhacComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public KhoiLuongKhacComparer(KhoiLuongKhacColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="KhoiLuongKhac"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="KhoiLuongKhac"/> to compare.</param>
        /// <param name="b">The second <c>KhoiLuongKhac</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(KhoiLuongKhac a, KhoiLuongKhac b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(KhoiLuongKhac entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(KhoiLuongKhac a, KhoiLuongKhac b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public KhoiLuongKhacColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region KhoiLuongKhacKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="KhoiLuongKhac"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class KhoiLuongKhacKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacKey class.
		/// </summary>
		public KhoiLuongKhacKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacKey class.
		/// </summary>
		public KhoiLuongKhacKey(KhoiLuongKhacBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaKhoiLuong = entity.MaKhoiLuong;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacKey class.
		/// </summary>
		public KhoiLuongKhacKey(System.Int32 _maKhoiLuong)
		{
			#region Init Properties

			this.MaKhoiLuong = _maKhoiLuong;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private KhoiLuongKhacBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public KhoiLuongKhacBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaKhoiLuong property
		private System.Int32 _maKhoiLuong;
		
		/// <summary>
		/// Gets or sets the MaKhoiLuong property.
		/// </summary>
		public System.Int32 MaKhoiLuong
		{
			get { return _maKhoiLuong; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaKhoiLuong = value;
				
				_maKhoiLuong = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaKhoiLuong = ( values["MaKhoiLuong"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaKhoiLuong"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaKhoiLuong", MaKhoiLuong);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaKhoiLuong: {0}{1}",
								MaKhoiLuong,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region KhoiLuongKhacColumn Enum
	
	/// <summary>
	/// Enumerate the KhoiLuongKhac columns.
	/// </summary>
	[Serializable]
	public enum KhoiLuongKhacColumn : int
	{
		/// <summary>
		/// MaKhoiLuong : 
		/// </summary>
		[EnumTextValue("Ma Khoi Luong")]
		[ColumnEnum("MaKhoiLuong", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaKhoiLuong = 1,
		/// <summary>
		/// MaGiangVien : 
		/// </summary>
		[EnumTextValue("Ma Giang Vien")]
		[ColumnEnum("MaGiangVien", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaGiangVien = 2,
		/// <summary>
		/// LoaiHocPhan : 
		/// </summary>
		[EnumTextValue("Loai Hoc Phan")]
		[ColumnEnum("LoaiHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		LoaiHocPhan = 3,
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MaLopHocPhan = 4,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("Ma Lop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaLop = 5,
		/// <summary>
		/// MaMonHoc : 
		/// </summary>
		[EnumTextValue("Ma Mon Hoc")]
		[ColumnEnum("MaMonHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaMonHoc = 6,
		/// <summary>
		/// MaNhom : 
		/// </summary>
		[EnumTextValue("Ma Nhom")]
		[ColumnEnum("MaNhom", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaNhom = 7,
		/// <summary>
		/// SoTiet : 
		/// </summary>
		[EnumTextValue("So Tiet")]
		[ColumnEnum("SoTiet", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SoTiet = 8,
		/// <summary>
		/// SoTuan : 
		/// </summary>
		[EnumTextValue("So Tuan")]
		[ColumnEnum("SoTuan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoTuan = 9,
		/// <summary>
		/// DonGia : 
		/// </summary>
		[EnumTextValue("Don Gia")]
		[ColumnEnum("DonGia", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DonGia = 10,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 11,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 12,
		/// <summary>
		/// SoLuong : 
		/// </summary>
		[EnumTextValue("So Luong")]
		[ColumnEnum("SoLuong", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SoLuong = 13,
		/// <summary>
		/// TietQuyDoi : 
		/// </summary>
		[EnumTextValue("Tiet Quy Doi")]
		[ColumnEnum("TietQuyDoi", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TietQuyDoi = 14,
		/// <summary>
		/// DienGiai : 
		/// </summary>
		[EnumTextValue("Dien Giai")]
		[ColumnEnum("DienGiai", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DienGiai = 15,
		/// <summary>
		/// PhanLoai : 1. Khoi luong trung tam, 2. Khoi luong khac
		/// </summary>
		[EnumTextValue("Phan Loai")]
		[ColumnEnum("PhanLoai", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PhanLoai = 16,
		/// <summary>
		/// NgayTao : 
		/// </summary>
		[EnumTextValue("Ngay Tao")]
		[ColumnEnum("NgayTao", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayTao = 17
	}//End enum

	#endregion KhoiLuongKhacColumn Enum

} // end namespace
