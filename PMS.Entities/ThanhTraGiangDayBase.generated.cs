
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ThanhTraGiangDay.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'ThanhTraGiangDay' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ThanhTraGiangDayBase : EntityBase, IThanhTraGiangDay, IEntityId<ThanhTraGiangDayKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThanhTraGiangDayEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThanhTraGiangDayEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThanhTraGiangDayEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThanhTraGiangDay> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThanhTraGiangDayEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThanhTraGiangDayEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThanhTraGiangDayBase"/> instance.
		///</summary>
		public ThanhTraGiangDayBase()
		{
			this.entityData = new ThanhTraGiangDayEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThanhTraGiangDayBase"/> instance.
		///</summary>
		///<param name="_maHienThi"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_khoa"></param>
		///<param name="_loaiGiangVien"></param>
		///<param name="_tenHocPhan"></param>
		///<param name="_tinhHinhGhiNhan"></param>
		///<param name="_ngay"></param>
		///<param name="_tiet"></param>
		///<param name="_lop"></param>
		///<param name="_phong"></param>
		///<param name="_thoiDiemGhiNhan"></param>
		///<param name="_lyDo"></param>
		///<param name="_ghiChu"></param>
		///<param name="_maHinhThucViPham"></param>
		///<param name="_daBaoSuaTkb"></param>
		public ThanhTraGiangDayBase(System.String _maHienThi, System.String _maQuanLy, 
			System.String _khoa, System.String _loaiGiangVien, System.String _tenHocPhan, 
			System.String _tinhHinhGhiNhan, System.DateTime? _ngay, System.String _tiet, 
			System.String _lop, System.String _phong, System.String _thoiDiemGhiNhan, 
			System.String _lyDo, System.String _ghiChu, System.Guid? _maHinhThucViPham, 
			System.Boolean? _daBaoSuaTkb)
		{
			this.entityData = new ThanhTraGiangDayEntityData();
			this.backupData = null;

			this.MaHienThi = _maHienThi;
			this.MaQuanLy = _maQuanLy;
			this.Khoa = _khoa;
			this.LoaiGiangVien = _loaiGiangVien;
			this.TenHocPhan = _tenHocPhan;
			this.TinhHinhGhiNhan = _tinhHinhGhiNhan;
			this.Ngay = _ngay;
			this.Tiet = _tiet;
			this.Lop = _lop;
			this.Phong = _phong;
			this.ThoiDiemGhiNhan = _thoiDiemGhiNhan;
			this.LyDo = _lyDo;
			this.GhiChu = _ghiChu;
			this.MaHinhThucViPham = _maHinhThucViPham;
			this.DaBaoSuaTkb = _daBaoSuaTkb;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThanhTraGiangDay"/> instance.
		///</summary>
		///<param name="_maHienThi"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_khoa"></param>
		///<param name="_loaiGiangVien"></param>
		///<param name="_tenHocPhan"></param>
		///<param name="_tinhHinhGhiNhan"></param>
		///<param name="_ngay"></param>
		///<param name="_tiet"></param>
		///<param name="_lop"></param>
		///<param name="_phong"></param>
		///<param name="_thoiDiemGhiNhan"></param>
		///<param name="_lyDo"></param>
		///<param name="_ghiChu"></param>
		///<param name="_maHinhThucViPham"></param>
		///<param name="_daBaoSuaTkb"></param>
		public static ThanhTraGiangDay CreateThanhTraGiangDay(System.String _maHienThi, System.String _maQuanLy, 
			System.String _khoa, System.String _loaiGiangVien, System.String _tenHocPhan, 
			System.String _tinhHinhGhiNhan, System.DateTime? _ngay, System.String _tiet, 
			System.String _lop, System.String _phong, System.String _thoiDiemGhiNhan, 
			System.String _lyDo, System.String _ghiChu, System.Guid? _maHinhThucViPham, 
			System.Boolean? _daBaoSuaTkb)
		{
			ThanhTraGiangDay newThanhTraGiangDay = new ThanhTraGiangDay();
			newThanhTraGiangDay.MaHienThi = _maHienThi;
			newThanhTraGiangDay.MaQuanLy = _maQuanLy;
			newThanhTraGiangDay.Khoa = _khoa;
			newThanhTraGiangDay.LoaiGiangVien = _loaiGiangVien;
			newThanhTraGiangDay.TenHocPhan = _tenHocPhan;
			newThanhTraGiangDay.TinhHinhGhiNhan = _tinhHinhGhiNhan;
			newThanhTraGiangDay.Ngay = _ngay;
			newThanhTraGiangDay.Tiet = _tiet;
			newThanhTraGiangDay.Lop = _lop;
			newThanhTraGiangDay.Phong = _phong;
			newThanhTraGiangDay.ThoiDiemGhiNhan = _thoiDiemGhiNhan;
			newThanhTraGiangDay.LyDo = _lyDo;
			newThanhTraGiangDay.GhiChu = _ghiChu;
			newThanhTraGiangDay.MaHinhThucViPham = _maHinhThucViPham;
			newThanhTraGiangDay.DaBaoSuaTkb = _daBaoSuaTkb;
			return newThanhTraGiangDay;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaHoSoThanhTra property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaHoSoThanhTra
		{
			get
			{
				return this.entityData.MaHoSoThanhTra; 
			}
			
			set
			{
				if (this.entityData.MaHoSoThanhTra == value)
					return;
				
                OnPropertyChanging("MaHoSoThanhTra");                    
				OnColumnChanging(ThanhTraGiangDayColumn.MaHoSoThanhTra, this.entityData.MaHoSoThanhTra);
				this.entityData.MaHoSoThanhTra = value;
				this.EntityId.MaHoSoThanhTra = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.MaHoSoThanhTra, this.entityData.MaHoSoThanhTra);
				OnPropertyChanged("MaHoSoThanhTra");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHienThi property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MaHienThi
		{
			get
			{
				return this.entityData.MaHienThi; 
			}
			
			set
			{
				if (this.entityData.MaHienThi == value)
					return;
				
                OnPropertyChanging("MaHienThi");                    
				OnColumnChanging(ThanhTraGiangDayColumn.MaHienThi, this.entityData.MaHienThi);
				this.entityData.MaHienThi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.MaHienThi, this.entityData.MaHienThi);
				OnPropertyChanged("MaHienThi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 152)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this.entityData.MaQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaQuanLy == value)
					return;
				
                OnPropertyChanging("MaQuanLy");                    
				OnColumnChanging(ThanhTraGiangDayColumn.MaQuanLy, this.entityData.MaQuanLy);
				this.entityData.MaQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.MaQuanLy, this.entityData.MaQuanLy);
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Khoa property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Khoa
		{
			get
			{
				return this.entityData.Khoa; 
			}
			
			set
			{
				if (this.entityData.Khoa == value)
					return;
				
                OnPropertyChanging("Khoa");                    
				OnColumnChanging(ThanhTraGiangDayColumn.Khoa, this.entityData.Khoa);
				this.entityData.Khoa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.Khoa, this.entityData.Khoa);
				OnPropertyChanged("Khoa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoaiGiangVien property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String LoaiGiangVien
		{
			get
			{
				return this.entityData.LoaiGiangVien; 
			}
			
			set
			{
				if (this.entityData.LoaiGiangVien == value)
					return;
				
                OnPropertyChanging("LoaiGiangVien");                    
				OnColumnChanging(ThanhTraGiangDayColumn.LoaiGiangVien, this.entityData.LoaiGiangVien);
				this.entityData.LoaiGiangVien = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.LoaiGiangVien, this.entityData.LoaiGiangVien);
				OnPropertyChanged("LoaiGiangVien");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TenHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String TenHocPhan
		{
			get
			{
				return this.entityData.TenHocPhan; 
			}
			
			set
			{
				if (this.entityData.TenHocPhan == value)
					return;
				
                OnPropertyChanging("TenHocPhan");                    
				OnColumnChanging(ThanhTraGiangDayColumn.TenHocPhan, this.entityData.TenHocPhan);
				this.entityData.TenHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.TenHocPhan, this.entityData.TenHocPhan);
				OnPropertyChanged("TenHocPhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TinhHinhGhiNhan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String TinhHinhGhiNhan
		{
			get
			{
				return this.entityData.TinhHinhGhiNhan; 
			}
			
			set
			{
				if (this.entityData.TinhHinhGhiNhan == value)
					return;
				
                OnPropertyChanging("TinhHinhGhiNhan");                    
				OnColumnChanging(ThanhTraGiangDayColumn.TinhHinhGhiNhan, this.entityData.TinhHinhGhiNhan);
				this.entityData.TinhHinhGhiNhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.TinhHinhGhiNhan, this.entityData.TinhHinhGhiNhan);
				OnPropertyChanged("TinhHinhGhiNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ngay property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Ngay
		{
			get
			{
				return this.entityData.Ngay; 
			}
			
			set
			{
				if (this.entityData.Ngay == value)
					return;
				
                OnPropertyChanging("Ngay");                    
				OnColumnChanging(ThanhTraGiangDayColumn.Ngay, this.entityData.Ngay);
				this.entityData.Ngay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.Ngay, this.entityData.Ngay);
				OnPropertyChanged("Ngay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tiet property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Tiet
		{
			get
			{
				return this.entityData.Tiet; 
			}
			
			set
			{
				if (this.entityData.Tiet == value)
					return;
				
                OnPropertyChanging("Tiet");                    
				OnColumnChanging(ThanhTraGiangDayColumn.Tiet, this.entityData.Tiet);
				this.entityData.Tiet = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.Tiet, this.entityData.Tiet);
				OnPropertyChanged("Tiet");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Lop property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Lop
		{
			get
			{
				return this.entityData.Lop; 
			}
			
			set
			{
				if (this.entityData.Lop == value)
					return;
				
                OnPropertyChanging("Lop");                    
				OnColumnChanging(ThanhTraGiangDayColumn.Lop, this.entityData.Lop);
				this.entityData.Lop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.Lop, this.entityData.Lop);
				OnPropertyChanged("Lop");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Phong
		{
			get
			{
				return this.entityData.Phong; 
			}
			
			set
			{
				if (this.entityData.Phong == value)
					return;
				
                OnPropertyChanging("Phong");                    
				OnColumnChanging(ThanhTraGiangDayColumn.Phong, this.entityData.Phong);
				this.entityData.Phong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.Phong, this.entityData.Phong);
				OnPropertyChanged("Phong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThoiDiemGhiNhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String ThoiDiemGhiNhan
		{
			get
			{
				return this.entityData.ThoiDiemGhiNhan; 
			}
			
			set
			{
				if (this.entityData.ThoiDiemGhiNhan == value)
					return;
				
                OnPropertyChanging("ThoiDiemGhiNhan");                    
				OnColumnChanging(ThanhTraGiangDayColumn.ThoiDiemGhiNhan, this.entityData.ThoiDiemGhiNhan);
				this.entityData.ThoiDiemGhiNhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.ThoiDiemGhiNhan, this.entityData.ThoiDiemGhiNhan);
				OnPropertyChanged("ThoiDiemGhiNhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LyDo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String LyDo
		{
			get
			{
				return this.entityData.LyDo; 
			}
			
			set
			{
				if (this.entityData.LyDo == value)
					return;
				
                OnPropertyChanging("LyDo");                    
				OnColumnChanging(ThanhTraGiangDayColumn.LyDo, this.entityData.LyDo);
				this.entityData.LyDo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.LyDo, this.entityData.LyDo);
				OnPropertyChanged("LyDo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(ThanhTraGiangDayColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaHinhThucViPham property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? MaHinhThucViPham
		{
			get
			{
				return this.entityData.MaHinhThucViPham; 
			}
			
			set
			{
				if (this.entityData.MaHinhThucViPham == value)
					return;
				
                OnPropertyChanging("MaHinhThucViPham");                    
				OnColumnChanging(ThanhTraGiangDayColumn.MaHinhThucViPham, this.entityData.MaHinhThucViPham);
				this.entityData.MaHinhThucViPham = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.MaHinhThucViPham, this.entityData.MaHinhThucViPham);
				OnPropertyChanged("MaHinhThucViPham");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaBaoSuaTkb property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DaBaoSuaTkb
		{
			get
			{
				return this.entityData.DaBaoSuaTkb; 
			}
			
			set
			{
				if (this.entityData.DaBaoSuaTkb == value)
					return;
				
                OnPropertyChanging("DaBaoSuaTkb");                    
				OnColumnChanging(ThanhTraGiangDayColumn.DaBaoSuaTkb, this.entityData.DaBaoSuaTkb);
				this.entityData.DaBaoSuaTkb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThanhTraGiangDayColumn.DaBaoSuaTkb, this.entityData.DaBaoSuaTkb);
				OnPropertyChanged("DaBaoSuaTkb");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaHienThi", "Ma Hien Thi", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaQuanLy", "Ma Quan Ly", 152));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Khoa", "Khoa", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LoaiGiangVien", "Loai Giang Vien", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TenHocPhan", "Ten Hoc Phan", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TinhHinhGhiNhan", "Tinh Hinh Ghi Nhan", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Tiet", "Tiet", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Lop", "Lop", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phong", "Phong", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThoiDiemGhiNhan", "Thoi Diem Ghi Nhan", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LyDo", "Ly Do", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GhiChu", "Ghi Chu", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThanhTraGiangDay"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaHoSoThanhTra", "MaHienThi", "MaQuanLy", "Khoa", "LoaiGiangVien", "TenHocPhan", "TinhHinhGhiNhan", "Ngay", "Tiet", "Lop", "Phong", "ThoiDiemGhiNhan", "LyDo", "GhiChu", "MaHinhThucViPham", "DaBaoSuaTkb"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThanhTraGiangDayEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThanhTraGiangDay) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThanhTraGiangDay>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThanhTraGiangDay);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThanhTraGiangDay Entity 
		///</summary>
		protected virtual ThanhTraGiangDay Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ThanhTraGiangDay copy = new ThanhTraGiangDay();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaHoSoThanhTra = this.MaHoSoThanhTra;
				copy.MaHienThi = this.MaHienThi;
				copy.MaQuanLy = this.MaQuanLy;
				copy.Khoa = this.Khoa;
				copy.LoaiGiangVien = this.LoaiGiangVien;
				copy.TenHocPhan = this.TenHocPhan;
				copy.TinhHinhGhiNhan = this.TinhHinhGhiNhan;
				copy.Ngay = this.Ngay;
				copy.Tiet = this.Tiet;
				copy.Lop = this.Lop;
				copy.Phong = this.Phong;
				copy.ThoiDiemGhiNhan = this.ThoiDiemGhiNhan;
				copy.LyDo = this.LyDo;
				copy.GhiChu = this.GhiChu;
				copy.MaHinhThucViPham = this.MaHinhThucViPham;
				copy.DaBaoSuaTkb = this.DaBaoSuaTkb;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ThanhTraGiangDay Entity 
		///</summary>
		public virtual ThanhTraGiangDay Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ThanhTraGiangDay Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThanhTraGiangDay DeepCopy()
		{
			return EntityHelper.Clone<ThanhTraGiangDay>(this as ThanhTraGiangDay);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThanhTraGiangDayEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ThanhTraGiangDayEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThanhTraGiangDayEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThanhTraGiangDayColumn column)
		{
			switch(column)
			{
					case ThanhTraGiangDayColumn.MaHoSoThanhTra:
					return entityData.MaHoSoThanhTra != _originalData.MaHoSoThanhTra;
					case ThanhTraGiangDayColumn.MaHienThi:
					return entityData.MaHienThi != _originalData.MaHienThi;
					case ThanhTraGiangDayColumn.MaQuanLy:
					return entityData.MaQuanLy != _originalData.MaQuanLy;
					case ThanhTraGiangDayColumn.Khoa:
					return entityData.Khoa != _originalData.Khoa;
					case ThanhTraGiangDayColumn.LoaiGiangVien:
					return entityData.LoaiGiangVien != _originalData.LoaiGiangVien;
					case ThanhTraGiangDayColumn.TenHocPhan:
					return entityData.TenHocPhan != _originalData.TenHocPhan;
					case ThanhTraGiangDayColumn.TinhHinhGhiNhan:
					return entityData.TinhHinhGhiNhan != _originalData.TinhHinhGhiNhan;
					case ThanhTraGiangDayColumn.Ngay:
					return entityData.Ngay != _originalData.Ngay;
					case ThanhTraGiangDayColumn.Tiet:
					return entityData.Tiet != _originalData.Tiet;
					case ThanhTraGiangDayColumn.Lop:
					return entityData.Lop != _originalData.Lop;
					case ThanhTraGiangDayColumn.Phong:
					return entityData.Phong != _originalData.Phong;
					case ThanhTraGiangDayColumn.ThoiDiemGhiNhan:
					return entityData.ThoiDiemGhiNhan != _originalData.ThoiDiemGhiNhan;
					case ThanhTraGiangDayColumn.LyDo:
					return entityData.LyDo != _originalData.LyDo;
					case ThanhTraGiangDayColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case ThanhTraGiangDayColumn.MaHinhThucViPham:
					return entityData.MaHinhThucViPham != _originalData.MaHinhThucViPham;
					case ThanhTraGiangDayColumn.DaBaoSuaTkb:
					return entityData.DaBaoSuaTkb != _originalData.DaBaoSuaTkb;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ThanhTraGiangDayColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaHoSoThanhTra != _originalData.MaHoSoThanhTra;
			result = result || entityData.MaHienThi != _originalData.MaHienThi;
			result = result || entityData.MaQuanLy != _originalData.MaQuanLy;
			result = result || entityData.Khoa != _originalData.Khoa;
			result = result || entityData.LoaiGiangVien != _originalData.LoaiGiangVien;
			result = result || entityData.TenHocPhan != _originalData.TenHocPhan;
			result = result || entityData.TinhHinhGhiNhan != _originalData.TinhHinhGhiNhan;
			result = result || entityData.Ngay != _originalData.Ngay;
			result = result || entityData.Tiet != _originalData.Tiet;
			result = result || entityData.Lop != _originalData.Lop;
			result = result || entityData.Phong != _originalData.Phong;
			result = result || entityData.ThoiDiemGhiNhan != _originalData.ThoiDiemGhiNhan;
			result = result || entityData.LyDo != _originalData.LyDo;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.MaHinhThucViPham != _originalData.MaHinhThucViPham;
			result = result || entityData.DaBaoSuaTkb != _originalData.DaBaoSuaTkb;
			return result;
		}	
		
		///<summary>
		///  Returns a ThanhTraGiangDay Entity with the original data.
		///</summary>
		public ThanhTraGiangDay GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateThanhTraGiangDay(
				_originalData.MaHienThi,
				_originalData.MaQuanLy,
				_originalData.Khoa,
				_originalData.LoaiGiangVien,
				_originalData.TenHocPhan,
				_originalData.TinhHinhGhiNhan,
				_originalData.Ngay,
				_originalData.Tiet,
				_originalData.Lop,
				_originalData.Phong,
				_originalData.ThoiDiemGhiNhan,
				_originalData.LyDo,
				_originalData.GhiChu,
				_originalData.MaHinhThucViPham,
				_originalData.DaBaoSuaTkb
				);
				
			return (ThanhTraGiangDay)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThanhTraGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ThanhTraGiangDayBase)
				return ValueEquals(this, (ThanhTraGiangDayBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThanhTraGiangDayBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaHoSoThanhTra.GetHashCode() ^ 
					((this.MaHienThi == null) ? string.Empty : this.MaHienThi.ToString()).GetHashCode() ^ 
					((this.MaQuanLy == null) ? string.Empty : this.MaQuanLy.ToString()).GetHashCode() ^ 
					((this.Khoa == null) ? string.Empty : this.Khoa.ToString()).GetHashCode() ^ 
					((this.LoaiGiangVien == null) ? string.Empty : this.LoaiGiangVien.ToString()).GetHashCode() ^ 
					((this.TenHocPhan == null) ? string.Empty : this.TenHocPhan.ToString()).GetHashCode() ^ 
					((this.TinhHinhGhiNhan == null) ? string.Empty : this.TinhHinhGhiNhan.ToString()).GetHashCode() ^ 
					((this.Ngay == null) ? string.Empty : this.Ngay.ToString()).GetHashCode() ^ 
					((this.Tiet == null) ? string.Empty : this.Tiet.ToString()).GetHashCode() ^ 
					((this.Lop == null) ? string.Empty : this.Lop.ToString()).GetHashCode() ^ 
					((this.Phong == null) ? string.Empty : this.Phong.ToString()).GetHashCode() ^ 
					((this.ThoiDiemGhiNhan == null) ? string.Empty : this.ThoiDiemGhiNhan.ToString()).GetHashCode() ^ 
					((this.LyDo == null) ? string.Empty : this.LyDo.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.MaHinhThucViPham == null) ? string.Empty : this.MaHinhThucViPham.ToString()).GetHashCode() ^ 
					((this.DaBaoSuaTkb == null) ? string.Empty : this.DaBaoSuaTkb.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThanhTraGiangDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThanhTraGiangDayBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ThanhTraGiangDayBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ThanhTraGiangDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThanhTraGiangDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ThanhTraGiangDayBase Object1, ThanhTraGiangDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaHoSoThanhTra != Object2.MaHoSoThanhTra)
				equal = false;
			if ( Object1.MaHienThi != null && Object2.MaHienThi != null )
			{
				if (Object1.MaHienThi != Object2.MaHienThi)
					equal = false;
			}
			else if (Object1.MaHienThi == null ^ Object2.MaHienThi == null )
			{
				equal = false;
			}
			if ( Object1.MaQuanLy != null && Object2.MaQuanLy != null )
			{
				if (Object1.MaQuanLy != Object2.MaQuanLy)
					equal = false;
			}
			else if (Object1.MaQuanLy == null ^ Object2.MaQuanLy == null )
			{
				equal = false;
			}
			if ( Object1.Khoa != null && Object2.Khoa != null )
			{
				if (Object1.Khoa != Object2.Khoa)
					equal = false;
			}
			else if (Object1.Khoa == null ^ Object2.Khoa == null )
			{
				equal = false;
			}
			if ( Object1.LoaiGiangVien != null && Object2.LoaiGiangVien != null )
			{
				if (Object1.LoaiGiangVien != Object2.LoaiGiangVien)
					equal = false;
			}
			else if (Object1.LoaiGiangVien == null ^ Object2.LoaiGiangVien == null )
			{
				equal = false;
			}
			if ( Object1.TenHocPhan != null && Object2.TenHocPhan != null )
			{
				if (Object1.TenHocPhan != Object2.TenHocPhan)
					equal = false;
			}
			else if (Object1.TenHocPhan == null ^ Object2.TenHocPhan == null )
			{
				equal = false;
			}
			if ( Object1.TinhHinhGhiNhan != null && Object2.TinhHinhGhiNhan != null )
			{
				if (Object1.TinhHinhGhiNhan != Object2.TinhHinhGhiNhan)
					equal = false;
			}
			else if (Object1.TinhHinhGhiNhan == null ^ Object2.TinhHinhGhiNhan == null )
			{
				equal = false;
			}
			if ( Object1.Ngay != null && Object2.Ngay != null )
			{
				if (Object1.Ngay != Object2.Ngay)
					equal = false;
			}
			else if (Object1.Ngay == null ^ Object2.Ngay == null )
			{
				equal = false;
			}
			if ( Object1.Tiet != null && Object2.Tiet != null )
			{
				if (Object1.Tiet != Object2.Tiet)
					equal = false;
			}
			else if (Object1.Tiet == null ^ Object2.Tiet == null )
			{
				equal = false;
			}
			if ( Object1.Lop != null && Object2.Lop != null )
			{
				if (Object1.Lop != Object2.Lop)
					equal = false;
			}
			else if (Object1.Lop == null ^ Object2.Lop == null )
			{
				equal = false;
			}
			if ( Object1.Phong != null && Object2.Phong != null )
			{
				if (Object1.Phong != Object2.Phong)
					equal = false;
			}
			else if (Object1.Phong == null ^ Object2.Phong == null )
			{
				equal = false;
			}
			if ( Object1.ThoiDiemGhiNhan != null && Object2.ThoiDiemGhiNhan != null )
			{
				if (Object1.ThoiDiemGhiNhan != Object2.ThoiDiemGhiNhan)
					equal = false;
			}
			else if (Object1.ThoiDiemGhiNhan == null ^ Object2.ThoiDiemGhiNhan == null )
			{
				equal = false;
			}
			if ( Object1.LyDo != null && Object2.LyDo != null )
			{
				if (Object1.LyDo != Object2.LyDo)
					equal = false;
			}
			else if (Object1.LyDo == null ^ Object2.LyDo == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.MaHinhThucViPham != null && Object2.MaHinhThucViPham != null )
			{
				if (Object1.MaHinhThucViPham != Object2.MaHinhThucViPham)
					equal = false;
			}
			else if (Object1.MaHinhThucViPham == null ^ Object2.MaHinhThucViPham == null )
			{
				equal = false;
			}
			if ( Object1.DaBaoSuaTkb != null && Object2.DaBaoSuaTkb != null )
			{
				if (Object1.DaBaoSuaTkb != Object2.DaBaoSuaTkb)
					equal = false;
			}
			else if (Object1.DaBaoSuaTkb == null ^ Object2.DaBaoSuaTkb == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThanhTraGiangDayBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThanhTraGiangDayComparer GetComparer()
        {
            return new ThanhTraGiangDayComparer();
        }
        */

        // Comparer delegates back to ThanhTraGiangDay
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThanhTraGiangDay rhs, ThanhTraGiangDayColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThanhTraGiangDayColumn.MaHoSoThanhTra:
            		return this.MaHoSoThanhTra.CompareTo(rhs.MaHoSoThanhTra);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.MaHienThi:
            		return this.MaHienThi.CompareTo(rhs.MaHienThi);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.MaQuanLy:
            		return this.MaQuanLy.CompareTo(rhs.MaQuanLy);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.Khoa:
            		return this.Khoa.CompareTo(rhs.Khoa);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.LoaiGiangVien:
            		return this.LoaiGiangVien.CompareTo(rhs.LoaiGiangVien);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.TenHocPhan:
            		return this.TenHocPhan.CompareTo(rhs.TenHocPhan);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.TinhHinhGhiNhan:
            		return this.TinhHinhGhiNhan.CompareTo(rhs.TinhHinhGhiNhan);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.Ngay:
            		return this.Ngay.Value.CompareTo(rhs.Ngay.Value);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.Tiet:
            		return this.Tiet.CompareTo(rhs.Tiet);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.Lop:
            		return this.Lop.CompareTo(rhs.Lop);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.Phong:
            		return this.Phong.CompareTo(rhs.Phong);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.ThoiDiemGhiNhan:
            		return this.ThoiDiemGhiNhan.CompareTo(rhs.ThoiDiemGhiNhan);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.LyDo:
            		return this.LyDo.CompareTo(rhs.LyDo);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.MaHinhThucViPham:
            		return this.MaHinhThucViPham.Value.CompareTo(rhs.MaHinhThucViPham.Value);
            		
            		                 
            	
            	
            	case ThanhTraGiangDayColumn.DaBaoSuaTkb:
            		return this.DaBaoSuaTkb.Value.CompareTo(rhs.DaBaoSuaTkb.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThanhTraGiangDayKey> Members
		
		// member variable for the EntityId property
		private ThanhTraGiangDayKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThanhTraGiangDayKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThanhTraGiangDayKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThanhTraGiangDay")
					.Append("|").Append( this.MaHoSoThanhTra.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- MaHoSoThanhTra: {0}{16}- MaHienThi: {1}{16}- MaQuanLy: {2}{16}- Khoa: {3}{16}- LoaiGiangVien: {4}{16}- TenHocPhan: {5}{16}- TinhHinhGhiNhan: {6}{16}- Ngay: {7}{16}- Tiet: {8}{16}- Lop: {9}{16}- Phong: {10}{16}- ThoiDiemGhiNhan: {11}{16}- LyDo: {12}{16}- GhiChu: {13}{16}- MaHinhThucViPham: {14}{16}- DaBaoSuaTkb: {15}{16}{18}", 
				this.MaHoSoThanhTra,
				(this.MaHienThi == null) ? string.Empty : this.MaHienThi.ToString(),
				(this.MaQuanLy == null) ? string.Empty : this.MaQuanLy.ToString(),
				(this.Khoa == null) ? string.Empty : this.Khoa.ToString(),
				(this.LoaiGiangVien == null) ? string.Empty : this.LoaiGiangVien.ToString(),
				(this.TenHocPhan == null) ? string.Empty : this.TenHocPhan.ToString(),
				(this.TinhHinhGhiNhan == null) ? string.Empty : this.TinhHinhGhiNhan.ToString(),
				(this.Ngay == null) ? string.Empty : this.Ngay.ToString(),
				(this.Tiet == null) ? string.Empty : this.Tiet.ToString(),
				(this.Lop == null) ? string.Empty : this.Lop.ToString(),
				(this.Phong == null) ? string.Empty : this.Phong.ToString(),
				(this.ThoiDiemGhiNhan == null) ? string.Empty : this.ThoiDiemGhiNhan.ToString(),
				(this.LyDo == null) ? string.Empty : this.LyDo.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.MaHinhThucViPham == null) ? string.Empty : this.MaHinhThucViPham.ToString(),
				(this.DaBaoSuaTkb == null) ? string.Empty : this.DaBaoSuaTkb.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThanhTraGiangDay' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThanhTraGiangDayEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaHoSoThanhTra : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ThanhTraGiangDay"</remarks>
		public System.Int32 MaHoSoThanhTra;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaHienThi : 
		/// </summary>
		public System.String MaHienThi = null;
		
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		public System.String MaQuanLy = null;
		
		/// <summary>
		/// Khoa : 
		/// </summary>
		public System.String Khoa = null;
		
		/// <summary>
		/// LoaiGiangVien : 
		/// </summary>
		public System.String LoaiGiangVien = null;
		
		/// <summary>
		/// TenHocPhan : 
		/// </summary>
		public System.String TenHocPhan = null;
		
		/// <summary>
		/// TinhHinhGhiNhan : 
		/// </summary>
		public System.String TinhHinhGhiNhan = null;
		
		/// <summary>
		/// Ngay : 
		/// </summary>
		public System.DateTime? Ngay = null;
		
		/// <summary>
		/// Tiet : 
		/// </summary>
		public System.String Tiet = null;
		
		/// <summary>
		/// Lop : 
		/// </summary>
		public System.String Lop = null;
		
		/// <summary>
		/// Phong : 
		/// </summary>
		public System.String Phong = null;
		
		/// <summary>
		/// ThoiDiemGhiNhan : 
		/// </summary>
		public System.String ThoiDiemGhiNhan = null;
		
		/// <summary>
		/// LyDo : 
		/// </summary>
		public System.String LyDo = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// MaHinhThucViPham : 
		/// </summary>
		public System.Guid? MaHinhThucViPham = null;
		
		/// <summary>
		/// DaBaoSuaTkb : 
		/// </summary>
		public System.Boolean? DaBaoSuaTkb = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThanhTraGiangDayEntityData _tmp = new ThanhTraGiangDayEntityData();
						
			_tmp.MaHoSoThanhTra = this.MaHoSoThanhTra;
			
			_tmp.MaHienThi = this.MaHienThi;
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.Khoa = this.Khoa;
			_tmp.LoaiGiangVien = this.LoaiGiangVien;
			_tmp.TenHocPhan = this.TenHocPhan;
			_tmp.TinhHinhGhiNhan = this.TinhHinhGhiNhan;
			_tmp.Ngay = this.Ngay;
			_tmp.Tiet = this.Tiet;
			_tmp.Lop = this.Lop;
			_tmp.Phong = this.Phong;
			_tmp.ThoiDiemGhiNhan = this.ThoiDiemGhiNhan;
			_tmp.LyDo = this.LyDo;
			_tmp.GhiChu = this.GhiChu;
			_tmp.MaHinhThucViPham = this.MaHinhThucViPham;
			_tmp.DaBaoSuaTkb = this.DaBaoSuaTkb;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ThanhTraGiangDayEntityData _tmp = new ThanhTraGiangDayEntityData();
						
			_tmp.MaHoSoThanhTra = this.MaHoSoThanhTra;
			
			_tmp.MaHienThi = this.MaHienThi;
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.Khoa = this.Khoa;
			_tmp.LoaiGiangVien = this.LoaiGiangVien;
			_tmp.TenHocPhan = this.TenHocPhan;
			_tmp.TinhHinhGhiNhan = this.TinhHinhGhiNhan;
			_tmp.Ngay = this.Ngay;
			_tmp.Tiet = this.Tiet;
			_tmp.Lop = this.Lop;
			_tmp.Phong = this.Phong;
			_tmp.ThoiDiemGhiNhan = this.ThoiDiemGhiNhan;
			_tmp.LyDo = this.LyDo;
			_tmp.GhiChu = this.GhiChu;
			_tmp.MaHinhThucViPham = this.MaHinhThucViPham;
			_tmp.DaBaoSuaTkb = this.DaBaoSuaTkb;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhTraGiangDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ThanhTraGiangDayColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhTraGiangDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ThanhTraGiangDayColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhTraGiangDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ThanhTraGiangDayColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ThanhTraGiangDayEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThanhTraGiangDayEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThanhTraGiangDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ThanhTraGiangDayColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThanhTraGiangDayEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThanhTraGiangDayEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThanhTraGiangDayEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThanhTraGiangDay"/> object.
	/// </remarks>
	public class ThanhTraGiangDayEventArgs : System.EventArgs
	{
		private ThanhTraGiangDayColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThanhTraGiangDayEventArgs class.
		///</summary>
		public ThanhTraGiangDayEventArgs(ThanhTraGiangDayColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThanhTraGiangDayEventArgs class.
		///</summary>
		public ThanhTraGiangDayEventArgs(ThanhTraGiangDayColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThanhTraGiangDayColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThanhTraGiangDayColumn" />
		public ThanhTraGiangDayColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThanhTraGiangDay related events.
	///</summary>
	public delegate void ThanhTraGiangDayEventHandler(object sender, ThanhTraGiangDayEventArgs e);
	
	#region ThanhTraGiangDayComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThanhTraGiangDayComparer : System.Collections.Generic.IComparer<ThanhTraGiangDay>
	{
		ThanhTraGiangDayColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThanhTraGiangDayComparer"/> class.
        /// </summary>
		public ThanhTraGiangDayComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThanhTraGiangDayComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThanhTraGiangDayComparer(ThanhTraGiangDayColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ThanhTraGiangDay"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ThanhTraGiangDay"/> to compare.</param>
        /// <param name="b">The second <c>ThanhTraGiangDay</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThanhTraGiangDay a, ThanhTraGiangDay b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThanhTraGiangDay entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThanhTraGiangDay a, ThanhTraGiangDay b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThanhTraGiangDayColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThanhTraGiangDayKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThanhTraGiangDay"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThanhTraGiangDayKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayKey class.
		/// </summary>
		public ThanhTraGiangDayKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayKey class.
		/// </summary>
		public ThanhTraGiangDayKey(ThanhTraGiangDayBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaHoSoThanhTra = entity.MaHoSoThanhTra;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayKey class.
		/// </summary>
		public ThanhTraGiangDayKey(System.Int32 _maHoSoThanhTra)
		{
			#region Init Properties

			this.MaHoSoThanhTra = _maHoSoThanhTra;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThanhTraGiangDayBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThanhTraGiangDayBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaHoSoThanhTra property
		private System.Int32 _maHoSoThanhTra;
		
		/// <summary>
		/// Gets or sets the MaHoSoThanhTra property.
		/// </summary>
		public System.Int32 MaHoSoThanhTra
		{
			get { return _maHoSoThanhTra; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaHoSoThanhTra = value;
				
				_maHoSoThanhTra = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaHoSoThanhTra = ( values["MaHoSoThanhTra"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaHoSoThanhTra"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaHoSoThanhTra", MaHoSoThanhTra);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaHoSoThanhTra: {0}{1}",
								MaHoSoThanhTra,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThanhTraGiangDayColumn Enum
	
	/// <summary>
	/// Enumerate the ThanhTraGiangDay columns.
	/// </summary>
	[Serializable]
	public enum ThanhTraGiangDayColumn : int
	{
		/// <summary>
		/// MaHoSoThanhTra : 
		/// </summary>
		[EnumTextValue("Ma Ho So Thanh Tra")]
		[ColumnEnum("MaHoSoThanhTra", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaHoSoThanhTra = 1,
		/// <summary>
		/// MaHienThi : 
		/// </summary>
		[EnumTextValue("Ma Hien Thi")]
		[ColumnEnum("MaHienThi", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MaHienThi = 2,
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("Ma Quan Ly")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.String, false, false, true, 152)]
		MaQuanLy = 3,
		/// <summary>
		/// Khoa : 
		/// </summary>
		[EnumTextValue("Khoa")]
		[ColumnEnum("Khoa", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Khoa = 4,
		/// <summary>
		/// LoaiGiangVien : 
		/// </summary>
		[EnumTextValue("Loai Giang Vien")]
		[ColumnEnum("LoaiGiangVien", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		LoaiGiangVien = 5,
		/// <summary>
		/// TenHocPhan : 
		/// </summary>
		[EnumTextValue("Ten Hoc Phan")]
		[ColumnEnum("TenHocPhan", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TenHocPhan = 6,
		/// <summary>
		/// TinhHinhGhiNhan : 
		/// </summary>
		[EnumTextValue("Tinh Hinh Ghi Nhan")]
		[ColumnEnum("TinhHinhGhiNhan", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		TinhHinhGhiNhan = 7,
		/// <summary>
		/// Ngay : 
		/// </summary>
		[EnumTextValue("Ngay")]
		[ColumnEnum("Ngay", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Ngay = 8,
		/// <summary>
		/// Tiet : 
		/// </summary>
		[EnumTextValue("Tiet")]
		[ColumnEnum("Tiet", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		Tiet = 9,
		/// <summary>
		/// Lop : 
		/// </summary>
		[EnumTextValue("Lop")]
		[ColumnEnum("Lop", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Lop = 10,
		/// <summary>
		/// Phong : 
		/// </summary>
		[EnumTextValue("Phong")]
		[ColumnEnum("Phong", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Phong = 11,
		/// <summary>
		/// ThoiDiemGhiNhan : 
		/// </summary>
		[EnumTextValue("Thoi Diem Ghi Nhan")]
		[ColumnEnum("ThoiDiemGhiNhan", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		ThoiDiemGhiNhan = 12,
		/// <summary>
		/// LyDo : 
		/// </summary>
		[EnumTextValue("Ly Do")]
		[ColumnEnum("LyDo", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		LyDo = 13,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		GhiChu = 14,
		/// <summary>
		/// MaHinhThucViPham : 
		/// </summary>
		[EnumTextValue("Ma Hinh Thuc Vi Pham")]
		[ColumnEnum("MaHinhThucViPham", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		MaHinhThucViPham = 15,
		/// <summary>
		/// DaBaoSuaTkb : 
		/// </summary>
		[EnumTextValue("Da Bao Sua Tkb")]
		[ColumnEnum("DaBaoSuaTkb", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DaBaoSuaTkb = 16
	}//End enum

	#endregion ThanhTraGiangDayColumn Enum

} // end namespace
