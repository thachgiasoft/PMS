
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file LopHocPhanChuyenNganh.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using PMS.Entities.Validation;
#endregion

namespace PMS.Entities
{
	///<summary>
	/// An object representation of the 'LopHocPhanChuyenNganh' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class LopHocPhanChuyenNganhBase : EntityBase, ILopHocPhanChuyenNganh, IEntityId<LopHocPhanChuyenNganhKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private LopHocPhanChuyenNganhEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private LopHocPhanChuyenNganhEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private LopHocPhanChuyenNganhEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<LopHocPhanChuyenNganh> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event LopHocPhanChuyenNganhEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event LopHocPhanChuyenNganhEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="LopHocPhanChuyenNganhBase"/> instance.
		///</summary>
		public LopHocPhanChuyenNganhBase()
		{
			this.entityData = new LopHocPhanChuyenNganhEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="LopHocPhanChuyenNganhBase"/> instance.
		///</summary>
		///<param name="_maLopHocPhan"></param>
		///<param name="_trangThai"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		public LopHocPhanChuyenNganhBase(System.String _maLopHocPhan, System.Boolean? _trangThai, 
			System.String _namHoc, System.String _hocKy)
		{
			this.entityData = new LopHocPhanChuyenNganhEntityData();
			this.backupData = null;

			this.MaLopHocPhan = _maLopHocPhan;
			this.TrangThai = _trangThai;
			this.NamHoc = _namHoc;
			this.HocKy = _hocKy;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="LopHocPhanChuyenNganh"/> instance.
		///</summary>
		///<param name="_maLopHocPhan"></param>
		///<param name="_trangThai"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		public static LopHocPhanChuyenNganh CreateLopHocPhanChuyenNganh(System.String _maLopHocPhan, System.Boolean? _trangThai, 
			System.String _namHoc, System.String _hocKy)
		{
			LopHocPhanChuyenNganh newLopHocPhanChuyenNganh = new LopHocPhanChuyenNganh();
			newLopHocPhanChuyenNganh.MaLopHocPhan = _maLopHocPhan;
			newLopHocPhanChuyenNganh.TrangThai = _trangThai;
			newLopHocPhanChuyenNganh.NamHoc = _namHoc;
			newLopHocPhanChuyenNganh.HocKy = _hocKy;
			return newLopHocPhanChuyenNganh;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaLopHocPhan property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String MaLopHocPhan
		{
			get
			{
				return this.entityData.MaLopHocPhan; 
			}
			
			set
			{
				if (this.entityData.MaLopHocPhan == value)
					return;
				
                OnPropertyChanging("MaLopHocPhan");                    
				OnColumnChanging(LopHocPhanChuyenNganhColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				this.entityData.MaLopHocPhan = value;
				this.EntityId.MaLopHocPhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LopHocPhanChuyenNganhColumn.MaLopHocPhan, this.entityData.MaLopHocPhan);
				OnPropertyChanged("MaLopHocPhan");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaLopHocPhan property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaLopHocPhan property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMaLopHocPhan
		{
			get { return this.entityData.OriginalMaLopHocPhan; }
			set { this.entityData.OriginalMaLopHocPhan = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the TrangThai property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TrangThai
		{
			get
			{
				return this.entityData.TrangThai; 
			}
			
			set
			{
				if (this.entityData.TrangThai == value)
					return;
				
                OnPropertyChanging("TrangThai");                    
				OnColumnChanging(LopHocPhanChuyenNganhColumn.TrangThai, this.entityData.TrangThai);
				this.entityData.TrangThai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LopHocPhanChuyenNganhColumn.TrangThai, this.entityData.TrangThai);
				OnPropertyChanged("TrangThai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NamHoc property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String NamHoc
		{
			get
			{
				return this.entityData.NamHoc; 
			}
			
			set
			{
				if (this.entityData.NamHoc == value)
					return;
				
                OnPropertyChanging("NamHoc");                    
				OnColumnChanging(LopHocPhanChuyenNganhColumn.NamHoc, this.entityData.NamHoc);
				this.entityData.NamHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LopHocPhanChuyenNganhColumn.NamHoc, this.entityData.NamHoc);
				OnPropertyChanged("NamHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HocKy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String HocKy
		{
			get
			{
				return this.entityData.HocKy; 
			}
			
			set
			{
				if (this.entityData.HocKy == value)
					return;
				
                OnPropertyChanging("HocKy");                    
				OnColumnChanging(LopHocPhanChuyenNganhColumn.HocKy, this.entityData.HocKy);
				this.entityData.HocKy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LopHocPhanChuyenNganhColumn.HocKy, this.entityData.HocKy);
				OnPropertyChanged("HocKy");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaLopHocPhan", "Ma Lop Hoc Phan", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NamHoc", "Nam Hoc", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HocKy", "Hoc Ky", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "LopHocPhanChuyenNganh"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaLopHocPhan", "TrangThai", "NamHoc", "HocKy"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as LopHocPhanChuyenNganhEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (LopHocPhanChuyenNganh) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<LopHocPhanChuyenNganh>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as LopHocPhanChuyenNganh);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed LopHocPhanChuyenNganh Entity 
		///</summary>
		protected virtual LopHocPhanChuyenNganh Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			LopHocPhanChuyenNganh copy = new LopHocPhanChuyenNganh();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaLopHocPhan = this.MaLopHocPhan;
					copy.OriginalMaLopHocPhan = this.OriginalMaLopHocPhan;
				copy.TrangThai = this.TrangThai;
				copy.NamHoc = this.NamHoc;
				copy.HocKy = this.HocKy;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed LopHocPhanChuyenNganh Entity 
		///</summary>
		public virtual LopHocPhanChuyenNganh Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed LopHocPhanChuyenNganh Entity which is a deep copy of the current entity.
		///</summary>
		public virtual LopHocPhanChuyenNganh DeepCopy()
		{
			return EntityHelper.Clone<LopHocPhanChuyenNganh>(this as LopHocPhanChuyenNganh);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as LopHocPhanChuyenNganhEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new LopHocPhanChuyenNganhEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as LopHocPhanChuyenNganhEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(LopHocPhanChuyenNganhColumn column)
		{
			switch(column)
			{
					case LopHocPhanChuyenNganhColumn.MaLopHocPhan:
					return entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
					case LopHocPhanChuyenNganhColumn.TrangThai:
					return entityData.TrangThai != _originalData.TrangThai;
					case LopHocPhanChuyenNganhColumn.NamHoc:
					return entityData.NamHoc != _originalData.NamHoc;
					case LopHocPhanChuyenNganhColumn.HocKy:
					return entityData.HocKy != _originalData.HocKy;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< LopHocPhanChuyenNganhColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaLopHocPhan != _originalData.MaLopHocPhan;
			result = result || entityData.TrangThai != _originalData.TrangThai;
			result = result || entityData.NamHoc != _originalData.NamHoc;
			result = result || entityData.HocKy != _originalData.HocKy;
			return result;
		}	
		
		///<summary>
		///  Returns a LopHocPhanChuyenNganh Entity with the original data.
		///</summary>
		public LopHocPhanChuyenNganh GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateLopHocPhanChuyenNganh(
				_originalData.MaLopHocPhan,
				_originalData.TrangThai,
				_originalData.NamHoc,
				_originalData.HocKy
				);
				
			return (LopHocPhanChuyenNganh)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="LopHocPhanChuyenNganhBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is LopHocPhanChuyenNganhBase)
				return ValueEquals(this, (LopHocPhanChuyenNganhBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="LopHocPhanChuyenNganhBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaLopHocPhan.GetHashCode() ^ 
					((this.TrangThai == null) ? string.Empty : this.TrangThai.ToString()).GetHashCode() ^ 
					((this.NamHoc == null) ? string.Empty : this.NamHoc.ToString()).GetHashCode() ^ 
					((this.HocKy == null) ? string.Empty : this.HocKy.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="LopHocPhanChuyenNganhBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(LopHocPhanChuyenNganhBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="LopHocPhanChuyenNganhBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="LopHocPhanChuyenNganhBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="LopHocPhanChuyenNganhBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(LopHocPhanChuyenNganhBase Object1, LopHocPhanChuyenNganhBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaLopHocPhan != Object2.MaLopHocPhan)
				equal = false;
			if ( Object1.TrangThai != null && Object2.TrangThai != null )
			{
				if (Object1.TrangThai != Object2.TrangThai)
					equal = false;
			}
			else if (Object1.TrangThai == null ^ Object2.TrangThai == null )
			{
				equal = false;
			}
			if ( Object1.NamHoc != null && Object2.NamHoc != null )
			{
				if (Object1.NamHoc != Object2.NamHoc)
					equal = false;
			}
			else if (Object1.NamHoc == null ^ Object2.NamHoc == null )
			{
				equal = false;
			}
			if ( Object1.HocKy != null && Object2.HocKy != null )
			{
				if (Object1.HocKy != Object2.HocKy)
					equal = false;
			}
			else if (Object1.HocKy == null ^ Object2.HocKy == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((LopHocPhanChuyenNganhBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static LopHocPhanChuyenNganhComparer GetComparer()
        {
            return new LopHocPhanChuyenNganhComparer();
        }
        */

        // Comparer delegates back to LopHocPhanChuyenNganh
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(LopHocPhanChuyenNganh rhs, LopHocPhanChuyenNganhColumn which)
        {
            switch (which)
            {
            	
            	
            	case LopHocPhanChuyenNganhColumn.MaLopHocPhan:
            		return this.MaLopHocPhan.CompareTo(rhs.MaLopHocPhan);
            		
            		                 
            	
            	
            	case LopHocPhanChuyenNganhColumn.TrangThai:
            		return this.TrangThai.Value.CompareTo(rhs.TrangThai.Value);
            		
            		                 
            	
            	
            	case LopHocPhanChuyenNganhColumn.NamHoc:
            		return this.NamHoc.CompareTo(rhs.NamHoc);
            		
            		                 
            	
            	
            	case LopHocPhanChuyenNganhColumn.HocKy:
            		return this.HocKy.CompareTo(rhs.HocKy);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<LopHocPhanChuyenNganhKey> Members
		
		// member variable for the EntityId property
		private LopHocPhanChuyenNganhKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual LopHocPhanChuyenNganhKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new LopHocPhanChuyenNganhKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("LopHocPhanChuyenNganh")
					.Append("|").Append( this.MaLopHocPhan.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{5}{4}- MaLopHocPhan: {0}{4}- TrangThai: {1}{4}- NamHoc: {2}{4}- HocKy: {3}{4}{6}", 
				this.MaLopHocPhan,
				(this.TrangThai == null) ? string.Empty : this.TrangThai.ToString(),
				(this.NamHoc == null) ? string.Empty : this.NamHoc.ToString(),
				(this.HocKy == null) ? string.Empty : this.HocKy.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'LopHocPhanChuyenNganh' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class LopHocPhanChuyenNganhEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaLopHocPhan : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "LopHocPhanChuyenNganh"</remarks>
		public System.String MaLopHocPhan;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalMaLopHocPhan;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// TrangThai : 
		/// </summary>
		public System.Boolean? TrangThai = null;
		
		/// <summary>
		/// NamHoc : 
		/// </summary>
		public System.String NamHoc = null;
		
		/// <summary>
		/// HocKy : 
		/// </summary>
		public System.String HocKy = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			LopHocPhanChuyenNganhEntityData _tmp = new LopHocPhanChuyenNganhEntityData();
						
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.OriginalMaLopHocPhan = this.OriginalMaLopHocPhan;
			
			_tmp.TrangThai = this.TrangThai;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			LopHocPhanChuyenNganhEntityData _tmp = new LopHocPhanChuyenNganhEntityData();
						
			_tmp.MaLopHocPhan = this.MaLopHocPhan;
			_tmp.OriginalMaLopHocPhan = this.OriginalMaLopHocPhan;
			
			_tmp.TrangThai = this.TrangThai;
			_tmp.NamHoc = this.NamHoc;
			_tmp.HocKy = this.HocKy;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LopHocPhanChuyenNganhColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(LopHocPhanChuyenNganhColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LopHocPhanChuyenNganhColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(LopHocPhanChuyenNganhColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LopHocPhanChuyenNganhColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(LopHocPhanChuyenNganhColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				LopHocPhanChuyenNganhEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new LopHocPhanChuyenNganhEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LopHocPhanChuyenNganhColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(LopHocPhanChuyenNganhColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				LopHocPhanChuyenNganhEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new LopHocPhanChuyenNganhEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region LopHocPhanChuyenNganhEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="LopHocPhanChuyenNganh"/> object.
	/// </remarks>
	public class LopHocPhanChuyenNganhEventArgs : System.EventArgs
	{
		private LopHocPhanChuyenNganhColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the LopHocPhanChuyenNganhEventArgs class.
		///</summary>
		public LopHocPhanChuyenNganhEventArgs(LopHocPhanChuyenNganhColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the LopHocPhanChuyenNganhEventArgs class.
		///</summary>
		public LopHocPhanChuyenNganhEventArgs(LopHocPhanChuyenNganhColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The LopHocPhanChuyenNganhColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="LopHocPhanChuyenNganhColumn" />
		public LopHocPhanChuyenNganhColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all LopHocPhanChuyenNganh related events.
	///</summary>
	public delegate void LopHocPhanChuyenNganhEventHandler(object sender, LopHocPhanChuyenNganhEventArgs e);
	
	#region LopHocPhanChuyenNganhComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class LopHocPhanChuyenNganhComparer : System.Collections.Generic.IComparer<LopHocPhanChuyenNganh>
	{
		LopHocPhanChuyenNganhColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:LopHocPhanChuyenNganhComparer"/> class.
        /// </summary>
		public LopHocPhanChuyenNganhComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:LopHocPhanChuyenNganhComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public LopHocPhanChuyenNganhComparer(LopHocPhanChuyenNganhColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="LopHocPhanChuyenNganh"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="LopHocPhanChuyenNganh"/> to compare.</param>
        /// <param name="b">The second <c>LopHocPhanChuyenNganh</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(LopHocPhanChuyenNganh a, LopHocPhanChuyenNganh b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(LopHocPhanChuyenNganh entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(LopHocPhanChuyenNganh a, LopHocPhanChuyenNganh b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public LopHocPhanChuyenNganhColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region LopHocPhanChuyenNganhKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="LopHocPhanChuyenNganh"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class LopHocPhanChuyenNganhKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhKey class.
		/// </summary>
		public LopHocPhanChuyenNganhKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhKey class.
		/// </summary>
		public LopHocPhanChuyenNganhKey(LopHocPhanChuyenNganhBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaLopHocPhan = entity.MaLopHocPhan;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhKey class.
		/// </summary>
		public LopHocPhanChuyenNganhKey(System.String _maLopHocPhan)
		{
			#region Init Properties

			this.MaLopHocPhan = _maLopHocPhan;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private LopHocPhanChuyenNganhBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public LopHocPhanChuyenNganhBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaLopHocPhan property
		private System.String _maLopHocPhan;
		
		/// <summary>
		/// Gets or sets the MaLopHocPhan property.
		/// </summary>
		public System.String MaLopHocPhan
		{
			get { return _maLopHocPhan; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaLopHocPhan = value;
				
				_maLopHocPhan = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaLopHocPhan = ( values["MaLopHocPhan"] != null ) ? (System.String) EntityUtil.ChangeType(values["MaLopHocPhan"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaLopHocPhan", MaLopHocPhan);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaLopHocPhan: {0}{1}",
								MaLopHocPhan,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region LopHocPhanChuyenNganhColumn Enum
	
	/// <summary>
	/// Enumerate the LopHocPhanChuyenNganh columns.
	/// </summary>
	[Serializable]
	public enum LopHocPhanChuyenNganhColumn : int
	{
		/// <summary>
		/// MaLopHocPhan : 
		/// </summary>
		[EnumTextValue("Ma Lop Hoc Phan")]
		[ColumnEnum("MaLopHocPhan", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 50)]
		MaLopHocPhan = 1,
		/// <summary>
		/// TrangThai : 
		/// </summary>
		[EnumTextValue("Trang Thai")]
		[ColumnEnum("TrangThai", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TrangThai = 2,
		/// <summary>
		/// NamHoc : 
		/// </summary>
		[EnumTextValue("Nam Hoc")]
		[ColumnEnum("NamHoc", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		NamHoc = 3,
		/// <summary>
		/// HocKy : 
		/// </summary>
		[EnumTextValue("Hoc Ky")]
		[ColumnEnum("HocKy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		HocKy = 4
	}//End enum

	#endregion LopHocPhanChuyenNganhColumn Enum

} // end namespace
