/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlDonGiaProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="DonGia"/> entity.
	///</summary>
	public abstract partial class SqlDonGiaProviderBase : DonGiaProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlDonGiaProviderBase"/> instance.
		/// </summary>
		public SqlDonGiaProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlDonGiaProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlDonGiaProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(DonGia)
					,_id);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
		public override TList<DonGia> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<DonGia>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGiaClc", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoQuyDoiChatLuong", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGiaTrongChuan", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGiaNgoaiChuan", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaNhomMon", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NhomMonHoc", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maquanly ") || clause.Trim().StartsWith("maquanly="))
				{
					database.SetParameterValue(commandWrapper, "@MaQuanLy", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaigiangvien ") || clause.Trim().StartsWith("maloaigiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiGiangVien", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocham ") || clause.Trim().StartsWith("mahocham="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocHam", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocvi ") || clause.Trim().StartsWith("mahocvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongia ") || clause.Trim().StartsWith("dongia="))
				{
					database.SetParameterValue(commandWrapper, "@DonGia", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycapnhat ") || clause.Trim().StartsWith("ngaycapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NgayCapNhat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nguoicapnhat ") || clause.Trim().StartsWith("nguoicapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NguoiCapNhat", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongiaclc ") || clause.Trim().StartsWith("dongiaclc="))
				{
					database.SetParameterValue(commandWrapper, "@DonGiaClc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesoquydoichatluong ") || clause.Trim().StartsWith("hesoquydoichatluong="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoQuyDoiChatLuong", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongiatrongchuan ") || clause.Trim().StartsWith("dongiatrongchuan="))
				{
					database.SetParameterValue(commandWrapper, "@DonGiaTrongChuan", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongiangoaichuan ") || clause.Trim().StartsWith("dongiangoaichuan="))
				{
					database.SetParameterValue(commandWrapper, "@DonGiaNgoaiChuan", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahinhthucdaotao ") || clause.Trim().StartsWith("mahinhthucdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@MaHinhThucDaoTao", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bacdaotao ") || clause.Trim().StartsWith("bacdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@BacDaoTao", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngonngugiangday ") || clause.Trim().StartsWith("ngonngugiangday="))
				{
					database.SetParameterValue(commandWrapper, "@NgonNguGiangDay", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namhoc ") || clause.Trim().StartsWith("namhoc="))
				{
					database.SetParameterValue(commandWrapper, "@NamHoc", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hocky ") || clause.Trim().StartsWith("hocky="))
				{
					database.SetParameterValue(commandWrapper, "@HocKy", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("manhommon ") || clause.Trim().StartsWith("manhommon="))
				{
					database.SetParameterValue(commandWrapper, "@MaNhomMon", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nhommonhoc ") || clause.Trim().StartsWith("nhommonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@NhomMonHoc", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<DonGia> rows = new TList<DonGia>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
		public override TList<DonGia> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_Find_Dynamic", typeof(DonGiaColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<DonGia> rows = new TList<DonGia>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<DonGia> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<DonGia> rows = new TList<DonGia>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
		public override TList<DonGia> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<DonGia> rows = new TList<DonGia>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByMaNhomMon
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_DG_NMH key.
		///		FK_DG_NMH Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maNhomMon"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<DonGia> GetByMaNhomMon(TransactionManager transactionManager, System.Int32? _maNhomMon, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_GetByMaNhomMon", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaNhomMon", DbType.Int32, _maNhomMon);
			
			IDataReader reader = null;
			TList<DonGia> rows = new TList<DonGia>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaNhomMon", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaNhomMon", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaHocHam
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_DonGia_HocHam key.
		///		FK_DonGia_HocHam Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maHocHam"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<DonGia> GetByMaHocHam(TransactionManager transactionManager, System.Int32? _maHocHam, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_GetByMaHocHam", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, _maHocHam);
			
			IDataReader reader = null;
			TList<DonGia> rows = new TList<DonGia>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaHocHam", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaHocHam", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaHocVi
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_DonGia_HocVi key.
		///		FK_DonGia_HocVi Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maHocVi"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<DonGia> GetByMaHocVi(TransactionManager transactionManager, System.Int32? _maHocVi, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_GetByMaHocVi", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, _maHocVi);
			
			IDataReader reader = null;
			TList<DonGia> rows = new TList<DonGia>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaHocVi", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaHocVi", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaLoaiGiangVien
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_DonGia_LoaiGiangVien key.
		///		FK_DonGia_LoaiGiangVien Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maLoaiGiangVien"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<DonGia> GetByMaLoaiGiangVien(TransactionManager transactionManager, System.Int32? _maLoaiGiangVien, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_GetByMaLoaiGiangVien", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, _maLoaiGiangVien);
			
			IDataReader reader = null;
			TList<DonGia> rows = new TList<DonGia>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaLoaiGiangVien", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaLoaiGiangVien", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByNgonNguGiangDay
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_DonGia_NgonNguGiangDay key.
		///		FK_DonGia_NgonNguGiangDay Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_ngonNguGiangDay"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.DonGia objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<DonGia> GetByNgonNguGiangDay(TransactionManager transactionManager, System.String _ngonNguGiangDay, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_GetByNgonNguGiangDay", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, _ngonNguGiangDay);
			
			IDataReader reader = null;
			TList<DonGia> rows = new TList<DonGia>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNgonNguGiangDay", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNgonNguGiangDay", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_DonGia index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.DonGia"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.DonGia GetById(TransactionManager transactionManager, System.Int32 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			IDataReader reader = null;
			TList<DonGia> tmp = new TList<DonGia>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.DonGia object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.DonGia> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "DonGia";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("Id", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MaQuanLy", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("MaLoaiGiangVien", typeof(System.Int32));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("MaHocHam", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("MaHocVi", typeof(System.Int32));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("DonGia", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("NgayCapNhat", typeof(System.DateTime));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("NguoiCapNhat", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("DonGiaClc", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("HeSoQuyDoiChatLuong", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("DonGiaTrongChuan", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("DonGiaNgoaiChuan", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("MaHinhThucDaoTao", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("BacDaoTao", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("NgonNguGiangDay", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("NamHoc", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("HocKy", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("MaNhomMon", typeof(System.Int32));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("NhomMonHoc", typeof(System.String));
			col18.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("Id", "Id");
			bulkCopy.ColumnMappings.Add("MaQuanLy", "MaQuanLy");
			bulkCopy.ColumnMappings.Add("MaLoaiGiangVien", "MaLoaiGiangVien");
			bulkCopy.ColumnMappings.Add("MaHocHam", "MaHocHam");
			bulkCopy.ColumnMappings.Add("MaHocVi", "MaHocVi");
			bulkCopy.ColumnMappings.Add("DonGia", "DonGia");
			bulkCopy.ColumnMappings.Add("NgayCapNhat", "NgayCapNhat");
			bulkCopy.ColumnMappings.Add("NguoiCapNhat", "NguoiCapNhat");
			bulkCopy.ColumnMappings.Add("DonGiaClc", "DonGiaClc");
			bulkCopy.ColumnMappings.Add("HeSoQuyDoiChatLuong", "HeSoQuyDoiChatLuong");
			bulkCopy.ColumnMappings.Add("DonGiaTrongChuan", "DonGiaTrongChuan");
			bulkCopy.ColumnMappings.Add("DonGiaNgoaiChuan", "DonGiaNgoaiChuan");
			bulkCopy.ColumnMappings.Add("MaHinhThucDaoTao", "MaHinhThucDaoTao");
			bulkCopy.ColumnMappings.Add("BacDaoTao", "BacDaoTao");
			bulkCopy.ColumnMappings.Add("NgonNguGiangDay", "NgonNguGiangDay");
			bulkCopy.ColumnMappings.Add("NamHoc", "NamHoc");
			bulkCopy.ColumnMappings.Add("HocKy", "HocKy");
			bulkCopy.ColumnMappings.Add("MaNhomMon", "MaNhomMon");
			bulkCopy.ColumnMappings.Add("NhomMonHoc", "NhomMonHoc");
			
			foreach(PMS.Entities.DonGia entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["Id"] = entity.Id;
							
				
					row["MaQuanLy"] = entity.MaQuanLy;
							
				
					row["MaLoaiGiangVien"] = entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value;
							
				
					row["MaHocHam"] = entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value;
							
				
					row["MaHocVi"] = entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value;
							
				
					row["DonGia"] = entity.DonGia.HasValue ? (object) entity.DonGia  : System.DBNull.Value;
							
				
					row["NgayCapNhat"] = entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat  : System.DBNull.Value;
							
				
					row["NguoiCapNhat"] = entity.NguoiCapNhat;
							
				
					row["DonGiaClc"] = entity.DonGiaClc.HasValue ? (object) entity.DonGiaClc  : System.DBNull.Value;
							
				
					row["HeSoQuyDoiChatLuong"] = entity.HeSoQuyDoiChatLuong.HasValue ? (object) entity.HeSoQuyDoiChatLuong  : System.DBNull.Value;
							
				
					row["DonGiaTrongChuan"] = entity.DonGiaTrongChuan.HasValue ? (object) entity.DonGiaTrongChuan  : System.DBNull.Value;
							
				
					row["DonGiaNgoaiChuan"] = entity.DonGiaNgoaiChuan.HasValue ? (object) entity.DonGiaNgoaiChuan  : System.DBNull.Value;
							
				
					row["MaHinhThucDaoTao"] = entity.MaHinhThucDaoTao;
							
				
					row["BacDaoTao"] = entity.BacDaoTao;
							
				
					row["NgonNguGiangDay"] = entity.NgonNguGiangDay;
							
				
					row["NamHoc"] = entity.NamHoc;
							
				
					row["HocKy"] = entity.HocKy;
							
				
					row["MaNhomMon"] = entity.MaNhomMon.HasValue ? (object) entity.MaNhomMon  : System.DBNull.Value;
							
				
					row["NhomMonHoc"] = entity.NhomMonHoc;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.DonGia entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.DonGia object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.DonGia object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.DonGia object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.DonGia entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@Id", DbType.Int32, 4);
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, (entity.DonGia.HasValue ? (object) entity.DonGia  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, (entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.String, entity.NguoiCapNhat );
			database.AddInParameter(commandWrapper, "@DonGiaClc", DbType.Decimal, (entity.DonGiaClc.HasValue ? (object) entity.DonGiaClc  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoQuyDoiChatLuong", DbType.Decimal, (entity.HeSoQuyDoiChatLuong.HasValue ? (object) entity.HeSoQuyDoiChatLuong  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DonGiaTrongChuan", DbType.Decimal, (entity.DonGiaTrongChuan.HasValue ? (object) entity.DonGiaTrongChuan  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DonGiaNgoaiChuan", DbType.Decimal, (entity.DonGiaNgoaiChuan.HasValue ? (object) entity.DonGiaNgoaiChuan  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, entity.MaHinhThucDaoTao );
            database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString, entity.BacDaoTao );
            database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, entity.NgonNguGiangDay );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
			database.AddInParameter(commandWrapper, "@MaNhomMon", DbType.Int32, (entity.MaNhomMon.HasValue ? (object) entity.MaNhomMon  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NhomMonHoc", DbType.AnsiString, entity.NhomMonHoc );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _id = database.GetParameterValue(commandWrapper, "@Id");
			entity.Id = (System.Int32)_id;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.DonGia object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.DonGia object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.DonGia entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_DonGia_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@Id", DbType.Int32, entity.Id );
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, (entity.DonGia.HasValue ? (object) entity.DonGia : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, (entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.String, entity.NguoiCapNhat );
			database.AddInParameter(commandWrapper, "@DonGiaClc", DbType.Decimal, (entity.DonGiaClc.HasValue ? (object) entity.DonGiaClc : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoQuyDoiChatLuong", DbType.Decimal, (entity.HeSoQuyDoiChatLuong.HasValue ? (object) entity.HeSoQuyDoiChatLuong : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DonGiaTrongChuan", DbType.Decimal, (entity.DonGiaTrongChuan.HasValue ? (object) entity.DonGiaTrongChuan : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DonGiaNgoaiChuan", DbType.Decimal, (entity.DonGiaNgoaiChuan.HasValue ? (object) entity.DonGiaNgoaiChuan : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, entity.MaHinhThucDaoTao );
            database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString, entity.BacDaoTao );
            database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, entity.NgonNguGiangDay );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
			database.AddInParameter(commandWrapper, "@MaNhomMon", DbType.Int32, (entity.MaNhomMon.HasValue ? (object) entity.MaNhomMon : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NhomMonHoc", DbType.AnsiString, entity.NhomMonHoc );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region cust_DonGia_GetByHinhThucDaoTao
					
		/// <summary>
		///	This method wraps the 'cust_DonGia_GetByHinhThucDaoTao' stored procedure. 
		/// </summary>	
		/// <param name="maHinhThucDaoTao"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;DonGia&gt;"/> instance.</returns>
		public override TList<DonGia> GetByHinhThucDaoTao(TransactionManager transactionManager, int start, int pageLength , System.Int32 maHinhThucDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_DonGia_GetByHinhThucDaoTao", true);
			
			database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.Int32,  maHinhThucDaoTao );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<DonGia> rows = new TList<DonGia>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByHinhThucDaoTao", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByHinhThucDaoTao", rows));


				return rows;
		}
		#endregion

		#region cust_DonGia_GetByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_DonGia_GetByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;DonGia&gt;"/> instance.</returns>
		public override TList<DonGia> GetByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_DonGia_GetByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<DonGia> rows = new TList<DonGia>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKy", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKy", rows));


				return rows;
		}
		#endregion

		#region cust_DonGia_GetByMaQuanLyNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_DonGia_GetByMaQuanLyNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetByMaQuanLyNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, System.String hocKy, ref System.Double ketQua)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_DonGia_GetByMaQuanLyNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@KetQua", DbType.Double, 8, ParameterDirection.InputOutput, true, 53, 0, string.Empty, DataRowVersion.Current, ketQua);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaQuanLyNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaQuanLyNamHocHocKy", (IEntity)null));

			ketQua =  Utility.GetParameterValue<System.Double>(commandWrapper.Parameters["@KetQua"]);

				
				return;
		}
		#endregion

		#region cust_DonGia_GetByMaLoaiGiangVienMaHocHamMaHocViLopClc
					
		/// <summary>
		///	This method wraps the 'cust_DonGia_GetByMaLoaiGiangVienMaHocHamMaHocViLopClc' stored procedure. 
		/// </summary>	
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="lopClc"> A <c>System.Boolean</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetByMaLoaiGiangVienMaHocHamMaHocViLopClc(TransactionManager transactionManager, int start, int pageLength , System.Int32 maLoaiGiangVien, System.Int32 maHocHam, System.Int32 maHocVi, System.Boolean lopClc, ref System.Int32 ketQua)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_DonGia_GetByMaLoaiGiangVienMaHocHamMaHocViLopClc", true);
			
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32,  maLoaiGiangVien );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32,  maHocHam );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32,  maHocVi );
			database.AddInParameter(commandWrapper, "@LopClc", DbType.Boolean,  lopClc );
	
			database.AddParameter(commandWrapper, "@KetQua", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, ketQua);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaLoaiGiangVienMaHocHamMaHocViLopClc", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaLoaiGiangVienMaHocHamMaHocViLopClc", (IEntity)null));

			ketQua =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@KetQua"]);

				
				return;
		}
		#endregion

		#region cust_DonGia_SaoChep
					
		/// <summary>
		///	This method wraps the 'cust_DonGia_SaoChep' stored procedure. 
		/// </summary>	
		/// <param name="namHocNguon"> A <c>System.String</c> instance.</param>
		/// <param name="hocKyNguon"> A <c>System.String</c> instance.</param>
		/// <param name="namHocDich"> A <c>System.String</c> instance.</param>
		/// <param name="hocKyDich"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void SaoChep(TransactionManager transactionManager, int start, int pageLength , System.String namHocNguon, System.String hocKyNguon, System.String namHocDich, System.String hocKyDich)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_DonGia_SaoChep", true);
			
			database.AddInParameter(commandWrapper, "@NamHocNguon", DbType.AnsiString,  namHocNguon );
			database.AddInParameter(commandWrapper, "@HocKyNguon", DbType.AnsiString,  hocKyNguon );
			database.AddInParameter(commandWrapper, "@NamHocDich", DbType.AnsiString,  namHocDich );
			database.AddInParameter(commandWrapper, "@HocKyDich", DbType.AnsiString,  hocKyDich );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "SaoChep", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "SaoChep", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_DonGia_GetByMaQuanLyNamHocHocKyLopClc
					
		/// <summary>
		///	This method wraps the 'cust_DonGia_GetByMaQuanLyNamHocHocKyLopClc' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lopClc"> A <c>System.Boolean</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetByMaQuanLyNamHocHocKyLopClc(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, System.String hocKy, System.Boolean lopClc, ref System.Double ketQua)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_DonGia_GetByMaQuanLyNamHocHocKyLopClc", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LopClc", DbType.Boolean,  lopClc );
	
			database.AddParameter(commandWrapper, "@KetQua", DbType.Double, 8, ParameterDirection.InputOutput, true, 53, 0, string.Empty, DataRowVersion.Current, ketQua);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaQuanLyNamHocHocKyLopClc", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaQuanLyNamHocHocKyLopClc", (IEntity)null));

			ketQua =  Utility.GetParameterValue<System.Double>(commandWrapper.Parameters["@KetQua"]);

				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
