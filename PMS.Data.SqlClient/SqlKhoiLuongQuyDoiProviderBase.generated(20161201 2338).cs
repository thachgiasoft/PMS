/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlKhoiLuongQuyDoiProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="KhoiLuongQuyDoi"/> entity.
	///</summary>
	public abstract partial class SqlKhoiLuongQuyDoiProviderBase : KhoiLuongQuyDoiProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlKhoiLuongQuyDoiProviderBase"/> instance.
		/// </summary>
		public SqlKhoiLuongQuyDoiProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlKhoiLuongQuyDoiProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlKhoiLuongQuyDoiProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_maKhoiLuongQuyDoi">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _maKhoiLuongQuyDoi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@MaKhoiLuongQuyDoi", DbType.Int32, _maKhoiLuongQuyDoi);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(KhoiLuongQuyDoi)
					,_maKhoiLuongQuyDoi);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongQuyDoi objects.</returns>
		public override TList<KhoiLuongQuyDoi> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<KhoiLuongQuyDoi>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@MaKhoiLuongQuyDoi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaKhoiLuongGiangDay", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoLuong", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaBuoiHoc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLop", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTiet", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TinhTrang", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaKhoa", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoCongViec", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoBacDaoTao", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoNgonNgu", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoChucDanhChuyenMon", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoLopDong", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoCoSo", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTietThucTeQuyDoi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoQuyDoiThucHanhSangLyThuyet", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoNgoaiGio", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoaiLop", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoClcCntn", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoThinhGiangMonChuyenNganh", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoTroCapGiangDay", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoTroCap", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoLuong", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoMonMoi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoNienCheTinChi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MucThanhToan", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoKhoiNganh", DbType.Decimal, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("makhoiluongquydoi ") || clause.Trim().StartsWith("makhoiluongquydoi="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoiLuongQuyDoi", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makhoiluonggiangday ") || clause.Trim().StartsWith("makhoiluonggiangday="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoiLuongGiangDay", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("magiangvien ") || clause.Trim().StartsWith("magiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaGiangVien", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malophocphan ") || clause.Trim().StartsWith("malophocphan="))
				{
					database.SetParameterValue(commandWrapper, "@MaLopHocPhan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namhoc ") || clause.Trim().StartsWith("namhoc="))
				{
					database.SetParameterValue(commandWrapper, "@NamHoc", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hocky ") || clause.Trim().StartsWith("hocky="))
				{
					database.SetParameterValue(commandWrapper, "@HocKy", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mamonhoc ") || clause.Trim().StartsWith("mamonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaMonHoc", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tenmonhoc ") || clause.Trim().StartsWith("tenmonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@TenMonHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotinchi ") || clause.Trim().StartsWith("sotinchi="))
				{
					database.SetParameterValue(commandWrapper, "@SoTinChi", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("soluong ") || clause.Trim().StartsWith("soluong="))
				{
					database.SetParameterValue(commandWrapper, "@SoLuong", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaihocphan ") || clause.Trim().StartsWith("maloaihocphan="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiHocPhan", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loaihocphan ") || clause.Trim().StartsWith("loaihocphan="))
				{
					database.SetParameterValue(commandWrapper, "@LoaiHocPhan", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mabuoihoc ") || clause.Trim().StartsWith("mabuoihoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaBuoiHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malop ") || clause.Trim().StartsWith("malop="))
				{
					database.SetParameterValue(commandWrapper, "@MaLop", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tietbatdau ") || clause.Trim().StartsWith("tietbatdau="))
				{
					database.SetParameterValue(commandWrapper, "@TietBatDau", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotiet ") || clause.Trim().StartsWith("sotiet="))
				{
					database.SetParameterValue(commandWrapper, "@SoTiet", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tinhtrang ") || clause.Trim().StartsWith("tinhtrang="))
				{
					database.SetParameterValue(commandWrapper, "@TinhTrang", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayday ") || clause.Trim().StartsWith("ngayday="))
				{
					database.SetParameterValue(commandWrapper, "@NgayDay", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mabacdaotao ") || clause.Trim().StartsWith("mabacdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@MaBacDaoTao", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makhoahoc ") || clause.Trim().StartsWith("makhoahoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoaHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makhoa ") || clause.Trim().StartsWith("makhoa="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoa", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("manhommonhoc ") || clause.Trim().StartsWith("manhommonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaNhomMonHoc", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maphonghoc ") || clause.Trim().StartsWith("maphonghoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaPhongHoc", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesocongviec ") || clause.Trim().StartsWith("hesocongviec="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoCongViec", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesobacdaotao ") || clause.Trim().StartsWith("hesobacdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoBacDaoTao", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesongonngu ") || clause.Trim().StartsWith("hesongonngu="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoNgonNgu", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesochucdanhchuyenmon ") || clause.Trim().StartsWith("hesochucdanhchuyenmon="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoChucDanhChuyenMon", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesolopdong ") || clause.Trim().StartsWith("hesolopdong="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoLopDong", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesocoso ") || clause.Trim().StartsWith("hesocoso="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoCoSo", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotietthuctequydoi ") || clause.Trim().StartsWith("sotietthuctequydoi="))
				{
					database.SetParameterValue(commandWrapper, "@SoTietThucTeQuyDoi", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tietquydoi ") || clause.Trim().StartsWith("tietquydoi="))
				{
					database.SetParameterValue(commandWrapper, "@TietQuyDoi", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesoquydoithuchanhsanglythuyet ") || clause.Trim().StartsWith("hesoquydoithuchanhsanglythuyet="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoQuyDoiThucHanhSangLyThuyet", 
						clause.Trim().Remove(0,30).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesongoaigio ") || clause.Trim().StartsWith("hesongoaigio="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoNgoaiGio", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loailop ") || clause.Trim().StartsWith("loailop="))
				{
					database.SetParameterValue(commandWrapper, "@LoaiLop", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesoclccntn ") || clause.Trim().StartsWith("hesoclccntn="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoClcCntn", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesothinhgiangmonchuyennganh ") || clause.Trim().StartsWith("hesothinhgiangmonchuyennganh="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoThinhGiangMonChuyenNganh", 
						clause.Trim().Remove(0,28).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngonngugiangday ") || clause.Trim().StartsWith("ngonngugiangday="))
				{
					database.SetParameterValue(commandWrapper, "@NgonNguGiangDay", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesotrocapgiangday ") || clause.Trim().StartsWith("hesotrocapgiangday="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoTroCapGiangDay", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesotrocap ") || clause.Trim().StartsWith("hesotrocap="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoTroCap", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesoluong ") || clause.Trim().StartsWith("hesoluong="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoLuong", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesomonmoi ") || clause.Trim().StartsWith("hesomonmoi="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoMonMoi", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesonienchetinchi ") || clause.Trim().StartsWith("hesonienchetinchi="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoNienCheTinChi", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ghichu ") || clause.Trim().StartsWith("ghichu="))
				{
					database.SetParameterValue(commandWrapper, "@GhiChu", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mucthanhtoan ") || clause.Trim().StartsWith("mucthanhtoan="))
				{
					database.SetParameterValue(commandWrapper, "@MucThanhToan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesokhoinganh ") || clause.Trim().StartsWith("hesokhoinganh="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoKhoiNganh", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<KhoiLuongQuyDoi> rows = new TList<KhoiLuongQuyDoi>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongQuyDoi objects.</returns>
		public override TList<KhoiLuongQuyDoi> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_Find_Dynamic", typeof(KhoiLuongQuyDoiColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<KhoiLuongQuyDoi> rows = new TList<KhoiLuongQuyDoi>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongQuyDoi objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<KhoiLuongQuyDoi> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<KhoiLuongQuyDoi> rows = new TList<KhoiLuongQuyDoi>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongQuyDoi objects.</returns>
		public override TList<KhoiLuongQuyDoi> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<KhoiLuongQuyDoi> rows = new TList<KhoiLuongQuyDoi>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByMaKhoiLuongGiangDay
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_KhoiLuongQuyDoi_KhoiLuongGiangDayChiTiet key.
		///		FK_KhoiLuongQuyDoi_KhoiLuongGiangDayChiTiet Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maKhoiLuongGiangDay"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongQuyDoi objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<KhoiLuongQuyDoi> GetByMaKhoiLuongGiangDay(TransactionManager transactionManager, System.Int32? _maKhoiLuongGiangDay, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_GetByMaKhoiLuongGiangDay", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaKhoiLuongGiangDay", DbType.Int32, _maKhoiLuongGiangDay);
			
			IDataReader reader = null;
			TList<KhoiLuongQuyDoi> rows = new TList<KhoiLuongQuyDoi>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaKhoiLuongGiangDay", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaKhoiLuongGiangDay", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByMaKhoiLuongQuyDoi
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_KhoiLuongQuyDoi index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maKhoiLuongQuyDoi"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.KhoiLuongQuyDoi"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.KhoiLuongQuyDoi GetByMaKhoiLuongQuyDoi(TransactionManager transactionManager, System.Int32 _maKhoiLuongQuyDoi, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_GetByMaKhoiLuongQuyDoi", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaKhoiLuongQuyDoi", DbType.Int32, _maKhoiLuongQuyDoi);
			
			IDataReader reader = null;
			TList<KhoiLuongQuyDoi> tmp = new TList<KhoiLuongQuyDoi>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaKhoiLuongQuyDoi", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaKhoiLuongQuyDoi", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.KhoiLuongQuyDoi object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.KhoiLuongQuyDoi> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "KhoiLuongQuyDoi";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("MaKhoiLuongQuyDoi", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MaKhoiLuongGiangDay", typeof(System.Int32));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("MaGiangVien", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("MaLopHocPhan", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("NamHoc", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("HocKy", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("MaMonHoc", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("TenMonHoc", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("SoTinChi", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("SoLuong", typeof(System.Int32));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("MaLoaiHocPhan", typeof(System.Byte));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("LoaiHocPhan", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("MaBuoiHoc", typeof(System.Int32));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("MaLop", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("TietBatDau", typeof(System.Int32));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("SoTiet", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("TinhTrang", typeof(System.Int32));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("NgayDay", typeof(System.DateTime));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("MaBacDaoTao", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("MaKhoaHoc", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("MaKhoa", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("MaNhomMonHoc", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("MaPhongHoc", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("HeSoCongViec", typeof(System.Decimal));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("HeSoBacDaoTao", typeof(System.Decimal));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("HeSoNgonNgu", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("HeSoChucDanhChuyenMon", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("HeSoLopDong", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("HeSoCoSo", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("SoTietThucTeQuyDoi", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("TietQuyDoi", typeof(System.Decimal));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("HeSoQuyDoiThucHanhSangLyThuyet", typeof(System.Decimal));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("HeSoNgoaiGio", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("LoaiLop", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("HeSoClcCntn", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("HeSoThinhGiangMonChuyenNganh", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("NgonNguGiangDay", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("HeSoTroCapGiangDay", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("HeSoTroCap", typeof(System.Decimal));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("HeSoLuong", typeof(System.Decimal));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("HeSoMonMoi", typeof(System.Decimal));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("HeSoNienCheTinChi", typeof(System.Decimal));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("GhiChu", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("MucThanhToan", typeof(System.Decimal));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("HeSoKhoiNganh", typeof(System.Decimal));
			col44.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("MaKhoiLuongQuyDoi", "MaKhoiLuongQuyDoi");
			bulkCopy.ColumnMappings.Add("MaKhoiLuongGiangDay", "MaKhoiLuongGiangDay");
			bulkCopy.ColumnMappings.Add("MaGiangVien", "MaGiangVien");
			bulkCopy.ColumnMappings.Add("MaLopHocPhan", "MaLopHocPhan");
			bulkCopy.ColumnMappings.Add("NamHoc", "NamHoc");
			bulkCopy.ColumnMappings.Add("HocKy", "HocKy");
			bulkCopy.ColumnMappings.Add("MaMonHoc", "MaMonHoc");
			bulkCopy.ColumnMappings.Add("TenMonHoc", "TenMonHoc");
			bulkCopy.ColumnMappings.Add("SoTinChi", "SoTinChi");
			bulkCopy.ColumnMappings.Add("SoLuong", "SoLuong");
			bulkCopy.ColumnMappings.Add("MaLoaiHocPhan", "MaLoaiHocPhan");
			bulkCopy.ColumnMappings.Add("LoaiHocPhan", "LoaiHocPhan");
			bulkCopy.ColumnMappings.Add("MaBuoiHoc", "MaBuoiHoc");
			bulkCopy.ColumnMappings.Add("MaLop", "MaLop");
			bulkCopy.ColumnMappings.Add("TietBatDau", "TietBatDau");
			bulkCopy.ColumnMappings.Add("SoTiet", "SoTiet");
			bulkCopy.ColumnMappings.Add("TinhTrang", "TinhTrang");
			bulkCopy.ColumnMappings.Add("NgayDay", "NgayDay");
			bulkCopy.ColumnMappings.Add("MaBacDaoTao", "MaBacDaoTao");
			bulkCopy.ColumnMappings.Add("MaKhoaHoc", "MaKhoaHoc");
			bulkCopy.ColumnMappings.Add("MaKhoa", "MaKhoa");
			bulkCopy.ColumnMappings.Add("MaNhomMonHoc", "MaNhomMonHoc");
			bulkCopy.ColumnMappings.Add("MaPhongHoc", "MaPhongHoc");
			bulkCopy.ColumnMappings.Add("HeSoCongViec", "HeSoCongViec");
			bulkCopy.ColumnMappings.Add("HeSoBacDaoTao", "HeSoBacDaoTao");
			bulkCopy.ColumnMappings.Add("HeSoNgonNgu", "HeSoNgonNgu");
			bulkCopy.ColumnMappings.Add("HeSoChucDanhChuyenMon", "HeSoChucDanhChuyenMon");
			bulkCopy.ColumnMappings.Add("HeSoLopDong", "HeSoLopDong");
			bulkCopy.ColumnMappings.Add("HeSoCoSo", "HeSoCoSo");
			bulkCopy.ColumnMappings.Add("SoTietThucTeQuyDoi", "SoTietThucTeQuyDoi");
			bulkCopy.ColumnMappings.Add("TietQuyDoi", "TietQuyDoi");
			bulkCopy.ColumnMappings.Add("HeSoQuyDoiThucHanhSangLyThuyet", "HeSoQuyDoiThucHanhSangLyThuyet");
			bulkCopy.ColumnMappings.Add("HeSoNgoaiGio", "HeSoNgoaiGio");
			bulkCopy.ColumnMappings.Add("LoaiLop", "LoaiLop");
			bulkCopy.ColumnMappings.Add("HeSoClcCntn", "HeSoClcCntn");
			bulkCopy.ColumnMappings.Add("HeSoThinhGiangMonChuyenNganh", "HeSoThinhGiangMonChuyenNganh");
			bulkCopy.ColumnMappings.Add("NgonNguGiangDay", "NgonNguGiangDay");
			bulkCopy.ColumnMappings.Add("HeSoTroCapGiangDay", "HeSoTroCapGiangDay");
			bulkCopy.ColumnMappings.Add("HeSoTroCap", "HeSoTroCap");
			bulkCopy.ColumnMappings.Add("HeSoLuong", "HeSoLuong");
			bulkCopy.ColumnMappings.Add("HeSoMonMoi", "HeSoMonMoi");
			bulkCopy.ColumnMappings.Add("HeSoNienCheTinChi", "HeSoNienCheTinChi");
			bulkCopy.ColumnMappings.Add("GhiChu", "GhiChu");
			bulkCopy.ColumnMappings.Add("MucThanhToan", "MucThanhToan");
			bulkCopy.ColumnMappings.Add("HeSoKhoiNganh", "HeSoKhoiNganh");
			
			foreach(PMS.Entities.KhoiLuongQuyDoi entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["MaKhoiLuongQuyDoi"] = entity.MaKhoiLuongQuyDoi;
							
				
					row["MaKhoiLuongGiangDay"] = entity.MaKhoiLuongGiangDay.HasValue ? (object) entity.MaKhoiLuongGiangDay  : System.DBNull.Value;
							
				
					row["MaGiangVien"] = entity.MaGiangVien;
							
				
					row["MaLopHocPhan"] = entity.MaLopHocPhan;
							
				
					row["NamHoc"] = entity.NamHoc;
							
				
					row["HocKy"] = entity.HocKy;
							
				
					row["MaMonHoc"] = entity.MaMonHoc;
							
				
					row["TenMonHoc"] = entity.TenMonHoc;
							
				
					row["SoTinChi"] = entity.SoTinChi.HasValue ? (object) entity.SoTinChi  : System.DBNull.Value;
							
				
					row["SoLuong"] = entity.SoLuong.HasValue ? (object) entity.SoLuong  : System.DBNull.Value;
							
				
					row["MaLoaiHocPhan"] = entity.MaLoaiHocPhan.HasValue ? (object) entity.MaLoaiHocPhan  : System.DBNull.Value;
							
				
					row["LoaiHocPhan"] = entity.LoaiHocPhan;
							
				
					row["MaBuoiHoc"] = entity.MaBuoiHoc.HasValue ? (object) entity.MaBuoiHoc  : System.DBNull.Value;
							
				
					row["MaLop"] = entity.MaLop;
							
				
					row["TietBatDau"] = entity.TietBatDau.HasValue ? (object) entity.TietBatDau  : System.DBNull.Value;
							
				
					row["SoTiet"] = entity.SoTiet.HasValue ? (object) entity.SoTiet  : System.DBNull.Value;
							
				
					row["TinhTrang"] = entity.TinhTrang.HasValue ? (object) entity.TinhTrang  : System.DBNull.Value;
							
				
					row["NgayDay"] = entity.NgayDay.HasValue ? (object) entity.NgayDay  : System.DBNull.Value;
							
				
					row["MaBacDaoTao"] = entity.MaBacDaoTao;
							
				
					row["MaKhoaHoc"] = entity.MaKhoaHoc;
							
				
					row["MaKhoa"] = entity.MaKhoa;
							
				
					row["MaNhomMonHoc"] = entity.MaNhomMonHoc;
							
				
					row["MaPhongHoc"] = entity.MaPhongHoc;
							
				
					row["HeSoCongViec"] = entity.HeSoCongViec.HasValue ? (object) entity.HeSoCongViec  : System.DBNull.Value;
							
				
					row["HeSoBacDaoTao"] = entity.HeSoBacDaoTao.HasValue ? (object) entity.HeSoBacDaoTao  : System.DBNull.Value;
							
				
					row["HeSoNgonNgu"] = entity.HeSoNgonNgu.HasValue ? (object) entity.HeSoNgonNgu  : System.DBNull.Value;
							
				
					row["HeSoChucDanhChuyenMon"] = entity.HeSoChucDanhChuyenMon.HasValue ? (object) entity.HeSoChucDanhChuyenMon  : System.DBNull.Value;
							
				
					row["HeSoLopDong"] = entity.HeSoLopDong.HasValue ? (object) entity.HeSoLopDong  : System.DBNull.Value;
							
				
					row["HeSoCoSo"] = entity.HeSoCoSo.HasValue ? (object) entity.HeSoCoSo  : System.DBNull.Value;
							
				
					row["SoTietThucTeQuyDoi"] = entity.SoTietThucTeQuyDoi.HasValue ? (object) entity.SoTietThucTeQuyDoi  : System.DBNull.Value;
							
				
					row["TietQuyDoi"] = entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi  : System.DBNull.Value;
							
				
					row["HeSoQuyDoiThucHanhSangLyThuyet"] = entity.HeSoQuyDoiThucHanhSangLyThuyet.HasValue ? (object) entity.HeSoQuyDoiThucHanhSangLyThuyet  : System.DBNull.Value;
							
				
					row["HeSoNgoaiGio"] = entity.HeSoNgoaiGio.HasValue ? (object) entity.HeSoNgoaiGio  : System.DBNull.Value;
							
				
					row["LoaiLop"] = entity.LoaiLop;
							
				
					row["HeSoClcCntn"] = entity.HeSoClcCntn.HasValue ? (object) entity.HeSoClcCntn  : System.DBNull.Value;
							
				
					row["HeSoThinhGiangMonChuyenNganh"] = entity.HeSoThinhGiangMonChuyenNganh.HasValue ? (object) entity.HeSoThinhGiangMonChuyenNganh  : System.DBNull.Value;
							
				
					row["NgonNguGiangDay"] = entity.NgonNguGiangDay;
							
				
					row["HeSoTroCapGiangDay"] = entity.HeSoTroCapGiangDay.HasValue ? (object) entity.HeSoTroCapGiangDay  : System.DBNull.Value;
							
				
					row["HeSoTroCap"] = entity.HeSoTroCap.HasValue ? (object) entity.HeSoTroCap  : System.DBNull.Value;
							
				
					row["HeSoLuong"] = entity.HeSoLuong.HasValue ? (object) entity.HeSoLuong  : System.DBNull.Value;
							
				
					row["HeSoMonMoi"] = entity.HeSoMonMoi.HasValue ? (object) entity.HeSoMonMoi  : System.DBNull.Value;
							
				
					row["HeSoNienCheTinChi"] = entity.HeSoNienCheTinChi.HasValue ? (object) entity.HeSoNienCheTinChi  : System.DBNull.Value;
							
				
					row["GhiChu"] = entity.GhiChu;
							
				
					row["MucThanhToan"] = entity.MucThanhToan.HasValue ? (object) entity.MucThanhToan  : System.DBNull.Value;
							
				
					row["HeSoKhoiNganh"] = entity.HeSoKhoiNganh.HasValue ? (object) entity.HeSoKhoiNganh  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.KhoiLuongQuyDoi entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.KhoiLuongQuyDoi object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.KhoiLuongQuyDoi object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.KhoiLuongQuyDoi object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.KhoiLuongQuyDoi entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@MaKhoiLuongQuyDoi", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@MaKhoiLuongGiangDay", DbType.Int32, (entity.MaKhoiLuongGiangDay.HasValue ? (object) entity.MaKhoiLuongGiangDay  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString, entity.MaGiangVien );
            database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, entity.MaLopHocPhan );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
			database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Decimal, (entity.SoTinChi.HasValue ? (object) entity.SoTinChi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoLuong", DbType.Int32, (entity.SoLuong.HasValue ? (object) entity.SoLuong  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Byte, (entity.MaLoaiHocPhan.HasValue ? (object) entity.MaLoaiHocPhan  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, entity.LoaiHocPhan );
			database.AddInParameter(commandWrapper, "@MaBuoiHoc", DbType.Int32, (entity.MaBuoiHoc.HasValue ? (object) entity.MaBuoiHoc  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaLop", DbType.String, entity.MaLop );
			database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32, (entity.TietBatDau.HasValue ? (object) entity.TietBatDau  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoTiet", DbType.Decimal, (entity.SoTiet.HasValue ? (object) entity.SoTiet  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TinhTrang", DbType.Int32, (entity.TinhTrang.HasValue ? (object) entity.TinhTrang  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime, (entity.NgayDay.HasValue ? (object) entity.NgayDay  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, entity.MaBacDaoTao );
            database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, entity.MaKhoaHoc );
            database.AddInParameter(commandWrapper, "@MaKhoa", DbType.AnsiString, entity.MaKhoa );
            database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, entity.MaNhomMonHoc );
            database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString, entity.MaPhongHoc );
			database.AddInParameter(commandWrapper, "@HeSoCongViec", DbType.Decimal, (entity.HeSoCongViec.HasValue ? (object) entity.HeSoCongViec  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoBacDaoTao", DbType.Decimal, (entity.HeSoBacDaoTao.HasValue ? (object) entity.HeSoBacDaoTao  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoNgonNgu", DbType.Decimal, (entity.HeSoNgonNgu.HasValue ? (object) entity.HeSoNgonNgu  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoChucDanhChuyenMon", DbType.Decimal, (entity.HeSoChucDanhChuyenMon.HasValue ? (object) entity.HeSoChucDanhChuyenMon  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoLopDong", DbType.Decimal, (entity.HeSoLopDong.HasValue ? (object) entity.HeSoLopDong  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoCoSo", DbType.Decimal, (entity.HeSoCoSo.HasValue ? (object) entity.HeSoCoSo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoTietThucTeQuyDoi", DbType.Decimal, (entity.SoTietThucTeQuyDoi.HasValue ? (object) entity.SoTietThucTeQuyDoi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, (entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoQuyDoiThucHanhSangLyThuyet", DbType.Decimal, (entity.HeSoQuyDoiThucHanhSangLyThuyet.HasValue ? (object) entity.HeSoQuyDoiThucHanhSangLyThuyet  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoNgoaiGio", DbType.Decimal, (entity.HeSoNgoaiGio.HasValue ? (object) entity.HeSoNgoaiGio  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@LoaiLop", DbType.AnsiString, entity.LoaiLop );
			database.AddInParameter(commandWrapper, "@HeSoClcCntn", DbType.Decimal, (entity.HeSoClcCntn.HasValue ? (object) entity.HeSoClcCntn  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoThinhGiangMonChuyenNganh", DbType.Decimal, (entity.HeSoThinhGiangMonChuyenNganh.HasValue ? (object) entity.HeSoThinhGiangMonChuyenNganh  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, entity.NgonNguGiangDay );
			database.AddInParameter(commandWrapper, "@HeSoTroCapGiangDay", DbType.Decimal, (entity.HeSoTroCapGiangDay.HasValue ? (object) entity.HeSoTroCapGiangDay  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoTroCap", DbType.Decimal, (entity.HeSoTroCap.HasValue ? (object) entity.HeSoTroCap  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoLuong", DbType.Decimal, (entity.HeSoLuong.HasValue ? (object) entity.HeSoLuong  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoMonMoi", DbType.Decimal, (entity.HeSoMonMoi.HasValue ? (object) entity.HeSoMonMoi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoNienCheTinChi", DbType.Decimal, (entity.HeSoNienCheTinChi.HasValue ? (object) entity.HeSoNienCheTinChi  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, entity.GhiChu );
			database.AddInParameter(commandWrapper, "@MucThanhToan", DbType.Decimal, (entity.MucThanhToan.HasValue ? (object) entity.MucThanhToan  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoKhoiNganh", DbType.Decimal, (entity.HeSoKhoiNganh.HasValue ? (object) entity.HeSoKhoiNganh  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _maKhoiLuongQuyDoi = database.GetParameterValue(commandWrapper, "@MaKhoiLuongQuyDoi");
			entity.MaKhoiLuongQuyDoi = (System.Int32)_maKhoiLuongQuyDoi;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.KhoiLuongQuyDoi object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.KhoiLuongQuyDoi object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.KhoiLuongQuyDoi entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongQuyDoi_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@MaKhoiLuongQuyDoi", DbType.Int32, entity.MaKhoiLuongQuyDoi );
			database.AddInParameter(commandWrapper, "@MaKhoiLuongGiangDay", DbType.Int32, (entity.MaKhoiLuongGiangDay.HasValue ? (object) entity.MaKhoiLuongGiangDay : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString, entity.MaGiangVien );
            database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, entity.MaLopHocPhan );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
			database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Decimal, (entity.SoTinChi.HasValue ? (object) entity.SoTinChi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoLuong", DbType.Int32, (entity.SoLuong.HasValue ? (object) entity.SoLuong : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Byte, (entity.MaLoaiHocPhan.HasValue ? (object) entity.MaLoaiHocPhan : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, entity.LoaiHocPhan );
			database.AddInParameter(commandWrapper, "@MaBuoiHoc", DbType.Int32, (entity.MaBuoiHoc.HasValue ? (object) entity.MaBuoiHoc : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaLop", DbType.String, entity.MaLop );
			database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32, (entity.TietBatDau.HasValue ? (object) entity.TietBatDau : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoTiet", DbType.Decimal, (entity.SoTiet.HasValue ? (object) entity.SoTiet : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TinhTrang", DbType.Int32, (entity.TinhTrang.HasValue ? (object) entity.TinhTrang : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime, (entity.NgayDay.HasValue ? (object) entity.NgayDay : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, entity.MaBacDaoTao );
            database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, entity.MaKhoaHoc );
            database.AddInParameter(commandWrapper, "@MaKhoa", DbType.AnsiString, entity.MaKhoa );
            database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, entity.MaNhomMonHoc );
            database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString, entity.MaPhongHoc );
			database.AddInParameter(commandWrapper, "@HeSoCongViec", DbType.Decimal, (entity.HeSoCongViec.HasValue ? (object) entity.HeSoCongViec : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoBacDaoTao", DbType.Decimal, (entity.HeSoBacDaoTao.HasValue ? (object) entity.HeSoBacDaoTao : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoNgonNgu", DbType.Decimal, (entity.HeSoNgonNgu.HasValue ? (object) entity.HeSoNgonNgu : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoChucDanhChuyenMon", DbType.Decimal, (entity.HeSoChucDanhChuyenMon.HasValue ? (object) entity.HeSoChucDanhChuyenMon : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoLopDong", DbType.Decimal, (entity.HeSoLopDong.HasValue ? (object) entity.HeSoLopDong : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoCoSo", DbType.Decimal, (entity.HeSoCoSo.HasValue ? (object) entity.HeSoCoSo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoTietThucTeQuyDoi", DbType.Decimal, (entity.SoTietThucTeQuyDoi.HasValue ? (object) entity.SoTietThucTeQuyDoi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, (entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoQuyDoiThucHanhSangLyThuyet", DbType.Decimal, (entity.HeSoQuyDoiThucHanhSangLyThuyet.HasValue ? (object) entity.HeSoQuyDoiThucHanhSangLyThuyet : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoNgoaiGio", DbType.Decimal, (entity.HeSoNgoaiGio.HasValue ? (object) entity.HeSoNgoaiGio : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@LoaiLop", DbType.AnsiString, entity.LoaiLop );
			database.AddInParameter(commandWrapper, "@HeSoClcCntn", DbType.Decimal, (entity.HeSoClcCntn.HasValue ? (object) entity.HeSoClcCntn : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoThinhGiangMonChuyenNganh", DbType.Decimal, (entity.HeSoThinhGiangMonChuyenNganh.HasValue ? (object) entity.HeSoThinhGiangMonChuyenNganh : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, entity.NgonNguGiangDay );
			database.AddInParameter(commandWrapper, "@HeSoTroCapGiangDay", DbType.Decimal, (entity.HeSoTroCapGiangDay.HasValue ? (object) entity.HeSoTroCapGiangDay : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoTroCap", DbType.Decimal, (entity.HeSoTroCap.HasValue ? (object) entity.HeSoTroCap : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoLuong", DbType.Decimal, (entity.HeSoLuong.HasValue ? (object) entity.HeSoLuong : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoMonMoi", DbType.Decimal, (entity.HeSoMonMoi.HasValue ? (object) entity.HeSoMonMoi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoNienCheTinChi", DbType.Decimal, (entity.HeSoNienCheTinChi.HasValue ? (object) entity.HeSoNienCheTinChi : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, entity.GhiChu );
			database.AddInParameter(commandWrapper, "@MucThanhToan", DbType.Decimal, (entity.MucThanhToan.HasValue ? (object) entity.MucThanhToan : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoKhoiNganh", DbType.Decimal, (entity.HeSoKhoiNganh.HasValue ? (object) entity.HeSoKhoiNganh : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region cust_KhoiLuongQuyDoi_LuuQuyDoi
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_LuuQuyDoi' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuQuyDoi(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_LuuQuyDoi", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuQuyDoi", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuQuyDoi", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_LuuQuyDoiCtim
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_LuuQuyDoiCtim' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuQuyDoiCtim(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_LuuQuyDoiCtim", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.Xml,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuQuyDoiCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuQuyDoiCtim", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_GetByMaGiangVienNamHoc
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_GetByMaGiangVienNamHoc' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByMaGiangVienNamHoc(TransactionManager transactionManager, int start, int pageLength , System.String maGiangVien, System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_GetByMaGiangVienNamHoc", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaGiangVienNamHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaGiangVienNamHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_DeleteByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_DeleteByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DeleteByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_DeleteByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteByNamHocHocKy", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_DeleteByXmlData
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_DeleteByXmlData' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DeleteByXmlData(TransactionManager transactionManager, int start, int pageLength , System.String xmlData)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_DeleteByXmlData", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteByXmlData", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteByXmlData", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_GetByNamHocHocKyMaDonVi_Act
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_GetByNamHocHocKyMaDonVi_Act' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByNamHocHocKyMaDonVi_Act(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_GetByNamHocHocKyMaDonVi_Act", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyMaDonVi_Act", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyMaDonVi_Act", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_LuuQuyDoiAll
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_LuuQuyDoiAll' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuQuyDoiAll(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_LuuQuyDoiAll", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuQuyDoiAll", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuQuyDoiAll", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_DeleteByNamHocHocKyMaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_DeleteByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DeleteByNamHocHocKyMaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_DeleteByNamHocHocKyMaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteByNamHocHocKyMaDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteByNamHocHocKyMaDonVi", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_GetByGiangVienNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_GetByGiangVienNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="listMaGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByGiangVienNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String listMaGiangVien, System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_GetByGiangVienNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@ListMaGiangVien", DbType.String,  listMaGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGiangVienNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGiangVienNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_TinhLaiGioTroGiangClc
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_TinhLaiGioTroGiangClc' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void TinhLaiGioTroGiangClc(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_TinhLaiGioTroGiangClc", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TinhLaiGioTroGiangClc", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TinhLaiGioTroGiangClc", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_GetByNamHocHocKyDotThanhToan
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_GetByNamHocHocKyDotThanhToan' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByNamHocHocKyDotThanhToan(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_GetByNamHocHocKyDotThanhToan", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyDotThanhToan", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyDotThanhToan", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_GetByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_GetByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_GetByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_DeleteByNamHocHocKyCauHinhChotGio
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_DeleteByNamHocHocKyCauHinhChotGio' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DeleteByNamHocHocKyCauHinhChotGio(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_DeleteByNamHocHocKyCauHinhChotGio", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteByNamHocHocKyCauHinhChotGio", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteByNamHocHocKyCauHinhChotGio", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_DeleteKhoiLuongBoSungByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_DeleteKhoiLuongBoSungByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DeleteKhoiLuongBoSungByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_DeleteKhoiLuongBoSungByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteKhoiLuongBoSungByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteKhoiLuongBoSungByNamHocHocKy", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_GetByNamHocHocKyMaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_GetByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByNamHocHocKyMaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_GetByNamHocHocKyMaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyMaDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyMaDonVi", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_LuuQuyDoiTheoDotAll
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_LuuQuyDoiTheoDotAll' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuQuyDoiTheoDotAll(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_LuuQuyDoiTheoDotAll", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuQuyDoiTheoDotAll", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuQuyDoiTheoDotAll", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongQuyDoi_DeleteByNgay
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongQuyDoi_DeleteByNgay' stored procedure. 
		/// </summary>	
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DeleteByNgay(TransactionManager transactionManager, int start, int pageLength , System.DateTime tuNgay, System.DateTime denNgay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongQuyDoi_DeleteByNgay", true);
			
			database.AddInParameter(commandWrapper, "@TuNgay", DbType.DateTime,  tuNgay );
			database.AddInParameter(commandWrapper, "@DenNgay", DbType.DateTime,  denNgay );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteByNgay", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteByNgay", (IEntity)null));


				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
