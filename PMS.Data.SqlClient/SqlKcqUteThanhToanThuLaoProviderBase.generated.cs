/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlKcqUteThanhToanThuLaoProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="KcqUteThanhToanThuLao"/> entity.
	///</summary>
	public abstract partial class SqlKcqUteThanhToanThuLaoProviderBase : KcqUteThanhToanThuLaoProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlKcqUteThanhToanThuLaoProviderBase"/> instance.
		/// </summary>
		public SqlKcqUteThanhToanThuLaoProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlKcqUteThanhToanThuLaoProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlKcqUteThanhToanThuLaoProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_idKhoiLuongQuyDoi">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _idKhoiLuongQuyDoi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KcqUte_ThanhToanThuLao_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@IdKhoiLuongQuyDoi", DbType.Int32, _idKhoiLuongQuyDoi);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(KcqUteThanhToanThuLao)
					,_idKhoiLuongQuyDoi);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KcqUteThanhToanThuLao objects.</returns>
		public override TList<KcqUteThanhToanThuLao> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<KcqUteThanhToanThuLao>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KcqUte_ThanhToanThuLao_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@IdKhoiLuongQuyDoi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NhomMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Nhom", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLop", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTiet", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LopClc", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTietDayChuNhat", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoLopDongLyThuyet", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoLopDongThTnTt", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ho", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ten", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HoTen", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThanhTienDayChuNhat", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThanhTien", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TongThanhTien", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DaChot", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoGioThucGiangTrenLop", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoGioChuanTinhThem", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaDiaDiem", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("idkhoiluongquydoi ") || clause.Trim().StartsWith("idkhoiluongquydoi="))
				{
					database.SetParameterValue(commandWrapper, "@IdKhoiLuongQuyDoi", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mamonhoc ") || clause.Trim().StartsWith("mamonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaMonHoc", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tenmonhoc ") || clause.Trim().StartsWith("tenmonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@TenMonHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nhommonhoc ") || clause.Trim().StartsWith("nhommonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@NhomMonHoc", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namhoc ") || clause.Trim().StartsWith("namhoc="))
				{
					database.SetParameterValue(commandWrapper, "@NamHoc", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hocky ") || clause.Trim().StartsWith("hocky="))
				{
					database.SetParameterValue(commandWrapper, "@HocKy", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malophocphan ") || clause.Trim().StartsWith("malophocphan="))
				{
					database.SetParameterValue(commandWrapper, "@MaLopHocPhan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nhom ") || clause.Trim().StartsWith("nhom="))
				{
					database.SetParameterValue(commandWrapper, "@Nhom", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malop ") || clause.Trim().StartsWith("malop="))
				{
					database.SetParameterValue(commandWrapper, "@MaLop", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotinchi ") || clause.Trim().StartsWith("sotinchi="))
				{
					database.SetParameterValue(commandWrapper, "@SoTinChi", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotiet ") || clause.Trim().StartsWith("sotiet="))
				{
					database.SetParameterValue(commandWrapper, "@SoTiet", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("siso ") || clause.Trim().StartsWith("siso="))
				{
					database.SetParameterValue(commandWrapper, "@SiSo", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lopclc ") || clause.Trim().StartsWith("lopclc="))
				{
					database.SetParameterValue(commandWrapper, "@LopClc", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotietdaychunhat ") || clause.Trim().StartsWith("sotietdaychunhat="))
				{
					database.SetParameterValue(commandWrapper, "@SoTietDayChuNhat", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaihocphan ") || clause.Trim().StartsWith("maloaihocphan="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiHocPhan", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesolopdonglythuyet ") || clause.Trim().StartsWith("hesolopdonglythuyet="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoLopDongLyThuyet", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesolopdongthtntt ") || clause.Trim().StartsWith("hesolopdongthtntt="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoLopDongThTnTt", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maquanly ") || clause.Trim().StartsWith("maquanly="))
				{
					database.SetParameterValue(commandWrapper, "@MaQuanLy", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ho ") || clause.Trim().StartsWith("ho="))
				{
					database.SetParameterValue(commandWrapper, "@Ho", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ten ") || clause.Trim().StartsWith("ten="))
				{
					database.SetParameterValue(commandWrapper, "@Ten", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hoten ") || clause.Trim().StartsWith("hoten="))
				{
					database.SetParameterValue(commandWrapper, "@HoTen", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocham ") || clause.Trim().StartsWith("mahocham="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocHam", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocvi ") || clause.Trim().StartsWith("mahocvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaigiangvien ") || clause.Trim().StartsWith("maloaigiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiGiangVien", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("madonvi ") || clause.Trim().StartsWith("madonvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaDonVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongia ") || clause.Trim().StartsWith("dongia="))
				{
					database.SetParameterValue(commandWrapper, "@DonGia", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tietquydoi ") || clause.Trim().StartsWith("tietquydoi="))
				{
					database.SetParameterValue(commandWrapper, "@TietQuyDoi", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thanhtiendaychunhat ") || clause.Trim().StartsWith("thanhtiendaychunhat="))
				{
					database.SetParameterValue(commandWrapper, "@ThanhTienDayChuNhat", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thanhtien ") || clause.Trim().StartsWith("thanhtien="))
				{
					database.SetParameterValue(commandWrapper, "@ThanhTien", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tongthanhtien ") || clause.Trim().StartsWith("tongthanhtien="))
				{
					database.SetParameterValue(commandWrapper, "@TongThanhTien", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycapnhat ") || clause.Trim().StartsWith("ngaycapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NgayCapNhat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dachot ") || clause.Trim().StartsWith("dachot="))
				{
					database.SetParameterValue(commandWrapper, "@DaChot", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesohocky ") || clause.Trim().StartsWith("hesohocky="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoHocKy", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sogiothucgiangtrenlop ") || clause.Trim().StartsWith("sogiothucgiangtrenlop="))
				{
					database.SetParameterValue(commandWrapper, "@SoGioThucGiangTrenLop", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sogiochuantinhthem ") || clause.Trim().StartsWith("sogiochuantinhthem="))
				{
					database.SetParameterValue(commandWrapper, "@SoGioChuanTinhThem", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("madiadiem ") || clause.Trim().StartsWith("madiadiem="))
				{
					database.SetParameterValue(commandWrapper, "@MaDiaDiem", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<KcqUteThanhToanThuLao> rows = new TList<KcqUteThanhToanThuLao>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.KcqUteThanhToanThuLao objects.</returns>
		public override TList<KcqUteThanhToanThuLao> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KcqUte_ThanhToanThuLao_Find_Dynamic", typeof(KcqUteThanhToanThuLaoColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<KcqUteThanhToanThuLao> rows = new TList<KcqUteThanhToanThuLao>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KcqUteThanhToanThuLao objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<KcqUteThanhToanThuLao> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KcqUte_ThanhToanThuLao_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<KcqUteThanhToanThuLao> rows = new TList<KcqUteThanhToanThuLao>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KcqUteThanhToanThuLao objects.</returns>
		public override TList<KcqUteThanhToanThuLao> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KcqUte_ThanhToanThuLao_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<KcqUteThanhToanThuLao> rows = new TList<KcqUteThanhToanThuLao>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByIdKhoiLuongQuyDoi
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_KcqUte_ThanhToanThuLao index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_idKhoiLuongQuyDoi"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.KcqUteThanhToanThuLao"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.KcqUteThanhToanThuLao GetByIdKhoiLuongQuyDoi(TransactionManager transactionManager, System.Int32 _idKhoiLuongQuyDoi, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KcqUte_ThanhToanThuLao_GetByIdKhoiLuongQuyDoi", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdKhoiLuongQuyDoi", DbType.Int32, _idKhoiLuongQuyDoi);
			
			IDataReader reader = null;
			TList<KcqUteThanhToanThuLao> tmp = new TList<KcqUteThanhToanThuLao>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdKhoiLuongQuyDoi", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdKhoiLuongQuyDoi", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.KcqUteThanhToanThuLao object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.KcqUteThanhToanThuLao> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "KcqUte_ThanhToanThuLao";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("IdKhoiLuongQuyDoi", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MaMonHoc", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("TenMonHoc", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("NhomMonHoc", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("NamHoc", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("HocKy", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("MaLopHocPhan", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("Nhom", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("MaLop", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("SoTinChi", typeof(System.Int32));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("SoTiet", typeof(System.Int32));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("SiSo", typeof(System.Int32));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("LopClc", typeof(System.Boolean));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("SoTietDayChuNhat", typeof(System.Int32));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("MaLoaiHocPhan", typeof(System.Int32));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("HeSoLopDongLyThuyet", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("HeSoLopDongThTnTt", typeof(System.Decimal));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("MaQuanLy", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("Ho", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("Ten", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("HoTen", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("MaHocHam", typeof(System.Int32));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("MaHocVi", typeof(System.Int32));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("MaLoaiGiangVien", typeof(System.Int32));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("MaDonVi", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("DonGia", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("TietQuyDoi", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("ThanhTienDayChuNhat", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("ThanhTien", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("TongThanhTien", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("NgayCapNhat", typeof(System.DateTime));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("DaChot", typeof(System.Boolean));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("HeSoHocKy", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("SoGioThucGiangTrenLop", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("SoGioChuanTinhThem", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("MaDiaDiem", typeof(System.String));
			col35.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("IdKhoiLuongQuyDoi", "IdKhoiLuongQuyDoi");
			bulkCopy.ColumnMappings.Add("MaMonHoc", "MaMonHoc");
			bulkCopy.ColumnMappings.Add("TenMonHoc", "TenMonHoc");
			bulkCopy.ColumnMappings.Add("NhomMonHoc", "NhomMonHoc");
			bulkCopy.ColumnMappings.Add("NamHoc", "NamHoc");
			bulkCopy.ColumnMappings.Add("HocKy", "HocKy");
			bulkCopy.ColumnMappings.Add("MaLopHocPhan", "MaLopHocPhan");
			bulkCopy.ColumnMappings.Add("Nhom", "Nhom");
			bulkCopy.ColumnMappings.Add("MaLop", "MaLop");
			bulkCopy.ColumnMappings.Add("SoTinChi", "SoTinChi");
			bulkCopy.ColumnMappings.Add("SoTiet", "SoTiet");
			bulkCopy.ColumnMappings.Add("SiSo", "SiSo");
			bulkCopy.ColumnMappings.Add("LopClc", "LopClc");
			bulkCopy.ColumnMappings.Add("SoTietDayChuNhat", "SoTietDayChuNhat");
			bulkCopy.ColumnMappings.Add("MaLoaiHocPhan", "MaLoaiHocPhan");
			bulkCopy.ColumnMappings.Add("HeSoLopDongLyThuyet", "HeSoLopDongLyThuyet");
			bulkCopy.ColumnMappings.Add("HeSoLopDongThTnTt", "HeSoLopDongThTnTt");
			bulkCopy.ColumnMappings.Add("MaQuanLy", "MaQuanLy");
			bulkCopy.ColumnMappings.Add("Ho", "Ho");
			bulkCopy.ColumnMappings.Add("Ten", "Ten");
			bulkCopy.ColumnMappings.Add("HoTen", "HoTen");
			bulkCopy.ColumnMappings.Add("MaHocHam", "MaHocHam");
			bulkCopy.ColumnMappings.Add("MaHocVi", "MaHocVi");
			bulkCopy.ColumnMappings.Add("MaLoaiGiangVien", "MaLoaiGiangVien");
			bulkCopy.ColumnMappings.Add("MaDonVi", "MaDonVi");
			bulkCopy.ColumnMappings.Add("DonGia", "DonGia");
			bulkCopy.ColumnMappings.Add("TietQuyDoi", "TietQuyDoi");
			bulkCopy.ColumnMappings.Add("ThanhTienDayChuNhat", "ThanhTienDayChuNhat");
			bulkCopy.ColumnMappings.Add("ThanhTien", "ThanhTien");
			bulkCopy.ColumnMappings.Add("TongThanhTien", "TongThanhTien");
			bulkCopy.ColumnMappings.Add("NgayCapNhat", "NgayCapNhat");
			bulkCopy.ColumnMappings.Add("DaChot", "DaChot");
			bulkCopy.ColumnMappings.Add("HeSoHocKy", "HeSoHocKy");
			bulkCopy.ColumnMappings.Add("SoGioThucGiangTrenLop", "SoGioThucGiangTrenLop");
			bulkCopy.ColumnMappings.Add("SoGioChuanTinhThem", "SoGioChuanTinhThem");
			bulkCopy.ColumnMappings.Add("MaDiaDiem", "MaDiaDiem");
			
			foreach(PMS.Entities.KcqUteThanhToanThuLao entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["IdKhoiLuongQuyDoi"] = entity.IdKhoiLuongQuyDoi;
							
				
					row["MaMonHoc"] = entity.MaMonHoc;
							
				
					row["TenMonHoc"] = entity.TenMonHoc;
							
				
					row["NhomMonHoc"] = entity.NhomMonHoc;
							
				
					row["NamHoc"] = entity.NamHoc;
							
				
					row["HocKy"] = entity.HocKy;
							
				
					row["MaLopHocPhan"] = entity.MaLopHocPhan;
							
				
					row["Nhom"] = entity.Nhom;
							
				
					row["MaLop"] = entity.MaLop;
							
				
					row["SoTinChi"] = entity.SoTinChi.HasValue ? (object) entity.SoTinChi  : System.DBNull.Value;
							
				
					row["SoTiet"] = entity.SoTiet.HasValue ? (object) entity.SoTiet  : System.DBNull.Value;
							
				
					row["SiSo"] = entity.SiSo.HasValue ? (object) entity.SiSo  : System.DBNull.Value;
							
				
					row["LopClc"] = entity.LopClc.HasValue ? (object) entity.LopClc  : System.DBNull.Value;
							
				
					row["SoTietDayChuNhat"] = entity.SoTietDayChuNhat.HasValue ? (object) entity.SoTietDayChuNhat  : System.DBNull.Value;
							
				
					row["MaLoaiHocPhan"] = entity.MaLoaiHocPhan.HasValue ? (object) entity.MaLoaiHocPhan  : System.DBNull.Value;
							
				
					row["HeSoLopDongLyThuyet"] = entity.HeSoLopDongLyThuyet.HasValue ? (object) entity.HeSoLopDongLyThuyet  : System.DBNull.Value;
							
				
					row["HeSoLopDongThTnTt"] = entity.HeSoLopDongThTnTt.HasValue ? (object) entity.HeSoLopDongThTnTt  : System.DBNull.Value;
							
				
					row["MaQuanLy"] = entity.MaQuanLy;
							
				
					row["Ho"] = entity.Ho;
							
				
					row["Ten"] = entity.Ten;
							
				
					row["HoTen"] = entity.HoTen;
							
				
					row["MaHocHam"] = entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value;
							
				
					row["MaHocVi"] = entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value;
							
				
					row["MaLoaiGiangVien"] = entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value;
							
				
					row["MaDonVi"] = entity.MaDonVi;
							
				
					row["DonGia"] = entity.DonGia.HasValue ? (object) entity.DonGia  : System.DBNull.Value;
							
				
					row["TietQuyDoi"] = entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi  : System.DBNull.Value;
							
				
					row["ThanhTienDayChuNhat"] = entity.ThanhTienDayChuNhat.HasValue ? (object) entity.ThanhTienDayChuNhat  : System.DBNull.Value;
							
				
					row["ThanhTien"] = entity.ThanhTien.HasValue ? (object) entity.ThanhTien  : System.DBNull.Value;
							
				
					row["TongThanhTien"] = entity.TongThanhTien.HasValue ? (object) entity.TongThanhTien  : System.DBNull.Value;
							
				
					row["NgayCapNhat"] = entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat  : System.DBNull.Value;
							
				
					row["DaChot"] = entity.DaChot.HasValue ? (object) entity.DaChot  : System.DBNull.Value;
							
				
					row["HeSoHocKy"] = entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy  : System.DBNull.Value;
							
				
					row["SoGioThucGiangTrenLop"] = entity.SoGioThucGiangTrenLop.HasValue ? (object) entity.SoGioThucGiangTrenLop  : System.DBNull.Value;
							
				
					row["SoGioChuanTinhThem"] = entity.SoGioChuanTinhThem.HasValue ? (object) entity.SoGioChuanTinhThem  : System.DBNull.Value;
							
				
					row["MaDiaDiem"] = entity.MaDiaDiem;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.KcqUteThanhToanThuLao entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.KcqUteThanhToanThuLao object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.KcqUteThanhToanThuLao object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.KcqUteThanhToanThuLao object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.KcqUteThanhToanThuLao entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KcqUte_ThanhToanThuLao_Insert", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@IdKhoiLuongQuyDoi", DbType.Int32, entity.IdKhoiLuongQuyDoi );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
            database.AddInParameter(commandWrapper, "@NhomMonHoc", DbType.AnsiString, entity.NhomMonHoc );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
            database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, entity.MaLopHocPhan );
            database.AddInParameter(commandWrapper, "@Nhom", DbType.String, entity.Nhom );
            database.AddInParameter(commandWrapper, "@MaLop", DbType.String, entity.MaLop );
			database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Int32, (entity.SoTinChi.HasValue ? (object) entity.SoTinChi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoTiet", DbType.Int32, (entity.SoTiet.HasValue ? (object) entity.SoTiet  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32, (entity.SiSo.HasValue ? (object) entity.SiSo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LopClc", DbType.Boolean, (entity.LopClc.HasValue ? (object) entity.LopClc  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoTietDayChuNhat", DbType.Int32, (entity.SoTietDayChuNhat.HasValue ? (object) entity.SoTietDayChuNhat  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Int32, (entity.MaLoaiHocPhan.HasValue ? (object) entity.MaLoaiHocPhan  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoLopDongLyThuyet", DbType.Decimal, (entity.HeSoLopDongLyThuyet.HasValue ? (object) entity.HeSoLopDongLyThuyet  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoLopDongThTnTt", DbType.Decimal, (entity.HeSoLopDongThTnTt.HasValue ? (object) entity.HeSoLopDongThTnTt  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
            database.AddInParameter(commandWrapper, "@Ho", DbType.String, entity.Ho );
            database.AddInParameter(commandWrapper, "@Ten", DbType.String, entity.Ten );
            database.AddInParameter(commandWrapper, "@HoTen", DbType.String, entity.HoTen );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, entity.MaDonVi );
			database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, (entity.DonGia.HasValue ? (object) entity.DonGia  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, (entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ThanhTienDayChuNhat", DbType.Decimal, (entity.ThanhTienDayChuNhat.HasValue ? (object) entity.ThanhTienDayChuNhat  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ThanhTien", DbType.Decimal, (entity.ThanhTien.HasValue ? (object) entity.ThanhTien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TongThanhTien", DbType.Decimal, (entity.TongThanhTien.HasValue ? (object) entity.TongThanhTien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, (entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DaChot", DbType.Boolean, (entity.DaChot.HasValue ? (object) entity.DaChot  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, (entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoGioThucGiangTrenLop", DbType.Decimal, (entity.SoGioThucGiangTrenLop.HasValue ? (object) entity.SoGioThucGiangTrenLop  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoGioChuanTinhThem", DbType.Decimal, (entity.SoGioChuanTinhThem.HasValue ? (object) entity.SoGioChuanTinhThem  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaDiaDiem", DbType.AnsiString, entity.MaDiaDiem );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			
			entity.OriginalIdKhoiLuongQuyDoi = entity.IdKhoiLuongQuyDoi;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.KcqUteThanhToanThuLao object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.KcqUteThanhToanThuLao object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.KcqUteThanhToanThuLao entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KcqUte_ThanhToanThuLao_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@IdKhoiLuongQuyDoi", DbType.Int32, entity.IdKhoiLuongQuyDoi );
			database.AddInParameter(commandWrapper, "@OriginalIdKhoiLuongQuyDoi", DbType.Int32, entity.OriginalIdKhoiLuongQuyDoi);
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
            database.AddInParameter(commandWrapper, "@NhomMonHoc", DbType.AnsiString, entity.NhomMonHoc );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
            database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, entity.MaLopHocPhan );
            database.AddInParameter(commandWrapper, "@Nhom", DbType.String, entity.Nhom );
            database.AddInParameter(commandWrapper, "@MaLop", DbType.String, entity.MaLop );
			database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Int32, (entity.SoTinChi.HasValue ? (object) entity.SoTinChi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoTiet", DbType.Int32, (entity.SoTiet.HasValue ? (object) entity.SoTiet : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32, (entity.SiSo.HasValue ? (object) entity.SiSo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LopClc", DbType.Boolean, (entity.LopClc.HasValue ? (object) entity.LopClc : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoTietDayChuNhat", DbType.Int32, (entity.SoTietDayChuNhat.HasValue ? (object) entity.SoTietDayChuNhat : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Int32, (entity.MaLoaiHocPhan.HasValue ? (object) entity.MaLoaiHocPhan : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoLopDongLyThuyet", DbType.Decimal, (entity.HeSoLopDongLyThuyet.HasValue ? (object) entity.HeSoLopDongLyThuyet : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoLopDongThTnTt", DbType.Decimal, (entity.HeSoLopDongThTnTt.HasValue ? (object) entity.HeSoLopDongThTnTt : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
            database.AddInParameter(commandWrapper, "@Ho", DbType.String, entity.Ho );
            database.AddInParameter(commandWrapper, "@Ten", DbType.String, entity.Ten );
            database.AddInParameter(commandWrapper, "@HoTen", DbType.String, entity.HoTen );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, entity.MaDonVi );
			database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, (entity.DonGia.HasValue ? (object) entity.DonGia : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, (entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ThanhTienDayChuNhat", DbType.Decimal, (entity.ThanhTienDayChuNhat.HasValue ? (object) entity.ThanhTienDayChuNhat : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ThanhTien", DbType.Decimal, (entity.ThanhTien.HasValue ? (object) entity.ThanhTien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TongThanhTien", DbType.Decimal, (entity.TongThanhTien.HasValue ? (object) entity.TongThanhTien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, (entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DaChot", DbType.Boolean, (entity.DaChot.HasValue ? (object) entity.DaChot : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, (entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoGioThucGiangTrenLop", DbType.Decimal, (entity.SoGioThucGiangTrenLop.HasValue ? (object) entity.SoGioThucGiangTrenLop : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoGioChuanTinhThem", DbType.Decimal, (entity.SoGioChuanTinhThem.HasValue ? (object) entity.SoGioChuanTinhThem : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaDiaDiem", DbType.AnsiString, entity.MaDiaDiem );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			entity.OriginalIdKhoiLuongQuyDoi = entity.IdKhoiLuongQuyDoi;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region cust_KcqUte_ThanhToanThuLao_GetByNamHocHocKyDonViLoaiGiangVien
					
		/// <summary>
		///	This method wraps the 'cust_KcqUte_ThanhToanThuLao_GetByNamHocHocKyDonViLoaiGiangVien' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KcqUteThanhToanThuLao&gt;"/> instance.</returns>
		public override TList<KcqUteThanhToanThuLao> GetByNamHocHocKyDonViLoaiGiangVien(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.Int32 maLoaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KcqUte_ThanhToanThuLao_GetByNamHocHocKyDonViLoaiGiangVien", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32,  maLoaiGiangVien );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KcqUteThanhToanThuLao> rows = new TList<KcqUteThanhToanThuLao>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyDonViLoaiGiangVien", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyDonViLoaiGiangVien", rows));


				return rows;
		}
		#endregion

		#region cust_KcqUte_ThanhToanThuLao_ThanhToan
					
		/// <summary>
		///	This method wraps the 'cust_KcqUte_ThanhToanThuLao_ThanhToan' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ThanhToan(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KcqUte_ThanhToanThuLao_ThanhToan", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToan", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToan", (IEntity)null));


				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
