/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlKetQuaThanhToanThuLaoProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="KetQuaThanhToanThuLao"/> entity.
	///</summary>
	public abstract partial class SqlKetQuaThanhToanThuLaoProviderBase : KetQuaThanhToanThuLaoProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlKetQuaThanhToanThuLaoProviderBase"/> instance.
		/// </summary>
		public SqlKetQuaThanhToanThuLaoProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlKetQuaThanhToanThuLaoProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlKetQuaThanhToanThuLaoProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KetQuaThanhToanThuLao_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(KetQuaThanhToanThuLao)
					,_id);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KetQuaThanhToanThuLao objects.</returns>
		public override TList<KetQuaThanhToanThuLao> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<KetQuaThanhToanThuLao>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KetQuaThanhToanThuLao_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Loai", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PhanLoai", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Nhom", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLop", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LopClc", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TietThucDay", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TietChuNhat", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoLopDong", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThanhTien", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGiaTrongChuan", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGiaNgoaiChuan", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenCoSo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoQuyDoiThucHanhSangLyThuyet", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoCoSo", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoGioThucGiangTrenLop", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoGioChuanTinhThem", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoChucDanhChuyenMon", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoClcCntn", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoThinhGiangMonChuyenNganh", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoaiLop", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MalopHocPhan", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoTroCap", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoNgoaiGio", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoLuong", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoMonMoi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoNienCheTinChi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoNgonNgu", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoBacDaoTao", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayChiTra", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@XacNhanChiTra", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoCongViec", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaCoSo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MucThanhToan", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DotChiTra", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoKhoiNganh", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaKhoaCuaMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoThamNien", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiHinhDaoTao", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("magiangvien ") || clause.Trim().StartsWith("magiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaGiangVien", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namhoc ") || clause.Trim().StartsWith("namhoc="))
				{
					database.SetParameterValue(commandWrapper, "@NamHoc", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hocky ") || clause.Trim().StartsWith("hocky="))
				{
					database.SetParameterValue(commandWrapper, "@HocKy", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocham ") || clause.Trim().StartsWith("mahocham="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocHam", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocvi ") || clause.Trim().StartsWith("mahocvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaigiangvien ") || clause.Trim().StartsWith("maloaigiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiGiangVien", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("madonvi ") || clause.Trim().StartsWith("madonvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaDonVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loai ") || clause.Trim().StartsWith("loai="))
				{
					database.SetParameterValue(commandWrapper, "@Loai", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("phanloai ") || clause.Trim().StartsWith("phanloai="))
				{
					database.SetParameterValue(commandWrapper, "@PhanLoai", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mamonhoc ") || clause.Trim().StartsWith("mamonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaMonHoc", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tenmonhoc ") || clause.Trim().StartsWith("tenmonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@TenMonHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loaihocphan ") || clause.Trim().StartsWith("loaihocphan="))
				{
					database.SetParameterValue(commandWrapper, "@LoaiHocPhan", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nhom ") || clause.Trim().StartsWith("nhom="))
				{
					database.SetParameterValue(commandWrapper, "@Nhom", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malop ") || clause.Trim().StartsWith("malop="))
				{
					database.SetParameterValue(commandWrapper, "@MaLop", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lopclc ") || clause.Trim().StartsWith("lopclc="))
				{
					database.SetParameterValue(commandWrapper, "@LopClc", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("siso ") || clause.Trim().StartsWith("siso="))
				{
					database.SetParameterValue(commandWrapper, "@SiSo", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tietthucday ") || clause.Trim().StartsWith("tietthucday="))
				{
					database.SetParameterValue(commandWrapper, "@TietThucDay", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tietchunhat ") || clause.Trim().StartsWith("tietchunhat="))
				{
					database.SetParameterValue(commandWrapper, "@TietChuNhat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesohocky ") || clause.Trim().StartsWith("hesohocky="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoHocKy", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesolopdong ") || clause.Trim().StartsWith("hesolopdong="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoLopDong", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tietquydoi ") || clause.Trim().StartsWith("tietquydoi="))
				{
					database.SetParameterValue(commandWrapper, "@TietQuyDoi", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongia ") || clause.Trim().StartsWith("dongia="))
				{
					database.SetParameterValue(commandWrapper, "@DonGia", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thanhtien ") || clause.Trim().StartsWith("thanhtien="))
				{
					database.SetParameterValue(commandWrapper, "@ThanhTien", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lanchot ") || clause.Trim().StartsWith("lanchot="))
				{
					database.SetParameterValue(commandWrapper, "@LanChot", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycapnhat ") || clause.Trim().StartsWith("ngaycapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NgayCapNhat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahinhthucdaotao ") || clause.Trim().StartsWith("mahinhthucdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@MaHinhThucDaoTao", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongiatrongchuan ") || clause.Trim().StartsWith("dongiatrongchuan="))
				{
					database.SetParameterValue(commandWrapper, "@DonGiaTrongChuan", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongiangoaichuan ") || clause.Trim().StartsWith("dongiangoaichuan="))
				{
					database.SetParameterValue(commandWrapper, "@DonGiaNgoaiChuan", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tencoso ") || clause.Trim().StartsWith("tencoso="))
				{
					database.SetParameterValue(commandWrapper, "@TenCoSo", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesoquydoithuchanhsanglythuyet ") || clause.Trim().StartsWith("hesoquydoithuchanhsanglythuyet="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoQuyDoiThucHanhSangLyThuyet", 
						clause.Trim().Remove(0,30).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesocoso ") || clause.Trim().StartsWith("hesocoso="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoCoSo", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sogiothucgiangtrenlop ") || clause.Trim().StartsWith("sogiothucgiangtrenlop="))
				{
					database.SetParameterValue(commandWrapper, "@SoGioThucGiangTrenLop", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sogiochuantinhthem ") || clause.Trim().StartsWith("sogiochuantinhthem="))
				{
					database.SetParameterValue(commandWrapper, "@SoGioChuanTinhThem", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesochucdanhchuyenmon ") || clause.Trim().StartsWith("hesochucdanhchuyenmon="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoChucDanhChuyenMon", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesoclccntn ") || clause.Trim().StartsWith("hesoclccntn="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoClcCntn", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesothinhgiangmonchuyennganh ") || clause.Trim().StartsWith("hesothinhgiangmonchuyennganh="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoThinhGiangMonChuyenNganh", 
						clause.Trim().Remove(0,28).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("manhommonhoc ") || clause.Trim().StartsWith("manhommonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaNhomMonHoc", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loailop ") || clause.Trim().StartsWith("loailop="))
				{
					database.SetParameterValue(commandWrapper, "@LoaiLop", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mabacdaotao ") || clause.Trim().StartsWith("mabacdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@MaBacDaoTao", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malophocphan ") || clause.Trim().StartsWith("malophocphan="))
				{
					database.SetParameterValue(commandWrapper, "@MalopHocPhan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makhoahoc ") || clause.Trim().StartsWith("makhoahoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoaHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesotrocap ") || clause.Trim().StartsWith("hesotrocap="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoTroCap", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesongoaigio ") || clause.Trim().StartsWith("hesongoaigio="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoNgoaiGio", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesoluong ") || clause.Trim().StartsWith("hesoluong="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoLuong", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesomonmoi ") || clause.Trim().StartsWith("hesomonmoi="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoMonMoi", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesonienchetinchi ") || clause.Trim().StartsWith("hesonienchetinchi="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoNienCheTinChi", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesongonngu ") || clause.Trim().StartsWith("hesongonngu="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoNgonNgu", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesobacdaotao ") || clause.Trim().StartsWith("hesobacdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoBacDaoTao", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaychitra ") || clause.Trim().StartsWith("ngaychitra="))
				{
					database.SetParameterValue(commandWrapper, "@NgayChiTra", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("xacnhanchitra ") || clause.Trim().StartsWith("xacnhanchitra="))
				{
					database.SetParameterValue(commandWrapper, "@XacNhanChiTra", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ghichu ") || clause.Trim().StartsWith("ghichu="))
				{
					database.SetParameterValue(commandWrapper, "@GhiChu", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nguoicapnhat ") || clause.Trim().StartsWith("nguoicapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NguoiCapNhat", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesocongviec ") || clause.Trim().StartsWith("hesocongviec="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoCongViec", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngonngugiangday ") || clause.Trim().StartsWith("ngonngugiangday="))
				{
					database.SetParameterValue(commandWrapper, "@NgonNguGiangDay", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("macoso ") || clause.Trim().StartsWith("macoso="))
				{
					database.SetParameterValue(commandWrapper, "@MaCoSo", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mucthanhtoan ") || clause.Trim().StartsWith("mucthanhtoan="))
				{
					database.SetParameterValue(commandWrapper, "@MucThanhToan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dotchitra ") || clause.Trim().StartsWith("dotchitra="))
				{
					database.SetParameterValue(commandWrapper, "@DotChiTra", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesokhoinganh ") || clause.Trim().StartsWith("hesokhoinganh="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoKhoiNganh", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("macauhinhchotgio ") || clause.Trim().StartsWith("macauhinhchotgio="))
				{
					database.SetParameterValue(commandWrapper, "@MaCauHinhChotGio", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makhoacuamonhoc ") || clause.Trim().StartsWith("makhoacuamonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoaCuaMonHoc", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesothamnien ") || clause.Trim().StartsWith("hesothamnien="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoThamNien", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaihinhdaotao ") || clause.Trim().StartsWith("maloaihinhdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiHinhDaoTao", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<KetQuaThanhToanThuLao> rows = new TList<KetQuaThanhToanThuLao>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.KetQuaThanhToanThuLao objects.</returns>
		public override TList<KetQuaThanhToanThuLao> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KetQuaThanhToanThuLao_Find_Dynamic", typeof(KetQuaThanhToanThuLaoColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<KetQuaThanhToanThuLao> rows = new TList<KetQuaThanhToanThuLao>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KetQuaThanhToanThuLao objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<KetQuaThanhToanThuLao> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KetQuaThanhToanThuLao_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<KetQuaThanhToanThuLao> rows = new TList<KetQuaThanhToanThuLao>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KetQuaThanhToanThuLao objects.</returns>
		public override TList<KetQuaThanhToanThuLao> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KetQuaThanhToanThuLao_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<KetQuaThanhToanThuLao> rows = new TList<KetQuaThanhToanThuLao>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_KetQuaThanhToanThuLao index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.KetQuaThanhToanThuLao"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.KetQuaThanhToanThuLao GetById(TransactionManager transactionManager, System.Int32 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KetQuaThanhToanThuLao_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			IDataReader reader = null;
			TList<KetQuaThanhToanThuLao> tmp = new TList<KetQuaThanhToanThuLao>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.KetQuaThanhToanThuLao object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.KetQuaThanhToanThuLao> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "KetQuaThanhToanThuLao";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("Id", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MaGiangVien", typeof(System.Int32));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("NamHoc", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("HocKy", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("MaHocHam", typeof(System.Int32));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("MaHocVi", typeof(System.Int32));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("MaLoaiGiangVien", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("MaDonVi", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("Loai", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("PhanLoai", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("MaMonHoc", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("TenMonHoc", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("LoaiHocPhan", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("Nhom", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("MaLop", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("LopClc", typeof(System.Boolean));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("SiSo", typeof(System.Int32));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("TietThucDay", typeof(System.Decimal));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("TietChuNhat", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("HeSoHocKy", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("HeSoLopDong", typeof(System.Decimal));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("TietQuyDoi", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("DonGia", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ThanhTien", typeof(System.Decimal));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("LanChot", typeof(System.Int32));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("NgayCapNhat", typeof(System.DateTime));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("MaHinhThucDaoTao", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("DonGiaTrongChuan", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("DonGiaNgoaiChuan", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("TenCoSo", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("HeSoQuyDoiThucHanhSangLyThuyet", typeof(System.Decimal));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("HeSoCoSo", typeof(System.Decimal));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("SoGioThucGiangTrenLop", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("SoGioChuanTinhThem", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("HeSoChucDanhChuyenMon", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("HeSoClcCntn", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("HeSoThinhGiangMonChuyenNganh", typeof(System.Decimal));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("MaNhomMonHoc", typeof(System.String));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("LoaiLop", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("MaBacDaoTao", typeof(System.String));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("MalopHocPhan", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("MaKhoaHoc", typeof(System.String));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("HeSoTroCap", typeof(System.Decimal));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("HeSoNgoaiGio", typeof(System.Decimal));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("HeSoLuong", typeof(System.Decimal));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("HeSoMonMoi", typeof(System.Decimal));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("HeSoNienCheTinChi", typeof(System.Decimal));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("HeSoNgonNgu", typeof(System.Decimal));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("HeSoBacDaoTao", typeof(System.Decimal));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("NgayChiTra", typeof(System.String));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("XacNhanChiTra", typeof(System.Boolean));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("GhiChu", typeof(System.String));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("NguoiCapNhat", typeof(System.String));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("HeSoCongViec", typeof(System.Decimal));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("NgonNguGiangDay", typeof(System.String));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("MaCoSo", typeof(System.String));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("MucThanhToan", typeof(System.Decimal));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("DotChiTra", typeof(System.String));
			col57.AllowDBNull = true;		
			DataColumn col58 = dataTable.Columns.Add("HeSoKhoiNganh", typeof(System.Decimal));
			col58.AllowDBNull = true;		
			DataColumn col59 = dataTable.Columns.Add("MaCauHinhChotGio", typeof(System.Int32));
			col59.AllowDBNull = true;		
			DataColumn col60 = dataTable.Columns.Add("MaKhoaCuaMonHoc", typeof(System.String));
			col60.AllowDBNull = true;		
			DataColumn col61 = dataTable.Columns.Add("HeSoThamNien", typeof(System.Decimal));
			col61.AllowDBNull = true;		
			DataColumn col62 = dataTable.Columns.Add("MaLoaiHinhDaoTao", typeof(System.String));
			col62.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("Id", "Id");
			bulkCopy.ColumnMappings.Add("MaGiangVien", "MaGiangVien");
			bulkCopy.ColumnMappings.Add("NamHoc", "NamHoc");
			bulkCopy.ColumnMappings.Add("HocKy", "HocKy");
			bulkCopy.ColumnMappings.Add("MaHocHam", "MaHocHam");
			bulkCopy.ColumnMappings.Add("MaHocVi", "MaHocVi");
			bulkCopy.ColumnMappings.Add("MaLoaiGiangVien", "MaLoaiGiangVien");
			bulkCopy.ColumnMappings.Add("MaDonVi", "MaDonVi");
			bulkCopy.ColumnMappings.Add("Loai", "Loai");
			bulkCopy.ColumnMappings.Add("PhanLoai", "PhanLoai");
			bulkCopy.ColumnMappings.Add("MaMonHoc", "MaMonHoc");
			bulkCopy.ColumnMappings.Add("TenMonHoc", "TenMonHoc");
			bulkCopy.ColumnMappings.Add("LoaiHocPhan", "LoaiHocPhan");
			bulkCopy.ColumnMappings.Add("Nhom", "Nhom");
			bulkCopy.ColumnMappings.Add("MaLop", "MaLop");
			bulkCopy.ColumnMappings.Add("LopClc", "LopClc");
			bulkCopy.ColumnMappings.Add("SiSo", "SiSo");
			bulkCopy.ColumnMappings.Add("TietThucDay", "TietThucDay");
			bulkCopy.ColumnMappings.Add("TietChuNhat", "TietChuNhat");
			bulkCopy.ColumnMappings.Add("HeSoHocKy", "HeSoHocKy");
			bulkCopy.ColumnMappings.Add("HeSoLopDong", "HeSoLopDong");
			bulkCopy.ColumnMappings.Add("TietQuyDoi", "TietQuyDoi");
			bulkCopy.ColumnMappings.Add("DonGia", "DonGia");
			bulkCopy.ColumnMappings.Add("ThanhTien", "ThanhTien");
			bulkCopy.ColumnMappings.Add("LanChot", "LanChot");
			bulkCopy.ColumnMappings.Add("NgayCapNhat", "NgayCapNhat");
			bulkCopy.ColumnMappings.Add("MaHinhThucDaoTao", "MaHinhThucDaoTao");
			bulkCopy.ColumnMappings.Add("DonGiaTrongChuan", "DonGiaTrongChuan");
			bulkCopy.ColumnMappings.Add("DonGiaNgoaiChuan", "DonGiaNgoaiChuan");
			bulkCopy.ColumnMappings.Add("TenCoSo", "TenCoSo");
			bulkCopy.ColumnMappings.Add("HeSoQuyDoiThucHanhSangLyThuyet", "HeSoQuyDoiThucHanhSangLyThuyet");
			bulkCopy.ColumnMappings.Add("HeSoCoSo", "HeSoCoSo");
			bulkCopy.ColumnMappings.Add("SoGioThucGiangTrenLop", "SoGioThucGiangTrenLop");
			bulkCopy.ColumnMappings.Add("SoGioChuanTinhThem", "SoGioChuanTinhThem");
			bulkCopy.ColumnMappings.Add("HeSoChucDanhChuyenMon", "HeSoChucDanhChuyenMon");
			bulkCopy.ColumnMappings.Add("HeSoClcCntn", "HeSoClcCntn");
			bulkCopy.ColumnMappings.Add("HeSoThinhGiangMonChuyenNganh", "HeSoThinhGiangMonChuyenNganh");
			bulkCopy.ColumnMappings.Add("MaNhomMonHoc", "MaNhomMonHoc");
			bulkCopy.ColumnMappings.Add("LoaiLop", "LoaiLop");
			bulkCopy.ColumnMappings.Add("MaBacDaoTao", "MaBacDaoTao");
			bulkCopy.ColumnMappings.Add("MalopHocPhan", "MalopHocPhan");
			bulkCopy.ColumnMappings.Add("MaKhoaHoc", "MaKhoaHoc");
			bulkCopy.ColumnMappings.Add("HeSoTroCap", "HeSoTroCap");
			bulkCopy.ColumnMappings.Add("HeSoNgoaiGio", "HeSoNgoaiGio");
			bulkCopy.ColumnMappings.Add("HeSoLuong", "HeSoLuong");
			bulkCopy.ColumnMappings.Add("HeSoMonMoi", "HeSoMonMoi");
			bulkCopy.ColumnMappings.Add("HeSoNienCheTinChi", "HeSoNienCheTinChi");
			bulkCopy.ColumnMappings.Add("HeSoNgonNgu", "HeSoNgonNgu");
			bulkCopy.ColumnMappings.Add("HeSoBacDaoTao", "HeSoBacDaoTao");
			bulkCopy.ColumnMappings.Add("NgayChiTra", "NgayChiTra");
			bulkCopy.ColumnMappings.Add("XacNhanChiTra", "XacNhanChiTra");
			bulkCopy.ColumnMappings.Add("GhiChu", "GhiChu");
			bulkCopy.ColumnMappings.Add("NguoiCapNhat", "NguoiCapNhat");
			bulkCopy.ColumnMappings.Add("HeSoCongViec", "HeSoCongViec");
			bulkCopy.ColumnMappings.Add("NgonNguGiangDay", "NgonNguGiangDay");
			bulkCopy.ColumnMappings.Add("MaCoSo", "MaCoSo");
			bulkCopy.ColumnMappings.Add("MucThanhToan", "MucThanhToan");
			bulkCopy.ColumnMappings.Add("DotChiTra", "DotChiTra");
			bulkCopy.ColumnMappings.Add("HeSoKhoiNganh", "HeSoKhoiNganh");
			bulkCopy.ColumnMappings.Add("MaCauHinhChotGio", "MaCauHinhChotGio");
			bulkCopy.ColumnMappings.Add("MaKhoaCuaMonHoc", "MaKhoaCuaMonHoc");
			bulkCopy.ColumnMappings.Add("HeSoThamNien", "HeSoThamNien");
			bulkCopy.ColumnMappings.Add("MaLoaiHinhDaoTao", "MaLoaiHinhDaoTao");
			
			foreach(PMS.Entities.KetQuaThanhToanThuLao entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["Id"] = entity.Id;
							
				
					row["MaGiangVien"] = entity.MaGiangVien.HasValue ? (object) entity.MaGiangVien  : System.DBNull.Value;
							
				
					row["NamHoc"] = entity.NamHoc;
							
				
					row["HocKy"] = entity.HocKy;
							
				
					row["MaHocHam"] = entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value;
							
				
					row["MaHocVi"] = entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value;
							
				
					row["MaLoaiGiangVien"] = entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value;
							
				
					row["MaDonVi"] = entity.MaDonVi;
							
				
					row["Loai"] = entity.Loai;
							
				
					row["PhanLoai"] = entity.PhanLoai;
							
				
					row["MaMonHoc"] = entity.MaMonHoc;
							
				
					row["TenMonHoc"] = entity.TenMonHoc;
							
				
					row["LoaiHocPhan"] = entity.LoaiHocPhan;
							
				
					row["Nhom"] = entity.Nhom;
							
				
					row["MaLop"] = entity.MaLop;
							
				
					row["LopClc"] = entity.LopClc.HasValue ? (object) entity.LopClc  : System.DBNull.Value;
							
				
					row["SiSo"] = entity.SiSo.HasValue ? (object) entity.SiSo  : System.DBNull.Value;
							
				
					row["TietThucDay"] = entity.TietThucDay.HasValue ? (object) entity.TietThucDay  : System.DBNull.Value;
							
				
					row["TietChuNhat"] = entity.TietChuNhat.HasValue ? (object) entity.TietChuNhat  : System.DBNull.Value;
							
				
					row["HeSoHocKy"] = entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy  : System.DBNull.Value;
							
				
					row["HeSoLopDong"] = entity.HeSoLopDong.HasValue ? (object) entity.HeSoLopDong  : System.DBNull.Value;
							
				
					row["TietQuyDoi"] = entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi  : System.DBNull.Value;
							
				
					row["DonGia"] = entity.DonGia.HasValue ? (object) entity.DonGia  : System.DBNull.Value;
							
				
					row["ThanhTien"] = entity.ThanhTien.HasValue ? (object) entity.ThanhTien  : System.DBNull.Value;
							
				
					row["LanChot"] = entity.LanChot.HasValue ? (object) entity.LanChot  : System.DBNull.Value;
							
				
					row["NgayCapNhat"] = entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat  : System.DBNull.Value;
							
				
					row["MaHinhThucDaoTao"] = entity.MaHinhThucDaoTao;
							
				
					row["DonGiaTrongChuan"] = entity.DonGiaTrongChuan.HasValue ? (object) entity.DonGiaTrongChuan  : System.DBNull.Value;
							
				
					row["DonGiaNgoaiChuan"] = entity.DonGiaNgoaiChuan.HasValue ? (object) entity.DonGiaNgoaiChuan  : System.DBNull.Value;
							
				
					row["TenCoSo"] = entity.TenCoSo;
							
				
					row["HeSoQuyDoiThucHanhSangLyThuyet"] = entity.HeSoQuyDoiThucHanhSangLyThuyet.HasValue ? (object) entity.HeSoQuyDoiThucHanhSangLyThuyet  : System.DBNull.Value;
							
				
					row["HeSoCoSo"] = entity.HeSoCoSo.HasValue ? (object) entity.HeSoCoSo  : System.DBNull.Value;
							
				
					row["SoGioThucGiangTrenLop"] = entity.SoGioThucGiangTrenLop.HasValue ? (object) entity.SoGioThucGiangTrenLop  : System.DBNull.Value;
							
				
					row["SoGioChuanTinhThem"] = entity.SoGioChuanTinhThem.HasValue ? (object) entity.SoGioChuanTinhThem  : System.DBNull.Value;
							
				
					row["HeSoChucDanhChuyenMon"] = entity.HeSoChucDanhChuyenMon.HasValue ? (object) entity.HeSoChucDanhChuyenMon  : System.DBNull.Value;
							
				
					row["HeSoClcCntn"] = entity.HeSoClcCntn.HasValue ? (object) entity.HeSoClcCntn  : System.DBNull.Value;
							
				
					row["HeSoThinhGiangMonChuyenNganh"] = entity.HeSoThinhGiangMonChuyenNganh.HasValue ? (object) entity.HeSoThinhGiangMonChuyenNganh  : System.DBNull.Value;
							
				
					row["MaNhomMonHoc"] = entity.MaNhomMonHoc;
							
				
					row["LoaiLop"] = entity.LoaiLop;
							
				
					row["MaBacDaoTao"] = entity.MaBacDaoTao;
							
				
					row["MalopHocPhan"] = entity.MalopHocPhan;
							
				
					row["MaKhoaHoc"] = entity.MaKhoaHoc;
							
				
					row["HeSoTroCap"] = entity.HeSoTroCap.HasValue ? (object) entity.HeSoTroCap  : System.DBNull.Value;
							
				
					row["HeSoNgoaiGio"] = entity.HeSoNgoaiGio.HasValue ? (object) entity.HeSoNgoaiGio  : System.DBNull.Value;
							
				
					row["HeSoLuong"] = entity.HeSoLuong.HasValue ? (object) entity.HeSoLuong  : System.DBNull.Value;
							
				
					row["HeSoMonMoi"] = entity.HeSoMonMoi.HasValue ? (object) entity.HeSoMonMoi  : System.DBNull.Value;
							
				
					row["HeSoNienCheTinChi"] = entity.HeSoNienCheTinChi.HasValue ? (object) entity.HeSoNienCheTinChi  : System.DBNull.Value;
							
				
					row["HeSoNgonNgu"] = entity.HeSoNgonNgu.HasValue ? (object) entity.HeSoNgonNgu  : System.DBNull.Value;
							
				
					row["HeSoBacDaoTao"] = entity.HeSoBacDaoTao.HasValue ? (object) entity.HeSoBacDaoTao  : System.DBNull.Value;
							
				
					row["NgayChiTra"] = entity.NgayChiTra;
							
				
					row["XacNhanChiTra"] = entity.XacNhanChiTra.HasValue ? (object) entity.XacNhanChiTra  : System.DBNull.Value;
							
				
					row["GhiChu"] = entity.GhiChu;
							
				
					row["NguoiCapNhat"] = entity.NguoiCapNhat;
							
				
					row["HeSoCongViec"] = entity.HeSoCongViec.HasValue ? (object) entity.HeSoCongViec  : System.DBNull.Value;
							
				
					row["NgonNguGiangDay"] = entity.NgonNguGiangDay;
							
				
					row["MaCoSo"] = entity.MaCoSo;
							
				
					row["MucThanhToan"] = entity.MucThanhToan.HasValue ? (object) entity.MucThanhToan  : System.DBNull.Value;
							
				
					row["DotChiTra"] = entity.DotChiTra;
							
				
					row["HeSoKhoiNganh"] = entity.HeSoKhoiNganh.HasValue ? (object) entity.HeSoKhoiNganh  : System.DBNull.Value;
							
				
					row["MaCauHinhChotGio"] = entity.MaCauHinhChotGio.HasValue ? (object) entity.MaCauHinhChotGio  : System.DBNull.Value;
							
				
					row["MaKhoaCuaMonHoc"] = entity.MaKhoaCuaMonHoc;
							
				
					row["HeSoThamNien"] = entity.HeSoThamNien.HasValue ? (object) entity.HeSoThamNien  : System.DBNull.Value;
							
				
					row["MaLoaiHinhDaoTao"] = entity.MaLoaiHinhDaoTao;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.KetQuaThanhToanThuLao entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.KetQuaThanhToanThuLao object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.KetQuaThanhToanThuLao object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.KetQuaThanhToanThuLao object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.KetQuaThanhToanThuLao entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KetQuaThanhToanThuLao_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@Id", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32, (entity.MaGiangVien.HasValue ? (object) entity.MaGiangVien  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, entity.MaDonVi );
            database.AddInParameter(commandWrapper, "@Loai", DbType.String, entity.Loai );
            database.AddInParameter(commandWrapper, "@PhanLoai", DbType.String, entity.PhanLoai );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
            database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, entity.LoaiHocPhan );
            database.AddInParameter(commandWrapper, "@Nhom", DbType.String, entity.Nhom );
            database.AddInParameter(commandWrapper, "@MaLop", DbType.String, entity.MaLop );
			database.AddInParameter(commandWrapper, "@LopClc", DbType.Boolean, (entity.LopClc.HasValue ? (object) entity.LopClc  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32, (entity.SiSo.HasValue ? (object) entity.SiSo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TietThucDay", DbType.Decimal, (entity.TietThucDay.HasValue ? (object) entity.TietThucDay  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TietChuNhat", DbType.Decimal, (entity.TietChuNhat.HasValue ? (object) entity.TietChuNhat  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, (entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoLopDong", DbType.Decimal, (entity.HeSoLopDong.HasValue ? (object) entity.HeSoLopDong  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, (entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, (entity.DonGia.HasValue ? (object) entity.DonGia  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ThanhTien", DbType.Decimal, (entity.ThanhTien.HasValue ? (object) entity.ThanhTien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32, (entity.LanChot.HasValue ? (object) entity.LanChot  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, (entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, entity.MaHinhThucDaoTao );
			database.AddInParameter(commandWrapper, "@DonGiaTrongChuan", DbType.Decimal, (entity.DonGiaTrongChuan.HasValue ? (object) entity.DonGiaTrongChuan  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DonGiaNgoaiChuan", DbType.Decimal, (entity.DonGiaNgoaiChuan.HasValue ? (object) entity.DonGiaNgoaiChuan  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@TenCoSo", DbType.String, entity.TenCoSo );
			database.AddInParameter(commandWrapper, "@HeSoQuyDoiThucHanhSangLyThuyet", DbType.Decimal, (entity.HeSoQuyDoiThucHanhSangLyThuyet.HasValue ? (object) entity.HeSoQuyDoiThucHanhSangLyThuyet  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoCoSo", DbType.Decimal, (entity.HeSoCoSo.HasValue ? (object) entity.HeSoCoSo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoGioThucGiangTrenLop", DbType.Decimal, (entity.SoGioThucGiangTrenLop.HasValue ? (object) entity.SoGioThucGiangTrenLop  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoGioChuanTinhThem", DbType.Decimal, (entity.SoGioChuanTinhThem.HasValue ? (object) entity.SoGioChuanTinhThem  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoChucDanhChuyenMon", DbType.Decimal, (entity.HeSoChucDanhChuyenMon.HasValue ? (object) entity.HeSoChucDanhChuyenMon  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoClcCntn", DbType.Decimal, (entity.HeSoClcCntn.HasValue ? (object) entity.HeSoClcCntn  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoThinhGiangMonChuyenNganh", DbType.Decimal, (entity.HeSoThinhGiangMonChuyenNganh.HasValue ? (object) entity.HeSoThinhGiangMonChuyenNganh  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, entity.MaNhomMonHoc );
            database.AddInParameter(commandWrapper, "@LoaiLop", DbType.AnsiString, entity.LoaiLop );
            database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, entity.MaBacDaoTao );
            database.AddInParameter(commandWrapper, "@MalopHocPhan", DbType.AnsiString, entity.MalopHocPhan );
            database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, entity.MaKhoaHoc );
			database.AddInParameter(commandWrapper, "@HeSoTroCap", DbType.Decimal, (entity.HeSoTroCap.HasValue ? (object) entity.HeSoTroCap  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoNgoaiGio", DbType.Decimal, (entity.HeSoNgoaiGio.HasValue ? (object) entity.HeSoNgoaiGio  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoLuong", DbType.Decimal, (entity.HeSoLuong.HasValue ? (object) entity.HeSoLuong  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoMonMoi", DbType.Decimal, (entity.HeSoMonMoi.HasValue ? (object) entity.HeSoMonMoi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoNienCheTinChi", DbType.Decimal, (entity.HeSoNienCheTinChi.HasValue ? (object) entity.HeSoNienCheTinChi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoNgonNgu", DbType.Decimal, (entity.HeSoNgonNgu.HasValue ? (object) entity.HeSoNgonNgu  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoBacDaoTao", DbType.Decimal, (entity.HeSoBacDaoTao.HasValue ? (object) entity.HeSoBacDaoTao  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NgayChiTra", DbType.AnsiString, entity.NgayChiTra );
			database.AddInParameter(commandWrapper, "@XacNhanChiTra", DbType.Boolean, (entity.XacNhanChiTra.HasValue ? (object) entity.XacNhanChiTra  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, entity.GhiChu );
            database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.String, entity.NguoiCapNhat );
			database.AddInParameter(commandWrapper, "@HeSoCongViec", DbType.Decimal, (entity.HeSoCongViec.HasValue ? (object) entity.HeSoCongViec  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, entity.NgonNguGiangDay );
            database.AddInParameter(commandWrapper, "@MaCoSo", DbType.AnsiString, entity.MaCoSo );
			database.AddInParameter(commandWrapper, "@MucThanhToan", DbType.Decimal, (entity.MucThanhToan.HasValue ? (object) entity.MucThanhToan  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@DotChiTra", DbType.AnsiString, entity.DotChiTra );
			database.AddInParameter(commandWrapper, "@HeSoKhoiNganh", DbType.Decimal, (entity.HeSoKhoiNganh.HasValue ? (object) entity.HeSoKhoiNganh  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32, (entity.MaCauHinhChotGio.HasValue ? (object) entity.MaCauHinhChotGio  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaKhoaCuaMonHoc", DbType.AnsiString, entity.MaKhoaCuaMonHoc );
			database.AddInParameter(commandWrapper, "@HeSoThamNien", DbType.Decimal, (entity.HeSoThamNien.HasValue ? (object) entity.HeSoThamNien  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaLoaiHinhDaoTao", DbType.AnsiString, entity.MaLoaiHinhDaoTao );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _id = database.GetParameterValue(commandWrapper, "@Id");
			entity.Id = (System.Int32)_id;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.KetQuaThanhToanThuLao object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.KetQuaThanhToanThuLao object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.KetQuaThanhToanThuLao entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KetQuaThanhToanThuLao_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@Id", DbType.Int32, entity.Id );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32, (entity.MaGiangVien.HasValue ? (object) entity.MaGiangVien : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, entity.MaDonVi );
            database.AddInParameter(commandWrapper, "@Loai", DbType.String, entity.Loai );
            database.AddInParameter(commandWrapper, "@PhanLoai", DbType.String, entity.PhanLoai );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
            database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, entity.LoaiHocPhan );
            database.AddInParameter(commandWrapper, "@Nhom", DbType.String, entity.Nhom );
            database.AddInParameter(commandWrapper, "@MaLop", DbType.String, entity.MaLop );
			database.AddInParameter(commandWrapper, "@LopClc", DbType.Boolean, (entity.LopClc.HasValue ? (object) entity.LopClc : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32, (entity.SiSo.HasValue ? (object) entity.SiSo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TietThucDay", DbType.Decimal, (entity.TietThucDay.HasValue ? (object) entity.TietThucDay : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TietChuNhat", DbType.Decimal, (entity.TietChuNhat.HasValue ? (object) entity.TietChuNhat : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, (entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoLopDong", DbType.Decimal, (entity.HeSoLopDong.HasValue ? (object) entity.HeSoLopDong : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, (entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, (entity.DonGia.HasValue ? (object) entity.DonGia : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ThanhTien", DbType.Decimal, (entity.ThanhTien.HasValue ? (object) entity.ThanhTien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32, (entity.LanChot.HasValue ? (object) entity.LanChot : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, (entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, entity.MaHinhThucDaoTao );
			database.AddInParameter(commandWrapper, "@DonGiaTrongChuan", DbType.Decimal, (entity.DonGiaTrongChuan.HasValue ? (object) entity.DonGiaTrongChuan : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DonGiaNgoaiChuan", DbType.Decimal, (entity.DonGiaNgoaiChuan.HasValue ? (object) entity.DonGiaNgoaiChuan : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@TenCoSo", DbType.String, entity.TenCoSo );
			database.AddInParameter(commandWrapper, "@HeSoQuyDoiThucHanhSangLyThuyet", DbType.Decimal, (entity.HeSoQuyDoiThucHanhSangLyThuyet.HasValue ? (object) entity.HeSoQuyDoiThucHanhSangLyThuyet : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoCoSo", DbType.Decimal, (entity.HeSoCoSo.HasValue ? (object) entity.HeSoCoSo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoGioThucGiangTrenLop", DbType.Decimal, (entity.SoGioThucGiangTrenLop.HasValue ? (object) entity.SoGioThucGiangTrenLop : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoGioChuanTinhThem", DbType.Decimal, (entity.SoGioChuanTinhThem.HasValue ? (object) entity.SoGioChuanTinhThem : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoChucDanhChuyenMon", DbType.Decimal, (entity.HeSoChucDanhChuyenMon.HasValue ? (object) entity.HeSoChucDanhChuyenMon : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoClcCntn", DbType.Decimal, (entity.HeSoClcCntn.HasValue ? (object) entity.HeSoClcCntn : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoThinhGiangMonChuyenNganh", DbType.Decimal, (entity.HeSoThinhGiangMonChuyenNganh.HasValue ? (object) entity.HeSoThinhGiangMonChuyenNganh : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, entity.MaNhomMonHoc );
            database.AddInParameter(commandWrapper, "@LoaiLop", DbType.AnsiString, entity.LoaiLop );
            database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, entity.MaBacDaoTao );
            database.AddInParameter(commandWrapper, "@MalopHocPhan", DbType.AnsiString, entity.MalopHocPhan );
            database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, entity.MaKhoaHoc );
			database.AddInParameter(commandWrapper, "@HeSoTroCap", DbType.Decimal, (entity.HeSoTroCap.HasValue ? (object) entity.HeSoTroCap : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoNgoaiGio", DbType.Decimal, (entity.HeSoNgoaiGio.HasValue ? (object) entity.HeSoNgoaiGio : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoLuong", DbType.Decimal, (entity.HeSoLuong.HasValue ? (object) entity.HeSoLuong : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoMonMoi", DbType.Decimal, (entity.HeSoMonMoi.HasValue ? (object) entity.HeSoMonMoi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoNienCheTinChi", DbType.Decimal, (entity.HeSoNienCheTinChi.HasValue ? (object) entity.HeSoNienCheTinChi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoNgonNgu", DbType.Decimal, (entity.HeSoNgonNgu.HasValue ? (object) entity.HeSoNgonNgu : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoBacDaoTao", DbType.Decimal, (entity.HeSoBacDaoTao.HasValue ? (object) entity.HeSoBacDaoTao : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NgayChiTra", DbType.AnsiString, entity.NgayChiTra );
			database.AddInParameter(commandWrapper, "@XacNhanChiTra", DbType.Boolean, (entity.XacNhanChiTra.HasValue ? (object) entity.XacNhanChiTra : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, entity.GhiChu );
            database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.String, entity.NguoiCapNhat );
			database.AddInParameter(commandWrapper, "@HeSoCongViec", DbType.Decimal, (entity.HeSoCongViec.HasValue ? (object) entity.HeSoCongViec : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NgonNguGiangDay", DbType.AnsiString, entity.NgonNguGiangDay );
            database.AddInParameter(commandWrapper, "@MaCoSo", DbType.AnsiString, entity.MaCoSo );
			database.AddInParameter(commandWrapper, "@MucThanhToan", DbType.Decimal, (entity.MucThanhToan.HasValue ? (object) entity.MucThanhToan : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@DotChiTra", DbType.AnsiString, entity.DotChiTra );
			database.AddInParameter(commandWrapper, "@HeSoKhoiNganh", DbType.Decimal, (entity.HeSoKhoiNganh.HasValue ? (object) entity.HeSoKhoiNganh : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32, (entity.MaCauHinhChotGio.HasValue ? (object) entity.MaCauHinhChotGio : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaKhoaCuaMonHoc", DbType.AnsiString, entity.MaKhoaCuaMonHoc );
			database.AddInParameter(commandWrapper, "@HeSoThamNien", DbType.Decimal, (entity.HeSoThamNien.HasValue ? (object) entity.HeSoThamNien : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaLoaiHinhDaoTao", DbType.AnsiString, entity.MaLoaiHinhDaoTao );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region cust_KetQuaThanhToanThuLao_BangKeGioGiangTheoNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangKeGioGiangTheoNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangKeGioGiangTheoNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangKeGioGiangTheoNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangKeGioGiangTheoNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangKeGioGiangTheoNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_HuyChotThuLao
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_HuyChotThuLao' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void HuyChotThuLao(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_HuyChotThuLao", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HuyChotThuLao", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HuyChotThuLao", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_web
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_web' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThuLaoTheoNam_web(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String maQuanLyGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_web", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@MaQuanLyGiangVien", DbType.AnsiString,  maQuanLyGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThuLaoTheoNam_web", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThuLaoTheoNam_web", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader TongHopKetQuaThanhToan(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TongHopKetQuaThanhToan", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TongHopKetQuaThanhToan", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_LuuChiTra
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_LuuChiTra' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuChiTra(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_LuuChiTra", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuChiTra", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuChiTra", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangTongHopGioGiangCacKhoaTheoNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangCacKhoaTheoNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangTongHopGioGiangCacKhoaTheoNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String donVi, System.String loaiGiangVien, System.String loaiHinhDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangTongHopGioGiangCacKhoaTheoNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangTongHopGioGiangCacKhoaTheoNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangTongHopGioGiangCacKhoaTheoNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ChotThanhToanKhoaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ChotThanhToanKhoaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ChotThanhToanKhoaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String khoaDonVi, System.Int32 lanChot, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ChotThanhToanKhoaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ChotThanhToanKhoaDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ChotThanhToanKhoaDonVi", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_Reportweb
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_Reportweb' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetThuLaoTheoNam_Reportweb(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String maQuanLyGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_Reportweb", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@MaQuanLyGiangVien", DbType.AnsiString,  maQuanLyGiangVien );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThuLaoTheoNam_Reportweb", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThuLaoTheoNam_Reportweb", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoLanChot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoLanChot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetSoLanChot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, ref System.Int32 ketQua)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoLanChot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@KetQua", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, ketQua);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoLanChot", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoLanChot", (IEntity)null));

			ketQua =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@KetQua"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_LuuThueTncn
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_LuuThueTncn' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="loaiThue"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuThueTncn(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String loaiThue, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_LuuThueTncn", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
			database.AddInParameter(commandWrapper, "@LoaiThue", DbType.String,  loaiThue );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuThueTncn", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuThueTncn", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHocHocKyLanChot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHocHocKyLanChot' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByMaGiangVienNamHocHocKyLanChot(TransactionManager transactionManager, int start, int pageLength , System.Int32 maGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHocHocKyLanChot", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaGiangVienNamHocHocKyLanChot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaGiangVienNamHocHocKyLanChot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung_Bk
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung_Bk' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetDataVuotGioBoSung_Bk(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung_Bk", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.String,  namHoc );
			database.AddInParameter(commandWrapper, "@LanChotHk01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHk02", DbType.Int32,  lanChotHk02 );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.String,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetDataVuotGioBoSung_Bk", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetDataVuotGioBoSung_Bk", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ChotThanhToan2
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ChotThanhToan2' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ChotThanhToan2(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ChotThanhToan2", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ChotThanhToan2", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ChotThanhToan2", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoDot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangKeThanhToanTheoDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@DotThanhToan", DbType.AnsiString,  dotThanhToan );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangKeThanhToanTheoDot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangKeThanhToanTheoDot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetBangNamVuotGioBoSung
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetBangNamVuotGioBoSung' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetBangNamVuotGioBoSung(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetBangNamVuotGioBoSung", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.String,  namHoc );
			database.AddInParameter(commandWrapper, "@LanChotHk01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHk02", DbType.Int32,  lanChotHk02 );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.String,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBangNamVuotGioBoSung", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetBangNamVuotGioBoSung", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GiangVienXemTrenWeb_Uel
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GiangVienXemTrenWeb_Uel' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GiangVienXemTrenWeb_Uel(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GiangVienXemTrenWeb_Uel", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GiangVienXemTrenWeb_Uel", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GiangVienXemTrenWeb_Uel", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_LuuGiangVienDaChiTra
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_LuuGiangVienDaChiTra' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuGiangVienDaChiTra(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_LuuGiangVienDaChiTra", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuGiangVienDaChiTra", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuGiangVienDaChiTra", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetNhiemVuNghienCuuKhoaHoc
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetNhiemVuNghienCuuKhoaHoc' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetNhiemVuNghienCuuKhoaHoc(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetNhiemVuNghienCuuKhoaHoc", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetNhiemVuNghienCuuKhoaHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetNhiemVuNghienCuuKhoaHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetDataVuotGioBoSung(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.String,  namHoc );
			database.AddInParameter(commandWrapper, "@LanChotHk01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHk02", DbType.Int32,  lanChotHk02 );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.String,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetDataVuotGioBoSung", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetDataVuotGioBoSung", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangThanhToanGioGiangCoHuuCaNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangThanhToanGioGiangCoHuuCaNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangThanhToanGioGiangCoHuuCaNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String donVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangThanhToanGioGiangCoHuuCaNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangThanhToanGioGiangCoHuuCaNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangThanhToanGioGiangCoHuuCaNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetThongTinGiangVienTheoNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetThongTinGiangVienTheoNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThongTinGiangVienTheoNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetThongTinGiangVienTheoNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThongTinGiangVienTheoNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThongTinGiangVienTheoNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThanhToanTienGiangClc
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThanhToanTienGiangClc' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThanhToanTienGiangClc(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String khoaBoMon, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThanhToanTienGiangClc", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@KhoaBoMon", DbType.AnsiString,  khoaBoMon );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToanTienGiangClc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToanTienGiangClc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_DanhSachGiangVienDuocSuDungTroGiang
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_DanhSachGiangVienDuocSuDungTroGiang' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader DanhSachGiangVienDuocSuDungTroGiang(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_DanhSachGiangVienDuocSuDungTroGiang", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DanhSachGiangVienDuocSuDungTroGiang", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DanhSachGiangVienDuocSuDungTroGiang", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThanhToanThuLaoGiangDayTheoKhoa
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoGiangDayTheoKhoa' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThanhToanThuLaoGiangDayTheoKhoa(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.String maLoaiGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThanhToanThuLaoGiangDayTheoKhoa", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.AnsiString,  maLoaiGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToanThuLaoGiangDayTheoKhoa", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToanThuLaoGiangDayTheoKhoa", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoTietRaDe
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoTietRaDe' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetSoTietRaDe(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoTietRaDe", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@MaKhoaToChuc", DbType.AnsiString,  maKhoaToChuc );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanThi", DbType.Int32,  lanThi );
			database.AddInParameter(commandWrapper, "@HeDaoTao", DbType.AnsiString,  heDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietRaDe", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietRaDe", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetNoiDungGiamTruGioChuan
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetNoiDungGiamTruGioChuan' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetNoiDungGiamTruGioChuan(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetNoiDungGiamTruGioChuan", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.String,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.String,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetNoiDungGiamTruGioChuan", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetNoiDungGiamTruGioChuan", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeChiTiet_Cdgtvt
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeChiTiet_Cdgtvt' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeChiTiet_Cdgtvt(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeChiTiet_Cdgtvt", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeChiTiet_Cdgtvt", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeChiTiet_Cdgtvt", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetNgayChiTra
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetNgayChiTra' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetNgayChiTra(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetNgayChiTra", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetNgayChiTra", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetNgayChiTra", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_LuuTietNoTon
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_LuuTietNoTon' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuTietNoTon(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_LuuTietNoTon", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuTietNoTon", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuTietNoTon", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoDot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeGioGiangTheoDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@DotThanhToan", DbType.AnsiString,  dotThanhToan );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeGioGiangTheoDot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeGioGiangTheoDot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienLuongDayThemGio_Cdgtvt
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienLuongDayThemGio_Cdgtvt' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienLuongDayThemGio_Cdgtvt(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienLuongDayThemGio_Cdgtvt", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienLuongDayThemGio_Cdgtvt", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienLuongDayThemGio_Cdgtvt", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_NoGioChuanTheoHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_NoGioChuanTheoHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader NoGioChuanTheoHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_NoGioChuanTheoHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NoGioChuanTheoHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NoGioChuanTheoHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_KiemTraDaChiTra
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_KiemTraDaChiTra' stored procedure. 
		/// </summary>	
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void KiemTraDaChiTra(TransactionManager transactionManager, int start, int pageLength , System.Int32 id, ref System.String reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_KiemTraDaChiTra", true);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32,  id );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.String, 500, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KiemTraDaChiTra", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KiemTraDaChiTra", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_SoSanhHaiLanChot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_SoSanhHaiLanChot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChota"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotb"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader SoSanhHaiLanChot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChota, System.Int32 lanChotb)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_SoSanhHaiLanChot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChotA", DbType.Int32,  lanChota );
			database.AddInParameter(commandWrapper, "@LanChotB", DbType.Int32,  lanChotb );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "SoSanhHaiLanChot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "SoSanhHaiLanChot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetCBKGHDDHCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetCBKGHDDHCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangLyThuyetCBKGHDDHCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetCBKGHDDHCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangLyThuyetCBKGHDDHCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangLyThuyetCBKGHDDHCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToanTapSu
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToanTapSu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader TongHopKetQuaThanhToanTapSu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToanTapSu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TongHopKetQuaThanhToanTapSu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TongHopKetQuaThanhToanTapSu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhGiangVienThinhGiangCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangThucHanhGiangVienThinhGiangCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhGiangVienThinhGiangCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangThucHanhGiangVienThinhGiangCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangThucHanhGiangVienThinhGiangCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_XacNhanChiTra
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_XacNhanChiTra' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void XacNhanChiTra(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_XacNhanChiTra", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "XacNhanChiTra", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "XacNhanChiTra", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.String heDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@HeDaoTao", DbType.AnsiString,  heDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoTietChuyeNoTon
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoTietChuyeNoTon' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetSoTietChuyeNoTon(TransactionManager transactionManager, int start, int pageLength , System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoTietChuyeNoTon", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietChuyeNoTon", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietChuyeNoTon", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhCBKGHDDHCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhCBKGHDDHCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangThucHanhCBKGHDDHCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhCBKGHDDHCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangThucHanhCBKGHDDHCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangThucHanhCBKGHDDHCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThanhToanThuLaoThinhGiang
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoThinhGiang' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThanhToanThuLaoThinhGiang(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThanhToanThuLaoThinhGiang", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.String,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToanThuLaoThinhGiang", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToanThuLaoThinhGiang", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnCBKGHDDHCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnCBKGHDDHCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangTttnCBKGHDDHCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnCBKGHDDHCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangTttnCBKGHDDHCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangTttnCBKGHDDHCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThuLaoTrenWebIuh
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThuLaoTrenWebIuh' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="professorId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThuLaoTrenWebIuh(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String professorId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThuLaoTrenWebIuh", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@ProfessorId", DbType.AnsiString,  professorId );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThuLaoTrenWebIuh", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThuLaoTrenWebIuh", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_DuToanKinhPhiGiangDayVhu
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_DuToanKinhPhiGiangDayVhu' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader DuToanKinhPhiGiangDayVhu(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.String maLoaiGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_DuToanKinhPhiGiangDayVhu", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.AnsiString,  maLoaiGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DuToanKinhPhiGiangDayVhu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DuToanKinhPhiGiangDayVhu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetLuoiVuotGioBoSung(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.String,  namHoc );
			database.AddInParameter(commandWrapper, "@LanChotHk01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHk02", DbType.Int32,  lanChotHk02 );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.String,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetLuoiVuotGioBoSung", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetLuoiVuotGioBoSung", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_KiemTraTinhTrangKeToanChiTra
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_KiemTraTinhTrangKeToanChiTra' stored procedure. 
		/// </summary>	
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void KiemTraTinhTrangKeToanChiTra(TransactionManager transactionManager, int start, int pageLength , System.Int32 id, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_KiemTraTinhTrangKeToanChiTra", true);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32,  id );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KiemTraTinhTrangKeToanChiTra", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KiemTraTinhTrangKeToanChiTra", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhHopDongDaiHanCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhHopDongDaiHanCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangThucHanhHopDongDaiHanCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhHopDongDaiHanCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangThucHanhHopDongDaiHanCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangThucHanhHopDongDaiHanCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String bacDaoTao, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString,  bacDaoTao );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTongHop_Cdgtvt
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTongHop_Cdgtvt' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTongHop_Cdgtvt(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTongHop_Cdgtvt", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTongHop_Cdgtvt", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTongHop_Cdgtvt", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanCaNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanCaNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangKeThanhToanCaNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String donVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangKeThanhToanCaNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangKeThanhToanCaNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangKeThanhToanCaNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoKhoa_Cdgtvt
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoKhoa_Cdgtvt' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTongHopTheoKhoa_Cdgtvt(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String maDonVi, System.Int32 maLoaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoKhoa_Cdgtvt", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32,  maLoaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTongHopTheoKhoa_Cdgtvt", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTongHopTheoKhoa_Cdgtvt", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanTienRaDeCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTienRaDeCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangKeThanhToanTienRaDeCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String khoaHoc, System.String bacDaoTao, System.String khoaBoMon, System.Int32 maLoaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangKeThanhToanTienRaDeCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@KhoaHoc", DbType.AnsiString,  khoaHoc );
			database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString,  bacDaoTao );
			database.AddInParameter(commandWrapper, "@KhoaBoMon", DbType.AnsiString,  khoaBoMon );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32,  maLoaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangKeThanhToanTienRaDeCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangKeThanhToanTienRaDeCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetCongTacKhac
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetCongTacKhac' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetCongTacKhac(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetCongTacKhac", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetCongTacKhac", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetCongTacKhac", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeChiTienThuLaoGiangDay
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeChiTienThuLaoGiangDay' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeChiTienThuLaoGiangDay(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeChiTienThuLaoGiangDay", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeChiTienThuLaoGiangDay", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeChiTienThuLaoGiangDay", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoTietNhapDiem
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoTietNhapDiem' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetSoTietNhapDiem(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoTietNhapDiem", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@MaKhoaToChuc", DbType.AnsiString,  maKhoaToChuc );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanThi", DbType.Int32,  lanThi );
			database.AddInParameter(commandWrapper, "@HeDaoTao", DbType.AnsiString,  heDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietNhapDiem", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietNhapDiem", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ChotThanhToan
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ChotThanhToan' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ChotThanhToan(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ChotThanhToan", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ChotThanhToan", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ChotThanhToan", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_ReportWeb
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_ReportWeb' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThuLaoTamUng_ReportWeb(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maQuanLyGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_ReportWeb", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaQuanLyGiangVien", DbType.AnsiString,  maQuanLyGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThuLaoTamUng_ReportWeb", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThuLaoTamUng_ReportWeb", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang_Bk
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang_Bk' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeThanhToanTienGiang_Bk(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang_Bk", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeThanhToanTienGiang_Bk", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeThanhToanTienGiang_Bk", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="giangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String giangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@GiangVien", DbType.String,  giangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThanhToanTamUngDot1
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThanhToanTamUngDot1' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThanhToanTamUngDot1(TransactionManager transactionManager, int start, int pageLength , System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThanhToanTamUngDot1", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToanTamUngDot1", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToanTamUngDot1", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ChiTietGioGiangIuh
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ChiTietGioGiangIuh' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ChiTietGioGiangIuh(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ChiTietGioGiangIuh", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ChiTietGioGiangIuh", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ChiTietGioGiangIuh", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCHopDongDaiHanCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCHopDongDaiHanCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangGDTCHopDongDaiHanCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCHopDongDaiHanCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangGDTCHopDongDaiHanCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangGDTCHopDongDaiHanCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung_Bk
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung_Bk' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetLuoiVuotGioBoSung_Bk(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung_Bk", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.String,  namHoc );
			database.AddInParameter(commandWrapper, "@LanChotHk01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHk02", DbType.Int32,  lanChotHk02 );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.String,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetLuoiVuotGioBoSung_Bk", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetLuoiVuotGioBoSung_Bk", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_InBangKeGioGiangTheoNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_InBangKeGioGiangTheoNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader InBangKeGioGiangTheoNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_InBangKeGioGiangTheoNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.String,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.String,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.String,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "InBangKeGioGiangTheoNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "InBangKeGioGiangTheoNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoTietDoDiem
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoTietDoDiem' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetSoTietDoDiem(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoTietDoDiem", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@MaKhoaToChuc", DbType.AnsiString,  maKhoaToChuc );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanThi", DbType.Int32,  lanThi );
			database.AddInParameter(commandWrapper, "@HeDaoTao", DbType.AnsiString,  heDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietDoDiem", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietDoDiem", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeLopHocPhanKhongRaiLich
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeLopHocPhanKhongRaiLich' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeLopHocPhanKhongRaiLich(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeLopHocPhanKhongRaiLich", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeLopHocPhanKhongRaiLich", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeLopHocPhanKhongRaiLich", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoTietToChucThi
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoTietToChucThi' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetSoTietToChucThi(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoTietToChucThi", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@MaKhoaToChuc", DbType.AnsiString,  maKhoaToChuc );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanThi", DbType.Int32,  lanThi );
			database.AddInParameter(commandWrapper, "@HeDaoTao", DbType.AnsiString,  heDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietToChucThi", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietToChucThi", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangTheoDot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangTheoDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiThongKe"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeChiTietGioGiangTheoDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao, System.Int32 loaiThongKe)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangTheoDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@DotThanhToan", DbType.AnsiString,  dotThanhToan );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
			database.AddInParameter(commandWrapper, "@LoaiThongKe", DbType.Int32,  loaiThongKe );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeChiTietGioGiangTheoDot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeChiTietGioGiangTheoDot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThuLaoTrenWeb_Dlu
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThuLaoTrenWeb_Dlu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.Int32</c> instance.</param>
		/// <param name="professorId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThuLaoTrenWeb_Dlu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 dotThanhToan, System.String professorId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThuLaoTrenWeb_Dlu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DotThanhToan", DbType.Int32,  dotThanhToan );
			database.AddInParameter(commandWrapper, "@ProfessorId", DbType.AnsiString,  professorId );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThuLaoTrenWeb_Dlu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThuLaoTrenWeb_Dlu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_HuyChotThuLaoTheoDot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_HuyChotThuLaoTheoDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void HuyChotThuLaoTheoDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.Int32 lanChot, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_HuyChotThuLaoTheoDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HuyChotThuLaoTheoDot", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HuyChotThuLaoTheoDot", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThanhToanThuLaoDot2
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoDot2' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThanhToanThuLaoDot2(TransactionManager transactionManager, int start, int pageLength , System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThanhToanThuLaoDot2", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToanThuLaoDot2", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToanThuLaoDot2", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_HuyChotThuLaoKhoaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_HuyChotThuLaoKhoaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void HuyChotThuLaoKhoaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String khoaDonVi, System.Int32 lanChot, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_HuyChotThuLaoKhoaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HuyChotThuLaoKhoaDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HuyChotThuLaoKhoaDonVi", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThanhToanGioVuotDinhMucVhu
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThanhToanGioVuotDinhMucVhu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThanhToanGioVuotDinhMucVhu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThanhToanGioVuotDinhMucVhu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@LanChotHk01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHk02", DbType.Int32,  lanChotHk02 );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToanGioVuotDinhMucVhu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToanGioVuotDinhMucVhu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_Import
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_Import' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Import(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_Import", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Import", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Import", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThanhToanPhuCapGdtc
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThanhToanPhuCapGdtc' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThanhToanPhuCapGdtc(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThanhToanPhuCapGdtc", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThanhToanPhuCapGdtc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThanhToanPhuCapGdtc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangTongHopGioGiangToanTruongTheoNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangToanTruongTheoNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangTongHopGioGiangToanTruongTheoNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String loaiGiangVien, System.String loaiHinhDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangTongHopGioGiangToanTruongTheoNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangTongHopGioGiangToanTruongTheoNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangTongHopGioGiangToanTruongTheoNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCCBKGHDDHCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCCBKGHDDHCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangGDTCCBKGHDDHCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCCBKGHDDHCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangGDTCCBKGHDDHCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangGDTCCBKGHDDHCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHoc
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHoc' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="loaiKhoiLuong"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk03"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByMaGiangVienNamHoc(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, System.String loaiKhoiLuong, System.String lanChotHk01, System.String lanChotHk02, System.String lanChotHk03)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHoc", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@LoaiKhoiLuong", DbType.String,  loaiKhoiLuong );
			database.AddInParameter(commandWrapper, "@LanChotHK01", DbType.AnsiString,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHK02", DbType.AnsiString,  lanChotHk02 );
			database.AddInParameter(commandWrapper, "@LanChotHK03", DbType.AnsiString,  lanChotHk03 );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaGiangVienNamHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaGiangVienNamHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoTietCoiThi
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoTietCoiThi' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetSoTietCoiThi(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoTietCoiThi", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@MaKhoaToChuc", DbType.AnsiString,  maKhoaToChuc );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanThi", DbType.Int32,  lanThi );
			database.AddInParameter(commandWrapper, "@HeDaoTao", DbType.AnsiString,  heDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietCoiThi", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietCoiThi", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetHopDongDaiHanCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetHopDongDaiHanCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangLyThuyetHopDongDaiHanCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetHopDongDaiHanCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangLyThuyetHopDongDaiHanCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangLyThuyetHopDongDaiHanCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_KeToanXacNhanThanhToan
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_KeToanXacNhanThanhToan' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="dotChiTra"> A <c>System.String</c> instance.</param>
		/// <param name="ngayChiTra"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void KeToanXacNhanThanhToan(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String dotChiTra, System.String ngayChiTra, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_KeToanXacNhanThanhToan", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@DotChiTra", DbType.AnsiString,  dotChiTra );
			database.AddInParameter(commandWrapper, "@NgayChiTra", DbType.AnsiString,  ngayChiTra );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KeToanXacNhanThanhToan", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KeToanXacNhanThanhToan", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_Web
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_Web' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThuLaoTamUng_Web(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maQuanLyGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_Web", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaQuanLyGiangVien", DbType.AnsiString,  maQuanLyGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThuLaoTamUng_Web", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThuLaoTamUng_Web", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTongHop_Act
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTongHop_Act' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTongHop_Act(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTongHop_Act", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTongHop_Act", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTongHop_Act", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_KetQuaGiangDayTheoNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_KetQuaGiangDayTheoNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk03"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader KetQuaGiangDayTheoNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.Int32 lanChotHk03, System.String khoaDonVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_KetQuaGiangDayTheoNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@LanChotHk01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHk02", DbType.Int32,  lanChotHk02 );
			database.AddInParameter(commandWrapper, "@LanChotHk03", DbType.Int32,  lanChotHk03 );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KetQuaGiangDayTheoNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KetQuaGiangDayTheoNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCGiangVienThinhGiangCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangGDTCGiangVienThinhGiangCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCGiangVienThinhGiangCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangGDTCGiangVienThinhGiangCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangGDTCGiangVienThinhGiangCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeSoLuongGiangVienTheoHe
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeSoLuongGiangVienTheoHe' stored procedure. 
		/// </summary>	
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeSoLuongGiangVienTheoHe(TransactionManager transactionManager, int start, int pageLength , System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeSoLuongGiangVienTheoHe", true);
			
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeSoLuongGiangVienTheoHe", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeSoLuongGiangVienTheoHe", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoTietChamBai
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoTietChamBai' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetSoTietChamBai(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoTietChamBai", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@MaKhoaToChuc", DbType.AnsiString,  maKhoaToChuc );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanThi", DbType.Int32,  lanThi );
			database.AddInParameter(commandWrapper, "@HeDaoTao", DbType.AnsiString,  heDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietChamBai", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietChamBai", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String bacDaoTao, System.String donVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString,  bacDaoTao );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetKhoiLuongChiTietHbu
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetKhoiLuongChiTietHbu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="listMaGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetKhoiLuongChiTietHbu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String listMaGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetKhoiLuongChiTietHbu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@ListMaGiangVien", DbType.String,  listMaGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetKhoiLuongChiTietHbu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetKhoiLuongChiTietHbu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangTongHopGioGiangTheoKhoa
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangTheoKhoa' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangTongHopGioGiangTheoKhoa(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangTongHopGioGiangTheoKhoa", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangTongHopGioGiangTheoKhoa", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangTongHopGioGiangTheoKhoa", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetNhiemVuGiangDay
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetNhiemVuGiangDay' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetNhiemVuGiangDay(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetNhiemVuGiangDay", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetNhiemVuGiangDay", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetNhiemVuGiangDay", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopThanhToanThuLaoCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopThanhToanThuLaoCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTongHopThanhToanThuLaoCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTongHopThanhToanThuLaoCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTongHopThanhToanThuLaoCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTongHopThanhToanThuLaoCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeKhoiLuongGiangDayTheoBoMon
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeKhoiLuongGiangDayTheoBoMon' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="boMon"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeKhoiLuongGiangDayTheoBoMon(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String boMon, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeKhoiLuongGiangDayTheoBoMon", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@BoMon", DbType.AnsiString,  boMon );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeKhoiLuongGiangDayTheoBoMon", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeKhoiLuongGiangDayTheoBoMon", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.String maLoaiGiangVien, System.String loaiHocPhan, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.AnsiString,  maLoaiGiangVien );
			database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.AnsiString,  loaiHocPhan );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoLanChotTheoKhoa
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoLanChotTheoKhoa' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetSoLanChotTheoKhoa(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String khoaDonVi, ref System.Int32 ketQua)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoLanChotTheoKhoa", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
	
			database.AddParameter(commandWrapper, "@KetQua", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, ketQua);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoLanChotTheoKhoa", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoLanChotTheoKhoa", (IEntity)null));

			ketQua =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@KetQua"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangKeKetQuaGiangDayTheoNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangKeKetQuaGiangDayTheoNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="listHocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangKeKetQuaGiangDayTheoNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String listHocKy, System.String khoaDonVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangKeKetQuaGiangDayTheoNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@ListHocKy", DbType.AnsiString,  listHocKy );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangKeKetQuaGiangDayTheoNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangKeKetQuaGiangDayTheoNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="dotChiTra"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeThanhToanTienGiang(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, System.String dotChiTra)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
			database.AddInParameter(commandWrapper, "@DotChiTra", DbType.AnsiString,  dotChiTra );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeThanhToanTienGiang", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeThanhToanTienGiang", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetSoLanChotTheoDot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetSoLanChotTheoDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetSoLanChotTheoDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.String bacDaoTao, System.String loaiHinhDaoTao, ref System.Int32 ketQua)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetSoLanChotTheoDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
			database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString,  bacDaoTao );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
	
			database.AddParameter(commandWrapper, "@KetQua", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, ketQua);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoLanChotTheoDot", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoLanChotTheoDot", (IEntity)null));

			ketQua =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@KetQua"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanDot4
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanDot4' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangKeThanhToanDot4(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String donVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangKeThanhToanDot4", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangKeThanhToanDot4", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangKeThanhToanDot4", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoNamLaw
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoNamLaw' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangKeThanhToanTheoNamLaw(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String lanChotHk01, System.String lanChotHk02, System.String bacDaoTao, System.String loaiHinhDaoTao, System.String khoaDonVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoNamLaw", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@LanChotHk01", DbType.AnsiString,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHk02", DbType.AnsiString,  lanChotHk02 );
			database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString,  bacDaoTao );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangKeThanhToanTheoNamLaw", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangKeThanhToanTheoNamLaw", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeGioNghiaVuCaNam
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeGioNghiaVuCaNam' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeGioNghiaVuCaNam(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String donVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeGioNghiaVuCaNam", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeGioNghiaVuCaNam", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeGioNghiaVuCaNam", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_DanhSachChiTienCanBoCoHuuVuotGio
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_DanhSachChiTienCanBoCoHuuVuotGio' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader DanhSachChiTienCanBoCoHuuVuotGio(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_DanhSachChiTienCanBoCoHuuVuotGio", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DanhSachChiTienCanBoCoHuuVuotGio", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DanhSachChiTienCanBoCoHuuVuotGio", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienThinhGiangCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangTttnGiangVienThinhGiangCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienThinhGiangCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangTttnGiangVienThinhGiangCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangTttnGiangVienThinhGiangCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_TongHopGioGiangIuh
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_TongHopGioGiangIuh' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader TongHopGioGiangIuh(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_TongHopGioGiangIuh", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TongHopGioGiangIuh", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TongHopGioGiangIuh", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ChotThanhToanTheoDot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ChotThanhToanTheoDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ChotThanhToanTheoDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.String bacDaoTao, System.String loaiHinhDaoTao, System.Int32 lanChot, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ChotThanhToanTheoDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
			database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString,  bacDaoTao );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ChotThanhToanTheoDot", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ChotThanhToanTheoDot", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_DsThanhToanThuLaoBoSung
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_DsThanhToanThuLaoBoSung' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader DsThanhToanThuLaoBoSung(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_DsThanhToanThuLaoBoSung", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DsThanhToanThuLaoBoSung", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DsThanhToanThuLaoBoSung", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoLop_Act
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoLop_Act' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeGioGiangTheoLop_Act(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoLop_Act", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeGioGiangTheoLop_Act", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeGioGiangTheoLop_Act", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.String,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString,  maKhoaHoc );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_LuuNgayChiTra
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_LuuNgayChiTra' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayChiTra"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuNgayChiTra(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String ngayChiTra, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_LuuNgayChiTra", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
			database.AddInParameter(commandWrapper, "@NgayChiTra", DbType.AnsiString,  ngayChiTra );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuNgayChiTra", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuNgayChiTra", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangBuh
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangBuh' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeChiTietGioGiangBuh(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangBuh", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeChiTietGioGiangBuh", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeChiTietGioGiangBuh", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopGioGiangTheoDot
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopGioGiangTheoDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTongHopGioGiangTheoDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTongHopGioGiangTheoDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DotThanhToan", DbType.AnsiString,  dotThanhToan );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTongHopGioGiangTheoDot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTongHopGioGiangTheoDot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeGioCoiThiChamBaiRaDeTheoHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeGioCoiThiChamBaiRaDeTheoHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeGioCoiThiChamBaiRaDeTheoHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.String heDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeGioCoiThiChamBaiRaDeTheoHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@HeDaoTao", DbType.AnsiString,  heDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeGioCoiThiChamBaiRaDeTheoHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeGioCoiThiChamBaiRaDeTheoHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_TongHopThanhToanThuLaoVuotGioGiangVienCoHuu
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_TongHopThanhToanThuLaoVuotGioGiangVienCoHuu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader TongHopThanhToanThuLaoVuotGioGiangVienCoHuu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String bacDaoTao, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_TongHopThanhToanThuLaoVuotGioGiangVienCoHuu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString,  bacDaoTao );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TongHopThanhToanThuLaoVuotGioGiangVienCoHuu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TongHopThanhToanThuLaoVuotGioGiangVienCoHuu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_BangKeVuotGioGiangBuh
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_BangKeVuotGioGiangBuh' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader BangKeVuotGioGiangBuh(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_BangKeVuotGioGiangBuh", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.String,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.String,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "BangKeVuotGioGiangBuh", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "BangKeVuotGioGiangBuh", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeGiangVienThieuTiet
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeGiangVienThieuTiet' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeGiangVienThieuTiet(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeGiangVienThieuTiet", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChotHK01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChotHK02", DbType.Int32,  lanChotHk02 );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeGiangVienThieuTiet", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeGiangVienThieuTiet", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopVhu
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopVhu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeTongHopVhu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeTongHopVhu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeTongHopVhu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeTongHopVhu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_ThongKeChung_DLU
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_ThongKeChung_DLU' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiThongKe"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ThongKeChung_DLU(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao, System.Int32 loaiThongKe)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_ThongKeChung_DLU", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@DotThanhToan", DbType.AnsiString,  dotThanhToan );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
			database.AddInParameter(commandWrapper, "@LoaiThongKe", DbType.Int32,  loaiThongKe );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeChung_DLU", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeChung_DLU", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetByNamHocHocKyLanChotKhoaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetByNamHocHocKyLanChotKhoaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByNamHocHocKyLanChotKhoaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetByNamHocHocKyLanChotKhoaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.String,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyLanChotKhoaDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyLanChotKhoaDonVi", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_GetGiangVienTamUng
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_GetGiangVienTamUng' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetGiangVienTamUng(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_GetGiangVienTamUng", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetGiangVienTamUng", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetGiangVienTamUng", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan_HBU
					
		/// <summary>
		///	This method wraps the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan_HBU' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader TongHopKetQuaThanhToan_HBU(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan_HBU", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot", DbType.Int32,  lanChot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TongHopKetQuaThanhToan_HBU", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TongHopKetQuaThanhToan_HBU", (IEntity)null));



			return dr;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
