/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlChietTinhBoiDuongGiangDayProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="ChietTinhBoiDuongGiangDay"/> entity.
	///</summary>
	public abstract partial class SqlChietTinhBoiDuongGiangDayProviderBase : ChietTinhBoiDuongGiangDayProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlChietTinhBoiDuongGiangDayProviderBase"/> instance.
		/// </summary>
		public SqlChietTinhBoiDuongGiangDayProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlChietTinhBoiDuongGiangDayProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlChietTinhBoiDuongGiangDayProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_maQuanLy">. Primary Key.</param>	
		/// <param name="_maLopHocPhan">. Primary Key.</param>	
		/// <param name="_maLopSinhVien">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.String _maQuanLy, System.String _maLopHocPhan, System.String _maLopSinhVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ChietTinhBoiDuongGiangDay_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, _maQuanLy);
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, _maLopHocPhan);
			database.AddInParameter(commandWrapper, "@MaLopSinhVien", DbType.AnsiString, _maLopSinhVien);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(ChietTinhBoiDuongGiangDay)
					,_maQuanLy,_maLopHocPhan,_maLopSinhVien);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.ChietTinhBoiDuongGiangDay objects.</returns>
		public override TList<ChietTinhBoiDuongGiangDay> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<ChietTinhBoiDuongGiangDay>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ChietTinhBoiDuongGiangDay_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HoTen", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenLopHocPhan", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaPhong", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenPhong", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaCoSo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenCoSo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTiet", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SiSoLop", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoLd", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoTinChi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TienThem", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TongCong", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLopSinhVien", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenLopSinhVien", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HoanTat", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoLanDiLai", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoNgayLuuTru", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChiPhiLuuTru", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChiPhiDiLai", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoDeThiDapAn", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("maquanly ") || clause.Trim().StartsWith("maquanly="))
				{
					database.SetParameterValue(commandWrapper, "@MaQuanLy", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hoten ") || clause.Trim().StartsWith("hoten="))
				{
					database.SetParameterValue(commandWrapper, "@HoTen", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malophocphan ") || clause.Trim().StartsWith("malophocphan="))
				{
					database.SetParameterValue(commandWrapper, "@MaLopHocPhan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tenlophocphan ") || clause.Trim().StartsWith("tenlophocphan="))
				{
					database.SetParameterValue(commandWrapper, "@TenLopHocPhan", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maphong ") || clause.Trim().StartsWith("maphong="))
				{
					database.SetParameterValue(commandWrapper, "@MaPhong", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tenphong ") || clause.Trim().StartsWith("tenphong="))
				{
					database.SetParameterValue(commandWrapper, "@TenPhong", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("macoso ") || clause.Trim().StartsWith("macoso="))
				{
					database.SetParameterValue(commandWrapper, "@MaCoSo", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tencoso ") || clause.Trim().StartsWith("tencoso="))
				{
					database.SetParameterValue(commandWrapper, "@TenCoSo", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mamonhoc ") || clause.Trim().StartsWith("mamonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaMonHoc", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tenmonhoc ") || clause.Trim().StartsWith("tenmonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@TenMonHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotiet ") || clause.Trim().StartsWith("sotiet="))
				{
					database.SetParameterValue(commandWrapper, "@SoTiet", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sisolop ") || clause.Trim().StartsWith("sisolop="))
				{
					database.SetParameterValue(commandWrapper, "@SiSoLop", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesold ") || clause.Trim().StartsWith("hesold="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoLd", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesotinchi ") || clause.Trim().StartsWith("hesotinchi="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoTinChi", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tietquydoi ") || clause.Trim().StartsWith("tietquydoi="))
				{
					database.SetParameterValue(commandWrapper, "@TietQuyDoi", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dongia ") || clause.Trim().StartsWith("dongia="))
				{
					database.SetParameterValue(commandWrapper, "@DonGia", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tienthem ") || clause.Trim().StartsWith("tienthem="))
				{
					database.SetParameterValue(commandWrapper, "@TienThem", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tongcong ") || clause.Trim().StartsWith("tongcong="))
				{
					database.SetParameterValue(commandWrapper, "@TongCong", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namhoc ") || clause.Trim().StartsWith("namhoc="))
				{
					database.SetParameterValue(commandWrapper, "@NamHoc", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hocky ") || clause.Trim().StartsWith("hocky="))
				{
					database.SetParameterValue(commandWrapper, "@HocKy", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malopsinhvien ") || clause.Trim().StartsWith("malopsinhvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLopSinhVien", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tenlopsinhvien ") || clause.Trim().StartsWith("tenlopsinhvien="))
				{
					database.SetParameterValue(commandWrapper, "@TenLopSinhVien", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hoantat ") || clause.Trim().StartsWith("hoantat="))
				{
					database.SetParameterValue(commandWrapper, "@HoanTat", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("solandilai ") || clause.Trim().StartsWith("solandilai="))
				{
					database.SetParameterValue(commandWrapper, "@SoLanDiLai", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("songayluutru ") || clause.Trim().StartsWith("songayluutru="))
				{
					database.SetParameterValue(commandWrapper, "@SoNgayLuuTru", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chiphiluutru ") || clause.Trim().StartsWith("chiphiluutru="))
				{
					database.SetParameterValue(commandWrapper, "@ChiPhiLuuTru", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chiphidilai ") || clause.Trim().StartsWith("chiphidilai="))
				{
					database.SetParameterValue(commandWrapper, "@ChiPhiDiLai", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sodethidapan ") || clause.Trim().StartsWith("sodethidapan="))
				{
					database.SetParameterValue(commandWrapper, "@SoDeThiDapAn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<ChietTinhBoiDuongGiangDay> rows = new TList<ChietTinhBoiDuongGiangDay>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.ChietTinhBoiDuongGiangDay objects.</returns>
		public override TList<ChietTinhBoiDuongGiangDay> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ChietTinhBoiDuongGiangDay_Find_Dynamic", typeof(ChietTinhBoiDuongGiangDayColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<ChietTinhBoiDuongGiangDay> rows = new TList<ChietTinhBoiDuongGiangDay>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.ChietTinhBoiDuongGiangDay objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ChietTinhBoiDuongGiangDay> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ChietTinhBoiDuongGiangDay_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<ChietTinhBoiDuongGiangDay> rows = new TList<ChietTinhBoiDuongGiangDay>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.ChietTinhBoiDuongGiangDay objects.</returns>
		public override TList<ChietTinhBoiDuongGiangDay> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ChietTinhBoiDuongGiangDay_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<ChietTinhBoiDuongGiangDay> rows = new TList<ChietTinhBoiDuongGiangDay>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByMaQuanLyMaLopHocPhanMaLopSinhVien
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ChietTinhBoiDuongGiangDay index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maQuanLy"></param>
		/// <param name="_maLopHocPhan"></param>
		/// <param name="_maLopSinhVien"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.ChietTinhBoiDuongGiangDay"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.ChietTinhBoiDuongGiangDay GetByMaQuanLyMaLopHocPhanMaLopSinhVien(TransactionManager transactionManager, System.String _maQuanLy, System.String _maLopHocPhan, System.String _maLopSinhVien, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ChietTinhBoiDuongGiangDay_GetByMaQuanLyMaLopHocPhanMaLopSinhVien", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, _maQuanLy);
				database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, _maLopHocPhan);
				database.AddInParameter(commandWrapper, "@MaLopSinhVien", DbType.AnsiString, _maLopSinhVien);
			
			IDataReader reader = null;
			TList<ChietTinhBoiDuongGiangDay> tmp = new TList<ChietTinhBoiDuongGiangDay>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaQuanLyMaLopHocPhanMaLopSinhVien", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaQuanLyMaLopHocPhanMaLopSinhVien", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.ChietTinhBoiDuongGiangDay object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.ChietTinhBoiDuongGiangDay> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ChietTinhBoiDuongGiangDay";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("MaQuanLy", typeof(System.String));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("HoTen", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("MaLopHocPhan", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("TenLopHocPhan", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("MaPhong", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("TenPhong", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("MaCoSo", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("TenCoSo", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("MaMonHoc", typeof(System.String));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("TenMonHoc", typeof(System.String));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("SoTiet", typeof(System.Int32));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("SiSoLop", typeof(System.Int32));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("HeSoLD", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("HeSoTinChi", typeof(System.Decimal));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("TietQuyDoi", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("DonGia", typeof(System.Decimal));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("TienThem", typeof(System.Decimal));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("TongCong", typeof(System.Decimal));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("NamHoc", typeof(System.String));
			col18.AllowDBNull = false;		
			DataColumn col19 = dataTable.Columns.Add("HocKy", typeof(System.String));
			col19.AllowDBNull = false;		
			DataColumn col20 = dataTable.Columns.Add("MaLopSinhVien", typeof(System.String));
			col20.AllowDBNull = false;		
			DataColumn col21 = dataTable.Columns.Add("TenLopSinhVien", typeof(System.String));
			col21.AllowDBNull = false;		
			DataColumn col22 = dataTable.Columns.Add("HoanTat", typeof(System.Boolean));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("SoLanDiLai", typeof(System.Int32));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("SoNgayLuuTru", typeof(System.Int32));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("ChiPhiLuuTru", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("ChiPhiDiLai", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("SoDeThiDapAn", typeof(System.Int32));
			col27.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("MaQuanLy", "MaQuanLy");
			bulkCopy.ColumnMappings.Add("HoTen", "HoTen");
			bulkCopy.ColumnMappings.Add("MaLopHocPhan", "MaLopHocPhan");
			bulkCopy.ColumnMappings.Add("TenLopHocPhan", "TenLopHocPhan");
			bulkCopy.ColumnMappings.Add("MaPhong", "MaPhong");
			bulkCopy.ColumnMappings.Add("TenPhong", "TenPhong");
			bulkCopy.ColumnMappings.Add("MaCoSo", "MaCoSo");
			bulkCopy.ColumnMappings.Add("TenCoSo", "TenCoSo");
			bulkCopy.ColumnMappings.Add("MaMonHoc", "MaMonHoc");
			bulkCopy.ColumnMappings.Add("TenMonHoc", "TenMonHoc");
			bulkCopy.ColumnMappings.Add("SoTiet", "SoTiet");
			bulkCopy.ColumnMappings.Add("SiSoLop", "SiSoLop");
			bulkCopy.ColumnMappings.Add("HeSoLD", "HeSoLD");
			bulkCopy.ColumnMappings.Add("HeSoTinChi", "HeSoTinChi");
			bulkCopy.ColumnMappings.Add("TietQuyDoi", "TietQuyDoi");
			bulkCopy.ColumnMappings.Add("DonGia", "DonGia");
			bulkCopy.ColumnMappings.Add("TienThem", "TienThem");
			bulkCopy.ColumnMappings.Add("TongCong", "TongCong");
			bulkCopy.ColumnMappings.Add("NamHoc", "NamHoc");
			bulkCopy.ColumnMappings.Add("HocKy", "HocKy");
			bulkCopy.ColumnMappings.Add("MaLopSinhVien", "MaLopSinhVien");
			bulkCopy.ColumnMappings.Add("TenLopSinhVien", "TenLopSinhVien");
			bulkCopy.ColumnMappings.Add("HoanTat", "HoanTat");
			bulkCopy.ColumnMappings.Add("SoLanDiLai", "SoLanDiLai");
			bulkCopy.ColumnMappings.Add("SoNgayLuuTru", "SoNgayLuuTru");
			bulkCopy.ColumnMappings.Add("ChiPhiLuuTru", "ChiPhiLuuTru");
			bulkCopy.ColumnMappings.Add("ChiPhiDiLai", "ChiPhiDiLai");
			bulkCopy.ColumnMappings.Add("SoDeThiDapAn", "SoDeThiDapAn");
			
			foreach(PMS.Entities.ChietTinhBoiDuongGiangDay entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["MaQuanLy"] = entity.MaQuanLy;
							
				
					row["HoTen"] = entity.HoTen;
							
				
					row["MaLopHocPhan"] = entity.MaLopHocPhan;
							
				
					row["TenLopHocPhan"] = entity.TenLopHocPhan;
							
				
					row["MaPhong"] = entity.MaPhong;
							
				
					row["TenPhong"] = entity.TenPhong;
							
				
					row["MaCoSo"] = entity.MaCoSo;
							
				
					row["TenCoSo"] = entity.TenCoSo;
							
				
					row["MaMonHoc"] = entity.MaMonHoc;
							
				
					row["TenMonHoc"] = entity.TenMonHoc;
							
				
					row["SoTiet"] = entity.SoTiet.HasValue ? (object) entity.SoTiet  : System.DBNull.Value;
							
				
					row["SiSoLop"] = entity.SiSoLop.HasValue ? (object) entity.SiSoLop  : System.DBNull.Value;
							
				
					row["HeSoLD"] = entity.HeSoLd.HasValue ? (object) entity.HeSoLd  : System.DBNull.Value;
							
				
					row["HeSoTinChi"] = entity.HeSoTinChi;
							
				
					row["TietQuyDoi"] = entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi  : System.DBNull.Value;
							
				
					row["DonGia"] = entity.DonGia;
							
				
					row["TienThem"] = entity.TienThem;
							
				
					row["TongCong"] = entity.TongCong.HasValue ? (object) entity.TongCong  : System.DBNull.Value;
							
				
					row["NamHoc"] = entity.NamHoc;
							
				
					row["HocKy"] = entity.HocKy;
							
				
					row["MaLopSinhVien"] = entity.MaLopSinhVien;
							
				
					row["TenLopSinhVien"] = entity.TenLopSinhVien;
							
				
					row["HoanTat"] = entity.HoanTat.HasValue ? (object) entity.HoanTat  : System.DBNull.Value;
							
				
					row["SoLanDiLai"] = entity.SoLanDiLai.HasValue ? (object) entity.SoLanDiLai  : System.DBNull.Value;
							
				
					row["SoNgayLuuTru"] = entity.SoNgayLuuTru.HasValue ? (object) entity.SoNgayLuuTru  : System.DBNull.Value;
							
				
					row["ChiPhiLuuTru"] = entity.ChiPhiLuuTru.HasValue ? (object) entity.ChiPhiLuuTru  : System.DBNull.Value;
							
				
					row["ChiPhiDiLai"] = entity.ChiPhiDiLai.HasValue ? (object) entity.ChiPhiDiLai  : System.DBNull.Value;
							
				
					row["SoDeThiDapAn"] = entity.SoDeThiDapAn.HasValue ? (object) entity.SoDeThiDapAn  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.ChietTinhBoiDuongGiangDay entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.ChietTinhBoiDuongGiangDay object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.ChietTinhBoiDuongGiangDay object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.ChietTinhBoiDuongGiangDay object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.ChietTinhBoiDuongGiangDay entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ChietTinhBoiDuongGiangDay_Insert", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
            database.AddInParameter(commandWrapper, "@HoTen", DbType.String, entity.HoTen );
            database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, entity.MaLopHocPhan );
            database.AddInParameter(commandWrapper, "@TenLopHocPhan", DbType.AnsiString, entity.TenLopHocPhan );
            database.AddInParameter(commandWrapper, "@MaPhong", DbType.AnsiString, entity.MaPhong );
            database.AddInParameter(commandWrapper, "@TenPhong", DbType.String, entity.TenPhong );
            database.AddInParameter(commandWrapper, "@MaCoSo", DbType.AnsiString, entity.MaCoSo );
            database.AddInParameter(commandWrapper, "@TenCoSo", DbType.String, entity.TenCoSo );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
			database.AddInParameter(commandWrapper, "@SoTiet", DbType.Int32, (entity.SoTiet.HasValue ? (object) entity.SoTiet  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SiSoLop", DbType.Int32, (entity.SiSoLop.HasValue ? (object) entity.SiSoLop  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoLd", DbType.Decimal, (entity.HeSoLd.HasValue ? (object) entity.HeSoLd  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@HeSoTinChi", DbType.Decimal, entity.HeSoTinChi );
			database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, (entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, entity.DonGia );
            database.AddInParameter(commandWrapper, "@TienThem", DbType.Decimal, entity.TienThem );
			database.AddInParameter(commandWrapper, "@TongCong", DbType.Decimal, (entity.TongCong.HasValue ? (object) entity.TongCong  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
            database.AddInParameter(commandWrapper, "@MaLopSinhVien", DbType.AnsiString, entity.MaLopSinhVien );
            database.AddInParameter(commandWrapper, "@TenLopSinhVien", DbType.String, entity.TenLopSinhVien );
			database.AddInParameter(commandWrapper, "@HoanTat", DbType.Boolean, (entity.HoanTat.HasValue ? (object) entity.HoanTat  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoLanDiLai", DbType.Int32, (entity.SoLanDiLai.HasValue ? (object) entity.SoLanDiLai  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoNgayLuuTru", DbType.Int32, (entity.SoNgayLuuTru.HasValue ? (object) entity.SoNgayLuuTru  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ChiPhiLuuTru", DbType.Decimal, (entity.ChiPhiLuuTru.HasValue ? (object) entity.ChiPhiLuuTru  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ChiPhiDiLai", DbType.Decimal, (entity.ChiPhiDiLai.HasValue ? (object) entity.ChiPhiDiLai  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoDeThiDapAn", DbType.Int32, (entity.SoDeThiDapAn.HasValue ? (object) entity.SoDeThiDapAn  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			
			entity.OriginalMaQuanLy = entity.MaQuanLy;
			entity.OriginalMaLopHocPhan = entity.MaLopHocPhan;
			entity.OriginalMaLopSinhVien = entity.MaLopSinhVien;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.ChietTinhBoiDuongGiangDay object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.ChietTinhBoiDuongGiangDay object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.ChietTinhBoiDuongGiangDay entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_ChietTinhBoiDuongGiangDay_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
			database.AddInParameter(commandWrapper, "@OriginalMaQuanLy", DbType.AnsiString, entity.OriginalMaQuanLy);
            database.AddInParameter(commandWrapper, "@HoTen", DbType.String, entity.HoTen );
            database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, entity.MaLopHocPhan );
			database.AddInParameter(commandWrapper, "@OriginalMaLopHocPhan", DbType.AnsiString, entity.OriginalMaLopHocPhan);
            database.AddInParameter(commandWrapper, "@TenLopHocPhan", DbType.AnsiString, entity.TenLopHocPhan );
            database.AddInParameter(commandWrapper, "@MaPhong", DbType.AnsiString, entity.MaPhong );
            database.AddInParameter(commandWrapper, "@TenPhong", DbType.String, entity.TenPhong );
            database.AddInParameter(commandWrapper, "@MaCoSo", DbType.AnsiString, entity.MaCoSo );
            database.AddInParameter(commandWrapper, "@TenCoSo", DbType.String, entity.TenCoSo );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
			database.AddInParameter(commandWrapper, "@SoTiet", DbType.Int32, (entity.SoTiet.HasValue ? (object) entity.SoTiet : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SiSoLop", DbType.Int32, (entity.SiSoLop.HasValue ? (object) entity.SiSoLop : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoLd", DbType.Decimal, (entity.HeSoLd.HasValue ? (object) entity.HeSoLd : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@HeSoTinChi", DbType.Decimal, entity.HeSoTinChi );
			database.AddInParameter(commandWrapper, "@TietQuyDoi", DbType.Decimal, (entity.TietQuyDoi.HasValue ? (object) entity.TietQuyDoi : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@DonGia", DbType.Decimal, entity.DonGia );
            database.AddInParameter(commandWrapper, "@TienThem", DbType.Decimal, entity.TienThem );
			database.AddInParameter(commandWrapper, "@TongCong", DbType.Decimal, (entity.TongCong.HasValue ? (object) entity.TongCong : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
            database.AddInParameter(commandWrapper, "@MaLopSinhVien", DbType.AnsiString, entity.MaLopSinhVien );
			database.AddInParameter(commandWrapper, "@OriginalMaLopSinhVien", DbType.AnsiString, entity.OriginalMaLopSinhVien);
            database.AddInParameter(commandWrapper, "@TenLopSinhVien", DbType.String, entity.TenLopSinhVien );
			database.AddInParameter(commandWrapper, "@HoanTat", DbType.Boolean, (entity.HoanTat.HasValue ? (object) entity.HoanTat : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoLanDiLai", DbType.Int32, (entity.SoLanDiLai.HasValue ? (object) entity.SoLanDiLai : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoNgayLuuTru", DbType.Int32, (entity.SoNgayLuuTru.HasValue ? (object) entity.SoNgayLuuTru : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ChiPhiLuuTru", DbType.Decimal, (entity.ChiPhiLuuTru.HasValue ? (object) entity.ChiPhiLuuTru : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ChiPhiDiLai", DbType.Decimal, (entity.ChiPhiDiLai.HasValue ? (object) entity.ChiPhiDiLai : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoDeThiDapAn", DbType.Int32, (entity.SoDeThiDapAn.HasValue ? (object) entity.SoDeThiDapAn : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			entity.OriginalMaQuanLy = entity.MaQuanLy;
			entity.OriginalMaLopHocPhan = entity.MaLopHocPhan;
			entity.OriginalMaLopSinhVien = entity.MaLopSinhVien;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region cust_ChietTinhBoiDuongGiangDay_GetByMaLopHocPhanMaLopMaGiangVienNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_ChietTinhBoiDuongGiangDay_GetByMaLopHocPhanMaLopMaGiangVienNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maLop"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;ChietTinhBoiDuongGiangDay&gt;"/> instance.</returns>
		public override TList<ChietTinhBoiDuongGiangDay> GetByMaLopHocPhanMaLopMaGiangVienNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String maGiangVien, System.String maLopHocPhan, System.String maLop, System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_ChietTinhBoiDuongGiangDay_GetByMaLopHocPhanMaLopMaGiangVienNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
			database.AddInParameter(commandWrapper, "@MaLop", DbType.AnsiString,  maLop );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<ChietTinhBoiDuongGiangDay> rows = new TList<ChietTinhBoiDuongGiangDay>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaLopHocPhanMaLopMaGiangVienNamHocHocKy", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaLopHocPhanMaLopMaGiangVienNamHocHocKy", rows));


				return rows;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
