/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlKhoiLuongGiangDayChiTietProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="KhoiLuongGiangDayChiTiet"/> entity.
	///</summary>
	public abstract partial class SqlKhoiLuongGiangDayChiTietProviderBase : KhoiLuongGiangDayChiTietProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlKhoiLuongGiangDayChiTietProviderBase"/> instance.
		/// </summary>
		public SqlKhoiLuongGiangDayChiTietProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlKhoiLuongGiangDayChiTietProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlKhoiLuongGiangDayChiTietProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_maKhoiLuong">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _maKhoiLuong)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongGiangDayChiTiet_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@MaKhoiLuong", DbType.Int32, _maKhoiLuong);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(KhoiLuongGiangDayChiTiet)
					,_maKhoiLuong);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDayChiTiet objects.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<KhoiLuongGiangDayChiTiet>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongGiangDayChiTiet_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@MaKhoiLuong", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLichHoc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Nhom", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LyThuyet", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThucHanh", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BaiTap", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BaiTapLon", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DoAn", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LuanAn", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TieuLuan", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThucTap", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoLuong", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PhanLoai", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoThanhPhan", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Nam", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Tuan", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonViTinh", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaBuoiHoc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLop", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTiet", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TinhTrang", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Compensate", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaKhoa", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoaiHocKy", DbType.Byte, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamThu", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaChucVu", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LopHocPhanChuyenNganh", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DotImport", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DaoTaoTinChi", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaKhoaCuaMonHoc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiHinhDaoTao", DbType.AnsiString, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("makhoiluong ") || clause.Trim().StartsWith("makhoiluong="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoiLuong", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malichhoc ") || clause.Trim().StartsWith("malichhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaLichHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("magiangvien ") || clause.Trim().StartsWith("magiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaGiangVien", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malophocphan ") || clause.Trim().StartsWith("malophocphan="))
				{
					database.SetParameterValue(commandWrapper, "@MaLopHocPhan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namhoc ") || clause.Trim().StartsWith("namhoc="))
				{
					database.SetParameterValue(commandWrapper, "@NamHoc", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hocky ") || clause.Trim().StartsWith("hocky="))
				{
					database.SetParameterValue(commandWrapper, "@HocKy", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mamonhoc ") || clause.Trim().StartsWith("mamonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaMonHoc", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tenmonhoc ") || clause.Trim().StartsWith("tenmonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@TenMonHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nhom ") || clause.Trim().StartsWith("nhom="))
				{
					database.SetParameterValue(commandWrapper, "@Nhom", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotinchi ") || clause.Trim().StartsWith("sotinchi="))
				{
					database.SetParameterValue(commandWrapper, "@SoTinChi", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lythuyet ") || clause.Trim().StartsWith("lythuyet="))
				{
					database.SetParameterValue(commandWrapper, "@LyThuyet", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thuchanh ") || clause.Trim().StartsWith("thuchanh="))
				{
					database.SetParameterValue(commandWrapper, "@ThucHanh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("baitap ") || clause.Trim().StartsWith("baitap="))
				{
					database.SetParameterValue(commandWrapper, "@BaiTap", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("baitaplon ") || clause.Trim().StartsWith("baitaplon="))
				{
					database.SetParameterValue(commandWrapper, "@BaiTapLon", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("doan ") || clause.Trim().StartsWith("doan="))
				{
					database.SetParameterValue(commandWrapper, "@DoAn", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("luanan ") || clause.Trim().StartsWith("luanan="))
				{
					database.SetParameterValue(commandWrapper, "@LuanAn", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tieuluan ") || clause.Trim().StartsWith("tieuluan="))
				{
					database.SetParameterValue(commandWrapper, "@TieuLuan", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thuctap ") || clause.Trim().StartsWith("thuctap="))
				{
					database.SetParameterValue(commandWrapper, "@ThucTap", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("soluong ") || clause.Trim().StartsWith("soluong="))
				{
					database.SetParameterValue(commandWrapper, "@SoLuong", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaihocphan ") || clause.Trim().StartsWith("maloaihocphan="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiHocPhan", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loaihocphan ") || clause.Trim().StartsWith("loaihocphan="))
				{
					database.SetParameterValue(commandWrapper, "@LoaiHocPhan", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("phanloai ") || clause.Trim().StartsWith("phanloai="))
				{
					database.SetParameterValue(commandWrapper, "@PhanLoai", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesothanhphan ") || clause.Trim().StartsWith("hesothanhphan="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoThanhPhan", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nam ") || clause.Trim().StartsWith("nam="))
				{
					database.SetParameterValue(commandWrapper, "@Nam", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tuan ") || clause.Trim().StartsWith("tuan="))
				{
					database.SetParameterValue(commandWrapper, "@Tuan", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("donvitinh ") || clause.Trim().StartsWith("donvitinh="))
				{
					database.SetParameterValue(commandWrapper, "@DonViTinh", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mabuoihoc ") || clause.Trim().StartsWith("mabuoihoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaBuoiHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("malop ") || clause.Trim().StartsWith("malop="))
				{
					database.SetParameterValue(commandWrapper, "@MaLop", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tietbatdau ") || clause.Trim().StartsWith("tietbatdau="))
				{
					database.SetParameterValue(commandWrapper, "@TietBatDau", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotiet ") || clause.Trim().StartsWith("sotiet="))
				{
					database.SetParameterValue(commandWrapper, "@SoTiet", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tinhtrang ") || clause.Trim().StartsWith("tinhtrang="))
				{
					database.SetParameterValue(commandWrapper, "@TinhTrang", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayday ") || clause.Trim().StartsWith("ngayday="))
				{
					database.SetParameterValue(commandWrapper, "@NgayDay", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("compensate ") || clause.Trim().StartsWith("compensate="))
				{
					database.SetParameterValue(commandWrapper, "@Compensate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mabacdaotao ") || clause.Trim().StartsWith("mabacdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@MaBacDaoTao", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makhoa ") || clause.Trim().StartsWith("makhoa="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoa", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("manhommonhoc ") || clause.Trim().StartsWith("manhommonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaNhomMonHoc", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maphonghoc ") || clause.Trim().StartsWith("maphonghoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaPhongHoc", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makhoahoc ") || clause.Trim().StartsWith("makhoahoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoaHoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loaihocky ") || clause.Trim().StartsWith("loaihocky="))
				{
					database.SetParameterValue(commandWrapper, "@LoaiHocKy", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hesohocky ") || clause.Trim().StartsWith("hesohocky="))
				{
					database.SetParameterValue(commandWrapper, "@HeSoHocKy", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namthu ") || clause.Trim().StartsWith("namthu="))
				{
					database.SetParameterValue(commandWrapper, "@NamThu", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocham ") || clause.Trim().StartsWith("mahocham="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocHam", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocvi ") || clause.Trim().StartsWith("mahocvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaigiangvien ") || clause.Trim().StartsWith("maloaigiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiGiangVien", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("machucvu ") || clause.Trim().StartsWith("machucvu="))
				{
					database.SetParameterValue(commandWrapper, "@MaChucVu", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahinhthucdaotao ") || clause.Trim().StartsWith("mahinhthucdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@MaHinhThucDaoTao", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ghichu ") || clause.Trim().StartsWith("ghichu="))
				{
					database.SetParameterValue(commandWrapper, "@GhiChu", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycapnhat ") || clause.Trim().StartsWith("ngaycapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NgayCapNhat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lophocphanchuyennganh ") || clause.Trim().StartsWith("lophocphanchuyennganh="))
				{
					database.SetParameterValue(commandWrapper, "@LopHocPhanChuyenNganh", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dotimport ") || clause.Trim().StartsWith("dotimport="))
				{
					database.SetParameterValue(commandWrapper, "@DotImport", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("daotaotinchi ") || clause.Trim().StartsWith("daotaotinchi="))
				{
					database.SetParameterValue(commandWrapper, "@DaoTaoTinChi", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("macauhinhchotgio ") || clause.Trim().StartsWith("macauhinhchotgio="))
				{
					database.SetParameterValue(commandWrapper, "@MaCauHinhChotGio", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("makhoacuamonhoc ") || clause.Trim().StartsWith("makhoacuamonhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaKhoaCuaMonHoc", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaihinhdaotao ") || clause.Trim().StartsWith("maloaihinhdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiHinhDaoTao", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDayChiTiet objects.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongGiangDayChiTiet_Find_Dynamic", typeof(KhoiLuongGiangDayChiTietColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDayChiTiet objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<KhoiLuongGiangDayChiTiet> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongGiangDayChiTiet_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDayChiTiet objects.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongGiangDayChiTiet_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByMaKhoiLuong
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_KhoiLuongGiangDayChiTiet index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maKhoiLuong"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.KhoiLuongGiangDayChiTiet"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.KhoiLuongGiangDayChiTiet GetByMaKhoiLuong(TransactionManager transactionManager, System.Int32 _maKhoiLuong, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongGiangDayChiTiet_GetByMaKhoiLuong", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaKhoiLuong", DbType.Int32, _maKhoiLuong);
			
			IDataReader reader = null;
			TList<KhoiLuongGiangDayChiTiet> tmp = new TList<KhoiLuongGiangDayChiTiet>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaKhoiLuong", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaKhoiLuong", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.KhoiLuongGiangDayChiTiet object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.KhoiLuongGiangDayChiTiet> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "KhoiLuongGiangDayChiTiet";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("MaKhoiLuong", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MaLichHoc", typeof(System.Int32));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("MaGiangVien", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("MaLopHocPhan", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("NamHoc", typeof(System.String));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("HocKy", typeof(System.String));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("MaMonHoc", typeof(System.String));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("TenMonHoc", typeof(System.String));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("Nhom", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("SoTinChi", typeof(System.Decimal));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("LyThuyet", typeof(System.Decimal));
			col10.AllowDBNull = false;		
			DataColumn col11 = dataTable.Columns.Add("ThucHanh", typeof(System.Decimal));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("BaiTap", typeof(System.Decimal));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("BaiTapLon", typeof(System.Decimal));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("DoAn", typeof(System.Decimal));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("LuanAn", typeof(System.Decimal));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("TieuLuan", typeof(System.Decimal));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("ThucTap", typeof(System.Decimal));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("SoLuong", typeof(System.Int32));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("MaLoaiHocPhan", typeof(System.Byte));
			col19.AllowDBNull = false;		
			DataColumn col20 = dataTable.Columns.Add("LoaiHocPhan", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("PhanLoai", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("HeSoThanhPhan", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("Nam", typeof(System.Int32));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("Tuan", typeof(System.Int32));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("DonViTinh", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("MaBuoiHoc", typeof(System.Int32));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("MaLop", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("TietBatDau", typeof(System.Int32));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("SoTiet", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("TinhTrang", typeof(System.Int32));
			col30.AllowDBNull = false;		
			DataColumn col31 = dataTable.Columns.Add("NgayDay", typeof(System.DateTime));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("Compensate", typeof(System.Byte));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("MaBacDaoTao", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("MaKhoa", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("MaNhomMonHoc", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("MaPhongHoc", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("MaKhoaHoc", typeof(System.String));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("LoaiHocKy", typeof(System.Byte));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("HeSoHocKy", typeof(System.Decimal));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("NamThu", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("MaHocHam", typeof(System.Int32));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("MaHocVi", typeof(System.Int32));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("MaLoaiGiangVien", typeof(System.Int32));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("MaChucVu", typeof(System.Int32));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("MaHinhThucDaoTao", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("GhiChu", typeof(System.String));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("NgayCapNhat", typeof(System.String));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("LopHocPhanChuyenNganh", typeof(System.Boolean));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("DotImport", typeof(System.String));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("DaoTaoTinChi", typeof(System.Boolean));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("MaCauHinhChotGio", typeof(System.Int32));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("MaKhoaCuaMonHoc", typeof(System.String));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("MaLoaiHinhDaoTao", typeof(System.String));
			col53.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("MaKhoiLuong", "MaKhoiLuong");
			bulkCopy.ColumnMappings.Add("MaLichHoc", "MaLichHoc");
			bulkCopy.ColumnMappings.Add("MaGiangVien", "MaGiangVien");
			bulkCopy.ColumnMappings.Add("MaLopHocPhan", "MaLopHocPhan");
			bulkCopy.ColumnMappings.Add("NamHoc", "NamHoc");
			bulkCopy.ColumnMappings.Add("HocKy", "HocKy");
			bulkCopy.ColumnMappings.Add("MaMonHoc", "MaMonHoc");
			bulkCopy.ColumnMappings.Add("TenMonHoc", "TenMonHoc");
			bulkCopy.ColumnMappings.Add("Nhom", "Nhom");
			bulkCopy.ColumnMappings.Add("SoTinChi", "SoTinChi");
			bulkCopy.ColumnMappings.Add("LyThuyet", "LyThuyet");
			bulkCopy.ColumnMappings.Add("ThucHanh", "ThucHanh");
			bulkCopy.ColumnMappings.Add("BaiTap", "BaiTap");
			bulkCopy.ColumnMappings.Add("BaiTapLon", "BaiTapLon");
			bulkCopy.ColumnMappings.Add("DoAn", "DoAn");
			bulkCopy.ColumnMappings.Add("LuanAn", "LuanAn");
			bulkCopy.ColumnMappings.Add("TieuLuan", "TieuLuan");
			bulkCopy.ColumnMappings.Add("ThucTap", "ThucTap");
			bulkCopy.ColumnMappings.Add("SoLuong", "SoLuong");
			bulkCopy.ColumnMappings.Add("MaLoaiHocPhan", "MaLoaiHocPhan");
			bulkCopy.ColumnMappings.Add("LoaiHocPhan", "LoaiHocPhan");
			bulkCopy.ColumnMappings.Add("PhanLoai", "PhanLoai");
			bulkCopy.ColumnMappings.Add("HeSoThanhPhan", "HeSoThanhPhan");
			bulkCopy.ColumnMappings.Add("Nam", "Nam");
			bulkCopy.ColumnMappings.Add("Tuan", "Tuan");
			bulkCopy.ColumnMappings.Add("DonViTinh", "DonViTinh");
			bulkCopy.ColumnMappings.Add("MaBuoiHoc", "MaBuoiHoc");
			bulkCopy.ColumnMappings.Add("MaLop", "MaLop");
			bulkCopy.ColumnMappings.Add("TietBatDau", "TietBatDau");
			bulkCopy.ColumnMappings.Add("SoTiet", "SoTiet");
			bulkCopy.ColumnMappings.Add("TinhTrang", "TinhTrang");
			bulkCopy.ColumnMappings.Add("NgayDay", "NgayDay");
			bulkCopy.ColumnMappings.Add("Compensate", "Compensate");
			bulkCopy.ColumnMappings.Add("MaBacDaoTao", "MaBacDaoTao");
			bulkCopy.ColumnMappings.Add("MaKhoa", "MaKhoa");
			bulkCopy.ColumnMappings.Add("MaNhomMonHoc", "MaNhomMonHoc");
			bulkCopy.ColumnMappings.Add("MaPhongHoc", "MaPhongHoc");
			bulkCopy.ColumnMappings.Add("MaKhoaHoc", "MaKhoaHoc");
			bulkCopy.ColumnMappings.Add("LoaiHocKy", "LoaiHocKy");
			bulkCopy.ColumnMappings.Add("HeSoHocKy", "HeSoHocKy");
			bulkCopy.ColumnMappings.Add("NamThu", "NamThu");
			bulkCopy.ColumnMappings.Add("MaHocHam", "MaHocHam");
			bulkCopy.ColumnMappings.Add("MaHocVi", "MaHocVi");
			bulkCopy.ColumnMappings.Add("MaLoaiGiangVien", "MaLoaiGiangVien");
			bulkCopy.ColumnMappings.Add("MaChucVu", "MaChucVu");
			bulkCopy.ColumnMappings.Add("MaHinhThucDaoTao", "MaHinhThucDaoTao");
			bulkCopy.ColumnMappings.Add("GhiChu", "GhiChu");
			bulkCopy.ColumnMappings.Add("NgayCapNhat", "NgayCapNhat");
			bulkCopy.ColumnMappings.Add("LopHocPhanChuyenNganh", "LopHocPhanChuyenNganh");
			bulkCopy.ColumnMappings.Add("DotImport", "DotImport");
			bulkCopy.ColumnMappings.Add("DaoTaoTinChi", "DaoTaoTinChi");
			bulkCopy.ColumnMappings.Add("MaCauHinhChotGio", "MaCauHinhChotGio");
			bulkCopy.ColumnMappings.Add("MaKhoaCuaMonHoc", "MaKhoaCuaMonHoc");
			bulkCopy.ColumnMappings.Add("MaLoaiHinhDaoTao", "MaLoaiHinhDaoTao");
			
			foreach(PMS.Entities.KhoiLuongGiangDayChiTiet entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["MaKhoiLuong"] = entity.MaKhoiLuong;
							
				
					row["MaLichHoc"] = entity.MaLichHoc;
							
				
					row["MaGiangVien"] = entity.MaGiangVien;
							
				
					row["MaLopHocPhan"] = entity.MaLopHocPhan;
							
				
					row["NamHoc"] = entity.NamHoc;
							
				
					row["HocKy"] = entity.HocKy;
							
				
					row["MaMonHoc"] = entity.MaMonHoc;
							
				
					row["TenMonHoc"] = entity.TenMonHoc;
							
				
					row["Nhom"] = entity.Nhom;
							
				
					row["SoTinChi"] = entity.SoTinChi;
							
				
					row["LyThuyet"] = entity.LyThuyet;
							
				
					row["ThucHanh"] = entity.ThucHanh;
							
				
					row["BaiTap"] = entity.BaiTap;
							
				
					row["BaiTapLon"] = entity.BaiTapLon;
							
				
					row["DoAn"] = entity.DoAn;
							
				
					row["LuanAn"] = entity.LuanAn;
							
				
					row["TieuLuan"] = entity.TieuLuan;
							
				
					row["ThucTap"] = entity.ThucTap;
							
				
					row["SoLuong"] = entity.SoLuong.HasValue ? (object) entity.SoLuong  : System.DBNull.Value;
							
				
					row["MaLoaiHocPhan"] = entity.MaLoaiHocPhan;
							
				
					row["LoaiHocPhan"] = entity.LoaiHocPhan;
							
				
					row["PhanLoai"] = entity.PhanLoai;
							
				
					row["HeSoThanhPhan"] = entity.HeSoThanhPhan.HasValue ? (object) entity.HeSoThanhPhan  : System.DBNull.Value;
							
				
					row["Nam"] = entity.Nam.HasValue ? (object) entity.Nam  : System.DBNull.Value;
							
				
					row["Tuan"] = entity.Tuan.HasValue ? (object) entity.Tuan  : System.DBNull.Value;
							
				
					row["DonViTinh"] = entity.DonViTinh;
							
				
					row["MaBuoiHoc"] = entity.MaBuoiHoc.HasValue ? (object) entity.MaBuoiHoc  : System.DBNull.Value;
							
				
					row["MaLop"] = entity.MaLop;
							
				
					row["TietBatDau"] = entity.TietBatDau.HasValue ? (object) entity.TietBatDau  : System.DBNull.Value;
							
				
					row["SoTiet"] = entity.SoTiet.HasValue ? (object) entity.SoTiet  : System.DBNull.Value;
							
				
					row["TinhTrang"] = entity.TinhTrang;
							
				
					row["NgayDay"] = entity.NgayDay.HasValue ? (object) entity.NgayDay  : System.DBNull.Value;
							
				
					row["Compensate"] = entity.Compensate.HasValue ? (object) entity.Compensate  : System.DBNull.Value;
							
				
					row["MaBacDaoTao"] = entity.MaBacDaoTao;
							
				
					row["MaKhoa"] = entity.MaKhoa;
							
				
					row["MaNhomMonHoc"] = entity.MaNhomMonHoc;
							
				
					row["MaPhongHoc"] = entity.MaPhongHoc;
							
				
					row["MaKhoaHoc"] = entity.MaKhoaHoc;
							
				
					row["LoaiHocKy"] = entity.LoaiHocKy.HasValue ? (object) entity.LoaiHocKy  : System.DBNull.Value;
							
				
					row["HeSoHocKy"] = entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy  : System.DBNull.Value;
							
				
					row["NamThu"] = entity.NamThu;
							
				
					row["MaHocHam"] = entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value;
							
				
					row["MaHocVi"] = entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value;
							
				
					row["MaLoaiGiangVien"] = entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value;
							
				
					row["MaChucVu"] = entity.MaChucVu.HasValue ? (object) entity.MaChucVu  : System.DBNull.Value;
							
				
					row["MaHinhThucDaoTao"] = entity.MaHinhThucDaoTao;
							
				
					row["GhiChu"] = entity.GhiChu;
							
				
					row["NgayCapNhat"] = entity.NgayCapNhat;
							
				
					row["LopHocPhanChuyenNganh"] = entity.LopHocPhanChuyenNganh.HasValue ? (object) entity.LopHocPhanChuyenNganh  : System.DBNull.Value;
							
				
					row["DotImport"] = entity.DotImport;
							
				
					row["DaoTaoTinChi"] = entity.DaoTaoTinChi.HasValue ? (object) entity.DaoTaoTinChi  : System.DBNull.Value;
							
				
					row["MaCauHinhChotGio"] = entity.MaCauHinhChotGio.HasValue ? (object) entity.MaCauHinhChotGio  : System.DBNull.Value;
							
				
					row["MaKhoaCuaMonHoc"] = entity.MaKhoaCuaMonHoc;
							
				
					row["MaLoaiHinhDaoTao"] = entity.MaLoaiHinhDaoTao;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.KhoiLuongGiangDayChiTiet entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.KhoiLuongGiangDayChiTiet object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.KhoiLuongGiangDayChiTiet object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.KhoiLuongGiangDayChiTiet object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.KhoiLuongGiangDayChiTiet entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongGiangDayChiTiet_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@MaKhoiLuong", DbType.Int32, 4);
            database.AddInParameter(commandWrapper, "@MaLichHoc", DbType.Int32, entity.MaLichHoc );
            database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString, entity.MaGiangVien );
            database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, entity.MaLopHocPhan );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
            database.AddInParameter(commandWrapper, "@Nhom", DbType.AnsiString, entity.Nhom );
            database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Decimal, entity.SoTinChi );
            database.AddInParameter(commandWrapper, "@LyThuyet", DbType.Decimal, entity.LyThuyet );
            database.AddInParameter(commandWrapper, "@ThucHanh", DbType.Decimal, entity.ThucHanh );
            database.AddInParameter(commandWrapper, "@BaiTap", DbType.Decimal, entity.BaiTap );
            database.AddInParameter(commandWrapper, "@BaiTapLon", DbType.Decimal, entity.BaiTapLon );
            database.AddInParameter(commandWrapper, "@DoAn", DbType.Decimal, entity.DoAn );
            database.AddInParameter(commandWrapper, "@LuanAn", DbType.Decimal, entity.LuanAn );
            database.AddInParameter(commandWrapper, "@TieuLuan", DbType.Decimal, entity.TieuLuan );
            database.AddInParameter(commandWrapper, "@ThucTap", DbType.Decimal, entity.ThucTap );
			database.AddInParameter(commandWrapper, "@SoLuong", DbType.Int32, (entity.SoLuong.HasValue ? (object) entity.SoLuong  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Byte, entity.MaLoaiHocPhan );
            database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, entity.LoaiHocPhan );
            database.AddInParameter(commandWrapper, "@PhanLoai", DbType.String, entity.PhanLoai );
			database.AddInParameter(commandWrapper, "@HeSoThanhPhan", DbType.Decimal, (entity.HeSoThanhPhan.HasValue ? (object) entity.HeSoThanhPhan  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Nam", DbType.Int32, (entity.Nam.HasValue ? (object) entity.Nam  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Tuan", DbType.Int32, (entity.Tuan.HasValue ? (object) entity.Tuan  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@DonViTinh", DbType.AnsiString, entity.DonViTinh );
			database.AddInParameter(commandWrapper, "@MaBuoiHoc", DbType.Int32, (entity.MaBuoiHoc.HasValue ? (object) entity.MaBuoiHoc  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaLop", DbType.String, entity.MaLop );
			database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32, (entity.TietBatDau.HasValue ? (object) entity.TietBatDau  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SoTiet", DbType.Decimal, (entity.SoTiet.HasValue ? (object) entity.SoTiet  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@TinhTrang", DbType.Int32, entity.TinhTrang );
			database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime, (entity.NgayDay.HasValue ? (object) entity.NgayDay  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Compensate", DbType.Byte, (entity.Compensate.HasValue ? (object) entity.Compensate  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, entity.MaBacDaoTao );
            database.AddInParameter(commandWrapper, "@MaKhoa", DbType.AnsiString, entity.MaKhoa );
            database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, entity.MaNhomMonHoc );
            database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString, entity.MaPhongHoc );
            database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, entity.MaKhoaHoc );
			database.AddInParameter(commandWrapper, "@LoaiHocKy", DbType.Byte, (entity.LoaiHocKy.HasValue ? (object) entity.LoaiHocKy  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, (entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NamThu", DbType.AnsiString, entity.NamThu );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaChucVu", DbType.Int32, (entity.MaChucVu.HasValue ? (object) entity.MaChucVu  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, entity.MaHinhThucDaoTao );
            database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, entity.GhiChu );
            database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.String, entity.NgayCapNhat );
			database.AddInParameter(commandWrapper, "@LopHocPhanChuyenNganh", DbType.Boolean, (entity.LopHocPhanChuyenNganh.HasValue ? (object) entity.LopHocPhanChuyenNganh  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@DotImport", DbType.String, entity.DotImport );
			database.AddInParameter(commandWrapper, "@DaoTaoTinChi", DbType.Boolean, (entity.DaoTaoTinChi.HasValue ? (object) entity.DaoTaoTinChi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32, (entity.MaCauHinhChotGio.HasValue ? (object) entity.MaCauHinhChotGio  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaKhoaCuaMonHoc", DbType.AnsiString, entity.MaKhoaCuaMonHoc );
            database.AddInParameter(commandWrapper, "@MaLoaiHinhDaoTao", DbType.AnsiString, entity.MaLoaiHinhDaoTao );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _maKhoiLuong = database.GetParameterValue(commandWrapper, "@MaKhoiLuong");
			entity.MaKhoiLuong = (System.Int32)_maKhoiLuong;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.KhoiLuongGiangDayChiTiet object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.KhoiLuongGiangDayChiTiet object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.KhoiLuongGiangDayChiTiet entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_KhoiLuongGiangDayChiTiet_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@MaKhoiLuong", DbType.Int32, entity.MaKhoiLuong );
            database.AddInParameter(commandWrapper, "@MaLichHoc", DbType.Int32, entity.MaLichHoc );
            database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString, entity.MaGiangVien );
            database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString, entity.MaLopHocPhan );
            database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString, entity.NamHoc );
            database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString, entity.HocKy );
            database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString, entity.MaMonHoc );
            database.AddInParameter(commandWrapper, "@TenMonHoc", DbType.String, entity.TenMonHoc );
            database.AddInParameter(commandWrapper, "@Nhom", DbType.AnsiString, entity.Nhom );
            database.AddInParameter(commandWrapper, "@SoTinChi", DbType.Decimal, entity.SoTinChi );
            database.AddInParameter(commandWrapper, "@LyThuyet", DbType.Decimal, entity.LyThuyet );
            database.AddInParameter(commandWrapper, "@ThucHanh", DbType.Decimal, entity.ThucHanh );
            database.AddInParameter(commandWrapper, "@BaiTap", DbType.Decimal, entity.BaiTap );
            database.AddInParameter(commandWrapper, "@BaiTapLon", DbType.Decimal, entity.BaiTapLon );
            database.AddInParameter(commandWrapper, "@DoAn", DbType.Decimal, entity.DoAn );
            database.AddInParameter(commandWrapper, "@LuanAn", DbType.Decimal, entity.LuanAn );
            database.AddInParameter(commandWrapper, "@TieuLuan", DbType.Decimal, entity.TieuLuan );
            database.AddInParameter(commandWrapper, "@ThucTap", DbType.Decimal, entity.ThucTap );
			database.AddInParameter(commandWrapper, "@SoLuong", DbType.Int32, (entity.SoLuong.HasValue ? (object) entity.SoLuong : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Byte, entity.MaLoaiHocPhan );
            database.AddInParameter(commandWrapper, "@LoaiHocPhan", DbType.String, entity.LoaiHocPhan );
            database.AddInParameter(commandWrapper, "@PhanLoai", DbType.String, entity.PhanLoai );
			database.AddInParameter(commandWrapper, "@HeSoThanhPhan", DbType.Decimal, (entity.HeSoThanhPhan.HasValue ? (object) entity.HeSoThanhPhan : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Nam", DbType.Int32, (entity.Nam.HasValue ? (object) entity.Nam : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Tuan", DbType.Int32, (entity.Tuan.HasValue ? (object) entity.Tuan : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@DonViTinh", DbType.AnsiString, entity.DonViTinh );
			database.AddInParameter(commandWrapper, "@MaBuoiHoc", DbType.Int32, (entity.MaBuoiHoc.HasValue ? (object) entity.MaBuoiHoc : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaLop", DbType.String, entity.MaLop );
			database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32, (entity.TietBatDau.HasValue ? (object) entity.TietBatDau : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SoTiet", DbType.Decimal, (entity.SoTiet.HasValue ? (object) entity.SoTiet : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@TinhTrang", DbType.Int32, entity.TinhTrang );
			database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime, (entity.NgayDay.HasValue ? (object) entity.NgayDay : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Compensate", DbType.Byte, (entity.Compensate.HasValue ? (object) entity.Compensate : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString, entity.MaBacDaoTao );
            database.AddInParameter(commandWrapper, "@MaKhoa", DbType.AnsiString, entity.MaKhoa );
            database.AddInParameter(commandWrapper, "@MaNhomMonHoc", DbType.AnsiString, entity.MaNhomMonHoc );
            database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString, entity.MaPhongHoc );
            database.AddInParameter(commandWrapper, "@MaKhoaHoc", DbType.AnsiString, entity.MaKhoaHoc );
			database.AddInParameter(commandWrapper, "@LoaiHocKy", DbType.Byte, (entity.LoaiHocKy.HasValue ? (object) entity.LoaiHocKy : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HeSoHocKy", DbType.Decimal, (entity.HeSoHocKy.HasValue ? (object) entity.HeSoHocKy : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NamThu", DbType.AnsiString, entity.NamThu );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaChucVu", DbType.Int32, (entity.MaChucVu.HasValue ? (object) entity.MaChucVu : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaHinhThucDaoTao", DbType.AnsiString, entity.MaHinhThucDaoTao );
            database.AddInParameter(commandWrapper, "@GhiChu", DbType.String, entity.GhiChu );
            database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.String, entity.NgayCapNhat );
			database.AddInParameter(commandWrapper, "@LopHocPhanChuyenNganh", DbType.Boolean, (entity.LopHocPhanChuyenNganh.HasValue ? (object) entity.LopHocPhanChuyenNganh : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@DotImport", DbType.String, entity.DotImport );
			database.AddInParameter(commandWrapper, "@DaoTaoTinChi", DbType.Boolean, (entity.DaoTaoTinChi.HasValue ? (object) entity.DaoTaoTinChi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32, (entity.MaCauHinhChotGio.HasValue ? (object) entity.MaCauHinhChotGio : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaKhoaCuaMonHoc", DbType.AnsiString, entity.MaKhoaCuaMonHoc );
            database.AddInParameter(commandWrapper, "@MaLoaiHinhDaoTao", DbType.AnsiString, entity.MaLoaiHinhDaoTao );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region cust_KhoiLuongGiangDayChiTiet_DongBoDuLieu
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_DongBoDuLieu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DongBoDuLieu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_DongBoDuLieu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DongBoDuLieu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DongBoDuLieu", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByNgay
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByNgay' stored procedure. 
		/// </summary>	
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByNgay(TransactionManager transactionManager, int start, int pageLength , System.DateTime tuNgay, System.DateTime denNgay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByNgay", true);
			
			database.AddInParameter(commandWrapper, "@TuNgay", DbType.DateTime,  tuNgay );
			database.AddInParameter(commandWrapper, "@DenNgay", DbType.DateTime,  denNgay );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNgay", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNgay", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_LuuSoLuongThucTapTotNghiep
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_LuuSoLuongThucTapTotNghiep' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuSoLuongThucTapTotNghiep(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_LuuSoLuongThucTapTotNghiep", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuSoLuongThucTapTotNghiep", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuSoLuongThucTapTotNghiep", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKy", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKy", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByXmlData
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByXmlData' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByXmlData(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByXmlData", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByXmlData", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByXmlData", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetGiangVienSoTiet
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetGiangVienSoTiet' stored procedure. 
		/// </summary>	
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetGiangVienSoTiet(TransactionManager transactionManager, int start, int pageLength , System.String maLopHocPhan)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetGiangVienSoTiet", true);
			
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetGiangVienSoTiet", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetGiangVienSoTiet", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_KiemTraDongBo
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_KiemTraDongBo' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void KiemTraDongBo(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_KiemTraDongBo", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KiemTraDongBo", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KiemTraDongBo", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_CapNhatSiSoLopThucTapTotNghiep
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_CapNhatSiSoLopThucTapTotNghiep' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CapNhatSiSoLopThucTapTotNghiep(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_CapNhatSiSoLopThucTapTotNghiep", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CapNhatSiSoLopThucTapTotNghiep", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CapNhatSiSoLopThucTapTotNghiep", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetMonHocByMaGiangVienNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetMonHocByMaGiangVienNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetMonHocByMaGiangVienNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String maGiangVien, System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetMonHocByMaGiangVienNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMonHocByMaGiangVienNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetMonHocByMaGiangVienNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_ThongKeChiTietKlgdHvhqByNamHocHocKyMaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_ThongKeChiTietKlgdHvhqByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeChiTietKlgdHvhqByNamHocHocKyMaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_ThongKeChiTietKlgdHvhqByNamHocHocKyMaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeChiTietKlgdHvhqByNamHocHocKyMaDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeChiTietKlgdHvhqByNamHocHocKyMaDonVi", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyCauHinhChotGio
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyCauHinhChotGio' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByNamHocHocKyCauHinhChotGio(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyCauHinhChotGio", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyCauHinhChotGio", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyCauHinhChotGio", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByBacLoaiHinhNamHocHocKyDot
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByBacLoaiHinhNamHocHocKyDot' stored procedure. 
		/// </summary>	
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByBacLoaiHinhNamHocHocKyDot(TransactionManager transactionManager, int start, int pageLength , System.String bacDaoTao, System.String loaiHinhDaoTao, System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByBacLoaiHinhNamHocHocKyDot", true);
			
			database.AddInParameter(commandWrapper, "@BacDaoTao", DbType.AnsiString,  bacDaoTao );
			database.AddInParameter(commandWrapper, "@LoaiHinhDaoTao", DbType.AnsiString,  loaiHinhDaoTao );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByBacLoaiHinhNamHocHocKyDot", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByBacLoaiHinhNamHocHocKyDot", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_CapNhatSiSo
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_CapNhatSiSo' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CapNhatSiSo(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_CapNhatSiSo", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CapNhatSiSo", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CapNhatSiSo", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetLopHocPhanByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetLopHocPhanByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetLopHocPhanByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetLopHocPhanByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetLopHocPhanByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetLopHocPhanByNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetMonHocByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetMonHocByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetMonHocByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetMonHocByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMonHocByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetMonHocByNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByMaGiangVienMaLopHocPhanMaLop
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maLop"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByMaGiangVienMaLopHocPhanMaLop(TransactionManager transactionManager, int start, int pageLength , System.String maGiangVien, System.String maLopHocPhan, System.String maLop)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByMaGiangVienMaLopHocPhanMaLop", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
			database.AddInParameter(commandWrapper, "@MaLop", DbType.AnsiString,  maLop );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaGiangVienMaLopHocPhanMaLop", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaGiangVienMaLopHocPhanMaLop", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoDot
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void KiemTraDongBoTheoDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KiemTraDongBoTheoDot", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KiemTraDongBoTheoDot", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoNgay
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoNgay' stored procedure. 
		/// </summary>	
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void KiemTraDongBoTheoNgay(TransactionManager transactionManager, int start, int pageLength , System.DateTime tuNgay, System.DateTime denNgay, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoNgay", true);
			
			database.AddInParameter(commandWrapper, "@TuNgay", DbType.DateTime,  tuNgay );
			database.AddInParameter(commandWrapper, "@DenNgay", DbType.DateTime,  denNgay );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KiemTraDongBoTheoNgay", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KiemTraDongBoTheoNgay", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetKhoiLuongImportByNamHocHocKyDot
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetKhoiLuongImportByNamHocHocKyDot' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dot"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetKhoiLuongImportByNamHocHocKyDot(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String dot)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetKhoiLuongImportByNamHocHocKyDot", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@Dot", DbType.String,  dot );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetKhoiLuongImportByNamHocHocKyDot", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetKhoiLuongImportByNamHocHocKyDot", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_XoaDotImportTheoNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_XoaDotImportTheoNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dot"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void XoaDotImportTheoNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String dot, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_XoaDotImportTheoNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@Dot", DbType.String,  dot );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "XoaDotImportTheoNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "XoaDotImportTheoNamHocHocKy", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetLopHocPhanByMaGiangVienMaMonHocNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetLopHocPhanByMaGiangVienMaMonHocNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetLopHocPhanByMaGiangVienMaMonHocNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String maGiangVien, System.String maMonHoc, System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetLopHocPhanByMaGiangVienMaMonHocNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString,  maMonHoc );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetLopHocPhanByMaGiangVienMaMonHocNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetLopHocPhanByMaGiangVienMaMonHocNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetDuLieuDeTinhToan
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetDuLieuDeTinhToan' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetDuLieuDeTinhToan(TransactionManager transactionManager, int start, int pageLength , System.String maGiangVien, System.String maLopHocPhan, System.Int32 maCauHinhChotGio)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetDuLieuDeTinhToan", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
			database.AddInParameter(commandWrapper, "@MaCauHinhChotGio", DbType.Int32,  maCauHinhChotGio );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetDuLieuDeTinhToan", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetDuLieuDeTinhToan", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetSinhVienByLopHocPhanNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetSinhVienByLopHocPhanNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetSinhVienByLopHocPhanNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String maLopHocPhan, System.String maLoaiHinhDaoTao)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetSinhVienByLopHocPhanNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
			database.AddInParameter(commandWrapper, "@MaLoaiHinhDaoTao", DbType.AnsiString,  maLoaiHinhDaoTao );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSinhVienByLopHocPhanNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSinhVienByLopHocPhanNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetSoTietBoSung
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetSoTietBoSung' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetSoTietBoSung(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetSoTietBoSung", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietBoSung", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietBoSung", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyMaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByNamHocHocKyMaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyMaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyMaDonVi", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyMaDonVi", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetThongTinChiTiet
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetThongTinChiTiet' stored procedure. 
		/// </summary>	
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThongTinChiTiet(TransactionManager transactionManager, int start, int pageLength , System.String maLopHocPhan)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetThongTinChiTiet", true);
			
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThongTinChiTiet", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThongTinChiTiet", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetDotImportByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetDotImportByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetDotImportByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetDotImportByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetDotImportByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetDotImportByNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_Import
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_Import' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="tenDotImport"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Import(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String tenDotImport, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_Import", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@TenDotImport", DbType.String,  tenDotImport );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Import", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Import", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetMonHocByMaGiangVienNamHocHocKyMaMonHoc
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetMonHocByMaGiangVienNamHocHocKyMaMonHoc' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetMonHocByMaGiangVienNamHocHocKyMaMonHoc(TransactionManager transactionManager, int start, int pageLength , System.String maGiangVien, System.String namHoc, System.String hocKy, System.String maMonHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetMonHocByMaGiangVienNamHocHocKyMaMonHoc", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString,  maMonHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMonHocByMaGiangVienNamHocHocKyMaMonHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetMonHocByMaGiangVienNamHocHocKyMaMonHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetHeSoNienCheTinChi
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetHeSoNienCheTinChi' stored procedure. 
		/// </summary>	
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetHeSoNienCheTinChi(TransactionManager transactionManager, int start, int pageLength , System.String maLopHocPhan, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetHeSoNienCheTinChi", true);
			
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetHeSoNienCheTinChi", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetHeSoNienCheTinChi", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetLhpThucTapTotNghiepByNamHocHocKyKhoa
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetLhpThucTapTotNghiepByNamHocHocKyKhoa' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetLhpThucTapTotNghiepByNamHocHocKyKhoa(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetLhpThucTapTotNghiepByNamHocHocKyKhoa", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetLhpThucTapTotNghiepByNamHocHocKyKhoa", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetLhpThucTapTotNghiepByNamHocHocKyKhoa", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoDonVi
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void KiemTraDongBoTheoDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_KiemTraDongBoTheoDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KiemTraDongBoTheoDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KiemTraDongBoTheoDonVi", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByMaGiangVienMaLopHocPhan
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByMaGiangVienMaLopHocPhan' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByMaGiangVienMaLopHocPhan(TransactionManager transactionManager, int start, int pageLength , System.String maGiangVien, System.String maLopHocPhan)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByMaGiangVienMaLopHocPhan", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaGiangVienMaLopHocPhan", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaGiangVienMaLopHocPhan", rows));


				return rows;
		}
		#endregion

		#region cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyBoSung
					
		/// <summary>
		///	This method wraps the 'cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyBoSung' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;KhoiLuongGiangDayChiTiet&gt;"/> instance.</returns>
		public override TList<KhoiLuongGiangDayChiTiet> GetByNamHocHocKyBoSung(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_KhoiLuongGiangDayChiTiet_GetByNamHocHocKyBoSung", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<KhoiLuongGiangDayChiTiet> rows = new TList<KhoiLuongGiangDayChiTiet>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyBoSung", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNamHocHocKyBoSung", rows));


				return rows;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
