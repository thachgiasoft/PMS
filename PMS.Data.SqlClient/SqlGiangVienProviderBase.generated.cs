/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlGiangVienProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="GiangVien"/> entity.
	///</summary>
	public abstract partial class SqlGiangVienProviderBase : GiangVienProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlGiangVienProviderBase"/> instance.
		/// </summary>
		public SqlGiangVienProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlGiangVienProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlGiangVienProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
	
		#region GetByMaHoSoFromGiangVienHoSo
		/// <summary>
		///		Gets GiangVien objects from the datasource by MaHoSo in the
		///		GiangVien_HoSo table. Table GiangVien is related to table HoSo
		///		through the (M:N) relationship defined in the GiangVien_HoSo table.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maHoSo"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns a <c>TList</c> of GiangVien objects.</returns>
		public override TList<GiangVien> GetByMaHoSoFromGiangVienHoSo(TransactionManager transactionManager, System.Int32 _maHoSo, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaHoSoFromGiangVienHoSo", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@MaHoSo", DbType.Int32, _maHoSo);
			
			IDataReader reader = null;
			// Create collection and fill
			TList<GiangVien> rows = new TList<GiangVien>();
			
			try
			{
				// Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaHoSoFromGiangVienHoSo", rows)); 
	
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
					
				// Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaHoSoFromGiangVienHoSo", rows)); 

			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows; 
		}
		
		#endregion GetByMaHoSoFromGiangVienHoSo
		
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_maGiangVien">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32, _maGiangVien);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(GiangVien)
					,_maGiangVien);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
		public override TList<GiangVien> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<GiangVien>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaDanToc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTonGiao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaNguoiLap", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MatKhau", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ho", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenDem", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ten", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgaySinh", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GioiTinh", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoiSinh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Cmnd", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayCap", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoiCap", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DoanDang", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayVaoDoanDang", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayKyHopDong", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayKetThucHopDong", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HinhAnh", DbType.Binary, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiaChi", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThuongTru", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoiLamViec", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DienThoai", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoDiDong", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTaiKhoan", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenNganHang", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChiNhanh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoSoBaoHiem", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThoiGianBatDau", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BacLuong", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayHuongLuong", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamLamViec", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChuyenNganh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHeSoThuLao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ngach", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoHieuCongChuc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Hrmid", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoiCapBang", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@KhoaTaiKhoan", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiNhanVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaNgachCongChuc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoChinhTri", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoSuPham", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoNgoaiNgu", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoTinHoc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@KhoiKienThucGiangDay", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NganhDaoTao", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonViGiangDay", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdHoSo", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaQuocTich", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DaXoaHrm", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("magiangvien ") || clause.Trim().StartsWith("magiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaGiangVien", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("madantoc ") || clause.Trim().StartsWith("madantoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaDanToc", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matongiao ") || clause.Trim().StartsWith("matongiao="))
				{
					database.SetParameterValue(commandWrapper, "@MaTonGiao", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("madonvi ") || clause.Trim().StartsWith("madonvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaDonVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocham ") || clause.Trim().StartsWith("mahocham="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocHam", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocvi ") || clause.Trim().StartsWith("mahocvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaigiangvien ") || clause.Trim().StartsWith("maloaigiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiGiangVien", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("manguoilap ") || clause.Trim().StartsWith("manguoilap="))
				{
					database.SetParameterValue(commandWrapper, "@MaNguoiLap", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matkhau ") || clause.Trim().StartsWith("matkhau="))
				{
					database.SetParameterValue(commandWrapper, "@MatKhau", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matinhtrang ") || clause.Trim().StartsWith("matinhtrang="))
				{
					database.SetParameterValue(commandWrapper, "@MaTinhTrang", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maquanly ") || clause.Trim().StartsWith("maquanly="))
				{
					database.SetParameterValue(commandWrapper, "@MaQuanLy", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ho ") || clause.Trim().StartsWith("ho="))
				{
					database.SetParameterValue(commandWrapper, "@Ho", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tendem ") || clause.Trim().StartsWith("tendem="))
				{
					database.SetParameterValue(commandWrapper, "@TenDem", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ten ") || clause.Trim().StartsWith("ten="))
				{
					database.SetParameterValue(commandWrapper, "@Ten", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaysinh ") || clause.Trim().StartsWith("ngaysinh="))
				{
					database.SetParameterValue(commandWrapper, "@NgaySinh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gioitinh ") || clause.Trim().StartsWith("gioitinh="))
				{
					database.SetParameterValue(commandWrapper, "@GioiTinh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("noisinh ") || clause.Trim().StartsWith("noisinh="))
				{
					database.SetParameterValue(commandWrapper, "@NoiSinh", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cmnd ") || clause.Trim().StartsWith("cmnd="))
				{
					database.SetParameterValue(commandWrapper, "@Cmnd", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycap ") || clause.Trim().StartsWith("ngaycap="))
				{
					database.SetParameterValue(commandWrapper, "@NgayCap", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("noicap ") || clause.Trim().StartsWith("noicap="))
				{
					database.SetParameterValue(commandWrapper, "@NoiCap", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("doandang ") || clause.Trim().StartsWith("doandang="))
				{
					database.SetParameterValue(commandWrapper, "@DoanDang", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayvaodoandang ") || clause.Trim().StartsWith("ngayvaodoandang="))
				{
					database.SetParameterValue(commandWrapper, "@NgayVaoDoanDang", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaykyhopdong ") || clause.Trim().StartsWith("ngaykyhopdong="))
				{
					database.SetParameterValue(commandWrapper, "@NgayKyHopDong", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayketthuchopdong ") || clause.Trim().StartsWith("ngayketthuchopdong="))
				{
					database.SetParameterValue(commandWrapper, "@NgayKetThucHopDong", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hinhanh ") || clause.Trim().StartsWith("hinhanh="))
				{
					database.SetParameterValue(commandWrapper, "@HinhAnh", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("diachi ") || clause.Trim().StartsWith("diachi="))
				{
					database.SetParameterValue(commandWrapper, "@DiaChi", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thuongtru ") || clause.Trim().StartsWith("thuongtru="))
				{
					database.SetParameterValue(commandWrapper, "@ThuongTru", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("noilamviec ") || clause.Trim().StartsWith("noilamviec="))
				{
					database.SetParameterValue(commandWrapper, "@NoiLamViec", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("email ") || clause.Trim().StartsWith("email="))
				{
					database.SetParameterValue(commandWrapper, "@Email", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dienthoai ") || clause.Trim().StartsWith("dienthoai="))
				{
					database.SetParameterValue(commandWrapper, "@DienThoai", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sodidong ") || clause.Trim().StartsWith("sodidong="))
				{
					database.SetParameterValue(commandWrapper, "@SoDiDong", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotaikhoan ") || clause.Trim().StartsWith("sotaikhoan="))
				{
					database.SetParameterValue(commandWrapper, "@SoTaiKhoan", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tennganhang ") || clause.Trim().StartsWith("tennganhang="))
				{
					database.SetParameterValue(commandWrapper, "@TenNganHang", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("masothue ") || clause.Trim().StartsWith("masothue="))
				{
					database.SetParameterValue(commandWrapper, "@MaSoThue", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chinhanh ") || clause.Trim().StartsWith("chinhanh="))
				{
					database.SetParameterValue(commandWrapper, "@ChiNhanh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sosobaohiem ") || clause.Trim().StartsWith("sosobaohiem="))
				{
					database.SetParameterValue(commandWrapper, "@SoSoBaoHiem", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thoigianbatdau ") || clause.Trim().StartsWith("thoigianbatdau="))
				{
					database.SetParameterValue(commandWrapper, "@ThoiGianBatDau", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bacluong ") || clause.Trim().StartsWith("bacluong="))
				{
					database.SetParameterValue(commandWrapper, "@BacLuong", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayhuongluong ") || clause.Trim().StartsWith("ngayhuongluong="))
				{
					database.SetParameterValue(commandWrapper, "@NgayHuongLuong", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namlamviec ") || clause.Trim().StartsWith("namlamviec="))
				{
					database.SetParameterValue(commandWrapper, "@NamLamViec", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chuyennganh ") || clause.Trim().StartsWith("chuyennganh="))
				{
					database.SetParameterValue(commandWrapper, "@ChuyenNganh", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahesothulao ") || clause.Trim().StartsWith("mahesothulao="))
				{
					database.SetParameterValue(commandWrapper, "@MaHeSoThuLao", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngach ") || clause.Trim().StartsWith("ngach="))
				{
					database.SetParameterValue(commandWrapper, "@Ngach", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sohieucongchuc ") || clause.Trim().StartsWith("sohieucongchuc="))
				{
					database.SetParameterValue(commandWrapper, "@SoHieuCongChuc", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hrmid ") || clause.Trim().StartsWith("hrmid="))
				{
					database.SetParameterValue(commandWrapper, "@Hrmid", new Guid(
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("noicapbang ") || clause.Trim().StartsWith("noicapbang="))
				{
					database.SetParameterValue(commandWrapper, "@NoiCapBang", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("khoataikhoan ") || clause.Trim().StartsWith("khoataikhoan="))
				{
					database.SetParameterValue(commandWrapper, "@KhoaTaiKhoan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloainhanvien ") || clause.Trim().StartsWith("maloainhanvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiNhanVien", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mangachcongchuc ") || clause.Trim().StartsWith("mangachcongchuc="))
				{
					database.SetParameterValue(commandWrapper, "@MaNgachCongChuc", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdochinhtri ") || clause.Trim().StartsWith("matrinhdochinhtri="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoChinhTri", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdosupham ") || clause.Trim().StartsWith("matrinhdosupham="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoSuPham", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdongoaingu ") || clause.Trim().StartsWith("matrinhdongoaingu="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoNgoaiNgu", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdotinhoc ") || clause.Trim().StartsWith("matrinhdotinhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoTinHoc", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdoquanlynhanuoc ") || clause.Trim().StartsWith("matrinhdoquanlynhanuoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nguoicapnhat ") || clause.Trim().StartsWith("nguoicapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NguoiCapNhat", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycapnhat ") || clause.Trim().StartsWith("ngaycapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NgayCapNhat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("khoikienthucgiangday ") || clause.Trim().StartsWith("khoikienthucgiangday="))
				{
					database.SetParameterValue(commandWrapper, "@KhoiKienThucGiangDay", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nganhdaotao ") || clause.Trim().StartsWith("nganhdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@NganhDaoTao", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("donvigiangday ") || clause.Trim().StartsWith("donvigiangday="))
				{
					database.SetParameterValue(commandWrapper, "@DonViGiangDay", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("idhoso ") || clause.Trim().StartsWith("idhoso="))
				{
					database.SetParameterValue(commandWrapper, "@IdHoSo", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maquoctich ") || clause.Trim().StartsWith("maquoctich="))
				{
					database.SetParameterValue(commandWrapper, "@MaQuocTich", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("daxoahrm ") || clause.Trim().StartsWith("daxoahrm="))
				{
					database.SetParameterValue(commandWrapper, "@DaXoaHrm", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<GiangVien> rows = new TList<GiangVien>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
		public override TList<GiangVien> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_Find_Dynamic", typeof(GiangVienColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<GiangVien> rows = new TList<GiangVien>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<GiangVien> rows = new TList<GiangVien>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
		public override TList<GiangVien> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<GiangVien> rows = new TList<GiangVien>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByMaHocHam
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_HocHam key.
		///		FK_GiangVien_HocHam Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maHocHam"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaHocHam(TransactionManager transactionManager, System.Int32? _maHocHam, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaHocHam", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, _maHocHam);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaHocHam", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaHocHam", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaHocVi
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_HocVi key.
		///		FK_GiangVien_HocVi Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maHocVi"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaHocVi(TransactionManager transactionManager, System.Int32? _maHocVi, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaHocVi", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, _maHocVi);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaHocVi", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaHocVi", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaLoaiGiangVien
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_LoaiGiangVien key.
		///		FK_GiangVien_LoaiGiangVien Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maLoaiGiangVien"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaLoaiGiangVien(TransactionManager transactionManager, System.Int32? _maLoaiGiangVien, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaLoaiGiangVien", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, _maLoaiGiangVien);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaLoaiGiangVien", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaLoaiGiangVien", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaLoaiNhanVien
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_LoaiNhanVien key.
		///		FK_GiangVien_LoaiNhanVien Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maLoaiNhanVien"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaLoaiNhanVien(TransactionManager transactionManager, System.Int32? _maLoaiNhanVien, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaLoaiNhanVien", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaLoaiNhanVien", DbType.Int32, _maLoaiNhanVien);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaLoaiNhanVien", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaLoaiNhanVien", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaNgachCongChuc
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_NgachCongChuc key.
		///		FK_GiangVien_NgachCongChuc Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maNgachCongChuc"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaNgachCongChuc(TransactionManager transactionManager, System.Int32? _maNgachCongChuc, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaNgachCongChuc", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaNgachCongChuc", DbType.Int32, _maNgachCongChuc);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaNgachCongChuc", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaNgachCongChuc", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaNguoiLap
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_TaiKhoan key.
		///		FK_GiangVien_TaiKhoan Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maNguoiLap"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaNguoiLap(TransactionManager transactionManager, System.Int32? _maNguoiLap, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaNguoiLap", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaNguoiLap", DbType.Int32, _maNguoiLap);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaNguoiLap", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaNguoiLap", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaTinhTrang
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_TinhTrang key.
		///		FK_GiangVien_TinhTrang Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maTinhTrang"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaTinhTrang(TransactionManager transactionManager, System.Int32? _maTinhTrang, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaTinhTrang", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.Int32, _maTinhTrang);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaTinhTrang", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaTinhTrang", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaTrinhDoChinhTri
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_TrinhDoChinhTri key.
		///		FK_GiangVien_TrinhDoChinhTri Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maTrinhDoChinhTri"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaTrinhDoChinhTri(TransactionManager transactionManager, System.Int32? _maTrinhDoChinhTri, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaTrinhDoChinhTri", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaTrinhDoChinhTri", DbType.Int32, _maTrinhDoChinhTri);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoChinhTri", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoChinhTri", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaTrinhDoNgoaiNgu
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_TrinhDoNgoaiNgu key.
		///		FK_GiangVien_TrinhDoNgoaiNgu Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maTrinhDoNgoaiNgu"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaTrinhDoNgoaiNgu(TransactionManager transactionManager, System.Int32? _maTrinhDoNgoaiNgu, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaTrinhDoNgoaiNgu", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaTrinhDoNgoaiNgu", DbType.Int32, _maTrinhDoNgoaiNgu);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoNgoaiNgu", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoNgoaiNgu", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaTrinhDoQuanLyNhaNuoc
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_TrinhDoQuanLyNhaNuoc key.
		///		FK_GiangVien_TrinhDoQuanLyNhaNuoc Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maTrinhDoQuanLyNhaNuoc"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaTrinhDoQuanLyNhaNuoc(TransactionManager transactionManager, System.Int32? _maTrinhDoQuanLyNhaNuoc, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaTrinhDoQuanLyNhaNuoc", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", DbType.Int32, _maTrinhDoQuanLyNhaNuoc);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoQuanLyNhaNuoc", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoQuanLyNhaNuoc", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaTrinhDoSuPham
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_TrinhDoSuPham key.
		///		FK_GiangVien_TrinhDoSuPham Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maTrinhDoSuPham"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaTrinhDoSuPham(TransactionManager transactionManager, System.Int32? _maTrinhDoSuPham, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaTrinhDoSuPham", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaTrinhDoSuPham", DbType.Int32, _maTrinhDoSuPham);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoSuPham", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoSuPham", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByMaTrinhDoTinHoc
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GiangVien_TrinhDoTinHoc key.
		///		FK_GiangVien_TrinhDoTinHoc Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maTrinhDoTinHoc"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaTrinhDoTinHoc(TransactionManager transactionManager, System.Int32? _maTrinhDoTinHoc, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaTrinhDoTinHoc", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaTrinhDoTinHoc", DbType.Int32, _maTrinhDoTinHoc);
			
			IDataReader reader = null;
			TList<GiangVien> rows = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoTinHoc", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaTrinhDoTinHoc", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByMaQuanLy
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GiangVien index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maQuanLy"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;GiangVien&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVien> GetByMaQuanLy(TransactionManager transactionManager, System.String _maQuanLy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaQuanLy", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, _maQuanLy);
			
			IDataReader reader = null;
			TList<GiangVien> tmp = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaQuanLy", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaQuanLy", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByMaGiangVien
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_GiangVien index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maGiangVien"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.GiangVien"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.GiangVien GetByMaGiangVien(TransactionManager transactionManager, System.Int32 _maGiangVien, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_GetByMaGiangVien", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32, _maGiangVien);
			
			IDataReader reader = null;
			TList<GiangVien> tmp = new TList<GiangVien>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaGiangVien", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaGiangVien", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.GiangVien object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.GiangVien> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "GiangVien";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("MaGiangVien", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MaDanToc", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("MaTonGiao", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("MaDonVi", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("MaHocHam", typeof(System.Int32));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("MaHocVi", typeof(System.Int32));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("MaLoaiGiangVien", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("MaNguoiLap", typeof(System.Int32));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("MatKhau", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("MaTinhTrang", typeof(System.Int32));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("MaQuanLy", typeof(System.String));
			col10.AllowDBNull = false;		
			DataColumn col11 = dataTable.Columns.Add("Ho", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("TenDem", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("Ten", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("NgaySinh", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("GioiTinh", typeof(System.Boolean));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("NoiSinh", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("Cmnd", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("NgayCap", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("NoiCap", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("DoanDang", typeof(System.Boolean));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("NgayVaoDoanDang", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("NgayKyHopDong", typeof(System.DateTime));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("NgayKetThucHopDong", typeof(System.DateTime));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("HinhAnh", typeof(System.Byte[]));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("DiaChi", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("ThuongTru", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("NoiLamViec", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("Email", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("DienThoai", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("SoDiDong", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("SoTaiKhoan", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("TenNganHang", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("MaSoThue", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("ChiNhanh", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("SoSoBaoHiem", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("ThoiGianBatDau", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("BacLuong", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("NgayHuongLuong", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("NamLamViec", typeof(System.String));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("ChuyenNganh", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("MaHeSoThuLao", typeof(System.String));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("Ngach", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("SoHieuCongChuc", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("HRMID", typeof(System.Guid));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("NoiCapBang", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("KhoaTaiKhoan", typeof(System.Boolean));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("MaLoaiNhanVien", typeof(System.Int32));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("MaNgachCongChuc", typeof(System.Int32));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("MaTrinhDoChinhTri", typeof(System.Int32));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("MaTrinhDoSuPham", typeof(System.Int32));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("MaTrinhDoNgoaiNgu", typeof(System.Int32));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("MaTrinhDoTinHoc", typeof(System.Int32));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("MaTrinhDoQuanLyNhaNuoc", typeof(System.Int32));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("NguoiCapNhat", typeof(System.String));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("NgayCapNhat", typeof(System.DateTime));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("KhoiKienThucGiangDay", typeof(System.String));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("NganhDaoTao", typeof(System.String));
			col57.AllowDBNull = true;		
			DataColumn col58 = dataTable.Columns.Add("DonViGiangDay", typeof(System.String));
			col58.AllowDBNull = true;		
			DataColumn col59 = dataTable.Columns.Add("IdHoSo", typeof(System.Int32));
			col59.AllowDBNull = true;		
			DataColumn col60 = dataTable.Columns.Add("MaQuocTich", typeof(System.Int32));
			col60.AllowDBNull = true;		
			DataColumn col61 = dataTable.Columns.Add("DaXoaHRM", typeof(System.Boolean));
			col61.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("MaGiangVien", "MaGiangVien");
			bulkCopy.ColumnMappings.Add("MaDanToc", "MaDanToc");
			bulkCopy.ColumnMappings.Add("MaTonGiao", "MaTonGiao");
			bulkCopy.ColumnMappings.Add("MaDonVi", "MaDonVi");
			bulkCopy.ColumnMappings.Add("MaHocHam", "MaHocHam");
			bulkCopy.ColumnMappings.Add("MaHocVi", "MaHocVi");
			bulkCopy.ColumnMappings.Add("MaLoaiGiangVien", "MaLoaiGiangVien");
			bulkCopy.ColumnMappings.Add("MaNguoiLap", "MaNguoiLap");
			bulkCopy.ColumnMappings.Add("MatKhau", "MatKhau");
			bulkCopy.ColumnMappings.Add("MaTinhTrang", "MaTinhTrang");
			bulkCopy.ColumnMappings.Add("MaQuanLy", "MaQuanLy");
			bulkCopy.ColumnMappings.Add("Ho", "Ho");
			bulkCopy.ColumnMappings.Add("TenDem", "TenDem");
			bulkCopy.ColumnMappings.Add("Ten", "Ten");
			bulkCopy.ColumnMappings.Add("NgaySinh", "NgaySinh");
			bulkCopy.ColumnMappings.Add("GioiTinh", "GioiTinh");
			bulkCopy.ColumnMappings.Add("NoiSinh", "NoiSinh");
			bulkCopy.ColumnMappings.Add("Cmnd", "Cmnd");
			bulkCopy.ColumnMappings.Add("NgayCap", "NgayCap");
			bulkCopy.ColumnMappings.Add("NoiCap", "NoiCap");
			bulkCopy.ColumnMappings.Add("DoanDang", "DoanDang");
			bulkCopy.ColumnMappings.Add("NgayVaoDoanDang", "NgayVaoDoanDang");
			bulkCopy.ColumnMappings.Add("NgayKyHopDong", "NgayKyHopDong");
			bulkCopy.ColumnMappings.Add("NgayKetThucHopDong", "NgayKetThucHopDong");
			bulkCopy.ColumnMappings.Add("HinhAnh", "HinhAnh");
			bulkCopy.ColumnMappings.Add("DiaChi", "DiaChi");
			bulkCopy.ColumnMappings.Add("ThuongTru", "ThuongTru");
			bulkCopy.ColumnMappings.Add("NoiLamViec", "NoiLamViec");
			bulkCopy.ColumnMappings.Add("Email", "Email");
			bulkCopy.ColumnMappings.Add("DienThoai", "DienThoai");
			bulkCopy.ColumnMappings.Add("SoDiDong", "SoDiDong");
			bulkCopy.ColumnMappings.Add("SoTaiKhoan", "SoTaiKhoan");
			bulkCopy.ColumnMappings.Add("TenNganHang", "TenNganHang");
			bulkCopy.ColumnMappings.Add("MaSoThue", "MaSoThue");
			bulkCopy.ColumnMappings.Add("ChiNhanh", "ChiNhanh");
			bulkCopy.ColumnMappings.Add("SoSoBaoHiem", "SoSoBaoHiem");
			bulkCopy.ColumnMappings.Add("ThoiGianBatDau", "ThoiGianBatDau");
			bulkCopy.ColumnMappings.Add("BacLuong", "BacLuong");
			bulkCopy.ColumnMappings.Add("NgayHuongLuong", "NgayHuongLuong");
			bulkCopy.ColumnMappings.Add("NamLamViec", "NamLamViec");
			bulkCopy.ColumnMappings.Add("ChuyenNganh", "ChuyenNganh");
			bulkCopy.ColumnMappings.Add("MaHeSoThuLao", "MaHeSoThuLao");
			bulkCopy.ColumnMappings.Add("Ngach", "Ngach");
			bulkCopy.ColumnMappings.Add("SoHieuCongChuc", "SoHieuCongChuc");
			bulkCopy.ColumnMappings.Add("HRMID", "HRMID");
			bulkCopy.ColumnMappings.Add("NoiCapBang", "NoiCapBang");
			bulkCopy.ColumnMappings.Add("KhoaTaiKhoan", "KhoaTaiKhoan");
			bulkCopy.ColumnMappings.Add("MaLoaiNhanVien", "MaLoaiNhanVien");
			bulkCopy.ColumnMappings.Add("MaNgachCongChuc", "MaNgachCongChuc");
			bulkCopy.ColumnMappings.Add("MaTrinhDoChinhTri", "MaTrinhDoChinhTri");
			bulkCopy.ColumnMappings.Add("MaTrinhDoSuPham", "MaTrinhDoSuPham");
			bulkCopy.ColumnMappings.Add("MaTrinhDoNgoaiNgu", "MaTrinhDoNgoaiNgu");
			bulkCopy.ColumnMappings.Add("MaTrinhDoTinHoc", "MaTrinhDoTinHoc");
			bulkCopy.ColumnMappings.Add("MaTrinhDoQuanLyNhaNuoc", "MaTrinhDoQuanLyNhaNuoc");
			bulkCopy.ColumnMappings.Add("NguoiCapNhat", "NguoiCapNhat");
			bulkCopy.ColumnMappings.Add("NgayCapNhat", "NgayCapNhat");
			bulkCopy.ColumnMappings.Add("KhoiKienThucGiangDay", "KhoiKienThucGiangDay");
			bulkCopy.ColumnMappings.Add("NganhDaoTao", "NganhDaoTao");
			bulkCopy.ColumnMappings.Add("DonViGiangDay", "DonViGiangDay");
			bulkCopy.ColumnMappings.Add("IdHoSo", "IdHoSo");
			bulkCopy.ColumnMappings.Add("MaQuocTich", "MaQuocTich");
			bulkCopy.ColumnMappings.Add("DaXoaHRM", "DaXoaHRM");
			
			foreach(PMS.Entities.GiangVien entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["MaGiangVien"] = entity.MaGiangVien;
							
				
					row["MaDanToc"] = entity.MaDanToc;
							
				
					row["MaTonGiao"] = entity.MaTonGiao;
							
				
					row["MaDonVi"] = entity.MaDonVi;
							
				
					row["MaHocHam"] = entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value;
							
				
					row["MaHocVi"] = entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value;
							
				
					row["MaLoaiGiangVien"] = entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value;
							
				
					row["MaNguoiLap"] = entity.MaNguoiLap.HasValue ? (object) entity.MaNguoiLap  : System.DBNull.Value;
							
				
					row["MatKhau"] = entity.MatKhau;
							
				
					row["MaTinhTrang"] = entity.MaTinhTrang.HasValue ? (object) entity.MaTinhTrang  : System.DBNull.Value;
							
				
					row["MaQuanLy"] = entity.MaQuanLy;
							
				
					row["Ho"] = entity.Ho;
							
				
					row["TenDem"] = entity.TenDem;
							
				
					row["Ten"] = entity.Ten;
							
				
					row["NgaySinh"] = entity.NgaySinh;
							
				
					row["GioiTinh"] = entity.GioiTinh.HasValue ? (object) entity.GioiTinh  : System.DBNull.Value;
							
				
					row["NoiSinh"] = entity.NoiSinh;
							
				
					row["Cmnd"] = entity.Cmnd;
							
				
					row["NgayCap"] = entity.NgayCap;
							
				
					row["NoiCap"] = entity.NoiCap;
							
				
					row["DoanDang"] = entity.DoanDang.HasValue ? (object) entity.DoanDang  : System.DBNull.Value;
							
				
					row["NgayVaoDoanDang"] = entity.NgayVaoDoanDang;
							
				
					row["NgayKyHopDong"] = entity.NgayKyHopDong.HasValue ? (object) entity.NgayKyHopDong  : System.DBNull.Value;
							
				
					row["NgayKetThucHopDong"] = entity.NgayKetThucHopDong.HasValue ? (object) entity.NgayKetThucHopDong  : System.DBNull.Value;
							
				
					row["HinhAnh"] = entity.HinhAnh;
							
				
					row["DiaChi"] = entity.DiaChi;
							
				
					row["ThuongTru"] = entity.ThuongTru;
							
				
					row["NoiLamViec"] = entity.NoiLamViec;
							
				
					row["Email"] = entity.Email;
							
				
					row["DienThoai"] = entity.DienThoai;
							
				
					row["SoDiDong"] = entity.SoDiDong;
							
				
					row["SoTaiKhoan"] = entity.SoTaiKhoan;
							
				
					row["TenNganHang"] = entity.TenNganHang;
							
				
					row["MaSoThue"] = entity.MaSoThue;
							
				
					row["ChiNhanh"] = entity.ChiNhanh;
							
				
					row["SoSoBaoHiem"] = entity.SoSoBaoHiem;
							
				
					row["ThoiGianBatDau"] = entity.ThoiGianBatDau;
							
				
					row["BacLuong"] = entity.BacLuong.HasValue ? (object) entity.BacLuong  : System.DBNull.Value;
							
				
					row["NgayHuongLuong"] = entity.NgayHuongLuong;
							
				
					row["NamLamViec"] = entity.NamLamViec;
							
				
					row["ChuyenNganh"] = entity.ChuyenNganh;
							
				
					row["MaHeSoThuLao"] = entity.MaHeSoThuLao;
							
				
					row["Ngach"] = entity.Ngach;
							
				
					row["SoHieuCongChuc"] = entity.SoHieuCongChuc;
							
				
					row["HRMID"] = entity.Hrmid.HasValue ? (object) entity.Hrmid  : System.DBNull.Value;
							
				
					row["NoiCapBang"] = entity.NoiCapBang;
							
				
					row["KhoaTaiKhoan"] = entity.KhoaTaiKhoan.HasValue ? (object) entity.KhoaTaiKhoan  : System.DBNull.Value;
							
				
					row["MaLoaiNhanVien"] = entity.MaLoaiNhanVien.HasValue ? (object) entity.MaLoaiNhanVien  : System.DBNull.Value;
							
				
					row["MaNgachCongChuc"] = entity.MaNgachCongChuc.HasValue ? (object) entity.MaNgachCongChuc  : System.DBNull.Value;
							
				
					row["MaTrinhDoChinhTri"] = entity.MaTrinhDoChinhTri.HasValue ? (object) entity.MaTrinhDoChinhTri  : System.DBNull.Value;
							
				
					row["MaTrinhDoSuPham"] = entity.MaTrinhDoSuPham.HasValue ? (object) entity.MaTrinhDoSuPham  : System.DBNull.Value;
							
				
					row["MaTrinhDoNgoaiNgu"] = entity.MaTrinhDoNgoaiNgu.HasValue ? (object) entity.MaTrinhDoNgoaiNgu  : System.DBNull.Value;
							
				
					row["MaTrinhDoTinHoc"] = entity.MaTrinhDoTinHoc.HasValue ? (object) entity.MaTrinhDoTinHoc  : System.DBNull.Value;
							
				
					row["MaTrinhDoQuanLyNhaNuoc"] = entity.MaTrinhDoQuanLyNhaNuoc.HasValue ? (object) entity.MaTrinhDoQuanLyNhaNuoc  : System.DBNull.Value;
							
				
					row["NguoiCapNhat"] = entity.NguoiCapNhat;
							
				
					row["NgayCapNhat"] = entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat  : System.DBNull.Value;
							
				
					row["KhoiKienThucGiangDay"] = entity.KhoiKienThucGiangDay;
							
				
					row["NganhDaoTao"] = entity.NganhDaoTao;
							
				
					row["DonViGiangDay"] = entity.DonViGiangDay;
							
				
					row["IdHoSo"] = entity.IdHoSo.HasValue ? (object) entity.IdHoSo  : System.DBNull.Value;
							
				
					row["MaQuocTich"] = entity.MaQuocTich.HasValue ? (object) entity.MaQuocTich  : System.DBNull.Value;
							
				
					row["DaXoaHRM"] = entity.DaXoaHrm.HasValue ? (object) entity.DaXoaHrm  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.GiangVien entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.GiangVien object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.GiangVien object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.GiangVien object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.GiangVien entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@MaGiangVien", DbType.Int32, 4);
            database.AddInParameter(commandWrapper, "@MaDanToc", DbType.AnsiString, entity.MaDanToc );
            database.AddInParameter(commandWrapper, "@MaTonGiao", DbType.AnsiString, entity.MaTonGiao );
            database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, entity.MaDonVi );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaNguoiLap", DbType.Int32, (entity.MaNguoiLap.HasValue ? (object) entity.MaNguoiLap  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MatKhau", DbType.AnsiString, entity.MatKhau );
			database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.Int32, (entity.MaTinhTrang.HasValue ? (object) entity.MaTinhTrang  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
            database.AddInParameter(commandWrapper, "@Ho", DbType.String, entity.Ho );
            database.AddInParameter(commandWrapper, "@TenDem", DbType.String, entity.TenDem );
            database.AddInParameter(commandWrapper, "@Ten", DbType.String, entity.Ten );
            database.AddInParameter(commandWrapper, "@NgaySinh", DbType.AnsiString, entity.NgaySinh );
			database.AddInParameter(commandWrapper, "@GioiTinh", DbType.Boolean, (entity.GioiTinh.HasValue ? (object) entity.GioiTinh  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NoiSinh", DbType.String, entity.NoiSinh );
            database.AddInParameter(commandWrapper, "@Cmnd", DbType.AnsiString, entity.Cmnd );
            database.AddInParameter(commandWrapper, "@NgayCap", DbType.AnsiString, entity.NgayCap );
            database.AddInParameter(commandWrapper, "@NoiCap", DbType.String, entity.NoiCap );
			database.AddInParameter(commandWrapper, "@DoanDang", DbType.Boolean, (entity.DoanDang.HasValue ? (object) entity.DoanDang  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NgayVaoDoanDang", DbType.AnsiString, entity.NgayVaoDoanDang );
			database.AddInParameter(commandWrapper, "@NgayKyHopDong", DbType.DateTime, (entity.NgayKyHopDong.HasValue ? (object) entity.NgayKyHopDong  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayKetThucHopDong", DbType.DateTime, (entity.NgayKetThucHopDong.HasValue ? (object) entity.NgayKetThucHopDong  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@HinhAnh", DbType.Binary, entity.HinhAnh );
            database.AddInParameter(commandWrapper, "@DiaChi", DbType.String, entity.DiaChi );
            database.AddInParameter(commandWrapper, "@ThuongTru", DbType.String, entity.ThuongTru );
            database.AddInParameter(commandWrapper, "@NoiLamViec", DbType.String, entity.NoiLamViec );
            database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, entity.Email );
            database.AddInParameter(commandWrapper, "@DienThoai", DbType.AnsiString, entity.DienThoai );
            database.AddInParameter(commandWrapper, "@SoDiDong", DbType.AnsiString, entity.SoDiDong );
            database.AddInParameter(commandWrapper, "@SoTaiKhoan", DbType.AnsiString, entity.SoTaiKhoan );
            database.AddInParameter(commandWrapper, "@TenNganHang", DbType.String, entity.TenNganHang );
            database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, entity.MaSoThue );
            database.AddInParameter(commandWrapper, "@ChiNhanh", DbType.String, entity.ChiNhanh );
            database.AddInParameter(commandWrapper, "@SoSoBaoHiem", DbType.AnsiString, entity.SoSoBaoHiem );
            database.AddInParameter(commandWrapper, "@ThoiGianBatDau", DbType.AnsiString, entity.ThoiGianBatDau );
			database.AddInParameter(commandWrapper, "@BacLuong", DbType.Decimal, (entity.BacLuong.HasValue ? (object) entity.BacLuong  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NgayHuongLuong", DbType.AnsiString, entity.NgayHuongLuong );
            database.AddInParameter(commandWrapper, "@NamLamViec", DbType.AnsiString, entity.NamLamViec );
            database.AddInParameter(commandWrapper, "@ChuyenNganh", DbType.String, entity.ChuyenNganh );
            database.AddInParameter(commandWrapper, "@MaHeSoThuLao", DbType.AnsiString, entity.MaHeSoThuLao );
            database.AddInParameter(commandWrapper, "@Ngach", DbType.AnsiString, entity.Ngach );
            database.AddInParameter(commandWrapper, "@SoHieuCongChuc", DbType.AnsiString, entity.SoHieuCongChuc );
			database.AddInParameter(commandWrapper, "@Hrmid", DbType.Guid, (entity.Hrmid.HasValue ? (object) entity.Hrmid  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NoiCapBang", DbType.String, entity.NoiCapBang );
			database.AddInParameter(commandWrapper, "@KhoaTaiKhoan", DbType.Boolean, (entity.KhoaTaiKhoan.HasValue ? (object) entity.KhoaTaiKhoan  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiNhanVien", DbType.Int32, (entity.MaLoaiNhanVien.HasValue ? (object) entity.MaLoaiNhanVien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaNgachCongChuc", DbType.Int32, (entity.MaNgachCongChuc.HasValue ? (object) entity.MaNgachCongChuc  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoChinhTri", DbType.Int32, (entity.MaTrinhDoChinhTri.HasValue ? (object) entity.MaTrinhDoChinhTri  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoSuPham", DbType.Int32, (entity.MaTrinhDoSuPham.HasValue ? (object) entity.MaTrinhDoSuPham  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoNgoaiNgu", DbType.Int32, (entity.MaTrinhDoNgoaiNgu.HasValue ? (object) entity.MaTrinhDoNgoaiNgu  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoTinHoc", DbType.Int32, (entity.MaTrinhDoTinHoc.HasValue ? (object) entity.MaTrinhDoTinHoc  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", DbType.Int32, (entity.MaTrinhDoQuanLyNhaNuoc.HasValue ? (object) entity.MaTrinhDoQuanLyNhaNuoc  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.AnsiString, entity.NguoiCapNhat );
			database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, (entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@KhoiKienThucGiangDay", DbType.String, entity.KhoiKienThucGiangDay );
            database.AddInParameter(commandWrapper, "@NganhDaoTao", DbType.String, entity.NganhDaoTao );
            database.AddInParameter(commandWrapper, "@DonViGiangDay", DbType.AnsiString, entity.DonViGiangDay );
			database.AddInParameter(commandWrapper, "@IdHoSo", DbType.Int32, (entity.IdHoSo.HasValue ? (object) entity.IdHoSo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaQuocTich", DbType.Int32, (entity.MaQuocTich.HasValue ? (object) entity.MaQuocTich  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DaXoaHrm", DbType.Boolean, (entity.DaXoaHrm.HasValue ? (object) entity.DaXoaHrm  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _maGiangVien = database.GetParameterValue(commandWrapper, "@MaGiangVien");
			entity.MaGiangVien = (System.Int32)_maGiangVien;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.GiangVien object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.GiangVien object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.GiangVien entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVien_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32, entity.MaGiangVien );
            database.AddInParameter(commandWrapper, "@MaDanToc", DbType.AnsiString, entity.MaDanToc );
            database.AddInParameter(commandWrapper, "@MaTonGiao", DbType.AnsiString, entity.MaTonGiao );
            database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, entity.MaDonVi );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaNguoiLap", DbType.Int32, (entity.MaNguoiLap.HasValue ? (object) entity.MaNguoiLap : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MatKhau", DbType.AnsiString, entity.MatKhau );
			database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.Int32, (entity.MaTinhTrang.HasValue ? (object) entity.MaTinhTrang : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
            database.AddInParameter(commandWrapper, "@Ho", DbType.String, entity.Ho );
            database.AddInParameter(commandWrapper, "@TenDem", DbType.String, entity.TenDem );
            database.AddInParameter(commandWrapper, "@Ten", DbType.String, entity.Ten );
            database.AddInParameter(commandWrapper, "@NgaySinh", DbType.AnsiString, entity.NgaySinh );
			database.AddInParameter(commandWrapper, "@GioiTinh", DbType.Boolean, (entity.GioiTinh.HasValue ? (object) entity.GioiTinh : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NoiSinh", DbType.String, entity.NoiSinh );
            database.AddInParameter(commandWrapper, "@Cmnd", DbType.AnsiString, entity.Cmnd );
            database.AddInParameter(commandWrapper, "@NgayCap", DbType.AnsiString, entity.NgayCap );
            database.AddInParameter(commandWrapper, "@NoiCap", DbType.String, entity.NoiCap );
			database.AddInParameter(commandWrapper, "@DoanDang", DbType.Boolean, (entity.DoanDang.HasValue ? (object) entity.DoanDang : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NgayVaoDoanDang", DbType.AnsiString, entity.NgayVaoDoanDang );
			database.AddInParameter(commandWrapper, "@NgayKyHopDong", DbType.DateTime, (entity.NgayKyHopDong.HasValue ? (object) entity.NgayKyHopDong : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayKetThucHopDong", DbType.DateTime, (entity.NgayKetThucHopDong.HasValue ? (object) entity.NgayKetThucHopDong : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@HinhAnh", DbType.Binary, entity.HinhAnh );
            database.AddInParameter(commandWrapper, "@DiaChi", DbType.String, entity.DiaChi );
            database.AddInParameter(commandWrapper, "@ThuongTru", DbType.String, entity.ThuongTru );
            database.AddInParameter(commandWrapper, "@NoiLamViec", DbType.String, entity.NoiLamViec );
            database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, entity.Email );
            database.AddInParameter(commandWrapper, "@DienThoai", DbType.AnsiString, entity.DienThoai );
            database.AddInParameter(commandWrapper, "@SoDiDong", DbType.AnsiString, entity.SoDiDong );
            database.AddInParameter(commandWrapper, "@SoTaiKhoan", DbType.AnsiString, entity.SoTaiKhoan );
            database.AddInParameter(commandWrapper, "@TenNganHang", DbType.String, entity.TenNganHang );
            database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, entity.MaSoThue );
            database.AddInParameter(commandWrapper, "@ChiNhanh", DbType.String, entity.ChiNhanh );
            database.AddInParameter(commandWrapper, "@SoSoBaoHiem", DbType.AnsiString, entity.SoSoBaoHiem );
            database.AddInParameter(commandWrapper, "@ThoiGianBatDau", DbType.AnsiString, entity.ThoiGianBatDau );
			database.AddInParameter(commandWrapper, "@BacLuong", DbType.Decimal, (entity.BacLuong.HasValue ? (object) entity.BacLuong : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NgayHuongLuong", DbType.AnsiString, entity.NgayHuongLuong );
            database.AddInParameter(commandWrapper, "@NamLamViec", DbType.AnsiString, entity.NamLamViec );
            database.AddInParameter(commandWrapper, "@ChuyenNganh", DbType.String, entity.ChuyenNganh );
            database.AddInParameter(commandWrapper, "@MaHeSoThuLao", DbType.AnsiString, entity.MaHeSoThuLao );
            database.AddInParameter(commandWrapper, "@Ngach", DbType.AnsiString, entity.Ngach );
            database.AddInParameter(commandWrapper, "@SoHieuCongChuc", DbType.AnsiString, entity.SoHieuCongChuc );
			database.AddInParameter(commandWrapper, "@Hrmid", DbType.Guid, (entity.Hrmid.HasValue ? (object) entity.Hrmid : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NoiCapBang", DbType.String, entity.NoiCapBang );
			database.AddInParameter(commandWrapper, "@KhoaTaiKhoan", DbType.Boolean, (entity.KhoaTaiKhoan.HasValue ? (object) entity.KhoaTaiKhoan : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiNhanVien", DbType.Int32, (entity.MaLoaiNhanVien.HasValue ? (object) entity.MaLoaiNhanVien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaNgachCongChuc", DbType.Int32, (entity.MaNgachCongChuc.HasValue ? (object) entity.MaNgachCongChuc : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoChinhTri", DbType.Int32, (entity.MaTrinhDoChinhTri.HasValue ? (object) entity.MaTrinhDoChinhTri : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoSuPham", DbType.Int32, (entity.MaTrinhDoSuPham.HasValue ? (object) entity.MaTrinhDoSuPham : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoNgoaiNgu", DbType.Int32, (entity.MaTrinhDoNgoaiNgu.HasValue ? (object) entity.MaTrinhDoNgoaiNgu : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoTinHoc", DbType.Int32, (entity.MaTrinhDoTinHoc.HasValue ? (object) entity.MaTrinhDoTinHoc : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", DbType.Int32, (entity.MaTrinhDoQuanLyNhaNuoc.HasValue ? (object) entity.MaTrinhDoQuanLyNhaNuoc : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.AnsiString, entity.NguoiCapNhat );
			database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.DateTime, (entity.NgayCapNhat.HasValue ? (object) entity.NgayCapNhat : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@KhoiKienThucGiangDay", DbType.String, entity.KhoiKienThucGiangDay );
            database.AddInParameter(commandWrapper, "@NganhDaoTao", DbType.String, entity.NganhDaoTao );
            database.AddInParameter(commandWrapper, "@DonViGiangDay", DbType.AnsiString, entity.DonViGiangDay );
			database.AddInParameter(commandWrapper, "@IdHoSo", DbType.Int32, (entity.IdHoSo.HasValue ? (object) entity.IdHoSo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaQuocTich", DbType.Int32, (entity.MaQuocTich.HasValue ? (object) entity.MaQuocTich : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DaXoaHrm", DbType.Boolean, (entity.DaXoaHrm.HasValue ? (object) entity.DaXoaHrm : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region cust_GiangVien_ThongKeSoLuongTheoLoaiGiangVien
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ThongKeSoLuongTheoLoaiGiangVien' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeSoLuongTheoLoaiGiangVien(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ThongKeSoLuongTheoLoaiGiangVien", true);
			
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeSoLuongTheoLoaiGiangVien", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeSoLuongTheoLoaiGiangVien", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_DinhMucKhauTru_Luu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_DinhMucKhauTru_Luu' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DinhMucKhauTru_Luu(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reval)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_DinhMucKhauTru_Luu", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@Reval", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reval);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DinhMucKhauTru_Luu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DinhMucKhauTru_Luu", (IEntity)null));

			reval =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@Reval"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_ThongKeDuThieu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_ThongKeDuThieu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader NghienCuuKH_ThongKeDuThieu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_ThongKeDuThieu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_ThongKeDuThieu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_ThongKeDuThieu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetAllTaiKhoan
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetAllTaiKhoan' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetAllTaiKhoan(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.String maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetAllTaiKhoan", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAllTaiKhoan", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetAllTaiKhoan", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetHeSoQuyDoiTietChuanCtim
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetHeSoQuyDoiTietChuanCtim' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetHeSoQuyDoiTietChuanCtim(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan, System.String maBacDaoTao, System.Int32 maLoaiHocPhan)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetHeSoQuyDoiTietChuanCtim", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString,  maMonHoc );
			database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32,  siSo );
			database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32,  tietBatDau );
			database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime,  ngayDay );
			database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString,  maPhongHoc );
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.Int32,  maLoaiHocPhan );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetHeSoQuyDoiTietChuanCtim", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetHeSoQuyDoiTietChuanCtim", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_DongBoDuLieuHRM
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_DongBoDuLieuHRM' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DongBoDuLieuHRM(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_DongBoDuLieuHRM", true);
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DongBoDuLieuHRM", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DongBoDuLieuHRM", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_GiangVien_KiemTraGiangVienImport
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_KiemTraGiangVienImport' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="checkHocHam"> A <c>System.String</c> instance.</param>
			/// <param name="checkHocVi"> A <c>System.String</c> instance.</param>
			/// <param name="checkLoaiGv"> A <c>System.String</c> instance.</param>
			/// <param name="checkTinhTrang"> A <c>System.String</c> instance.</param>
			/// <param name="checkDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader KiemTraGiangVienImport(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.String checkHocHam, ref System.String checkHocVi, ref System.String checkLoaiGv, ref System.String checkTinhTrang, ref System.String checkDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_KiemTraGiangVienImport", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@CheckHocHam", DbType.String, -1, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, checkHocHam);
			database.AddParameter(commandWrapper, "@CheckHocVi", DbType.String, -1, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, checkHocVi);
			database.AddParameter(commandWrapper, "@CheckLoaiGv", DbType.String, -1, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, checkLoaiGv);
			database.AddParameter(commandWrapper, "@CheckTinhTrang", DbType.String, -1, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, checkTinhTrang);
			database.AddParameter(commandWrapper, "@CheckDonVi", DbType.String, -1, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, checkDonVi);
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KiemTraGiangVienImport", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KiemTraGiangVienImport", (IEntity)null));

			checkHocHam =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@CheckHocHam"]);
			checkHocVi =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@CheckHocVi"]);
			checkLoaiGv =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@CheckLoaiGv"]);
			checkTinhTrang =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@CheckTinhTrang"]);
			checkDonVi =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@CheckDonVi"]);


			return dr;
		}
		#endregion

		#region cust_GiangVien_GetTienCanTren
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetTienCanTren' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetTienCanTren(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maLoaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetTienCanTren", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.AnsiString,  maLoaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetTienCanTren", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetTienCanTren", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetThongKeCanBoNhanVienByNgay
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetThongKeCanBoNhanVienByNgay' stored procedure. 
		/// </summary>	
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThongKeCanBoNhanVienByNgay(TransactionManager transactionManager, int start, int pageLength , System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetThongKeCanBoNhanVienByNgay", true);
			
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThongKeCanBoNhanVienByNgay", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThongKeCanBoNhanVienByNgay", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetMaDonViMaTinhTrang
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetMaDonViMaTinhTrang' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;GiangVien&gt;"/> instance.</returns>
		public override TList<GiangVien> GetMaDonViMaTinhTrang(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.Int32 maTinhTrang)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetMaDonViMaTinhTrang", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.Int32,  maTinhTrang );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<GiangVien> rows = new TList<GiangVien>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMaDonViMaTinhTrang", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetMaDonViMaTinhTrang", rows));


				return rows;
		}
		#endregion

		#region cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader HoatDongNgoaiGiangDay_GetByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_GetByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_GetByNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="tietNghiaVu"> A <c>System.Double</c> instance.</param>
			/// <param name="tietNghiaVuKhac"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, System.String hocKy, ref System.Double tietNghiaVu, ref System.Double tietNghiaVuKhac)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@TietNghiaVu", DbType.Double, 8, ParameterDirection.InputOutput, true, 53, 0, string.Empty, DataRowVersion.Current, tietNghiaVu);
			database.AddParameter(commandWrapper, "@TietNghiaVuKhac", DbType.Double, 8, ParameterDirection.InputOutput, true, 53, 0, string.Empty, DataRowVersion.Current, tietNghiaVuKhac);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act", (IEntity)null));

			tietNghiaVu =  Utility.GetParameterValue<System.Double>(commandWrapper.Parameters["@TietNghiaVu"]);
			tietNghiaVuKhac =  Utility.GetParameterValue<System.Double>(commandWrapper.Parameters["@TietNghiaVuKhac"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHoc
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHoc' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader HoatDongNgoaiGiangDay_GetByNamHoc(TransactionManager transactionManager, int start, int pageLength , System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHoc", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_GetByNamHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_GetByNamHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_ThongKeHopDongTheoThoiGian
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ThongKeHopDongTheoThoiGian' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeHopDongTheoThoiGian(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ThongKeHopDongTheoThoiGian", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeHopDongTheoThoiGian", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeHopDongTheoThoiGian", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_GetBangThanhToan
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_GetBangThanhToan' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader NghienCuuKH_GetBangThanhToan(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_GetBangThanhToan", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_GetBangThanhToan", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_GetBangThanhToan", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_Update
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_Update' stored procedure. 
		/// </summary>	
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maNckh"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="tenNckh"> A <c>System.String</c> instance.</param>
		/// <param name="soLuongThanhVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="maVaiTro"> A <c>System.Int32</c> instance.</param>
		/// <param name="duKien"> A <c>System.Boolean</c> instance.</param>
			/// <param name="reval"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void NghienCuuKH_Update(TransactionManager transactionManager, int start, int pageLength , System.Int32 id, System.String maQuanLy, System.Int32 maNckh, System.String namHoc, System.String tenNckh, System.Int32 soLuongThanhVien, System.Int32 maVaiTro, System.Boolean duKien, ref System.String reval)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_Update", true);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32,  id );
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@MaNckh", DbType.Int32,  maNckh );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@TenNckh", DbType.String,  tenNckh );
			database.AddInParameter(commandWrapper, "@SoLuongThanhVien", DbType.Int32,  soLuongThanhVien );
			database.AddInParameter(commandWrapper, "@MaVaiTro", DbType.Int32,  maVaiTro );
			database.AddInParameter(commandWrapper, "@DuKien", DbType.Boolean,  duKien );
	
			database.AddParameter(commandWrapper, "@Reval", DbType.String, 500, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, reval);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_Update", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_Update", (IEntity)null));

			reval =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@Reval"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_GetByNhomQuyen
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetByNhomQuyen' stored procedure. 
		/// </summary>	
		/// <param name="nhomQuyen"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;GiangVien&gt;"/> instance.</returns>
		public override TList<GiangVien> GetByNhomQuyen(TransactionManager transactionManager, int start, int pageLength , System.String nhomQuyen)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetByNhomQuyen", true);
			
			database.AddInParameter(commandWrapper, "@NhomQuyen", DbType.AnsiString,  nhomQuyen );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<GiangVien> rows = new TList<GiangVien>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByNhomQuyen", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByNhomQuyen", rows));


				return rows;
		}
		#endregion

		#region cust_GiangVien_TrichXuatThongTinTheoChuyenMonTrinhDo
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_TrichXuatThongTinTheoChuyenMonTrinhDo' stored procedure. 
		/// </summary>	
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="listHocHam"> A <c>System.String</c> instance.</param>
		/// <param name="listHocVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader TrichXuatThongTinTheoChuyenMonTrinhDo(TransactionManager transactionManager, int start, int pageLength , System.DateTime ngay, System.String listHocHam, System.String listHocVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_TrichXuatThongTinTheoChuyenMonTrinhDo", true);
			
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
			database.AddInParameter(commandWrapper, "@ListHocHam", DbType.AnsiString,  listHocHam );
			database.AddInParameter(commandWrapper, "@ListHocVi", DbType.AnsiString,  listHocVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TrichXuatThongTinTheoChuyenMonTrinhDo", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TrichXuatThongTinTheoChuyenMonTrinhDo", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_LopHocPhan_GetByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader LopHocPhan_GetByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_LopHocPhan_GetByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LopHocPhan_GetByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LopHocPhan_GetByNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKyMaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader DinhMucKhauTru_GetByNamHocHocKyMaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKyMaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DinhMucKhauTru_GetByNamHocHocKyMaDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DinhMucKhauTru_GetByNamHocHocKyMaDonVi", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_Luu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_Luu' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void NghienCuuKH_Luu(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_Luu", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_Luu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_Luu", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_ThongKeGioGiangBuh
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ThongKeGioGiangBuh' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeGioGiangBuh(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ThongKeGioGiangBuh", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot_HK01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChot_HK02", DbType.Int32,  lanChotHk02 );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeGioGiangBuh", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeGioGiangBuh", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetHeSoQuyDoiTietChuan
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetHeSoQuyDoiTietChuan' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetHeSoQuyDoiTietChuan(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetHeSoQuyDoiTietChuan", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString,  maMonHoc );
			database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32,  siSo );
			database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32,  tietBatDau );
			database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime,  ngayDay );
			database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString,  maPhongHoc );
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetHeSoQuyDoiTietChuan", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetHeSoQuyDoiTietChuan", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetByMaGiangVienMocTangLuong
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetByMaGiangVienMocTangLuong' stored procedure. 
		/// </summary>	
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByMaGiangVienMocTangLuong(TransactionManager transactionManager, int start, int pageLength , System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetByMaGiangVienMocTangLuong", true);
			
			database.AddInParameter(commandWrapper, "@ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaGiangVienMocTangLuong", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaGiangVienMocTangLuong", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="tinhTrang"> A <c>System.String</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.String loaiGiangVien, System.String tinhTrang, System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@TinhTrang", DbType.AnsiString,  tinhTrang );
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_UpdateGiangVienHRM_Temp
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_UpdateGiangVienHRM_Temp' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void UpdateGiangVienHRM_Temp(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_UpdateGiangVienHRM_Temp", true);
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "UpdateGiangVienHRM_Temp", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "UpdateGiangVienHRM_Temp", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_GiangVien_GetByMaDonViLoaiGiangVien
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetByMaDonViLoaiGiangVien' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="tinhTrang"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetByMaDonViLoaiGiangVien(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.String loaiGiangVien, System.String tinhTrang)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetByMaDonViLoaiGiangVien", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@TinhTrang", DbType.AnsiString,  tinhTrang );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaDonViLoaiGiangVien", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaDonViLoaiGiangVien", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader DinhMucKhauTru_GetByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DinhMucKhauTru_GetByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DinhMucKhauTru_GetByNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_UpdatePassWord
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_UpdatePassWord' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="matKhau"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void UpdatePassWord(TransactionManager transactionManager, int start, int pageLength , System.Int32 maGiangVien, System.String matKhau)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_UpdatePassWord", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
			database.AddInParameter(commandWrapper, "@MatKhau", DbType.AnsiString,  matKhau );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "UpdatePassWord", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "UpdatePassWord", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_GiangVien_HoatDongNgoaiGiangDay_Luu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_HoatDongNgoaiGiangDay_Luu' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void HoatDongNgoaiGiangDay_Luu(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String maDonVi, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_HoatDongNgoaiGiangDay_Luu", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_Luu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_Luu", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_KiemTraTrungTenCmnd
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_KiemTraTrungTenCmnd' stored procedure. 
		/// </summary>	
		/// <param name="hoTen"> A <c>System.String</c> instance.</param>
		/// <param name="cmnd"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void KiemTraTrungTenCmnd(TransactionManager transactionManager, int start, int pageLength , System.String hoTen, System.String cmnd, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_KiemTraTrungTenCmnd", true);
			
			database.AddInParameter(commandWrapper, "@HoTen", DbType.String,  hoTen );
			database.AddInParameter(commandWrapper, "@Cmnd", DbType.String,  cmnd );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "KiemTraTrungTenCmnd", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "KiemTraTrungTenCmnd", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_GetByMaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetByMaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;GiangVien&gt;"/> instance.</returns>
		public override TList<GiangVien> GetByMaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetByMaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<GiangVien> rows = new TList<GiangVien>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaDonVi", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaDonVi", rows));


				return rows;
		}
		#endregion

		#region cust_GiangVien_GetMaDonViMaHocHamMaHocVi
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetMaDonViMaHocHamMaHocVi' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;GiangVien&gt;"/> instance.</returns>
		public override TList<GiangVien> GetMaDonViMaHocHamMaHocVi(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetMaDonViMaHocHamMaHocVi", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32,  maHocHam );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32,  maHocVi );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<GiangVien> rows = new TList<GiangVien>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMaDonViMaHocHamMaHocVi", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetMaDonViMaHocHamMaHocVi", rows));


				return rows;
		}
		#endregion

		#region cust_GiangVien_GetHeSoQuyDoiTietChuanChung
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetHeSoQuyDoiTietChuanChung' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="maLopSinhVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="thuTrongTuan"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="daoTaoTinChi"> A <c>System.Boolean</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetHeSoQuyDoiTietChuanChung(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maBacDaoTao, System.String maLopHocPhan, System.String maMonHoc, System.Int32 siSo, System.String maLopSinhVien, System.String maLoaiHocPhan, System.DateTime ngayDay, System.Int32 tietBatDau, System.String thuTrongTuan, System.Int32 maHocHam, System.Int32 maHocVi, System.String maPhongHoc, System.String maKhoaBoMon, System.Boolean daoTaoTinChi, System.Int32 maLoaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetHeSoQuyDoiTietChuanChung", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
			database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString,  maMonHoc );
			database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32,  siSo );
			database.AddInParameter(commandWrapper, "@MaLopSinhVien", DbType.String,  maLopSinhVien );
			database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.AnsiString,  maLoaiHocPhan );
			database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime,  ngayDay );
			database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32,  tietBatDau );
			database.AddInParameter(commandWrapper, "@ThuTrongTuan", DbType.AnsiString,  thuTrongTuan );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32,  maHocHam );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32,  maHocVi );
			database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString,  maPhongHoc );
			database.AddInParameter(commandWrapper, "@MaKhoaBoMon", DbType.AnsiString,  maKhoaBoMon );
			database.AddInParameter(commandWrapper, "@DaoTaoTinChi", DbType.Boolean,  daoTaoTinChi );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32,  maLoaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetHeSoQuyDoiTietChuanChung", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetHeSoQuyDoiTietChuanChung", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetChucVuByMaGiangVienNgay
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetChucVuByMaGiangVienNgay' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
			/// <param name="tenChucVu"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetChucVuByMaGiangVienNgay(TransactionManager transactionManager, int start, int pageLength , System.Int32 maGiangVien, System.DateTime ngay, ref System.String tenChucVu)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetChucVuByMaGiangVienNgay", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
	
			database.AddParameter(commandWrapper, "@TenChucVu", DbType.String, 500, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, tenChucVu);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetChucVuByMaGiangVienNgay", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetChucVuByMaGiangVienNgay", (IEntity)null));

			tenChucVu =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@TenChucVu"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_ResetPassword
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ResetPassword' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ResetPassword(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ResetPassword", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ResetPassword", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ResetPassword", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_GiangVien_GetDanhSachGiangVienCoHuuByNgay
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetDanhSachGiangVienCoHuuByNgay' stored procedure. 
		/// </summary>	
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetDanhSachGiangVienCoHuuByNgay(TransactionManager transactionManager, int start, int pageLength , System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetDanhSachGiangVienCoHuuByNgay", true);
			
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetDanhSachGiangVienCoHuuByNgay", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetDanhSachGiangVienCoHuuByNgay", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_ChuyenMon_Luu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ChuyenMon_Luu' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ChuyenMon_Luu(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ChuyenMon_Luu", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.Xml,  xmlData );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ChuyenMon_Luu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ChuyenMon_Luu", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_GiangVien_ThongKeHoSoGiangVien
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ThongKeHoSoGiangVien' stored procedure. 
		/// </summary>	
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeHoSoGiangVien(TransactionManager transactionManager, int start, int pageLength , System.String khoaDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ThongKeHoSoGiangVien", true);
			
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeHoSoGiangVien", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeHoSoGiangVien", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_LuuTheoKhoa
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_LuuTheoKhoa' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void NghienCuuKH_LuuTheoKhoa(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_LuuTheoKhoa", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_LuuTheoKhoa", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_LuuTheoKhoa", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_GetLichSuNghienCuuKhoaHoc
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_GetLichSuNghienCuuKhoaHoc' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader NghienCuuKH_GetLichSuNghienCuuKhoaHoc(TransactionManager transactionManager, int start, int pageLength , System.Int32 maGiangVien, System.DateTime tuNgay, System.DateTime denNgay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_GetLichSuNghienCuuKhoaHoc", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
			database.AddInParameter(commandWrapper, "@TuNgay", DbType.DateTime,  tuNgay );
			database.AddInParameter(commandWrapper, "@DenNgay", DbType.DateTime,  denNgay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_GetLichSuNghienCuuKhoaHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_GetLichSuNghienCuuKhoaHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoa"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maKhoa)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaKhoa", DbType.AnsiString,  maKhoa );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay' stored procedure. 
		/// </summary>	
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay(TransactionManager transactionManager, int start, int pageLength , System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay", true);
			
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_ChucVu_Luu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ChucVu_Luu' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void ChucVu_Luu(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.Int32 maGiangVien, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ChucVu_Luu", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ChucVu_Luu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ChucVu_Luu", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_DinhMucKhauTru_LuuTheoKhoa
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_DinhMucKhauTru_LuuTheoKhoa' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DinhMucKhauTru_LuuTheoKhoa(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reval)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_DinhMucKhauTru_LuuTheoKhoa", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			database.AddParameter(commandWrapper, "@Reval", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reval);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DinhMucKhauTru_LuuTheoKhoa", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DinhMucKhauTru_LuuTheoKhoa", (IEntity)null));

			reval =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@Reval"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHoc
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHoc' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetSoTietNghiaVuByMaQuanLyNamHoc(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, ref System.Double ketQua)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHoc", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			database.AddParameter(commandWrapper, "@KetQua", DbType.Double, 8, ParameterDirection.InputOutput, true, 53, 0, string.Empty, DataRowVersion.Current, ketQua);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietNghiaVuByMaQuanLyNamHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietNghiaVuByMaQuanLyNamHoc", (IEntity)null));

			ketQua =  Utility.GetParameterValue<System.Double>(commandWrapper.Parameters["@KetQua"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_GioDinhMucCuaGiangVien
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GioDinhMucCuaGiangVien' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GioDinhMucCuaGiangVien(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GioDinhMucCuaGiangVien", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GioDinhMucCuaGiangVien", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GioDinhMucCuaGiangVien", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetSoTietNghiaVuByMaQuanLyNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, System.String hocKy, ref System.Double ketQua)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@KetQua", DbType.Double, 8, ParameterDirection.InputOutput, true, 53, 0, string.Empty, DataRowVersion.Current, ketQua);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietNghiaVuByMaQuanLyNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietNghiaVuByMaQuanLyNamHocHocKy", (IEntity)null));

			ketQua =  Utility.GetParameterValue<System.Double>(commandWrapper.Parameters["@KetQua"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_GetByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_GetByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader NghienCuuKH_GetByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_GetByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_GetByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_GetByNamHocHocKy", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay' stored procedure. 
		/// </summary>	
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay(TransactionManager transactionManager, int start, int pageLength , System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay", true);
			
			database.AddInParameter(commandWrapper, "@Ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetHoTen
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetHoTen' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetHoTen(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetHoTen", true);
			
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetHoTen", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetHoTen", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_Import
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_Import' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void Import(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_Import", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Import", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Import", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_Import
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_Import' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void NghienCuuKH_Import(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_Import", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_Import", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_Import", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_HopDongMoiGiangDay
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_HopDongMoiGiangDay' stored procedure. 
		/// </summary>	
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader HopDongMoiGiangDay(TransactionManager transactionManager, int start, int pageLength , System.String maBacDaoTao, System.String khoaDonVi, System.String maGiangVien, System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_HopDongMoiGiangDay", true);
			
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HopDongMoiGiangDay", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HopDongMoiGiangDay", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetThongTinByNamHocHocKy
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetThongTinByNamHocHocKy' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="hoTen"> A <c>System.String</c> instance.</param>
			/// <param name="tenDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="tenHocVi"> A <c>System.String</c> instance.</param>
			/// <param name="tenHocHam"> A <c>System.String</c> instance.</param>
			/// <param name="maSoThue"> A <c>System.String</c> instance.</param>
			/// <param name="soTaiKhoan"> A <c>System.String</c> instance.</param>
			/// <param name="chiNhanhNganHang"> A <c>System.String</c> instance.</param>
			/// <param name="chucVu"> A <c>System.String</c> instance.</param>
			/// <param name="giangVienTrongTruong"> A <c>System.Boolean</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetThongTinByNamHocHocKy(TransactionManager transactionManager, int start, int pageLength , System.Int32 maGiangVien, System.String namHoc, System.String hocKy, ref System.String hoTen, ref System.String tenDonVi, ref System.String tenHocVi, ref System.String tenHocHam, ref System.String maSoThue, ref System.String soTaiKhoan, ref System.String chiNhanhNganHang, ref System.String chucVu, ref System.Boolean giangVienTrongTruong)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetThongTinByNamHocHocKy", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@HoTen", DbType.String, 100, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, hoTen);
			database.AddParameter(commandWrapper, "@TenDonVi", DbType.String, 100, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, tenDonVi);
			database.AddParameter(commandWrapper, "@TenHocVi", DbType.String, 100, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, tenHocVi);
			database.AddParameter(commandWrapper, "@TenHocHam", DbType.String, 100, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, tenHocHam);
			database.AddParameter(commandWrapper, "@MaSoThue", DbType.String, 100, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, maSoThue);
			database.AddParameter(commandWrapper, "@SoTaiKhoan", DbType.String, 100, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, soTaiKhoan);
			database.AddParameter(commandWrapper, "@ChiNhanhNganHang", DbType.String, 200, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, chiNhanhNganHang);
			database.AddParameter(commandWrapper, "@ChucVu", DbType.String, 100, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, chucVu);
			database.AddParameter(commandWrapper, "@GiangVienTrongTruong", DbType.Boolean, 1, ParameterDirection.InputOutput, true, 1, 0, string.Empty, DataRowVersion.Current, giangVienTrongTruong);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThongTinByNamHocHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThongTinByNamHocHocKy", (IEntity)null));

			hoTen =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@HoTen"]);
			tenDonVi =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@TenDonVi"]);
			tenHocVi =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@TenHocVi"]);
			tenHocHam =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@TenHocHam"]);
			maSoThue =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@MaSoThue"]);
			soTaiKhoan =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@SoTaiKhoan"]);
			chiNhanhNganHang =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@ChiNhanhNganHang"]);
			chucVu =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@ChucVu"]);
			giangVienTrongTruong =  Utility.GetParameterValue<System.Boolean>(commandWrapper.Parameters["@GiangVienTrongTruong"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_GetMaDonViMaHocHamMaHocViMaTinhTrang
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetMaDonViMaHocHamMaHocViMaTinhTrang' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;GiangVien&gt;"/> instance.</returns>
		public override TList<GiangVien> GetMaDonViMaHocHamMaHocViMaTinhTrang(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi, System.String maTinhTrang)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetMaDonViMaHocHamMaHocViMaTinhTrang", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32,  maHocHam );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32,  maHocVi );
			database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.AnsiString,  maTinhTrang );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<GiangVien> rows = new TList<GiangVien>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMaDonViMaHocHamMaHocViMaTinhTrang", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetMaDonViMaHocHamMaHocViMaTinhTrang", rows));


				return rows;
		}
		#endregion

		#region cust_GiangVien_TruongKhoaXemThuLaoTrenWeb_Cdgtvt
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_TruongKhoaXemThuLaoTrenWeb_Cdgtvt' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maCanBoGiangDay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader TruongKhoaXemThuLaoTrenWeb_Cdgtvt(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String maCanBoGiangDay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_TruongKhoaXemThuLaoTrenWeb_Cdgtvt", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@MaCanBoGiangDay", DbType.AnsiString,  maCanBoGiangDay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TruongKhoaXemThuLaoTrenWeb_Cdgtvt", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TruongKhoaXemThuLaoTrenWeb_Cdgtvt", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_LuuTinNhan
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_LuuTinNhan' stored procedure. 
		/// </summary>	
		/// <param name="tieuDe"> A <c>System.String</c> instance.</param>
		/// <param name="nguoiNhanTin"> A <c>System.String</c> instance.</param>
		/// <param name="noiDung"> A <c>System.String</c> instance.</param>
		/// <param name="nguoiTao"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void LuuTinNhan(TransactionManager transactionManager, int start, int pageLength , System.String tieuDe, System.String nguoiNhanTin, System.String noiDung, System.String nguoiTao, ref System.Int32 reval)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_LuuTinNhan", true);
			
			database.AddInParameter(commandWrapper, "@TieuDe", DbType.String,  tieuDe );
			database.AddInParameter(commandWrapper, "@NguoiNhanTin", DbType.AnsiString,  nguoiNhanTin );
			database.AddInParameter(commandWrapper, "@NoiDung", DbType.String,  noiDung );
			database.AddInParameter(commandWrapper, "@NguoiTao", DbType.AnsiString,  nguoiTao );
	
			database.AddParameter(commandWrapper, "@Reval", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reval);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "LuuTinNhan", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "LuuTinNhan", (IEntity)null));

			reval =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@Reval"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_Insert
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_Insert' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maNckh"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="tenNckh"> A <c>System.String</c> instance.</param>
		/// <param name="soLuongThanhVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="maVaiTro"> A <c>System.Int32</c> instance.</param>
		/// <param name="duKien"> A <c>System.Boolean</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void NghienCuuKH_Insert(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.Int32 maNckh, System.String namHoc, System.String tenNckh, System.Int32 soLuongThanhVien, System.Int32 maVaiTro, System.Boolean duKien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_Insert", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@MaNckh", DbType.Int32,  maNckh );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@TenNckh", DbType.String,  tenNckh );
			database.AddInParameter(commandWrapper, "@SoLuongThanhVien", DbType.Int32,  soLuongThanhVien );
			database.AddInParameter(commandWrapper, "@MaVaiTro", DbType.Int32,  maVaiTro );
			database.AddInParameter(commandWrapper, "@DuKien", DbType.Boolean,  duKien );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_Insert", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_Insert", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_GiangVien_GetDonVi
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetDonVi' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
			/// <param name="tenDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetDonVi(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, ref System.String tenDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetDonVi", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
	
			database.AddParameter(commandWrapper, "@TenDonVi", DbType.String, 200, ParameterDirection.InputOutput, true, 0, 0, string.Empty, DataRowVersion.Current, tenDonVi);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetDonVi", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetDonVi", (IEntity)null));

			tenDonVi =  Utility.GetParameterValue<System.String>(commandWrapper.Parameters["@TenDonVi"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_GetThongKeByMaDonViMaLoaiNhanVien
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetThongKeByMaDonViMaLoaiNhanVien' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiNhanVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetThongKeByMaDonViMaLoaiNhanVien(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.String maLoaiNhanVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetThongKeByMaDonViMaLoaiNhanVien", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaLoaiNhanVien", DbType.AnsiString,  maLoaiNhanVien );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetThongKeByMaDonViMaLoaiNhanVien", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetThongKeByMaDonViMaLoaiNhanVien", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_DeleteThongTinGiangVien
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_DeleteThongTinGiangVien' stored procedure. 
		/// </summary>	
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DeleteThongTinGiangVien(TransactionManager transactionManager, int start, int pageLength , System.Int32 maGiangVien)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_DeleteThongTinGiangVien", true);
			
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteThongTinGiangVien", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteThongTinGiangVien", (IEntity)null));


				
				return;
		}
		#endregion

		#region cust_GiangVien_ThongKeCanBoNhanVien
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ThongKeCanBoNhanVien' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeCanBoNhanVien(TransactionManager transactionManager, int start, int pageLength , System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ThongKeCanBoNhanVien", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeCanBoNhanVien", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeCanBoNhanVien", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_ThongKeSoLuongGiangVienTheoKhoaBoMon
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ThongKeSoLuongGiangVienTheoKhoaBoMon' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeSoLuongGiangVienTheoKhoaBoMon(TransactionManager transactionManager, int start, int pageLength , System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ThongKeSoLuongGiangVienTheoKhoaBoMon", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeSoLuongGiangVienTheoKhoaBoMon", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeSoLuongGiangVienTheoKhoaBoMon", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_XemThuLaoTrenWeb_Cdgtvt
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_XemThuLaoTrenWeb_Cdgtvt' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maCanBoGiangDay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader XemThuLaoTrenWeb_Cdgtvt(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String maCanBoGiangDay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_XemThuLaoTrenWeb_Cdgtvt", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@MaCanBoGiangDay", DbType.AnsiString,  maCanBoGiangDay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "XemThuLaoTrenWeb_Cdgtvt", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "XemThuLaoTrenWeb_Cdgtvt", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_CapNhatThongTin
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_CapNhatThongTin' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void CapNhatThongTin(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_CapNhatThongTin", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "CapNhatThongTin", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "CapNhatThongTin", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_HoatDongNgoaiGiangDay_LayDuLieu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_HoatDongNgoaiGiangDay_LayDuLieu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoa"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader HoatDongNgoaiGiangDay_LayDuLieu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maKhoa)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_HoatDongNgoaiGiangDay_LayDuLieu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaKhoa", DbType.AnsiString,  maKhoa );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_LayDuLieu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_LayDuLieu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GiamTruDinhMuc_GetByNamHoc
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GiamTruDinhMuc_GetByNamHoc' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GiamTruDinhMuc_GetByNamHoc(TransactionManager transactionManager, int start, int pageLength , System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GiamTruDinhMuc_GetByNamHoc", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GiamTruDinhMuc_GetByNamHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GiamTruDinhMuc_GetByNamHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_HopDongMoiGiangDayNhomMonThucTapCuoiKhoa
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_HopDongMoiGiangDayNhomMonThucTapCuoiKhoa' stored procedure. 
		/// </summary>	
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader HopDongMoiGiangDayNhomMonThucTapCuoiKhoa(TransactionManager transactionManager, int start, int pageLength , System.String maBacDaoTao, System.String khoaDonVi, System.String maGiangVien, System.String namHoc, System.String hocKy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_HopDongMoiGiangDayNhomMonThucTapCuoiKhoa", true);
			
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@KhoaDonVi", DbType.AnsiString,  khoaDonVi );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.AnsiString,  maGiangVien );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HopDongMoiGiangDayNhomMonThucTapCuoiKhoa", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HopDongMoiGiangDayNhomMonThucTapCuoiKhoa", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_GetByGiangVienNamHoc
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_GetByGiangVienNamHoc' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLyGv"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader NghienCuuKH_GetByGiangVienNamHoc(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLyGv, System.String namHoc)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_GetByGiangVienNamHoc", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLyGv", DbType.AnsiString,  maQuanLyGv );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_GetByGiangVienNamHoc", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_GetByGiangVienNamHoc", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_LuuNckhVhu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_LuuNckhVhu' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void NghienCuuKH_LuuNckhVhu(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_LuuNckhVhu", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_LuuNckhVhu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_LuuNckhVhu", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_ThongKeGioGiangBuh_Bk
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_ThongKeGioGiangBuh_Bk' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader ThongKeGioGiangBuh_Bk(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_ThongKeGioGiangBuh_Bk", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@DonVi", DbType.AnsiString,  donVi );
			database.AddInParameter(commandWrapper, "@LoaiGiangVien", DbType.AnsiString,  loaiGiangVien );
			database.AddInParameter(commandWrapper, "@LanChot_HK01", DbType.Int32,  lanChotHk01 );
			database.AddInParameter(commandWrapper, "@LanChot_HK02", DbType.Int32,  lanChotHk02 );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "ThongKeGioGiangBuh_Bk", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "ThongKeGioGiangBuh_Bk", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_LuuWeb
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_LuuWeb' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void NghienCuuKH_LuuWeb(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_LuuWeb", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_LuuWeb", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_LuuWeb", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_NghienCuuKH_LuuTheoHocKy
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_NghienCuuKH_LuuTheoHocKy' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void NghienCuuKH_LuuTheoHocKy(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_NghienCuuKH_LuuTheoHocKy", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "NghienCuuKH_LuuTheoHocKy", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "NghienCuuKH_LuuTheoHocKy", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_GetHeSoQuyDoiTietChuanLaw
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetHeSoQuyDoiTietChuanLaw' stored procedure. 
		/// </summary>	
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="daoTaoTinChi"> A <c>System.Boolean</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetHeSoQuyDoiTietChuanLaw(TransactionManager transactionManager, int start, int pageLength , System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan, System.String maLoaiHocPhan, System.String maBacDaoTao, System.String maKhoaBoMon, System.Int32 maHocHam, System.Int32 maHocVi, System.Boolean daoTaoTinChi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetHeSoQuyDoiTietChuanLaw", true);
			
			database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString,  maQuanLy );
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaMonHoc", DbType.AnsiString,  maMonHoc );
			database.AddInParameter(commandWrapper, "@SiSo", DbType.Int32,  siSo );
			database.AddInParameter(commandWrapper, "@TietBatDau", DbType.Int32,  tietBatDau );
			database.AddInParameter(commandWrapper, "@NgayDay", DbType.DateTime,  ngayDay );
			database.AddInParameter(commandWrapper, "@MaPhongHoc", DbType.AnsiString,  maPhongHoc );
			database.AddInParameter(commandWrapper, "@MaLopHocPhan", DbType.AnsiString,  maLopHocPhan );
			database.AddInParameter(commandWrapper, "@MaLoaiHocPhan", DbType.AnsiString,  maLoaiHocPhan );
			database.AddInParameter(commandWrapper, "@MaBacDaoTao", DbType.AnsiString,  maBacDaoTao );
			database.AddInParameter(commandWrapper, "@MaKhoaBoMon", DbType.AnsiString,  maKhoaBoMon );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32,  maHocHam );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32,  maHocVi );
			database.AddInParameter(commandWrapper, "@DaoTaoTinChi", DbType.Boolean,  daoTaoTinChi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetHeSoQuyDoiTietChuanLaw", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetHeSoQuyDoiTietChuanLaw", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_GetSoTietNoGioNghiaVu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_GetSoTietNoGioNghiaVu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
			/// <param name="tietNoGiangDay"> A <c>System.Double</c> instance.</param>
			/// <param name="tietNoKhac"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetSoTietNoGioNghiaVu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.Int32 maGiangVien, ref System.Double tietNoGiangDay, ref System.Double tietNoKhac)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_GetSoTietNoGioNghiaVu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaGiangVien", DbType.Int32,  maGiangVien );
	
			database.AddParameter(commandWrapper, "@TietNoGiangDay", DbType.Double, 8, ParameterDirection.InputOutput, true, 53, 0, string.Empty, DataRowVersion.Current, tietNoGiangDay);
			database.AddParameter(commandWrapper, "@TietNoKhac", DbType.Double, 8, ParameterDirection.InputOutput, true, 53, 0, string.Empty, DataRowVersion.Current, tietNoKhac);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoTietNoGioNghiaVu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoTietNoGioNghiaVu", (IEntity)null));

			tietNoGiangDay =  Utility.GetParameterValue<System.Double>(commandWrapper.Parameters["@TietNoGiangDay"]);
			tietNoKhac =  Utility.GetParameterValue<System.Double>(commandWrapper.Parameters["@TietNoKhac"]);

				
				return;
		}
		#endregion

		#region cust_GiangVien_TrinhDoChuyenMonNghiepVu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_TrinhDoChuyenMonNghiepVu' stored procedure. 
		/// </summary>	
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader TrinhDoChuyenMonNghiepVu(TransactionManager transactionManager, int start, int pageLength , System.DateTime ngay)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_TrinhDoChuyenMonNghiepVu", true);
			
			database.AddInParameter(commandWrapper, "@ngay", DbType.DateTime,  ngay );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "TrinhDoChuyenMonNghiepVu", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "TrinhDoChuyenMonNghiepVu", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVien_HoatDongNgoaiGiangDay_KiemTraDuLieu
					
		/// <summary>
		///	This method wraps the 'cust_GiangVien_HoatDongNgoaiGiangDay_KiemTraDuLieu' stored procedure. 
		/// </summary>	
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void HoatDongNgoaiGiangDay_KiemTraDuLieu(TransactionManager transactionManager, int start, int pageLength , System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVien_HoatDongNgoaiGiangDay_KiemTraDuLieu", true);
			
			database.AddInParameter(commandWrapper, "@NamHoc", DbType.AnsiString,  namHoc );
			database.AddInParameter(commandWrapper, "@HocKy", DbType.AnsiString,  hocKy );
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_KiemTraDuLieu", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "HoatDongNgoaiGiangDay_KiemTraDuLieu", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
