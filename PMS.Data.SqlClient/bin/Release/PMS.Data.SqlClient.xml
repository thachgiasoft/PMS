<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMS.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:PMS.Data.SqlClient.SqlHeSoNgayProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HeSoNgay"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoNgayProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoNgayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maHeSo">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoNgay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.HeSoNgay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoNgay objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoNgay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.GetByMaQuanLyMaBuoi(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HeSoNgayNghi index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="_maBuoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoNgay"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.GetByMaHeSo(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HeSoNgayNghi index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHeSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoNgay"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.HeSoNgay})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HeSoNgay object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.HeSoNgay)">
            <summary>
            	Inserts a PMS.Entities.HeSoNgay object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HeSoNgay object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HeSoNgay object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.HeSoNgay)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HeSoNgay object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.HeSoNgay object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_HeSoNgay_GetByMaQuanLy' stored procedure. 
            </summary>	
            <param name="maQuanLy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoNgayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHeSoHocKyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HeSoHocKy"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HeSoHocKy"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maHocKy">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoHocKy objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.HeSoHocKy objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoHocKy objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoHocKy objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HeSoHocKy index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoHocKy"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.GetByMaHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HeSoHocKy index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHocKy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoHocKy"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.HeSoHocKy})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HeSoHocKy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.HeSoHocKy)">
            <summary>
            	Inserts a PMS.Entities.HeSoHocKy object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HeSoHocKy object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HeSoHocKy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.HeSoHocKy)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HeSoHocKy object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.HeSoHocKy object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoHocKyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoHocKyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoHocKyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHeSoCoSoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HeSoCoSo"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HeSoCoSo"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maCoSo">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoCoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.HeSoCoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoCoSo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeSoCoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HeSoCoSo index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoCoSo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.GetByMaCoSo(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HeSoCoSo index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maCoSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoCoSo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.HeSoCoSo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HeSoCoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.HeSoCoSo)">
            <summary>
            	Inserts a PMS.Entities.HeSoCoSo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HeSoCoSo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HeSoCoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.HeSoCoSo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HeSoCoSo object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.HeSoCoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeSoCoSoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoCoSoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoCoSoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlGiangVienProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.GiangVien"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaChucVuFromGiangVienChucVu(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets GiangVien objects from the datasource by MaChucVu in the
            	GiangVien_ChucVu table. Table GiangVien is related to table ChucVu
            	through the (M:N) relationship defined in the GiangVien_ChucVu table.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maChucVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaHoSoFromGiangVienHoSo(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets GiangVien objects from the datasource by MaHoSo in the
            	GiangVien_HoSo table. Table GiangVien is related to table HoSo
            	through the (M:N) relationship defined in the GiangVien_HoSo table.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHoSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maGiangVien">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaHocHam(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_HocHam key.
            	FK_GiangVien_HocHam Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHocHam"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaHocVi(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_HocVi key.
            	FK_GiangVien_HocVi Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHocVi"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaLoaiGiangVien(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_LoaiGiangVien key.
            	FK_GiangVien_LoaiGiangVien Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maLoaiGiangVien"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaNguoiLap(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_TaiKhoan key.
            	FK_GiangVien_TaiKhoan Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maNguoiLap"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaTinhTrang(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_TinhTrang key.
            	FK_GiangVien_TinhTrang Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maTinhTrang"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVien objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_GiangVien index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GiangVien index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVien"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.GiangVien})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.GiangVien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.GiangVien)">
            <summary>
            	Inserts a PMS.Entities.GiangVien object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.GiangVien object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.GiangVien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.GiangVien)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.GiangVien object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.GiangVien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetByMaDonVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_GiangVien_GetByMaDonVi' stored procedure. 
            </summary>	
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProviderBase.GetMaDonViMaTinhTrang(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            This method wraps the 'cust_GiangVien_GetMaDonViMaTinhTrang' stored procedure. 
            </summary>	
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="maTinhTrang"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHocHamProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HocHam"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHocHamProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHocHamProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maHocHam">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.HocHam objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.HocHam objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HocHam objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HocHam objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HocHam index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocHam"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.GetByMaHocHam(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HocHam index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHocHam"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocHam"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.HocHam})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HocHam object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.HocHam)">
            <summary>
            	Inserts a PMS.Entities.HocHam object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HocHam object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HocHam object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.HocHam)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HocHam object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.HocHam object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHocHamProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHocHamProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHocHamProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewTinhKhoiLuong"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewTinhKhoiLuong objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTinhKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTinhKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewTinhKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_Tinh_KhoiLuong_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.GetByNamHocHocKyMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This method wraps the 'cust_View_Tinh_KhoiLuong_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTinhKhoiLuongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewMonHocProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewMonHoc objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewMonHocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewMonHocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewMonHoc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewMonHoc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewMonHoc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocProviderBase.Khoa_GetByMaDonVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_MonHoc_Khoa_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewMonHocProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewMonHocProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewMonHocProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewLopProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewLop objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewLop objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewLop objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewLop objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopProviderBase.DaiDien_GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_Lop_DaiDien_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopProviderBase.GetByMaDonVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_Lop_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewGiangVienKhoa objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewGiangVienKhoa objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewGiangVienKhoa objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewGiangVienKhoa objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienKhoaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewCoSoProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewCoSo objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewCoSoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewCoSoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewCoSoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewCoSoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewCoSoProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewCoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewCoSoProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewCoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewCoSoProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewCoSo objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewCoSoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewCoSoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewCoSoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.KhoanQuyDoi"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maKhoan">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoanQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.KhoanQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoanQuyDoi objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoanQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.GetByMaQuyDoi(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_KhoanQuyDoi_QuyDoiGioChuan key.
            	FK_KhoanQuyDoi_QuyDoiGioChuan Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuyDoi"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoanQuyDoi objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.GetByMaKhoan(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_KhoanQuyDoi index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maKhoan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoanQuyDoi"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.KhoanQuyDoi})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.KhoanQuyDoi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.KhoanQuyDoi)">
            <summary>
            	Inserts a PMS.Entities.KhoanQuyDoi object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.KhoanQuyDoi object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.KhoanQuyDoi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.KhoanQuyDoi)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.KhoanQuyDoi object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.KhoanQuyDoi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoanQuyDoiProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maChiTiet">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.ChiTietKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.ChiTietKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ChiTietKhoiLuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ChiTietKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.GetByMaKhoiLuong(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ChiTietKhoiLuong_KhoiLuongKhac key.
            	FK_ChiTietKhoiLuong_KhoiLuongKhac Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maKhoiLuong"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ChiTietKhoiLuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.GetByMaChiTiet(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ChiTietKhoiLuong index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maChiTiet"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ChiTietKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.ChiTietKhoiLuong)">
            <summary>
            	Inserts a PMS.Entities.ChiTietKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ChiTietKhoiLuong object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ChiTietKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.ChiTietKhoiLuong)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ChiTietKhoiLuong object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.ChiTietKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChiTietKhoiLuongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlCauHinhProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.CauHinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlCauHinhProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlCauHinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maCauHinh">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.CauHinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.CauHinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.CauHinh objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.CauHinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.GetByMaCauHinh(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CauHinh index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maCauHinh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CauHinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.CauHinh})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.CauHinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.CauHinh)">
            <summary>
            	Inserts a PMS.Entities.CauHinh object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.CauHinh object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.CauHinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.CauHinh)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.CauHinh object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.CauHinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlCauHinhProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlCauHinhProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlCauHinhProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHocViProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HocVi"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHocViProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHocViProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maHocVi">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.HocVi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.HocVi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HocVi objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HocVi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HocVi index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocVi"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.GetByMaHocVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HocVi index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHocVi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocVi"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.HocVi})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HocVi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.HocVi)">
            <summary>
            	Inserts a PMS.Entities.HocVi object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HocVi object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HocVi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.HocVi)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HocVi object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.HocVi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHocViProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHocViProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHocViProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewTonGiao objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTonGiao objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTonGiao objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewTonGiao objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTonGiaoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewTongHopQuyDoi objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTongHopQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTongHopQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewTongHopQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_TongHop_QuyDoi_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewTongHopChiTienCoVan"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewTongHopChiTienCoVan objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTongHopChiTienCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTongHopChiTienCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewTongHopChiTienCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_TongHop_ChiTien_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTongHopChiTienCoVanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewThanhToanThuLao"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewThanhToanThuLao objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewThanhToanThuLao objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewThanhToanThuLao objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewThanhToanThuLao objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.GetByNamHocHocKyDonViLoaiGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            This method wraps the 'cust_View_ThanhToan_ThuLao_GetByNamHocHocKyDonViLoaiGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewThanhToanThuLaoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewKhoaBoMon objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoaBoMon objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoaBoMon objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewKhoaBoMon objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaBoMonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewKetQuaTinh objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKetQuaTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKetQuaTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewKetQuaTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_KetQuaTinh_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.GetByNamHocHocKyMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This method wraps the 'cust_View_KetQuaTinh_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKetQuaTinhProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewChiTietQuyDoi objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewChiTietQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_QuyDoi_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewChiTietKhoiLuongGiangDay"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewChiTietKhoiLuongGiangDay objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietKhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietKhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewChiTietKhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongGiangDayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewChiTietKhoiLuong objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewChiTietKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.ThucDay_GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.GiangDay_GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.GetByNamHocHocKyMaDonViMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_KhoiLuong_GetByNamHocHocKyMaDonViMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maBoMon"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlQuyDoiGioChuanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maQuyDoi">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.QuyDoiGioChuan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.QuyDoiGioChuan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.QuyDoiGioChuan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.QuyDoiGioChuan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.GetByMaDonVi(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuyDoiGioChuan_DonViTinh key.
            	FK_QuyDoiGioChuan_DonViTinh Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maDonVi"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.QuyDoiGioChuan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_QuyDoiGioChuan index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.GetByMaQuyDoi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuyDoiGioChuan index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuyDoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.QuyDoiGioChuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.QuyDoiGioChuan)">
            <summary>
            	Inserts a PMS.Entities.QuyDoiGioChuan object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.QuyDoiGioChuan object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.QuyDoiGioChuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.QuyDoiGioChuan)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.QuyDoiGioChuan object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.QuyDoiGioChuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlQuyDoiGioChuanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlQuyDoiGioChuanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlQuyDoiGioChuanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.MonKhongTinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.Delete(PMS.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maMonHoc">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.MonKhongTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.MonKhongTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.MonKhongTinh objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.MonKhongTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.GetByMaMonHoc(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_MonKhongTinh index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maMonHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.MonKhongTinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.MonKhongTinh})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.MonKhongTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.MonKhongTinh)">
            <summary>
            	Inserts a PMS.Entities.MonKhongTinh object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.MonKhongTinh object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.MonKhongTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.MonKhongTinh)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.MonKhongTinh object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.MonKhongTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlMonKhongTinhProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewXuLyQuyDoi"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewXuLyQuyDoi objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewXuLyQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewXuLyQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewXuLyQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.GetByMaKetQua(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'cust_View_XuLy_QuyDoi_GetByMaKetQua' stored procedure. 
            </summary>
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewXuLyQuyDoiProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewSinhVienLop objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewSinhVienLop objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewSinhVienLop objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewSinhVienLop objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.GetByMaKhoa(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_SinhVien_Lop_GetByMaKhoa' stored procedure. 
            </summary>
            <param name="maKhoa"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienLopProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoaHocProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewKhoaHoc"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewKhoaHoc objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoaHoc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoaHoc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewKhoaHoc objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaHocProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaHocProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaHocProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewHocKyProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewHocKy objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewHocKyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewHocKyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewHocKyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewHocKyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewHocKyProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewHocKy objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewHocKyProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewHocKy objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewHocKyProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewHocKy objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewHocKyProviderBase.GetByNamHoc(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_HocKy_GetByNamHoc' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewHocKyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewHocKyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewHocKyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewGiangVienLopHocPhan objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewGiangVienLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewGiangVienLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewGiangVienLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.GetKetThucByTuNgayDenNgay(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            This method wraps the 'cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.GetBatDauByTuNgayDenNgay(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            This method wraps the 'cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.GetByNamHocHocKyMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This method wraps the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewDanTocProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewDanToc objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDanTocProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewDanTocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDanTocProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewDanTocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDanTocProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewDanToc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDanTocProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewDanToc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDanTocProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewDanToc objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewDanTocProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewDanTocProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewDanTocProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlChucNangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ChucNang"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlChucNangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ChucNang"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChucNangProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChucNangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByMaNhomQuyenFromNhomChucNang(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ChucNang objects from the datasource by MaNhomQuyen in the
            	NhomChucNang table. Table ChucNang is related to table NhomQuyen
            	through the (M:N) relationship defined in the NhomChucNang table.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maNhomQuyen"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of ChucNang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.ChucNang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.ChucNang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ChucNang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ChucNang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByParentId(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Modules_Modules key.
            	FK_Modules_Modules Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_parentId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ChucNang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetById(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Modules index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucNang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.ChucNang})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ChucNang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.ChucNang)">
            <summary>
            	Inserts a PMS.Entities.ChucNang object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ChucNang object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ChucNang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.ChucNang)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ChucNang object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.ChucNang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByMaNhomQuyenParentIDPhanLoaiTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            This method wraps the 'cust_ChucNang_GetByMaNhomQuyenParentIDPhanLoaiTrangThai' stored procedure. 
            </summary>	
            <param name="maNhomQuyen"> A <c>System.Int32</c> instance.</param>
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method wraps the 'cust_ChucNang_GetByTrangThai' stored procedure. 
            </summary>	
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByTenFormTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            This method wraps the 'cust_ChucNang_GetByTenFormTrangThai' stored procedure. 
            </summary>	
            <param name="tenForm"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByParentIDPhanLoaiTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            This method wraps the 'cust_ChucNang_GetByParentIDPhanLoaiTrangThai' stored procedure. 
            </summary>	
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByParentIDTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method wraps the 'cust_ChucNang_GetByParentIDTrangThai' stored procedure. 
            </summary>	
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByIDTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method wraps the 'cust_ChucNang_GetByIDTrangThai' stored procedure. 
            </summary>	
            <param name="id"> A <c>System.Int32</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByMaNhomQuyenPhanLoaiTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            This method wraps the 'cust_ChucNang_GetByMaNhomQuyenPhanLoaiTrangThai' stored procedure. 
            </summary>	
            <param name="maNhomQuyen"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetByPhanLoaiTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            This method wraps the 'cust_ChucNang_GetByPhanLoaiTrangThai' stored procedure. 
            </summary>	
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProviderBase.GetModulesByGroupID(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'cust_ChucNang_GetModulesByGroupID' stored procedure. 
            </summary>	
            <param name="groupId"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChucNangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChucNangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChucNangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucNangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChucNangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewSinhVienLopHocPhan"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewSinhVienLopHocPhan objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewSinhVienLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewSinhVienLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewSinhVienLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.GetByMaLopHocPhan(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_SinhVien_LopHocPhan_GetByMaLopHocPhan' stored procedure. 
            </summary>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienLopHocPhanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewPhanCongChuyenMon"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewPhanCongChuyenMon objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewPhanCongChuyenMon objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewPhanCongChuyenMon objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewPhanCongChuyenMon objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.GetByMaDonVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_PhanCong_ChuyenMon_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewPhanCongChuyenMonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewMonHocKhoa objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewMonHocKhoa objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewMonHocKhoa objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewMonHocKhoa objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.GetByMaDonVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_MonHoc_Khoa_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewMonHocKhoaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewKhoiLuongThucDay"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewKhoiLuongThucDay objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoiLuongThucDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoiLuongThucDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewKhoiLuongThucDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoiLuongThucDayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.CoVanHocTap"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maCoVan">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.CoVanHocTap objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.CoVanHocTap objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.CoVanHocTap objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.CoVanHocTap objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.GetByMaGiangVien(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CoVanHocTap_GiangVien key.
            	FK_CoVanHocTap_GiangVien Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.CoVanHocTap objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.GetByMaGiangVienMaLopNamHocHocKy(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CoVanHocTap index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="_maLop"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CoVanHocTap"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.GetByMaCoVan(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CoVanHocTap index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maCoVan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CoVanHocTap"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.CoVanHocTap})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.CoVanHocTap object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.CoVanHocTap)">
            <summary>
            	Inserts a PMS.Entities.CoVanHocTap object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.CoVanHocTap object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.CoVanHocTap object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.CoVanHocTap)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.CoVanHocTap object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.CoVanHocTap object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.GetByMaGiangVienNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_CoVanHocTap_GetByMaGiangVienNamHocHocKy' stored procedure. 
            </summary>	
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.InsertUpdate(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
            This method wraps the 'cust_CoVanHocTap_InsertUpdate' stored procedure. 
            </summary>	
            <param name="maGiangVien"> A <c>System.Int32?</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <param name="ngayTao"> A <c>System.DateTime</c> instance.</param>
            <param name="soTiet"> A <c>System.Int32?</c> instance.</param>
            <param name="soTien"> A <c>System.Decimal?</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.GetByNamHocHocKyMaKhoaHoc(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method wraps the 'cust_CoVanHocTap_GetByNamHocHocKyMaKhoaHoc' stored procedure. 
            </summary>	
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.GetByTrangThai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method wraps the 'cust_CoVanHocTap_GetByTrangThai' stored procedure. 
            </summary>	
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlCoVanHocTapProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlChucVuProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ChucVu"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChucVuProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChucVuProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.GetByMaGiangVienFromGiangVienChucVu(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ChucVu objects from the datasource by MaGiangVien in the
            	GiangVien_ChucVu table. Table ChucVu is related to table GiangVien
            	through the (M:N) relationship defined in the GiangVien_ChucVu table.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of ChucVu objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maChucVu">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.ChucVu objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.ChucVu objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ChucVu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ChucVu objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_ChucVu index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucVu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.GetByMaChucVu(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ChucVu index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maChucVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucVu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.ChucVu})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ChucVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.ChucVu)">
            <summary>
            	Inserts a PMS.Entities.ChucVu object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ChucVu object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ChucVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.ChucVu)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ChucVu object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.ChucVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChucVuProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChucVuProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlChucVuProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlTinhTrangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.TinhTrang"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlTinhTrangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.TinhTrang"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlTinhTrangProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlTinhTrangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maTinhTrang">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.TinhTrang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.TinhTrang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.TinhTrang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.TinhTrang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_TinhTrang index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TinhTrang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.GetByMaTinhTrang(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_TinhTrang index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maTinhTrang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TinhTrang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.TinhTrang})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.TinhTrang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.TinhTrang)">
            <summary>
            	Inserts a PMS.Entities.TinhTrang object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.TinhTrang object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.TinhTrang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.TinhTrang)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.TinhTrang object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.TinhTrang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlTinhTrangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlTinhTrangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlTinhTrangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTinhTrangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlTinhTrangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewLopHocPhan objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewLopHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopHocPhanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewGiangVienLopHocPhan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienLopHocPhanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlReportTemplateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ReportTemplate"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlReportTemplateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlReportTemplateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.Delete(PMS.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_reportId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.ReportTemplate objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.ReportTemplate objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ReportTemplate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ReportTemplate objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.GetByUserId(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ReportTemplate_TaiKhoan key.
            	FK_ReportTemplate_TaiKhoan Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ReportTemplate objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.GetByReportId(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ReportTemplate index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_reportId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ReportTemplate"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.ReportTemplate})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ReportTemplate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.ReportTemplate)">
            <summary>
            	Inserts a PMS.Entities.ReportTemplate object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ReportTemplate object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ReportTemplate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.ReportTemplate)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ReportTemplate object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.ReportTemplate object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlReportTemplateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlReportTemplateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlReportTemplateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlGiangVienChuyenMonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maPhanCong">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChuyenMon objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChuyenMon objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChuyenMon objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChuyenMon objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.GetByMaGiangVien(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_ChuyenMon_GiangVien key.
            	FK_GiangVien_ChuyenMon_GiangVien Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChuyenMon objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.GetByMaGiangVienMaMonHoc(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_GiangVien_ChuyenMon index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="_maMonHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.GetByMaPhanCong(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GiangVien_ChuyenMon index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maPhanCong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.GiangVienChuyenMon object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.GiangVienChuyenMon)">
            <summary>
            	Inserts a PMS.Entities.GiangVienChuyenMon object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.GiangVienChuyenMon object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.GiangVienChuyenMon object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.GiangVienChuyenMon)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.GiangVienChuyenMon object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.GiangVienChuyenMon object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienChuyenMonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChuyenMonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienChuyenMonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlTaiKhoanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.TaiKhoan"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlTaiKhoanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.TaiKhoan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlTaiKhoanProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlTaiKhoanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.GetByParentIdFromHeThong(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TaiKhoan objects from the datasource by ParentID in the
            	HeThong table. Table TaiKhoan is related to table TaiKhoan
            	through the (M:N) relationship defined in the HeThong table.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_parentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.GetByUserIdFromHeThong(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TaiKhoan objects from the datasource by UserID in the
            	HeThong table. Table TaiKhoan is related to table TaiKhoan
            	through the (M:N) relationship defined in the HeThong table.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maTaiKhoan">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.TaiKhoan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.GetByMaNhomQuyen(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Users_Groups key.
            	FK_Users_Groups Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maNhomQuyen"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.TaiKhoan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.GetByTenDangNhap(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Users index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_tenDangNhap"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TaiKhoan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.GetByMaTaiKhoan(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maTaiKhoan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TaiKhoan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.TaiKhoan})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.TaiKhoan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.TaiKhoan)">
            <summary>
            	Inserts a PMS.Entities.TaiKhoan object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.TaiKhoan object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.TaiKhoan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.TaiKhoan)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.TaiKhoan object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.TaiKhoan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.GetByTenDangNhapMatKhau(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_TaiKhoan_GetByTenDangNhapMatKhau' stored procedure. 
            </summary>	
            <param name="tenDangNhap"> A <c>System.String</c> instance.</param>
            <param name="matKhau"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlTaiKhoanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlTaiKhoanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlTaiKhoanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewTheoDoiGiangDay"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewTheoDoiGiangDay objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTheoDoiGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTheoDoiGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewTheoDoiGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.GetByMaLoaiGiangVienTuNgayDenNgay(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            This method wraps the 'cust_View_TheoDoi_GiangDay_GetByMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.GetByMaCoSoMaLoaiGiangVienTuNgayDenNgay(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            This method wraps the 'cust_View_TheoDoi_GiangDay_GetByMaCoSoMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTheoDoiGiangDayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewNamHocProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewNamHoc"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewNamHocProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewNamHoc objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewNamHocProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewNamHocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewNamHocProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewNamHocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewNamHocProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewNamHoc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewNamHocProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewNamHoc objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewNamHocProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewNamHoc objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewNamHocProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewNamHocProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewNamHocProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewNamHocProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewNamHocProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewMonHocKhoaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewMonHocKhoa"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocKhoaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewMonHocKhoaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewKhoiLuongGiangDay objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewKhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.GetByMaGiangVienMaLopHocPhanMaLop(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_KhoiLuong_GiangDay_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewKhoa"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoaProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewKhoa objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoa objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewKhoa objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewKhoa objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewKhoaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKetQuaTinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewKetQuaTinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKetQuaTinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKetQuaTinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewGiangVienDonGia"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewGiangVienDonGia objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewGiangVienDonGia objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewGiangVienDonGia objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewGiangVienDonGia objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.GetByMaDonVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_GiangVien_DonGia_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienDonGiaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewGiangVienProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewGiangVien objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewGiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewGiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewGiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.LopHocPhan_GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.LopHocPhan_GetKetThucByTuNgayDenNgay(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            This method wraps the 'cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.LopHocPhan_GetByNamHocHocKyMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This method wraps the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.DonGia_GetByMaDonVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_GiangVien_DonGia_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.LopHocPhan_GetBatDauByTuNgayDenNgay(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            This method wraps the 'cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewGiangVienProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlMonKhongTinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.MonKhongTinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlMonKhongTinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlMonKhongTinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maKhoiLuong">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDay objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.GetByMaKetQua(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_KhoiLuongGiangDay_KetQuaTinh key.
            	FK_KhoiLuongGiangDay_KetQuaTinh Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maKetQua"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongGiangDay objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.GetByMaKhoiLuong(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_KhoiLuongGiangDay index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maKhoiLuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.KhoiLuongGiangDay object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.KhoiLuongGiangDay)">
            <summary>
            	Inserts a PMS.Entities.KhoiLuongGiangDay object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.KhoiLuongGiangDay object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.KhoiLuongGiangDay object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.KhoiLuongGiangDay)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.KhoiLuongGiangDay object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.KhoiLuongGiangDay object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.DeleteByMaKetQua(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'cust_KhoiLuongGiangDay_DeleteByMaKetQua' stored procedure. 
            </summary>	
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.GetByMaKetQuaMaLopHocPhan(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_KhoiLuongGiangDay_GetByMaKetQuaMaLopHocPhan' stored procedure. 
            </summary>	
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.GetByLoaiHocPhanNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method wraps the 'cust_KhoiLuongGiangDay_GetByLoaiHocPhanNamHocHocKy' stored procedure. 
            </summary>	
            <param name="loaiHocPhan"> A <c>System.String</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoiLuongGiangDayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maThuLao">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.ThuLaoThoaThuan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.ThuLaoThoaThuan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ThuLaoThoaThuan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ThuLaoThoaThuan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.GetByMaGiangVien(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ThuLaoThoaThuan_GiangVien key.
            	FK_ThuLaoThoaThuan_GiangVien Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.ThuLaoThoaThuan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.GetByMaThuLao(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ThuLaoThoaThuan index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maThuLao"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ThuLaoThoaThuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.ThuLaoThoaThuan)">
            <summary>
            	Inserts a PMS.Entities.ThuLaoThoaThuan object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ThuLaoThoaThuan object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.ThuLaoThoaThuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.ThuLaoThoaThuan)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.ThuLaoThoaThuan object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.ThuLaoThoaThuan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlThuLaoThoaThuanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlCauHinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.CauHinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCauHinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlCauHinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlNhomQuyenProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.NhomQuyen"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomQuyenProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomQuyenProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.GetByMaChucNangFromNhomChucNang(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets NhomQuyen objects from the datasource by MaChucNang in the
            	NhomChucNang table. Table NhomQuyen is related to table ChucNang
            	through the (M:N) relationship defined in the NhomChucNang table.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maChucNang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of NhomQuyen objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maNhomQuyen">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomQuyen objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.NhomQuyen objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomQuyen objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomQuyen objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.GetByMaNhomQuyen(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGroup index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maNhomQuyen"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomQuyen"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.NhomQuyen})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.NhomQuyen object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.NhomQuyen)">
            <summary>
            	Inserts a PMS.Entities.NhomQuyen object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.NhomQuyen object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.NhomQuyen object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.NhomQuyen)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.NhomQuyen object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.NhomQuyen object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomQuyenProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewSinhVienHocPhan objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewSinhVienHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewSinhVienHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewSinhVienHocPhan objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewKhoiLuongGiangDay"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoiLuongGiangDayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewChiTietHocPhan objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewChiTietHocPhan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.GetByMaGiangVienMaLopHocPhanMaLop(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_HocPhan_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.GetByMaLopHocPhan(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_HocPhan_GetByMaLopHocPhan' stored procedure. 
            </summary>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietHocPhanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTienCoVanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewChiTienCoVan"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewChiTienCoVan objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTienCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTienCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewChiTienCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTien_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTienCoVanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTienCoVanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTienCoVanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,PMS.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:PMS.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:PMS.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:PMS.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:PMS.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:PMS.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:PMS.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:PMS.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:PMS.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:PMS.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:PMS.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:PMS.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.NhomKhoiLuong"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maNhom">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.NhomKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomKhoiLuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.GetByMaNhom(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_NhomKhoiLuong index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maNhom"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomKhoiLuong"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.NhomKhoiLuong})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.NhomKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.NhomKhoiLuong)">
            <summary>
            	Inserts a PMS.Entities.NhomKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.NhomKhoiLuong object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.NhomKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.NhomKhoiLuong)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.NhomKhoiLuong object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.NhomKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomKhoiLuongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlCoVanHocTapProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.CoVanHocTap"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlCoVanHocTapProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlCoVanHocTapProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlThuLaoThoaThuanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlThuLaoThoaThuanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlThuLaoThoaThuanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewMonHocProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewMonHoc"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewMonHocProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewMonHocProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewChiTietKhoiLuong"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewTheoDoiLichGiang objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTheoDoiLichGiang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewTheoDoiLichGiang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewTheoDoiLichGiang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.GetTheoNgayByTuNgayDenNgayMaCoSoMaBacLoaiHinh(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_TheoDoi_LichGiang_GetTheoNgayByTuNgayDenNgayMaCoSoMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.GetByTuNgayDenNgayMaCoSo(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            This method wraps the 'cust_View_TheoDoi_LichGiang_GetByTuNgayDenNgayMaCoSo' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.GetByNgayMaCoSoTietBatDauKetThuc(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'cust_View_TheoDoi_LichGiang_GetByNgayMaCoSoTietBatDauKetThuc' stored procedure. 
            </summary>
            <param name="ngay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
            <param name="tietKetThuc"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.GetByNgayMaCoSoTietBatDauKetThucMaBacLoaiHinh(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the 'cust_View_TheoDoi_LichGiang_GetByNgayMaCoSoTietBatDauKetThucMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="ngay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
            <param name="tietKetThuc"> A <c>System.Int32</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.GetByTuNgayDenNgayMaCoSoMaBacLoaiHinh(PMS.Data.TransactionManager,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_TheoDoi_LichGiang_GetByTuNgayDenNgayMaCoSoMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewChiTietKhoiLuongThucDay"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewChiTietKhoiLuongThucDay objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietKhoiLuongThucDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietKhoiLuongThucDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewChiTietKhoiLuongThucDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietKhoiLuongThucDayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.KhoiLuongKhac"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maKhoiLuong">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongKhac objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongKhac objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongKhac objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongKhac objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.GetByMaGiangVien(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_KhoiLuongKhac_GiangVien key.
            	FK_KhoiLuongKhac_GiangVien Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KhoiLuongKhac objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.GetByMaKhoiLuong(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_KhoiLuongKhac index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maKhoiLuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoiLuongKhac"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.KhoiLuongKhac})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.KhoiLuongKhac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.KhoiLuongKhac)">
            <summary>
            	Inserts a PMS.Entities.KhoiLuongKhac object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.KhoiLuongKhac object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.KhoiLuongKhac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.KhoiLuongKhac)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.KhoiLuongKhac object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.KhoiLuongKhac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.GetByNamHocHocKyPhanLoai(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This method wraps the 'cust_KhoiLuongKhac_GetByNamHocHocKyPhanLoai' stored procedure. 
            </summary>	
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="phanLoai"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.GetByNamHocHocKyPhanLoaiMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'cust_KhoiLuongKhac_GetByNamHocHocKyPhanLoaiMaGiangVien' stored procedure. 
            </summary>	
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="phanLoai"> A <c>System.Int32</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKhoiLuongKhacProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.GiangVienHoSo"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.Delete(PMS.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maHoSo">. Primary Key.</param>	
            <param name="_maGiangVien">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienHoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.GiangVienHoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienHoSo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienHoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.GetByMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_HoSo_GiangVien key.
            	FK_GiangVien_HoSo_GiangVien Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienHoSo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.GetByMaHoSo(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_HoSo_HoSo key.
            	FK_GiangVien_HoSo_HoSo Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHoSo"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienHoSo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.GetByMaHoSoMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GiangVien_HoSo index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHoSo"></param>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienHoSo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.GiangVienHoSo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.GiangVienHoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.GiangVienHoSo)">
            <summary>
            	Inserts a PMS.Entities.GiangVienHoSo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.GiangVienHoSo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.GiangVienHoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.GiangVienHoSo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.GiangVienHoSo object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.GiangVienHoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienHoSoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewTheoDoiLichGiang"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTheoDoiLichGiangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewThanhToanTienGiang objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewThanhToanTienGiang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewThanhToanTienGiang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewThanhToanTienGiang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.GetByMaLoaiGiangVienTuNgayDenNgay(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            This method wraps the 'cust_View_ThanhToan_TienGiang_GetByMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewChiTietGiangDay objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewChiTietGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewChiTietGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.GetByMaGiangVienMaLopHocPhanMaKhoaHoc(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_ChiTiet_GiangDay_GetByMaGiangVienMaLopHocPhanMaKhoaHoc' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewChiTietGiangDayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlKhoiLuongKhacProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.KhoiLuongKhac"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoiLuongKhacProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoiLuongKhacProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlReportTemplateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ReportTemplate"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlReportTemplateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlReportTemplateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHoSoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HoSo"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHoSoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHoSoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.GetByMaGiangVienFromGiangVienHoSo(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets HoSo objects from the datasource by MaGiangVien in the
            	GiangVien_HoSo table. Table HoSo is related to table GiangVien
            	through the (M:N) relationship defined in the GiangVien_HoSo table.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of HoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maHoSo">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.HoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.HoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HoSo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HoSo objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_HoSo index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HoSo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.GetByMaHoSo(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HoSo index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maHoSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HoSo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.HoSo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.HoSo)">
            <summary>
            	Inserts a PMS.Entities.HoSo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HoSo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.HoSo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HoSo object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.HoSo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHoSoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHoSoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHoSoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.GiangVienChucVu"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.Delete(PMS.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maGiangVien">. Primary Key.</param>	
            <param name="_maChucVu">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChucVu objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChucVu objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChucVu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChucVu objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.GetByMaChucVu(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_ChucVu_ChucVu key.
            	FK_GiangVien_ChucVu_ChucVu Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maChucVu"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChucVu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.GetByMaGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GiangVien_ChucVu_GiangVien key.
            	FK_GiangVien_ChucVu_GiangVien Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.GiangVienChucVu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.GetByMaGiangVienMaChucVu(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GiangVien_ChucVu index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="_maChucVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChucVu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.GiangVienChucVu})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.GiangVienChucVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.GiangVienChucVu)">
            <summary>
            	Inserts a PMS.Entities.GiangVienChucVu object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.GiangVienChucVu object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.GiangVienChucVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.GiangVienChucVu)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.GiangVienChucVu object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.GiangVienChucVu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlGiangVienChucVuProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlGiangVienChucVuProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.GiangVienChucVu"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienChucVuProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienChucVuProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlChiTietKhoiLuongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChiTietKhoiLuongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChiTietKhoiLuongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlGiangVienProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.GiangVien"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHocViProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HocVi"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocViProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHocViProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewSinhVienLopProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewSinhVienLop"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienLopProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienLopProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewSinhVienHocPhan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewSinhVienHocPhanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewGiangVienProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewGiangVien"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewDonViProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewDonVi"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewDonViProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewDonVi objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDonViProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewDonViProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDonViProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewDonViProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDonViProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewDonVi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDonViProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewDonVi objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDonViProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewDonVi objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewDonViProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewDonViProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewDonViProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDonViProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewDonViProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietGiangDayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewChiTietGiangDay"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietGiangDayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietGiangDayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlNhomChucNangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.NhomChucNang"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlNhomChucNangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.NhomChucNang"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomChucNangProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomChucNangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.Delete(PMS.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maChucNang">. Primary Key.</param>	
            <param name="_maNhomQuyen">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomChucNang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.NhomChucNang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomChucNang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomChucNang objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.GetByMaNhomQuyen(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GroupModules_Groups key.
            	FK_GroupModules_Groups Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maNhomQuyen"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomChucNang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.GetByMaChucNang(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GroupModules_Modules key.
            	FK_GroupModules_Modules Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maChucNang"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.NhomChucNang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.GetByMaChucNangMaNhomQuyen(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GroupModules index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maChucNang"></param>
            <param name="_maNhomQuyen"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomChucNang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.NhomChucNang})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.NhomChucNang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.NhomChucNang)">
            <summary>
            	Inserts a PMS.Entities.NhomChucNang object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.NhomChucNang object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.NhomChucNang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.NhomChucNang)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.NhomChucNang object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.NhomChucNang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNhomChucNangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomChucNangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomChucNangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlLoaiKhoiLuongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.Delete(PMS.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maLoaiKhoiLuong">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.LoaiKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.LoaiKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.LoaiKhoiLuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.LoaiKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.GetByMaNhom(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LoaiKhoiLuong_NhomKhoiLuong key.
            	FK_LoaiKhoiLuong_NhomKhoiLuong Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maNhom"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.LoaiKhoiLuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.GetByMaLoaiKhoiLuong(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LoaiKhoiLuong index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maLoaiKhoiLuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.LoaiKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.LoaiKhoiLuong)">
            <summary>
            	Inserts a PMS.Entities.LoaiKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.LoaiKhoiLuong object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.LoaiKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.LoaiKhoiLuong)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.LoaiKhoiLuong object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.LoaiKhoiLuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlLoaiKhoiLuongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiKhoiLuongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlLoaiKhoiLuongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHeThongProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HeThong"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeThongProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeThongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.Delete(PMS.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="_parentId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.HeThong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.HeThong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeThong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeThong objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.GetByUserId(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HeThong_TaiKhoan key.
            	FK_HeThong_TaiKhoan Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeThong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.GetByParentId(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HeThong_TaiKhoan1 key.
            	FK_HeThong_TaiKhoan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_parentId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.HeThong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.GetByUserIdParentId(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HeThong index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_parentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeThong"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.HeThong})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HeThong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.HeThong)">
            <summary>
            	Inserts a PMS.Entities.HeThong object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HeThong object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.HeThong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.HeThong)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.HeThong object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.HeThong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeThongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeThongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlHeThongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlNhomQuyenProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.NhomQuyen"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomQuyenProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomQuyenProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewLopDaiDienProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewLopDaiDien"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewLopDaiDien objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewLopDaiDien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewLopDaiDien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewLopDaiDien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_Lop_DaiDien_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewLopDaiDienProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopDaiDienProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopDaiDienProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewDanTocProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewDanToc"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewDanTocProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewDanTocProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.KetQuaTinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maKetQua">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.KetQuaTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.KetQuaTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KetQuaTinh objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KetQuaTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.GetByMaGiangVien(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_KetQuaTinh_GiangVien key.
            	FK_KetQuaTinh_GiangVien Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.KetQuaTinh objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.GetByMaGiangVienNamHocHocKy(PMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_KetQuaTinh index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maGiangVien"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KetQuaTinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.GetByMaKetQua(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_KetQuaTinh index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maKetQua"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KetQuaTinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.KetQuaTinh})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.KetQuaTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.KetQuaTinh)">
            <summary>
            	Inserts a PMS.Entities.KetQuaTinh object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.KetQuaTinh object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.KetQuaTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.KetQuaTinh)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.KetQuaTinh object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.KetQuaTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_KetQuaTinh_GetByNamHocHocKy' stored procedure. 
            </summary>	
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.GetKetQuaByMaGiangVienNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wraps the 'cust_KetQuaTinh_GetKetQuaByMaGiangVienNamHocHocKy' stored procedure. 
            </summary>	
            <param name="maGiangVien"> A <c>System.Int32?</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlKetQuaTinhProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlGiangVienHoSoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.GiangVienHoSo"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlGiangVienHoSoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlGiangVienHoSoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHeThongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HeThong"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeThongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeThongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietHocPhanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewChiTietHocPhan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietHocPhanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietHocPhanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlDonViTinhProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.DonViTinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlDonViTinhProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlDonViTinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maDonVi">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.DonViTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.DonViTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.DonViTinh objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.DonViTinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DonViTinh index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.DonViTinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.GetByMaDonVi(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DonViTinh index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maDonVi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.DonViTinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.DonViTinh})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.DonViTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.DonViTinh)">
            <summary>
            	Inserts a PMS.Entities.DonViTinh object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.DonViTinh object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.DonViTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.DonViTinh)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.DonViTinh object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.DonViTinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlDonViTinhProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlDonViTinhProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlDonViTinhProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlKhoanQuyDoiProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.KhoanQuyDoi"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKhoanQuyDoiProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKhoanQuyDoiProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlKetQuaTinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.KetQuaTinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlKetQuaTinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlKetQuaTinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewChiTietQuyDoi"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewChiTietQuyDoiProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewBacDaoTaoLoaiHinh objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewBacDaoTaoLoaiHinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewBacDaoTaoLoaiHinh objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewBacDaoTaoLoaiHinh objects.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlNhomKhoiLuongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.NhomKhoiLuong"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNhomKhoiLuongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlNhomKhoiLuongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlChucVuProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ChucVu"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlChucVuProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlChucVuProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHoSoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HoSo"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHoSoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHoSoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlLoaiGiangVienProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.LoaiGiangVien"/> entity.
            </summary>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.LoaiGiangVien"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.Delete(PMS.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maLoaiGiangVien">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.Find(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of PMS.Entities.LoaiGiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of PMS.Entities.LoaiGiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.LoaiGiangVien objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.GetPaged(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of PMS.Entities.LoaiGiangVien objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.GetByMaQuanLy(PMS.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_LoaiGiangVien index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiGiangVien"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.GetByMaLoaiGiangVien(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LoaiGiangVien index.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="_maLoaiGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiGiangVien"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.BulkInsert(PMS.Data.TransactionManager,PMS.Entities.TList{PMS.Entities.LoaiGiangVien})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.LoaiGiangVien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.Insert(PMS.Data.TransactionManager,PMS.Entities.LoaiGiangVien)">
            <summary>
            	Inserts a PMS.Entities.LoaiGiangVien object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.LoaiGiangVien object to insert.</param>
            <remarks>
            	After inserting into the datasource, the PMS.Entities.LoaiGiangVien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.Update(PMS.Data.TransactionManager,PMS.Entities.LoaiGiangVien)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="entity">PMS.Entities.LoaiGiangVien object to update.</param>
            <remarks>
            	After updating the datasource, the PMS.Entities.LoaiGiangVien object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlLoaiGiangVienProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlLoaiGiangVienProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlLoaiGiangVienProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:PMS.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:PMS.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(PMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(PMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(PMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(PMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(PMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(PMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(PMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(PMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(PMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(PMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(PMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(PMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:PMS.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.HocViProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.HocVi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHocViProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHocViProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.HocHamProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.HocHam"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHocHamProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHocHamProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.NhomQuyenProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.NhomQuyen"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlNhomQuyenProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlNhomQuyenProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.TaiKhoanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.TaiKhoan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlTaiKhoanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlTaiKhoanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.LoaiGiangVienProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.LoaiGiangVien"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlLoaiGiangVienProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlLoaiGiangVienProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.TinhTrangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.TinhTrang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlTinhTrangProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlTinhTrangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.HeThongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.HeThong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHeThongProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHeThongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.CauHinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.CauHinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlCauHinhProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlCauHinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.GiangVienProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.GiangVien"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlGiangVienProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlGiangVienProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ThuLaoThoaThuanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlThuLaoThoaThuanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlThuLaoThoaThuanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.HeSoCoSoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.HeSoCoSo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHeSoCoSoProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHeSoCoSoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.KhoiLuongGiangDayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlKhoiLuongGiangDayProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlKhoiLuongGiangDayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.GiangVienHoSoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.GiangVienHoSo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlGiangVienHoSoProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlGiangVienHoSoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ChiTietKhoiLuongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlChiTietKhoiLuongProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlChiTietKhoiLuongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.GiangVienChuyenMonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlGiangVienChuyenMonProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlGiangVienChuyenMonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.HeSoHocKyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.HeSoHocKy"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHeSoHocKyProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHeSoHocKyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.KetQuaTinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.KetQuaTinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlKetQuaTinhProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlKetQuaTinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.HeSoNgayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.HeSoNgay"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHeSoNgayProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHeSoNgayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.GiangVienChucVuProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.GiangVienChucVu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlGiangVienChucVuProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlGiangVienChucVuProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ChucNangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ChucNang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlChucNangProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlChucNangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.MonKhongTinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.MonKhongTinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlMonKhongTinhProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlMonKhongTinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.LoaiKhoiLuongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlLoaiKhoiLuongProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlLoaiKhoiLuongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.HoSoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.HoSo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHoSoProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlHoSoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.KhoanQuyDoiProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.KhoanQuyDoi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlKhoanQuyDoiProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlKhoanQuyDoiProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.NhomChucNangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.NhomChucNang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlNhomChucNangProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlNhomChucNangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ReportTemplateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ReportTemplate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlReportTemplateProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlReportTemplateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.DonViTinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.DonViTinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlDonViTinhProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlDonViTinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.QuyDoiGioChuanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlQuyDoiGioChuanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlQuyDoiGioChuanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ChucVuProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ChucVu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlChucVuProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlChucVuProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.CoVanHocTapProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.CoVanHocTap"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlCoVanHocTapProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlCoVanHocTapProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.NhomKhoiLuongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.NhomKhoiLuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlNhomKhoiLuongProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlNhomKhoiLuongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.KhoiLuongKhacProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.KhoiLuongKhac"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlKhoiLuongKhacProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlKhoiLuongKhacProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewBacDaoTaoLoaiHinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewBacDaoTaoLoaiHinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewBacDaoTaoLoaiHinhProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewBacDaoTaoLoaiHinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewChiTienCoVanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewChiTienCoVan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTienCoVanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTienCoVanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewChiTietGiangDayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewChiTietGiangDay"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietGiangDayProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietGiangDayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewChiTietHocPhanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewChiTietHocPhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietHocPhanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietHocPhanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewChiTietKhoiLuongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewChiTietKhoiLuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietKhoiLuongProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietKhoiLuongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewChiTietKhoiLuongGiangDayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewChiTietKhoiLuongGiangDay"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietKhoiLuongGiangDayProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietKhoiLuongGiangDayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewChiTietKhoiLuongThucDayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewChiTietKhoiLuongThucDay"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietKhoiLuongThucDayProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietKhoiLuongThucDayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewChiTietQuyDoiProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewChiTietQuyDoi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietQuyDoiProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewChiTietQuyDoiProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewCoSoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewCoSo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewCoSoProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewCoSoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewDanTocProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewDanToc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewDanTocProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewDanTocProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewDonViProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewDonVi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewDonViProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewDonViProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewGiangVienProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewGiangVien"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewGiangVienProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewGiangVienProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewGiangVienDonGiaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewGiangVienDonGia"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewGiangVienDonGiaProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewGiangVienDonGiaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewGiangVienKhoaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewGiangVienKhoa"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewGiangVienKhoaProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewGiangVienKhoaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewGiangVienLopHocPhanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewGiangVienLopHocPhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewGiangVienLopHocPhanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewGiangVienLopHocPhanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewHocKyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewHocKy"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewHocKyProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewHocKyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewKetQuaTinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewKetQuaTinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKetQuaTinhProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKetQuaTinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewKhoaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewKhoa"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoaProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewKhoaBoMonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewKhoaBoMon"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoaBoMonProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoaBoMonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewKhoaHocProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewKhoaHoc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoaHocProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoaHocProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewKhoiLuongGiangDayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewKhoiLuongGiangDay"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoiLuongGiangDayProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoiLuongGiangDayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewKhoiLuongThucDayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewKhoiLuongThucDay"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoiLuongThucDayProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewKhoiLuongThucDayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewLopProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewLop"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewLopProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewLopProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewLopDaiDienProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewLopDaiDien"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewLopDaiDienProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewLopDaiDienProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewLopHocPhanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewLopHocPhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewLopHocPhanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewLopHocPhanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewMonHocProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewMonHoc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewMonHocProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewMonHocProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewMonHocKhoaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewMonHocKhoa"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewMonHocKhoaProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewMonHocKhoaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewNamHocProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewNamHoc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewNamHocProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewNamHocProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewPhanCongChuyenMonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewPhanCongChuyenMon"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewPhanCongChuyenMonProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewPhanCongChuyenMonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewPhanCongCoVanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewPhanCongCoVan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewPhanCongCoVanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewPhanCongCoVanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewSinhVienHocPhanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewSinhVienHocPhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewSinhVienHocPhanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewSinhVienHocPhanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewSinhVienLopProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewSinhVienLop"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewSinhVienLopProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewSinhVienLopProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewSinhVienLopHocPhanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewSinhVienLopHocPhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewSinhVienLopHocPhanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewSinhVienLopHocPhanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewThanhToanThuLaoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewThanhToanThuLao"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewThanhToanThuLaoProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewThanhToanThuLaoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewThanhToanTienGiangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewThanhToanTienGiang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewThanhToanTienGiangProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewThanhToanTienGiangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewTheoDoiGiangDayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewTheoDoiGiangDay"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTheoDoiGiangDayProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTheoDoiGiangDayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewTheoDoiLichGiangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewTheoDoiLichGiang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTheoDoiLichGiangProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTheoDoiLichGiangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewTinhKhoiLuongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewTinhKhoiLuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTinhKhoiLuongProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTinhKhoiLuongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewTongHopChiTienCoVanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewTongHopChiTienCoVan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTongHopChiTienCoVanProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTongHopChiTienCoVanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewTongHopQuyDoiProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewTongHopQuyDoi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTongHopQuyDoiProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTongHopQuyDoiProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewTonGiaoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewTonGiao"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTonGiaoProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewTonGiaoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.ViewXuLyQuyDoiProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:PMS.Entities.ViewXuLyQuyDoi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewXuLyQuyDoiProvider">
            <summary>
            Gets the current <see cref="P:PMS.Data.SqlClient.SqlNetTiersProvider.SqlViewXuLyQuyDoiProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlDonViTinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.DonViTinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlDonViTinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlDonViTinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHeSoNgayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HeSoNgay"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHeSoNgayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHeSoNgayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlHocHamProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.HocHam"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlHocHamProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlHocHamProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewHocKyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewHocKy"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewHocKyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewHocKyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTonGiaoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewTonGiao"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTonGiaoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTonGiaoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewTongHopQuyDoi"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewTongHopQuyDoiProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewThanhToanTienGiang"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewThanhToanTienGiangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the ViewPhanCongCoVan objects.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.GetAll(PMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewPhanCongCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.Get(PMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ViewPhanCongCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.Find(PMS.Data.TransactionManager,PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ViewPhanCongCoVan objects.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.GetByMaDonViNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_PhanCong_CoVan_GetByMaDonViNamHocHocKy' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.GetByNamHocHocKy(PMS.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the 'cust_View_PhanCong_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:PMS.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PMS.Data.SqlClient.SqlViewPhanCongCoVanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewPhanCongCoVanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewPhanCongCoVan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewPhanCongCoVanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewPhanCongCoVanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewLopHocPhanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewLopHocPhan"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopHocPhanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopHocPhanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewLopProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewLop"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewLopProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewLopProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewKhoaBoMonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewKhoaBoMon"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewKhoaBoMonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewKhoaBoMonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewGiangVienKhoaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewGiangVienKhoa"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewGiangVienKhoaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewGiangVienKhoaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewCoSoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewCoSo"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewCoSoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewCoSoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:PMS.Entities.ViewBacDaoTaoLoaiHinh"/> entity.
            </summary>
        </member>
        <member name="M:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:PMS.Data.SqlClient.SqlViewBacDaoTaoLoaiHinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
