/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlGiangVienChoDuyetHoSoProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="GiangVienChoDuyetHoSo"/> entity.
	///</summary>
	public abstract partial class SqlGiangVienChoDuyetHoSoProviderBase : GiangVienChoDuyetHoSoProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlGiangVienChoDuyetHoSoProviderBase"/> instance.
		/// </summary>
		public SqlGiangVienChoDuyetHoSoProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlGiangVienChoDuyetHoSoProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlGiangVienChoDuyetHoSoProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVienChoDuyetHoSo_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(GiangVienChoDuyetHoSo)
					,_id);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVienChoDuyetHoSo objects.</returns>
		public override TList<GiangVienChoDuyetHoSo> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<GiangVienChoDuyetHoSo>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVienChoDuyetHoSo_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaDanToc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTonGiao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaNguoiLap", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MatKhau", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ho", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenDem", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ten", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgaySinh", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GioiTinh", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoiSinh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Cmnd", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayCap", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoiCap", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DoanDang", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayVaoDoanDang", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayKyHopDong", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayKetThucHopDong", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HinhAnh", DbType.Binary, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiaChi", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThuongTru", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoiLamViec", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DienThoai", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoDiDong", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoTaiKhoan", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenNganHang", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChiNhanh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoSoBaoHiem", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThoiGianBatDau", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BacLuong", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayHuongLuong", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NamLamViec", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChuyenNganh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaHeSoThuLao", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ngach", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoHieuCongChuc", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Hrmid", DbType.Guid, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoiCapBang", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@KhoaTaiKhoan", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaLoaiNhanVien", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaNgachCongChuc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoChinhTri", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoSuPham", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoNgoaiNgu", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoTinHoc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@KhoiKienThucGiangDay", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NganhDaoTao", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DonViGiangDay", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DaDuyet", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("madantoc ") || clause.Trim().StartsWith("madantoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaDanToc", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matongiao ") || clause.Trim().StartsWith("matongiao="))
				{
					database.SetParameterValue(commandWrapper, "@MaTonGiao", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("madonvi ") || clause.Trim().StartsWith("madonvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaDonVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocham ") || clause.Trim().StartsWith("mahocham="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocHam", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahocvi ") || clause.Trim().StartsWith("mahocvi="))
				{
					database.SetParameterValue(commandWrapper, "@MaHocVi", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloaigiangvien ") || clause.Trim().StartsWith("maloaigiangvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiGiangVien", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("manguoilap ") || clause.Trim().StartsWith("manguoilap="))
				{
					database.SetParameterValue(commandWrapper, "@MaNguoiLap", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matkhau ") || clause.Trim().StartsWith("matkhau="))
				{
					database.SetParameterValue(commandWrapper, "@MatKhau", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matinhtrang ") || clause.Trim().StartsWith("matinhtrang="))
				{
					database.SetParameterValue(commandWrapper, "@MaTinhTrang", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maquanly ") || clause.Trim().StartsWith("maquanly="))
				{
					database.SetParameterValue(commandWrapper, "@MaQuanLy", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ho ") || clause.Trim().StartsWith("ho="))
				{
					database.SetParameterValue(commandWrapper, "@Ho", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tendem ") || clause.Trim().StartsWith("tendem="))
				{
					database.SetParameterValue(commandWrapper, "@TenDem", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ten ") || clause.Trim().StartsWith("ten="))
				{
					database.SetParameterValue(commandWrapper, "@Ten", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaysinh ") || clause.Trim().StartsWith("ngaysinh="))
				{
					database.SetParameterValue(commandWrapper, "@NgaySinh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gioitinh ") || clause.Trim().StartsWith("gioitinh="))
				{
					database.SetParameterValue(commandWrapper, "@GioiTinh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("noisinh ") || clause.Trim().StartsWith("noisinh="))
				{
					database.SetParameterValue(commandWrapper, "@NoiSinh", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cmnd ") || clause.Trim().StartsWith("cmnd="))
				{
					database.SetParameterValue(commandWrapper, "@Cmnd", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycap ") || clause.Trim().StartsWith("ngaycap="))
				{
					database.SetParameterValue(commandWrapper, "@NgayCap", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("noicap ") || clause.Trim().StartsWith("noicap="))
				{
					database.SetParameterValue(commandWrapper, "@NoiCap", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("doandang ") || clause.Trim().StartsWith("doandang="))
				{
					database.SetParameterValue(commandWrapper, "@DoanDang", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayvaodoandang ") || clause.Trim().StartsWith("ngayvaodoandang="))
				{
					database.SetParameterValue(commandWrapper, "@NgayVaoDoanDang", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaykyhopdong ") || clause.Trim().StartsWith("ngaykyhopdong="))
				{
					database.SetParameterValue(commandWrapper, "@NgayKyHopDong", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayketthuchopdong ") || clause.Trim().StartsWith("ngayketthuchopdong="))
				{
					database.SetParameterValue(commandWrapper, "@NgayKetThucHopDong", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hinhanh ") || clause.Trim().StartsWith("hinhanh="))
				{
					database.SetParameterValue(commandWrapper, "@HinhAnh", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("diachi ") || clause.Trim().StartsWith("diachi="))
				{
					database.SetParameterValue(commandWrapper, "@DiaChi", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thuongtru ") || clause.Trim().StartsWith("thuongtru="))
				{
					database.SetParameterValue(commandWrapper, "@ThuongTru", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("noilamviec ") || clause.Trim().StartsWith("noilamviec="))
				{
					database.SetParameterValue(commandWrapper, "@NoiLamViec", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("email ") || clause.Trim().StartsWith("email="))
				{
					database.SetParameterValue(commandWrapper, "@Email", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dienthoai ") || clause.Trim().StartsWith("dienthoai="))
				{
					database.SetParameterValue(commandWrapper, "@DienThoai", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sodidong ") || clause.Trim().StartsWith("sodidong="))
				{
					database.SetParameterValue(commandWrapper, "@SoDiDong", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sotaikhoan ") || clause.Trim().StartsWith("sotaikhoan="))
				{
					database.SetParameterValue(commandWrapper, "@SoTaiKhoan", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tennganhang ") || clause.Trim().StartsWith("tennganhang="))
				{
					database.SetParameterValue(commandWrapper, "@TenNganHang", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("masothue ") || clause.Trim().StartsWith("masothue="))
				{
					database.SetParameterValue(commandWrapper, "@MaSoThue", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chinhanh ") || clause.Trim().StartsWith("chinhanh="))
				{
					database.SetParameterValue(commandWrapper, "@ChiNhanh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sosobaohiem ") || clause.Trim().StartsWith("sosobaohiem="))
				{
					database.SetParameterValue(commandWrapper, "@SoSoBaoHiem", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thoigianbatdau ") || clause.Trim().StartsWith("thoigianbatdau="))
				{
					database.SetParameterValue(commandWrapper, "@ThoiGianBatDau", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bacluong ") || clause.Trim().StartsWith("bacluong="))
				{
					database.SetParameterValue(commandWrapper, "@BacLuong", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayhuongluong ") || clause.Trim().StartsWith("ngayhuongluong="))
				{
					database.SetParameterValue(commandWrapper, "@NgayHuongLuong", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("namlamviec ") || clause.Trim().StartsWith("namlamviec="))
				{
					database.SetParameterValue(commandWrapper, "@NamLamViec", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chuyennganh ") || clause.Trim().StartsWith("chuyennganh="))
				{
					database.SetParameterValue(commandWrapper, "@ChuyenNganh", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mahesothulao ") || clause.Trim().StartsWith("mahesothulao="))
				{
					database.SetParameterValue(commandWrapper, "@MaHeSoThuLao", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngach ") || clause.Trim().StartsWith("ngach="))
				{
					database.SetParameterValue(commandWrapper, "@Ngach", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sohieucongchuc ") || clause.Trim().StartsWith("sohieucongchuc="))
				{
					database.SetParameterValue(commandWrapper, "@SoHieuCongChuc", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hrmid ") || clause.Trim().StartsWith("hrmid="))
				{
					database.SetParameterValue(commandWrapper, "@Hrmid", new Guid(
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote)));
					continue;
				}
				if (clause.Trim().StartsWith("noicapbang ") || clause.Trim().StartsWith("noicapbang="))
				{
					database.SetParameterValue(commandWrapper, "@NoiCapBang", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("khoataikhoan ") || clause.Trim().StartsWith("khoataikhoan="))
				{
					database.SetParameterValue(commandWrapper, "@KhoaTaiKhoan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maloainhanvien ") || clause.Trim().StartsWith("maloainhanvien="))
				{
					database.SetParameterValue(commandWrapper, "@MaLoaiNhanVien", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mangachcongchuc ") || clause.Trim().StartsWith("mangachcongchuc="))
				{
					database.SetParameterValue(commandWrapper, "@MaNgachCongChuc", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdochinhtri ") || clause.Trim().StartsWith("matrinhdochinhtri="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoChinhTri", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdosupham ") || clause.Trim().StartsWith("matrinhdosupham="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoSuPham", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdongoaingu ") || clause.Trim().StartsWith("matrinhdongoaingu="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoNgoaiNgu", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdotinhoc ") || clause.Trim().StartsWith("matrinhdotinhoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoTinHoc", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matrinhdoquanlynhanuoc ") || clause.Trim().StartsWith("matrinhdoquanlynhanuoc="))
				{
					database.SetParameterValue(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nguoicapnhat ") || clause.Trim().StartsWith("nguoicapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NguoiCapNhat", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycapnhat ") || clause.Trim().StartsWith("ngaycapnhat="))
				{
					database.SetParameterValue(commandWrapper, "@NgayCapNhat", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("khoikienthucgiangday ") || clause.Trim().StartsWith("khoikienthucgiangday="))
				{
					database.SetParameterValue(commandWrapper, "@KhoiKienThucGiangDay", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nganhdaotao ") || clause.Trim().StartsWith("nganhdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@NganhDaoTao", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("donvigiangday ") || clause.Trim().StartsWith("donvigiangday="))
				{
					database.SetParameterValue(commandWrapper, "@DonViGiangDay", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("daduyet ") || clause.Trim().StartsWith("daduyet="))
				{
					database.SetParameterValue(commandWrapper, "@DaDuyet", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<GiangVienChoDuyetHoSo> rows = new TList<GiangVienChoDuyetHoSo>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVienChoDuyetHoSo objects.</returns>
		public override TList<GiangVienChoDuyetHoSo> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVienChoDuyetHoSo_Find_Dynamic", typeof(GiangVienChoDuyetHoSoColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<GiangVienChoDuyetHoSo> rows = new TList<GiangVienChoDuyetHoSo>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVienChoDuyetHoSo objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GiangVienChoDuyetHoSo> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVienChoDuyetHoSo_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<GiangVienChoDuyetHoSo> rows = new TList<GiangVienChoDuyetHoSo>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.GiangVienChoDuyetHoSo objects.</returns>
		public override TList<GiangVienChoDuyetHoSo> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVienChoDuyetHoSo_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<GiangVienChoDuyetHoSo> rows = new TList<GiangVienChoDuyetHoSo>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_GiangVienChoDuyetHoSo index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.GiangVienChoDuyetHoSo"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.GiangVienChoDuyetHoSo GetById(TransactionManager transactionManager, System.Int32 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVienChoDuyetHoSo_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			IDataReader reader = null;
			TList<GiangVienChoDuyetHoSo> tmp = new TList<GiangVienChoDuyetHoSo>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.GiangVienChoDuyetHoSo object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.GiangVienChoDuyetHoSo> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "GiangVienChoDuyetHoSo";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("Id", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MaDanToc", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("MaTonGiao", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("MaDonVi", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("MaHocHam", typeof(System.Int32));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("MaHocVi", typeof(System.Int32));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("MaLoaiGiangVien", typeof(System.Int32));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("MaNguoiLap", typeof(System.Int32));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("MatKhau", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("MaTinhTrang", typeof(System.Int32));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("MaQuanLy", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("Ho", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("TenDem", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("Ten", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("NgaySinh", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("GioiTinh", typeof(System.Boolean));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("NoiSinh", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("Cmnd", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("NgayCap", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("NoiCap", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("DoanDang", typeof(System.Boolean));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("NgayVaoDoanDang", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("NgayKyHopDong", typeof(System.DateTime));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("NgayKetThucHopDong", typeof(System.DateTime));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("HinhAnh", typeof(System.Byte[]));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("DiaChi", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("ThuongTru", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("NoiLamViec", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("Email", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("DienThoai", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("SoDiDong", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("SoTaiKhoan", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("TenNganHang", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("MaSoThue", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("ChiNhanh", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("SoSoBaoHiem", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("ThoiGianBatDau", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("BacLuong", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("NgayHuongLuong", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("NamLamViec", typeof(System.String));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("ChuyenNganh", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("MaHeSoThuLao", typeof(System.String));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("Ngach", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("SoHieuCongChuc", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("HRMID", typeof(System.Guid));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("NoiCapBang", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("KhoaTaiKhoan", typeof(System.Boolean));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("MaLoaiNhanVien", typeof(System.Int32));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("MaNgachCongChuc", typeof(System.Int32));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("MaTrinhDoChinhTri", typeof(System.Int32));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("MaTrinhDoSuPham", typeof(System.Int32));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("MaTrinhDoNgoaiNgu", typeof(System.Int32));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("MaTrinhDoTinHoc", typeof(System.Int32));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("MaTrinhDoQuanLyNhaNuoc", typeof(System.Int32));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("NguoiCapNhat", typeof(System.String));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("NgayCapNhat", typeof(System.String));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("KhoiKienThucGiangDay", typeof(System.String));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("NganhDaoTao", typeof(System.String));
			col57.AllowDBNull = true;		
			DataColumn col58 = dataTable.Columns.Add("DonViGiangDay", typeof(System.String));
			col58.AllowDBNull = true;		
			DataColumn col59 = dataTable.Columns.Add("DaDuyet", typeof(System.Boolean));
			col59.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("Id", "Id");
			bulkCopy.ColumnMappings.Add("MaDanToc", "MaDanToc");
			bulkCopy.ColumnMappings.Add("MaTonGiao", "MaTonGiao");
			bulkCopy.ColumnMappings.Add("MaDonVi", "MaDonVi");
			bulkCopy.ColumnMappings.Add("MaHocHam", "MaHocHam");
			bulkCopy.ColumnMappings.Add("MaHocVi", "MaHocVi");
			bulkCopy.ColumnMappings.Add("MaLoaiGiangVien", "MaLoaiGiangVien");
			bulkCopy.ColumnMappings.Add("MaNguoiLap", "MaNguoiLap");
			bulkCopy.ColumnMappings.Add("MatKhau", "MatKhau");
			bulkCopy.ColumnMappings.Add("MaTinhTrang", "MaTinhTrang");
			bulkCopy.ColumnMappings.Add("MaQuanLy", "MaQuanLy");
			bulkCopy.ColumnMappings.Add("Ho", "Ho");
			bulkCopy.ColumnMappings.Add("TenDem", "TenDem");
			bulkCopy.ColumnMappings.Add("Ten", "Ten");
			bulkCopy.ColumnMappings.Add("NgaySinh", "NgaySinh");
			bulkCopy.ColumnMappings.Add("GioiTinh", "GioiTinh");
			bulkCopy.ColumnMappings.Add("NoiSinh", "NoiSinh");
			bulkCopy.ColumnMappings.Add("Cmnd", "Cmnd");
			bulkCopy.ColumnMappings.Add("NgayCap", "NgayCap");
			bulkCopy.ColumnMappings.Add("NoiCap", "NoiCap");
			bulkCopy.ColumnMappings.Add("DoanDang", "DoanDang");
			bulkCopy.ColumnMappings.Add("NgayVaoDoanDang", "NgayVaoDoanDang");
			bulkCopy.ColumnMappings.Add("NgayKyHopDong", "NgayKyHopDong");
			bulkCopy.ColumnMappings.Add("NgayKetThucHopDong", "NgayKetThucHopDong");
			bulkCopy.ColumnMappings.Add("HinhAnh", "HinhAnh");
			bulkCopy.ColumnMappings.Add("DiaChi", "DiaChi");
			bulkCopy.ColumnMappings.Add("ThuongTru", "ThuongTru");
			bulkCopy.ColumnMappings.Add("NoiLamViec", "NoiLamViec");
			bulkCopy.ColumnMappings.Add("Email", "Email");
			bulkCopy.ColumnMappings.Add("DienThoai", "DienThoai");
			bulkCopy.ColumnMappings.Add("SoDiDong", "SoDiDong");
			bulkCopy.ColumnMappings.Add("SoTaiKhoan", "SoTaiKhoan");
			bulkCopy.ColumnMappings.Add("TenNganHang", "TenNganHang");
			bulkCopy.ColumnMappings.Add("MaSoThue", "MaSoThue");
			bulkCopy.ColumnMappings.Add("ChiNhanh", "ChiNhanh");
			bulkCopy.ColumnMappings.Add("SoSoBaoHiem", "SoSoBaoHiem");
			bulkCopy.ColumnMappings.Add("ThoiGianBatDau", "ThoiGianBatDau");
			bulkCopy.ColumnMappings.Add("BacLuong", "BacLuong");
			bulkCopy.ColumnMappings.Add("NgayHuongLuong", "NgayHuongLuong");
			bulkCopy.ColumnMappings.Add("NamLamViec", "NamLamViec");
			bulkCopy.ColumnMappings.Add("ChuyenNganh", "ChuyenNganh");
			bulkCopy.ColumnMappings.Add("MaHeSoThuLao", "MaHeSoThuLao");
			bulkCopy.ColumnMappings.Add("Ngach", "Ngach");
			bulkCopy.ColumnMappings.Add("SoHieuCongChuc", "SoHieuCongChuc");
			bulkCopy.ColumnMappings.Add("HRMID", "HRMID");
			bulkCopy.ColumnMappings.Add("NoiCapBang", "NoiCapBang");
			bulkCopy.ColumnMappings.Add("KhoaTaiKhoan", "KhoaTaiKhoan");
			bulkCopy.ColumnMappings.Add("MaLoaiNhanVien", "MaLoaiNhanVien");
			bulkCopy.ColumnMappings.Add("MaNgachCongChuc", "MaNgachCongChuc");
			bulkCopy.ColumnMappings.Add("MaTrinhDoChinhTri", "MaTrinhDoChinhTri");
			bulkCopy.ColumnMappings.Add("MaTrinhDoSuPham", "MaTrinhDoSuPham");
			bulkCopy.ColumnMappings.Add("MaTrinhDoNgoaiNgu", "MaTrinhDoNgoaiNgu");
			bulkCopy.ColumnMappings.Add("MaTrinhDoTinHoc", "MaTrinhDoTinHoc");
			bulkCopy.ColumnMappings.Add("MaTrinhDoQuanLyNhaNuoc", "MaTrinhDoQuanLyNhaNuoc");
			bulkCopy.ColumnMappings.Add("NguoiCapNhat", "NguoiCapNhat");
			bulkCopy.ColumnMappings.Add("NgayCapNhat", "NgayCapNhat");
			bulkCopy.ColumnMappings.Add("KhoiKienThucGiangDay", "KhoiKienThucGiangDay");
			bulkCopy.ColumnMappings.Add("NganhDaoTao", "NganhDaoTao");
			bulkCopy.ColumnMappings.Add("DonViGiangDay", "DonViGiangDay");
			bulkCopy.ColumnMappings.Add("DaDuyet", "DaDuyet");
			
			foreach(PMS.Entities.GiangVienChoDuyetHoSo entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["Id"] = entity.Id;
							
				
					row["MaDanToc"] = entity.MaDanToc;
							
				
					row["MaTonGiao"] = entity.MaTonGiao;
							
				
					row["MaDonVi"] = entity.MaDonVi;
							
				
					row["MaHocHam"] = entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value;
							
				
					row["MaHocVi"] = entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value;
							
				
					row["MaLoaiGiangVien"] = entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value;
							
				
					row["MaNguoiLap"] = entity.MaNguoiLap.HasValue ? (object) entity.MaNguoiLap  : System.DBNull.Value;
							
				
					row["MatKhau"] = entity.MatKhau;
							
				
					row["MaTinhTrang"] = entity.MaTinhTrang.HasValue ? (object) entity.MaTinhTrang  : System.DBNull.Value;
							
				
					row["MaQuanLy"] = entity.MaQuanLy;
							
				
					row["Ho"] = entity.Ho;
							
				
					row["TenDem"] = entity.TenDem;
							
				
					row["Ten"] = entity.Ten;
							
				
					row["NgaySinh"] = entity.NgaySinh;
							
				
					row["GioiTinh"] = entity.GioiTinh.HasValue ? (object) entity.GioiTinh  : System.DBNull.Value;
							
				
					row["NoiSinh"] = entity.NoiSinh;
							
				
					row["Cmnd"] = entity.Cmnd;
							
				
					row["NgayCap"] = entity.NgayCap;
							
				
					row["NoiCap"] = entity.NoiCap;
							
				
					row["DoanDang"] = entity.DoanDang.HasValue ? (object) entity.DoanDang  : System.DBNull.Value;
							
				
					row["NgayVaoDoanDang"] = entity.NgayVaoDoanDang;
							
				
					row["NgayKyHopDong"] = entity.NgayKyHopDong.HasValue ? (object) entity.NgayKyHopDong  : System.DBNull.Value;
							
				
					row["NgayKetThucHopDong"] = entity.NgayKetThucHopDong.HasValue ? (object) entity.NgayKetThucHopDong  : System.DBNull.Value;
							
				
					row["HinhAnh"] = entity.HinhAnh;
							
				
					row["DiaChi"] = entity.DiaChi;
							
				
					row["ThuongTru"] = entity.ThuongTru;
							
				
					row["NoiLamViec"] = entity.NoiLamViec;
							
				
					row["Email"] = entity.Email;
							
				
					row["DienThoai"] = entity.DienThoai;
							
				
					row["SoDiDong"] = entity.SoDiDong;
							
				
					row["SoTaiKhoan"] = entity.SoTaiKhoan;
							
				
					row["TenNganHang"] = entity.TenNganHang;
							
				
					row["MaSoThue"] = entity.MaSoThue;
							
				
					row["ChiNhanh"] = entity.ChiNhanh;
							
				
					row["SoSoBaoHiem"] = entity.SoSoBaoHiem;
							
				
					row["ThoiGianBatDau"] = entity.ThoiGianBatDau;
							
				
					row["BacLuong"] = entity.BacLuong.HasValue ? (object) entity.BacLuong  : System.DBNull.Value;
							
				
					row["NgayHuongLuong"] = entity.NgayHuongLuong;
							
				
					row["NamLamViec"] = entity.NamLamViec;
							
				
					row["ChuyenNganh"] = entity.ChuyenNganh;
							
				
					row["MaHeSoThuLao"] = entity.MaHeSoThuLao;
							
				
					row["Ngach"] = entity.Ngach;
							
				
					row["SoHieuCongChuc"] = entity.SoHieuCongChuc;
							
				
					row["HRMID"] = entity.Hrmid.HasValue ? (object) entity.Hrmid  : System.DBNull.Value;
							
				
					row["NoiCapBang"] = entity.NoiCapBang;
							
				
					row["KhoaTaiKhoan"] = entity.KhoaTaiKhoan.HasValue ? (object) entity.KhoaTaiKhoan  : System.DBNull.Value;
							
				
					row["MaLoaiNhanVien"] = entity.MaLoaiNhanVien.HasValue ? (object) entity.MaLoaiNhanVien  : System.DBNull.Value;
							
				
					row["MaNgachCongChuc"] = entity.MaNgachCongChuc.HasValue ? (object) entity.MaNgachCongChuc  : System.DBNull.Value;
							
				
					row["MaTrinhDoChinhTri"] = entity.MaTrinhDoChinhTri.HasValue ? (object) entity.MaTrinhDoChinhTri  : System.DBNull.Value;
							
				
					row["MaTrinhDoSuPham"] = entity.MaTrinhDoSuPham.HasValue ? (object) entity.MaTrinhDoSuPham  : System.DBNull.Value;
							
				
					row["MaTrinhDoNgoaiNgu"] = entity.MaTrinhDoNgoaiNgu.HasValue ? (object) entity.MaTrinhDoNgoaiNgu  : System.DBNull.Value;
							
				
					row["MaTrinhDoTinHoc"] = entity.MaTrinhDoTinHoc.HasValue ? (object) entity.MaTrinhDoTinHoc  : System.DBNull.Value;
							
				
					row["MaTrinhDoQuanLyNhaNuoc"] = entity.MaTrinhDoQuanLyNhaNuoc.HasValue ? (object) entity.MaTrinhDoQuanLyNhaNuoc  : System.DBNull.Value;
							
				
					row["NguoiCapNhat"] = entity.NguoiCapNhat;
							
				
					row["NgayCapNhat"] = entity.NgayCapNhat;
							
				
					row["KhoiKienThucGiangDay"] = entity.KhoiKienThucGiangDay;
							
				
					row["NganhDaoTao"] = entity.NganhDaoTao;
							
				
					row["DonViGiangDay"] = entity.DonViGiangDay;
							
				
					row["DaDuyet"] = entity.DaDuyet.HasValue ? (object) entity.DaDuyet  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.GiangVienChoDuyetHoSo entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.GiangVienChoDuyetHoSo object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.GiangVienChoDuyetHoSo object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.GiangVienChoDuyetHoSo object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.GiangVienChoDuyetHoSo entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVienChoDuyetHoSo_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@Id", DbType.Int32, 4);
            database.AddInParameter(commandWrapper, "@MaDanToc", DbType.AnsiString, entity.MaDanToc );
            database.AddInParameter(commandWrapper, "@MaTonGiao", DbType.AnsiString, entity.MaTonGiao );
            database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, entity.MaDonVi );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaNguoiLap", DbType.Int32, (entity.MaNguoiLap.HasValue ? (object) entity.MaNguoiLap  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MatKhau", DbType.AnsiString, entity.MatKhau );
			database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.Int32, (entity.MaTinhTrang.HasValue ? (object) entity.MaTinhTrang  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
            database.AddInParameter(commandWrapper, "@Ho", DbType.String, entity.Ho );
            database.AddInParameter(commandWrapper, "@TenDem", DbType.String, entity.TenDem );
            database.AddInParameter(commandWrapper, "@Ten", DbType.String, entity.Ten );
            database.AddInParameter(commandWrapper, "@NgaySinh", DbType.AnsiString, entity.NgaySinh );
			database.AddInParameter(commandWrapper, "@GioiTinh", DbType.Boolean, (entity.GioiTinh.HasValue ? (object) entity.GioiTinh  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NoiSinh", DbType.String, entity.NoiSinh );
            database.AddInParameter(commandWrapper, "@Cmnd", DbType.AnsiString, entity.Cmnd );
            database.AddInParameter(commandWrapper, "@NgayCap", DbType.AnsiString, entity.NgayCap );
            database.AddInParameter(commandWrapper, "@NoiCap", DbType.String, entity.NoiCap );
			database.AddInParameter(commandWrapper, "@DoanDang", DbType.Boolean, (entity.DoanDang.HasValue ? (object) entity.DoanDang  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NgayVaoDoanDang", DbType.AnsiString, entity.NgayVaoDoanDang );
			database.AddInParameter(commandWrapper, "@NgayKyHopDong", DbType.DateTime, (entity.NgayKyHopDong.HasValue ? (object) entity.NgayKyHopDong  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayKetThucHopDong", DbType.DateTime, (entity.NgayKetThucHopDong.HasValue ? (object) entity.NgayKetThucHopDong  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@HinhAnh", DbType.Binary, entity.HinhAnh );
            database.AddInParameter(commandWrapper, "@DiaChi", DbType.String, entity.DiaChi );
            database.AddInParameter(commandWrapper, "@ThuongTru", DbType.String, entity.ThuongTru );
            database.AddInParameter(commandWrapper, "@NoiLamViec", DbType.String, entity.NoiLamViec );
            database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, entity.Email );
            database.AddInParameter(commandWrapper, "@DienThoai", DbType.AnsiString, entity.DienThoai );
            database.AddInParameter(commandWrapper, "@SoDiDong", DbType.AnsiString, entity.SoDiDong );
            database.AddInParameter(commandWrapper, "@SoTaiKhoan", DbType.AnsiString, entity.SoTaiKhoan );
            database.AddInParameter(commandWrapper, "@TenNganHang", DbType.String, entity.TenNganHang );
            database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, entity.MaSoThue );
            database.AddInParameter(commandWrapper, "@ChiNhanh", DbType.String, entity.ChiNhanh );
            database.AddInParameter(commandWrapper, "@SoSoBaoHiem", DbType.AnsiString, entity.SoSoBaoHiem );
            database.AddInParameter(commandWrapper, "@ThoiGianBatDau", DbType.AnsiString, entity.ThoiGianBatDau );
			database.AddInParameter(commandWrapper, "@BacLuong", DbType.Decimal, (entity.BacLuong.HasValue ? (object) entity.BacLuong  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NgayHuongLuong", DbType.AnsiString, entity.NgayHuongLuong );
            database.AddInParameter(commandWrapper, "@NamLamViec", DbType.AnsiString, entity.NamLamViec );
            database.AddInParameter(commandWrapper, "@ChuyenNganh", DbType.String, entity.ChuyenNganh );
            database.AddInParameter(commandWrapper, "@MaHeSoThuLao", DbType.AnsiString, entity.MaHeSoThuLao );
            database.AddInParameter(commandWrapper, "@Ngach", DbType.AnsiString, entity.Ngach );
            database.AddInParameter(commandWrapper, "@SoHieuCongChuc", DbType.AnsiString, entity.SoHieuCongChuc );
			database.AddInParameter(commandWrapper, "@Hrmid", DbType.Guid, (entity.Hrmid.HasValue ? (object) entity.Hrmid  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NoiCapBang", DbType.String, entity.NoiCapBang );
			database.AddInParameter(commandWrapper, "@KhoaTaiKhoan", DbType.Boolean, (entity.KhoaTaiKhoan.HasValue ? (object) entity.KhoaTaiKhoan  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaLoaiNhanVien", DbType.Int32, (entity.MaLoaiNhanVien.HasValue ? (object) entity.MaLoaiNhanVien  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaNgachCongChuc", DbType.Int32, (entity.MaNgachCongChuc.HasValue ? (object) entity.MaNgachCongChuc  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoChinhTri", DbType.Int32, (entity.MaTrinhDoChinhTri.HasValue ? (object) entity.MaTrinhDoChinhTri  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoSuPham", DbType.Int32, (entity.MaTrinhDoSuPham.HasValue ? (object) entity.MaTrinhDoSuPham  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoNgoaiNgu", DbType.Int32, (entity.MaTrinhDoNgoaiNgu.HasValue ? (object) entity.MaTrinhDoNgoaiNgu  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoTinHoc", DbType.Int32, (entity.MaTrinhDoTinHoc.HasValue ? (object) entity.MaTrinhDoTinHoc  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", DbType.Int32, (entity.MaTrinhDoQuanLyNhaNuoc.HasValue ? (object) entity.MaTrinhDoQuanLyNhaNuoc  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.AnsiString, entity.NguoiCapNhat );
            database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.String, entity.NgayCapNhat );
            database.AddInParameter(commandWrapper, "@KhoiKienThucGiangDay", DbType.String, entity.KhoiKienThucGiangDay );
            database.AddInParameter(commandWrapper, "@NganhDaoTao", DbType.String, entity.NganhDaoTao );
            database.AddInParameter(commandWrapper, "@DonViGiangDay", DbType.AnsiString, entity.DonViGiangDay );
			database.AddInParameter(commandWrapper, "@DaDuyet", DbType.Boolean, (entity.DaDuyet.HasValue ? (object) entity.DaDuyet  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _id = database.GetParameterValue(commandWrapper, "@Id");
			entity.Id = (System.Int32)_id;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.GiangVienChoDuyetHoSo object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.GiangVienChoDuyetHoSo object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.GiangVienChoDuyetHoSo entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_GiangVienChoDuyetHoSo_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@Id", DbType.Int32, entity.Id );
            database.AddInParameter(commandWrapper, "@MaDanToc", DbType.AnsiString, entity.MaDanToc );
            database.AddInParameter(commandWrapper, "@MaTonGiao", DbType.AnsiString, entity.MaTonGiao );
            database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString, entity.MaDonVi );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32, (entity.MaHocHam.HasValue ? (object) entity.MaHocHam : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32, (entity.MaHocVi.HasValue ? (object) entity.MaHocVi : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiGiangVien", DbType.Int32, (entity.MaLoaiGiangVien.HasValue ? (object) entity.MaLoaiGiangVien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaNguoiLap", DbType.Int32, (entity.MaNguoiLap.HasValue ? (object) entity.MaNguoiLap : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MatKhau", DbType.AnsiString, entity.MatKhau );
			database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.Int32, (entity.MaTinhTrang.HasValue ? (object) entity.MaTinhTrang : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@MaQuanLy", DbType.AnsiString, entity.MaQuanLy );
            database.AddInParameter(commandWrapper, "@Ho", DbType.String, entity.Ho );
            database.AddInParameter(commandWrapper, "@TenDem", DbType.String, entity.TenDem );
            database.AddInParameter(commandWrapper, "@Ten", DbType.String, entity.Ten );
            database.AddInParameter(commandWrapper, "@NgaySinh", DbType.AnsiString, entity.NgaySinh );
			database.AddInParameter(commandWrapper, "@GioiTinh", DbType.Boolean, (entity.GioiTinh.HasValue ? (object) entity.GioiTinh : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NoiSinh", DbType.String, entity.NoiSinh );
            database.AddInParameter(commandWrapper, "@Cmnd", DbType.AnsiString, entity.Cmnd );
            database.AddInParameter(commandWrapper, "@NgayCap", DbType.AnsiString, entity.NgayCap );
            database.AddInParameter(commandWrapper, "@NoiCap", DbType.String, entity.NoiCap );
			database.AddInParameter(commandWrapper, "@DoanDang", DbType.Boolean, (entity.DoanDang.HasValue ? (object) entity.DoanDang : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NgayVaoDoanDang", DbType.AnsiString, entity.NgayVaoDoanDang );
			database.AddInParameter(commandWrapper, "@NgayKyHopDong", DbType.DateTime, (entity.NgayKyHopDong.HasValue ? (object) entity.NgayKyHopDong : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayKetThucHopDong", DbType.DateTime, (entity.NgayKetThucHopDong.HasValue ? (object) entity.NgayKetThucHopDong : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@HinhAnh", DbType.Binary, entity.HinhAnh );
            database.AddInParameter(commandWrapper, "@DiaChi", DbType.String, entity.DiaChi );
            database.AddInParameter(commandWrapper, "@ThuongTru", DbType.String, entity.ThuongTru );
            database.AddInParameter(commandWrapper, "@NoiLamViec", DbType.String, entity.NoiLamViec );
            database.AddInParameter(commandWrapper, "@Email", DbType.AnsiString, entity.Email );
            database.AddInParameter(commandWrapper, "@DienThoai", DbType.AnsiString, entity.DienThoai );
            database.AddInParameter(commandWrapper, "@SoDiDong", DbType.AnsiString, entity.SoDiDong );
            database.AddInParameter(commandWrapper, "@SoTaiKhoan", DbType.AnsiString, entity.SoTaiKhoan );
            database.AddInParameter(commandWrapper, "@TenNganHang", DbType.String, entity.TenNganHang );
            database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, entity.MaSoThue );
            database.AddInParameter(commandWrapper, "@ChiNhanh", DbType.String, entity.ChiNhanh );
            database.AddInParameter(commandWrapper, "@SoSoBaoHiem", DbType.AnsiString, entity.SoSoBaoHiem );
            database.AddInParameter(commandWrapper, "@ThoiGianBatDau", DbType.AnsiString, entity.ThoiGianBatDau );
			database.AddInParameter(commandWrapper, "@BacLuong", DbType.Decimal, (entity.BacLuong.HasValue ? (object) entity.BacLuong : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NgayHuongLuong", DbType.AnsiString, entity.NgayHuongLuong );
            database.AddInParameter(commandWrapper, "@NamLamViec", DbType.AnsiString, entity.NamLamViec );
            database.AddInParameter(commandWrapper, "@ChuyenNganh", DbType.String, entity.ChuyenNganh );
            database.AddInParameter(commandWrapper, "@MaHeSoThuLao", DbType.AnsiString, entity.MaHeSoThuLao );
            database.AddInParameter(commandWrapper, "@Ngach", DbType.AnsiString, entity.Ngach );
            database.AddInParameter(commandWrapper, "@SoHieuCongChuc", DbType.AnsiString, entity.SoHieuCongChuc );
			database.AddInParameter(commandWrapper, "@Hrmid", DbType.Guid, (entity.Hrmid.HasValue ? (object) entity.Hrmid : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NoiCapBang", DbType.String, entity.NoiCapBang );
			database.AddInParameter(commandWrapper, "@KhoaTaiKhoan", DbType.Boolean, (entity.KhoaTaiKhoan.HasValue ? (object) entity.KhoaTaiKhoan : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaLoaiNhanVien", DbType.Int32, (entity.MaLoaiNhanVien.HasValue ? (object) entity.MaLoaiNhanVien : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaNgachCongChuc", DbType.Int32, (entity.MaNgachCongChuc.HasValue ? (object) entity.MaNgachCongChuc : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoChinhTri", DbType.Int32, (entity.MaTrinhDoChinhTri.HasValue ? (object) entity.MaTrinhDoChinhTri : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoSuPham", DbType.Int32, (entity.MaTrinhDoSuPham.HasValue ? (object) entity.MaTrinhDoSuPham : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoNgoaiNgu", DbType.Int32, (entity.MaTrinhDoNgoaiNgu.HasValue ? (object) entity.MaTrinhDoNgoaiNgu : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoTinHoc", DbType.Int32, (entity.MaTrinhDoTinHoc.HasValue ? (object) entity.MaTrinhDoTinHoc : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MaTrinhDoQuanLyNhaNuoc", DbType.Int32, (entity.MaTrinhDoQuanLyNhaNuoc.HasValue ? (object) entity.MaTrinhDoQuanLyNhaNuoc : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@NguoiCapNhat", DbType.AnsiString, entity.NguoiCapNhat );
            database.AddInParameter(commandWrapper, "@NgayCapNhat", DbType.String, entity.NgayCapNhat );
            database.AddInParameter(commandWrapper, "@KhoiKienThucGiangDay", DbType.String, entity.KhoiKienThucGiangDay );
            database.AddInParameter(commandWrapper, "@NganhDaoTao", DbType.String, entity.NganhDaoTao );
            database.AddInParameter(commandWrapper, "@DonViGiangDay", DbType.AnsiString, entity.DonViGiangDay );
			database.AddInParameter(commandWrapper, "@DaDuyet", DbType.Boolean, (entity.DaDuyet.HasValue ? (object) entity.DaDuyet : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region cust_GiangVienChoDuyetHoSo_GetSoLuongHoSoChuaDuyet
					
		/// <summary>
		///	This method wraps the 'cust_GiangVienChoDuyetHoSo_GetSoLuongHoSoChuaDuyet' stored procedure. 
		/// </summary>	
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void GetSoLuongHoSoChuaDuyet(TransactionManager transactionManager, int start, int pageLength , ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVienChoDuyetHoSo_GetSoLuongHoSoChuaDuyet", true);
			
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetSoLuongHoSoChuaDuyet", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetSoLuongHoSoChuaDuyet", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVienChoDuyetHoSo_DuyetHoSo
					
		/// <summary>
		///	This method wraps the 'cust_GiangVienChoDuyetHoSo_DuyetHoSo' stored procedure. 
		/// </summary>	
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DuyetHoSo(TransactionManager transactionManager, int start, int pageLength , System.String xmlData, ref System.Int32 reVal)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVienChoDuyetHoSo_DuyetHoSo", true);
			
			database.AddInParameter(commandWrapper, "@XmlData", DbType.String,  xmlData );
	
			database.AddParameter(commandWrapper, "@ReVal", DbType.Int32, 4, ParameterDirection.InputOutput, true, 10, 0, string.Empty, DataRowVersion.Current, reVal);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DuyetHoSo", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DuyetHoSo", (IEntity)null));

			reVal =  Utility.GetParameterValue<System.Int32>(commandWrapper.Parameters["@ReVal"]);

				
				return;
		}
		#endregion

		#region cust_GiangVienChoDuyetHoSo_GetMaDonViMaHocHamMaHocViMaTinhTrang
					
		/// <summary>
		///	This method wraps the 'cust_GiangVienChoDuyetHoSo_GetMaDonViMaHocHamMaHocViMaTinhTrang' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;GiangVienChoDuyetHoSo&gt;"/> instance.</returns>
		public override TList<GiangVienChoDuyetHoSo> GetMaDonViMaHocHamMaHocViMaTinhTrang(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi, System.String maTinhTrang)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVienChoDuyetHoSo_GetMaDonViMaHocHamMaHocViMaTinhTrang", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
			database.AddInParameter(commandWrapper, "@MaHocHam", DbType.Int32,  maHocHam );
			database.AddInParameter(commandWrapper, "@MaHocVi", DbType.Int32,  maHocVi );
			database.AddInParameter(commandWrapper, "@MaTinhTrang", DbType.AnsiString,  maTinhTrang );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<GiangVienChoDuyetHoSo> rows = new TList<GiangVienChoDuyetHoSo>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMaDonViMaHocHamMaHocViMaTinhTrang", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetMaDonViMaHocHamMaHocViMaTinhTrang", rows));


				return rows;
		}
		#endregion

		#region cust_GiangVienChoDuyetHoSo_GetDanhSach
					
		/// <summary>
		///	This method wraps the 'cust_GiangVienChoDuyetHoSo_GetDanhSach' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public override IDataReader GetDanhSach(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVienChoDuyetHoSo_GetDanhSach", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader dr = null;
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetDanhSach", (IEntity)null));

			if (transactionManager != null)
			{	
				dr = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				dr = Utility.ExecuteReader(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetDanhSach", (IEntity)null));



			return dr;
		}
		#endregion

		#region cust_GiangVienChoDuyetHoSo_GetByMaDonVi
					
		/// <summary>
		///	This method wraps the 'cust_GiangVienChoDuyetHoSo_GetByMaDonVi' stored procedure. 
		/// </summary>	
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="TList&lt;GiangVienChoDuyetHoSo&gt;"/> instance.</returns>
		public override TList<GiangVienChoDuyetHoSo> GetByMaDonVi(TransactionManager transactionManager, int start, int pageLength , System.String maDonVi)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.cust_GiangVienChoDuyetHoSo_GetByMaDonVi", true);
			
			database.AddInParameter(commandWrapper, "@MaDonVi", DbType.AnsiString,  maDonVi );
	
			
			IDataReader reader = null;
			
			//Create Collection
				TList<GiangVienChoDuyetHoSo> rows = new TList<GiangVienChoDuyetHoSo>();
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaDonVi", rows));
	
				if (transactionManager != null)
				{	
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}	
				
				try
				{    
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaDonVi", rows));


				return rows;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
