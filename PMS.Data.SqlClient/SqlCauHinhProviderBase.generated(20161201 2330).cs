/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file SqlCauHinhProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="CauHinh"/> entity.
	///</summary>
	public abstract partial class SqlCauHinhProviderBase : CauHinhProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlCauHinhProviderBase"/> instance.
		/// </summary>
		public SqlCauHinhProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlCauHinhProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlCauHinhProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_maCauHinh">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _maCauHinh)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_CauHinh_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@MaCauHinh", DbType.Int32, _maCauHinh);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(CauHinh)
					,_maCauHinh);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of PMS.Entities.CauHinh objects.</returns>
		public override TList<CauHinh> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<CauHinh>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_CauHinh_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@MaCauHinh", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TenTruong", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PhongDaoTao", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NguoiLapbieu", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TrangThai", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PhongToChucCanBo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PhongKeHoachTaiChinh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BanGiamHieu", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@KeToan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuBanGiamHieu", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DaiDienHopDongThinhGiang", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuDaiDienHopDongThinhGiang", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuDaiDienHopDongThinhGiang02", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuKeToan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuDaoTao", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiaChiDaiDien", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DienThoaiDaiDien", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FaxDaiDien", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuKhoa", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuToChucCanBo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuKeHoachTaiChinh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DaiDienHopDongThinhGiang02", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChucVuKiemNhiemKhac", DbType.String, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("macauhinh ") || clause.Trim().StartsWith("macauhinh="))
				{
					database.SetParameterValue(commandWrapper, "@MaCauHinh", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tentruong ") || clause.Trim().StartsWith("tentruong="))
				{
					database.SetParameterValue(commandWrapper, "@TenTruong", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("phongdaotao ") || clause.Trim().StartsWith("phongdaotao="))
				{
					database.SetParameterValue(commandWrapper, "@PhongDaoTao", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nguoilapbieu ") || clause.Trim().StartsWith("nguoilapbieu="))
				{
					database.SetParameterValue(commandWrapper, "@NguoiLapbieu", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("trangthai ") || clause.Trim().StartsWith("trangthai="))
				{
					database.SetParameterValue(commandWrapper, "@TrangThai", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("phongtochuccanbo ") || clause.Trim().StartsWith("phongtochuccanbo="))
				{
					database.SetParameterValue(commandWrapper, "@PhongToChucCanBo", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("phongkehoachtaichinh ") || clause.Trim().StartsWith("phongkehoachtaichinh="))
				{
					database.SetParameterValue(commandWrapper, "@PhongKeHoachTaiChinh", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bangiamhieu ") || clause.Trim().StartsWith("bangiamhieu="))
				{
					database.SetParameterValue(commandWrapper, "@BanGiamHieu", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ketoan ") || clause.Trim().StartsWith("ketoan="))
				{
					database.SetParameterValue(commandWrapper, "@KeToan", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvubangiamhieu ") || clause.Trim().StartsWith("chucvubangiamhieu="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuBanGiamHieu", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("daidienhopdongthinhgiang ") || clause.Trim().StartsWith("daidienhopdongthinhgiang="))
				{
					database.SetParameterValue(commandWrapper, "@DaiDienHopDongThinhGiang", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvudaidienhopdongthinhgiang ") || clause.Trim().StartsWith("chucvudaidienhopdongthinhgiang="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuDaiDienHopDongThinhGiang", 
						clause.Trim().Remove(0,30).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvudaidienhopdongthinhgiang02 ") || clause.Trim().StartsWith("chucvudaidienhopdongthinhgiang02="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuDaiDienHopDongThinhGiang02", 
						clause.Trim().Remove(0,32).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvuketoan ") || clause.Trim().StartsWith("chucvuketoan="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuKeToan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvudaotao ") || clause.Trim().StartsWith("chucvudaotao="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuDaoTao", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("diachidaidien ") || clause.Trim().StartsWith("diachidaidien="))
				{
					database.SetParameterValue(commandWrapper, "@DiaChiDaiDien", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dienthoaidaidien ") || clause.Trim().StartsWith("dienthoaidaidien="))
				{
					database.SetParameterValue(commandWrapper, "@DienThoaiDaiDien", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("faxdaidien ") || clause.Trim().StartsWith("faxdaidien="))
				{
					database.SetParameterValue(commandWrapper, "@FaxDaiDien", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvukhoa ") || clause.Trim().StartsWith("chucvukhoa="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuKhoa", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvutochuccanbo ") || clause.Trim().StartsWith("chucvutochuccanbo="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuToChucCanBo", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvukehoachtaichinh ") || clause.Trim().StartsWith("chucvukehoachtaichinh="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuKeHoachTaiChinh", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("daidienhopdongthinhgiang02 ") || clause.Trim().StartsWith("daidienhopdongthinhgiang02="))
				{
					database.SetParameterValue(commandWrapper, "@DaiDienHopDongThinhGiang02", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("masothue ") || clause.Trim().StartsWith("masothue="))
				{
					database.SetParameterValue(commandWrapper, "@MaSoThue", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("chucvukiemnhiemkhac ") || clause.Trim().StartsWith("chucvukiemnhiemkhac="))
				{
					database.SetParameterValue(commandWrapper, "@ChucVuKiemNhiemKhac", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<CauHinh> rows = new TList<CauHinh>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of PMS.Entities.CauHinh objects.</returns>
		public override TList<CauHinh> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_CauHinh_Find_Dynamic", typeof(CauHinhColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<CauHinh> rows = new TList<CauHinh>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.CauHinh objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<CauHinh> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_CauHinh_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<CauHinh> rows = new TList<CauHinh>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of PMS.Entities.CauHinh objects.</returns>
		public override TList<CauHinh> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_CauHinh_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<CauHinh> rows = new TList<CauHinh>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByMaCauHinh
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_CauHinh index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_maCauHinh"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="PMS.Entities.CauHinh"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override PMS.Entities.CauHinh GetByMaCauHinh(TransactionManager transactionManager, System.Int32 _maCauHinh, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_CauHinh_GetByMaCauHinh", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MaCauHinh", DbType.Int32, _maCauHinh);
			
			IDataReader reader = null;
			TList<CauHinh> tmp = new TList<CauHinh>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMaCauHinh", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMaCauHinh", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.CauHinh object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<PMS.Entities.CauHinh> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "CauHinh";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("MaCauHinh", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("TenTruong", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("PhongDaoTao", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("NguoiLapbieu", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("TrangThai", typeof(System.Boolean));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("PhongToChucCanBo", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("PhongKeHoachTaiChinh", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("BanGiamHieu", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("KeToan", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("ChucVuBanGiamHieu", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("DaiDienHopDongThinhGiang", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ChucVuDaiDienHopDongThinhGiang", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("ChucVuDaiDienHopDongThinhGiang02", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ChucVuKeToan", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("ChucVuDaoTao", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("DiaChiDaiDien", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("DienThoaiDaiDien", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("FaxDaiDien", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("ChucVuKhoa", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("ChucVuToChucCanBo", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ChucVuKeHoachTaiChinh", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("DaiDienHopDongThinhGiang02", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("MaSoThue", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ChucVuKiemNhiemKhac", typeof(System.String));
			col23.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("MaCauHinh", "MaCauHinh");
			bulkCopy.ColumnMappings.Add("TenTruong", "TenTruong");
			bulkCopy.ColumnMappings.Add("PhongDaoTao", "PhongDaoTao");
			bulkCopy.ColumnMappings.Add("NguoiLapbieu", "NguoiLapbieu");
			bulkCopy.ColumnMappings.Add("TrangThai", "TrangThai");
			bulkCopy.ColumnMappings.Add("PhongToChucCanBo", "PhongToChucCanBo");
			bulkCopy.ColumnMappings.Add("PhongKeHoachTaiChinh", "PhongKeHoachTaiChinh");
			bulkCopy.ColumnMappings.Add("BanGiamHieu", "BanGiamHieu");
			bulkCopy.ColumnMappings.Add("KeToan", "KeToan");
			bulkCopy.ColumnMappings.Add("ChucVuBanGiamHieu", "ChucVuBanGiamHieu");
			bulkCopy.ColumnMappings.Add("DaiDienHopDongThinhGiang", "DaiDienHopDongThinhGiang");
			bulkCopy.ColumnMappings.Add("ChucVuDaiDienHopDongThinhGiang", "ChucVuDaiDienHopDongThinhGiang");
			bulkCopy.ColumnMappings.Add("ChucVuDaiDienHopDongThinhGiang02", "ChucVuDaiDienHopDongThinhGiang02");
			bulkCopy.ColumnMappings.Add("ChucVuKeToan", "ChucVuKeToan");
			bulkCopy.ColumnMappings.Add("ChucVuDaoTao", "ChucVuDaoTao");
			bulkCopy.ColumnMappings.Add("DiaChiDaiDien", "DiaChiDaiDien");
			bulkCopy.ColumnMappings.Add("DienThoaiDaiDien", "DienThoaiDaiDien");
			bulkCopy.ColumnMappings.Add("FaxDaiDien", "FaxDaiDien");
			bulkCopy.ColumnMappings.Add("ChucVuKhoa", "ChucVuKhoa");
			bulkCopy.ColumnMappings.Add("ChucVuToChucCanBo", "ChucVuToChucCanBo");
			bulkCopy.ColumnMappings.Add("ChucVuKeHoachTaiChinh", "ChucVuKeHoachTaiChinh");
			bulkCopy.ColumnMappings.Add("DaiDienHopDongThinhGiang02", "DaiDienHopDongThinhGiang02");
			bulkCopy.ColumnMappings.Add("MaSoThue", "MaSoThue");
			bulkCopy.ColumnMappings.Add("ChucVuKiemNhiemKhac", "ChucVuKiemNhiemKhac");
			
			foreach(PMS.Entities.CauHinh entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["MaCauHinh"] = entity.MaCauHinh;
							
				
					row["TenTruong"] = entity.TenTruong;
							
				
					row["PhongDaoTao"] = entity.PhongDaoTao;
							
				
					row["NguoiLapbieu"] = entity.NguoiLapbieu;
							
				
					row["TrangThai"] = entity.TrangThai.HasValue ? (object) entity.TrangThai  : System.DBNull.Value;
							
				
					row["PhongToChucCanBo"] = entity.PhongToChucCanBo;
							
				
					row["PhongKeHoachTaiChinh"] = entity.PhongKeHoachTaiChinh;
							
				
					row["BanGiamHieu"] = entity.BanGiamHieu;
							
				
					row["KeToan"] = entity.KeToan;
							
				
					row["ChucVuBanGiamHieu"] = entity.ChucVuBanGiamHieu;
							
				
					row["DaiDienHopDongThinhGiang"] = entity.DaiDienHopDongThinhGiang;
							
				
					row["ChucVuDaiDienHopDongThinhGiang"] = entity.ChucVuDaiDienHopDongThinhGiang;
							
				
					row["ChucVuDaiDienHopDongThinhGiang02"] = entity.ChucVuDaiDienHopDongThinhGiang02;
							
				
					row["ChucVuKeToan"] = entity.ChucVuKeToan;
							
				
					row["ChucVuDaoTao"] = entity.ChucVuDaoTao;
							
				
					row["DiaChiDaiDien"] = entity.DiaChiDaiDien;
							
				
					row["DienThoaiDaiDien"] = entity.DienThoaiDaiDien;
							
				
					row["FaxDaiDien"] = entity.FaxDaiDien;
							
				
					row["ChucVuKhoa"] = entity.ChucVuKhoa;
							
				
					row["ChucVuToChucCanBo"] = entity.ChucVuToChucCanBo;
							
				
					row["ChucVuKeHoachTaiChinh"] = entity.ChucVuKeHoachTaiChinh;
							
				
					row["DaiDienHopDongThinhGiang02"] = entity.DaiDienHopDongThinhGiang02;
							
				
					row["MaSoThue"] = entity.MaSoThue;
							
				
					row["ChucVuKiemNhiemKhac"] = entity.ChucVuKiemNhiemKhac;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(PMS.Entities.CauHinh entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a PMS.Entities.CauHinh object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.CauHinh object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the PMS.Entities.CauHinh object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, PMS.Entities.CauHinh entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_CauHinh_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@MaCauHinh", DbType.Int32, 4);
            database.AddInParameter(commandWrapper, "@TenTruong", DbType.String, entity.TenTruong );
            database.AddInParameter(commandWrapper, "@PhongDaoTao", DbType.String, entity.PhongDaoTao );
            database.AddInParameter(commandWrapper, "@NguoiLapbieu", DbType.String, entity.NguoiLapbieu );
			database.AddInParameter(commandWrapper, "@TrangThai", DbType.Boolean, (entity.TrangThai.HasValue ? (object) entity.TrangThai  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@PhongToChucCanBo", DbType.String, entity.PhongToChucCanBo );
            database.AddInParameter(commandWrapper, "@PhongKeHoachTaiChinh", DbType.String, entity.PhongKeHoachTaiChinh );
            database.AddInParameter(commandWrapper, "@BanGiamHieu", DbType.String, entity.BanGiamHieu );
            database.AddInParameter(commandWrapper, "@KeToan", DbType.String, entity.KeToan );
            database.AddInParameter(commandWrapper, "@ChucVuBanGiamHieu", DbType.String, entity.ChucVuBanGiamHieu );
            database.AddInParameter(commandWrapper, "@DaiDienHopDongThinhGiang", DbType.String, entity.DaiDienHopDongThinhGiang );
            database.AddInParameter(commandWrapper, "@ChucVuDaiDienHopDongThinhGiang", DbType.String, entity.ChucVuDaiDienHopDongThinhGiang );
            database.AddInParameter(commandWrapper, "@ChucVuDaiDienHopDongThinhGiang02", DbType.String, entity.ChucVuDaiDienHopDongThinhGiang02 );
            database.AddInParameter(commandWrapper, "@ChucVuKeToan", DbType.String, entity.ChucVuKeToan );
            database.AddInParameter(commandWrapper, "@ChucVuDaoTao", DbType.String, entity.ChucVuDaoTao );
            database.AddInParameter(commandWrapper, "@DiaChiDaiDien", DbType.String, entity.DiaChiDaiDien );
            database.AddInParameter(commandWrapper, "@DienThoaiDaiDien", DbType.String, entity.DienThoaiDaiDien );
            database.AddInParameter(commandWrapper, "@FaxDaiDien", DbType.String, entity.FaxDaiDien );
            database.AddInParameter(commandWrapper, "@ChucVuKhoa", DbType.String, entity.ChucVuKhoa );
            database.AddInParameter(commandWrapper, "@ChucVuToChucCanBo", DbType.String, entity.ChucVuToChucCanBo );
            database.AddInParameter(commandWrapper, "@ChucVuKeHoachTaiChinh", DbType.String, entity.ChucVuKeHoachTaiChinh );
            database.AddInParameter(commandWrapper, "@DaiDienHopDongThinhGiang02", DbType.String, entity.DaiDienHopDongThinhGiang02 );
            database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, entity.MaSoThue );
            database.AddInParameter(commandWrapper, "@ChucVuKiemNhiemKhac", DbType.String, entity.ChucVuKiemNhiemKhac );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _maCauHinh = database.GetParameterValue(commandWrapper, "@MaCauHinh");
			entity.MaCauHinh = (System.Int32)_maCauHinh;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">PMS.Entities.CauHinh object to update.</param>
		/// <remarks>
		///		After updating the datasource, the PMS.Entities.CauHinh object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, PMS.Entities.CauHinh entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.sp_CauHinh_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@MaCauHinh", DbType.Int32, entity.MaCauHinh );
            database.AddInParameter(commandWrapper, "@TenTruong", DbType.String, entity.TenTruong );
            database.AddInParameter(commandWrapper, "@PhongDaoTao", DbType.String, entity.PhongDaoTao );
            database.AddInParameter(commandWrapper, "@NguoiLapbieu", DbType.String, entity.NguoiLapbieu );
			database.AddInParameter(commandWrapper, "@TrangThai", DbType.Boolean, (entity.TrangThai.HasValue ? (object) entity.TrangThai : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@PhongToChucCanBo", DbType.String, entity.PhongToChucCanBo );
            database.AddInParameter(commandWrapper, "@PhongKeHoachTaiChinh", DbType.String, entity.PhongKeHoachTaiChinh );
            database.AddInParameter(commandWrapper, "@BanGiamHieu", DbType.String, entity.BanGiamHieu );
            database.AddInParameter(commandWrapper, "@KeToan", DbType.String, entity.KeToan );
            database.AddInParameter(commandWrapper, "@ChucVuBanGiamHieu", DbType.String, entity.ChucVuBanGiamHieu );
            database.AddInParameter(commandWrapper, "@DaiDienHopDongThinhGiang", DbType.String, entity.DaiDienHopDongThinhGiang );
            database.AddInParameter(commandWrapper, "@ChucVuDaiDienHopDongThinhGiang", DbType.String, entity.ChucVuDaiDienHopDongThinhGiang );
            database.AddInParameter(commandWrapper, "@ChucVuDaiDienHopDongThinhGiang02", DbType.String, entity.ChucVuDaiDienHopDongThinhGiang02 );
            database.AddInParameter(commandWrapper, "@ChucVuKeToan", DbType.String, entity.ChucVuKeToan );
            database.AddInParameter(commandWrapper, "@ChucVuDaoTao", DbType.String, entity.ChucVuDaoTao );
            database.AddInParameter(commandWrapper, "@DiaChiDaiDien", DbType.String, entity.DiaChiDaiDien );
            database.AddInParameter(commandWrapper, "@DienThoaiDaiDien", DbType.String, entity.DienThoaiDaiDien );
            database.AddInParameter(commandWrapper, "@FaxDaiDien", DbType.String, entity.FaxDaiDien );
            database.AddInParameter(commandWrapper, "@ChucVuKhoa", DbType.String, entity.ChucVuKhoa );
            database.AddInParameter(commandWrapper, "@ChucVuToChucCanBo", DbType.String, entity.ChucVuToChucCanBo );
            database.AddInParameter(commandWrapper, "@ChucVuKeHoachTaiChinh", DbType.String, entity.ChucVuKeHoachTaiChinh );
            database.AddInParameter(commandWrapper, "@DaiDienHopDongThinhGiang02", DbType.String, entity.DaiDienHopDongThinhGiang02 );
            database.AddInParameter(commandWrapper, "@MaSoThue", DbType.AnsiString, entity.MaSoThue );
            database.AddInParameter(commandWrapper, "@ChucVuKiemNhiemKhac", DbType.String, entity.ChucVuKiemNhiemKhac );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
