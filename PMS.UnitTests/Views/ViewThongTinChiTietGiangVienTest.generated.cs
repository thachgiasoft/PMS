/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewThongTinChiTietGiangVienTest.cs instead.
*/
#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using PMS.Entities;
using PMS.Data;

#endregion

namespace PMS.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="ViewThongTinChiTietGiangVien"/> objects (entity, collection and repository).
    /// </summary>
    public partial class ViewThongTinChiTietGiangVienTest
    {
    	// the ViewThongTinChiTietGiangVien instance used to test the repository.
		private ViewThongTinChiTietGiangVien mock;
		
		// the VList<ViewThongTinChiTietGiangVien> instance used to test the repository.
		private VList<ViewThongTinChiTietGiangVien> mockCollection;		

        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>
        static private void Init_Generated()
        {
			System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the ViewThongTinChiTietGiangVien Entity with the {0} --", PMS.Data.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
        static private void CleanUp_Generated()
        {       	
			System.Console.WriteLine();
			System.Console.WriteLine();
        }
		
		/// <summary>
		/// Selects a page of ViewThongTinChiTietGiangVien objects from the database.
		/// </summary>
		private void Step_1_SelectAll_Generated()
		{
			int count = -1;
			mockCollection = DataRepository.ViewThongTinChiTietGiangVienProvider.GetPaged(null, 0, 10, out count);
			Assert.IsTrue(count >= 0, "Select Query Failed with GetPaged");
			System.Console.WriteLine("DataRepository.ViewThongTinChiTietGiangVienProvider.GetPaged():");			
			System.Console.WriteLine(mockCollection);			
		}
		
		/// <summary>
		/// Searches some ViewThongTinChiTietGiangVien objects from the database.
		/// </summary>
		private void Step_2_Search_Generated()
		{
			int count = -1;
			mockCollection = DataRepository.ViewThongTinChiTietGiangVienProvider.Find(null, null, "", 0, 10, out count);
			Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
			
			System.Console.WriteLine("DataRepository.ViewThongTinChiTietGiangVienProvider.Find():");			
			System.Console.WriteLine(mockCollection);
					
		}
		 //Find
			
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock ViewThongTinChiTietGiangVien entity into a temporary file.
		/// </summary>
		private void Step_6_SerializeEntity_Generated()
		{
			string fileName = "temp_ViewThongTinChiTietGiangVien.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(ViewThongTinChiTietGiangVien)); 
			System.IO.StreamWriter myWriter = new System.IO.StreamWriter(fileName); 
			mySerializer.Serialize(myWriter, mock); 
			myWriter.Close();
			System.Console.WriteLine("mock correctly serialized to a temporary file.");			
		}
		
		/// <summary>
		/// Deserialize the mock ViewThongTinChiTietGiangVien entity from a temporary file.
		/// </summary>
		private void Step_7_DeserializeEntity_Generated()
		{
			string fileName = "temp_ViewThongTinChiTietGiangVien.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(ViewThongTinChiTietGiangVien)); 
			System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open); 
			mock = (ViewThongTinChiTietGiangVien) mySerializer.Deserialize(myFileStream);
			myFileStream.Close();
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a ViewThongTinChiTietGiangVien collection into a temporary file.
		/// </summary>
		private void Step_8_SerializeCollection_Generated()
		{
			string fileName = "temp_ViewThongTinChiTietGiangVienCollection.xml";
		
			VList<ViewThongTinChiTietGiangVien> mockCollection = new VList<ViewThongTinChiTietGiangVien>();
			mockCollection.Add(mock);
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(VList<ViewThongTinChiTietGiangVien>)); 
			System.IO.StreamWriter myWriter = new System.IO.StreamWriter(fileName); 
			mySerializer.Serialize(myWriter, mockCollection); 
			myWriter.Close();
			
			System.Console.WriteLine("VList<ViewThongTinChiTietGiangVien> correctly serialized to a temporary file.");					
		}
		
		
		/// <summary>
		/// Deserialize a ViewThongTinChiTietGiangVien collection from a temporary file.
		/// </summary>
		private void Step_9_DeserializeCollection_Generated()
		{
			string fileName = "temp_ViewThongTinChiTietGiangVienCollection.xml";
		
			XmlSerializer mySerializer = new XmlSerializer(typeof(VList<ViewThongTinChiTietGiangVien>)); 
			System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open); 
			VList<ViewThongTinChiTietGiangVien> mockCollection = (VList<ViewThongTinChiTietGiangVien>) mySerializer.Deserialize(myFileStream);
			myFileStream.Close();
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("VList<ViewThongTinChiTietGiangVien> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		#region Mock Instance
		///<summary>
		///  Returns a Typed ViewThongTinChiTietGiangVien Entity with mock values.
		///</summary>
		static public ViewThongTinChiTietGiangVien CreateMockInstance()
		{		
			ViewThongTinChiTietGiangVien mock = new ViewThongTinChiTietGiangVien();
						
			mock.MaQuanLy = TestUtility.Instance.RandomString(9, false);;
			mock.Ho = TestUtility.Instance.RandomString(24, false);;
			mock.TenDem = TestUtility.Instance.RandomString(24, false);;
			mock.Ten = TestUtility.Instance.RandomString(24, false);;
			mock.HoTenDem = TestUtility.Instance.RandomString(49, false);;
			mock.NgaySinh = TestUtility.Instance.RandomString(10, false);;
			mock.GioiTinh = TestUtility.Instance.RandomBoolean();
			mock.TenGioiTinh = TestUtility.Instance.RandomString(3, false);;
			mock.NoiSinh = TestUtility.Instance.RandomString(99, false);;
			mock.Cmnd = TestUtility.Instance.RandomString(9, false);;
			mock.NgayCap = TestUtility.Instance.RandomString(10, false);;
			mock.NoiCap = TestUtility.Instance.RandomString(99, false);;
			mock.DoanDang = TestUtility.Instance.RandomBoolean();
			mock.NgayVaoDoanDang = TestUtility.Instance.RandomString(10, false);;
			mock.NgayKyHopDong = TestUtility.Instance.RandomDateTime();
			mock.NgayKetThucHopDong = TestUtility.Instance.RandomDateTime();
			mock.HinhAnh = new byte[] { TestUtility.Instance.RandomByte() };
			mock.DiaChi = TestUtility.Instance.RandomString(99, false);;
			mock.ThuongTru = TestUtility.Instance.RandomString(99, false);;
			mock.NoiLamViec = TestUtility.Instance.RandomString(49, false);;
			mock.Email = TestUtility.Instance.RandomString(24, false);;
			mock.DienThoai = TestUtility.Instance.RandomString(24, false);;
			mock.SoDiDong = TestUtility.Instance.RandomString(24, false);;
			mock.SoTaiKhoan = TestUtility.Instance.RandomString(24, false);;
			mock.TenNganHang = TestUtility.Instance.RandomString(49, false);;
			mock.MaSoThue = TestUtility.Instance.RandomString(9, false);;
			mock.ChiNhanh = TestUtility.Instance.RandomString(49, false);;
			mock.SoSoBaoHiem = TestUtility.Instance.RandomString(24, false);;
			mock.ThoiGianBatDau = TestUtility.Instance.RandomString(24, false);;
			mock.BacLuong = (decimal)TestUtility.Instance.RandomShort();
			mock.NgayHuongLuong = TestUtility.Instance.RandomString(9, false);;
			mock.NamLamViec = TestUtility.Instance.RandomString(10, false);;
			mock.ChuyenNganh = TestUtility.Instance.RandomString(499, false);;
			mock.MaHeSoThuLao = TestUtility.Instance.RandomString(9, false);;
			mock.MaDanToc = TestUtility.Instance.RandomString(9, false);;
			mock.TenDanToc = TestUtility.Instance.RandomString(49, false);;
			mock.MaTonGiao = TestUtility.Instance.RandomString(9, false);;
			mock.TenTonGiao = TestUtility.Instance.RandomString(49, false);;
			mock.MaDonVi = TestUtility.Instance.RandomString(9, false);;
			mock.TenDonVi = TestUtility.Instance.RandomString(126, false);;
			mock.MaHocHam = TestUtility.Instance.RandomString(9, false);;
			mock.TenHocHam = TestUtility.Instance.RandomString(99, false);;
			mock.MaHocVi = TestUtility.Instance.RandomString(9, false);;
			mock.TenHocVi = TestUtility.Instance.RandomString(99, false);;
			mock.MaLoaiGiangVien = TestUtility.Instance.RandomString(9, false);;
			mock.TenLoaiGiangVien = TestUtility.Instance.RandomString(49, false);;
			mock.TenDangNhap = TestUtility.Instance.RandomString(6, false);;
			mock.TenMayTinh = TestUtility.Instance.RandomString(49, false);;
			mock.MatKhau = TestUtility.Instance.RandomString(24, false);;
			mock.MaTinhTrang = TestUtility.Instance.RandomString(9, false);;
			mock.TenTinhTrang = TestUtility.Instance.RandomString(99, false);;
		   return (ViewThongTinChiTietGiangVien)mock;
		}
		

		#endregion
    }
}
