
/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file GiangVienChoDuyetHoSoTest.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="GiangVienChoDuyetHoSo"/> objects (entity, collection and repository).
    /// </summary>
   public partial class GiangVienChoDuyetHoSoTest
    {
    	// the GiangVienChoDuyetHoSo instance used to test the repository.
		protected GiangVienChoDuyetHoSo mock;
		
		// the TList<GiangVienChoDuyetHoSo> instance used to test the repository.
		protected TList<GiangVienChoDuyetHoSo> mockCollection;
		
		protected static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the GiangVienChoDuyetHoSo Entity with the {0} --", PMS.Data.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		/// <summary>
		/// Inserts a mock GiangVienChoDuyetHoSo entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.GiangVienChoDuyetHoSoProvider.Insert(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.GiangVienChoDuyetHoSoProvider.Insert(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Selects all GiangVienChoDuyetHoSo objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				mockCollection = DataRepository.GiangVienChoDuyetHoSoProvider.Find(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.GiangVienChoDuyetHoSoProvider.Find():");			
				System.Console.WriteLine(mockCollection);
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.GiangVienChoDuyetHoSoProvider.GetPaged(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		
		
		
		
		/// <summary>
		/// Deep load all GiangVienChoDuyetHoSo children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.GiangVienChoDuyetHoSoProvider.GetPaged(tm, 0, 10, out count);
			
				DataRepository.GiangVienChoDuyetHoSoProvider.DeepLoading += new EntityProviderBaseCore<GiangVienChoDuyetHoSo, GiangVienChoDuyetHoSoKey>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.GiangVienChoDuyetHoSoProvider.DeepLoad(tm, mockCollection[0]);
					System.Console.WriteLine("GiangVienChoDuyetHoSo instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					// DataRepository.GiangVienChoDuyetHoSoProvider.DeepSave(tm, mockCollection);
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		/// <summary>
		/// Updates a mock GiangVienChoDuyetHoSo entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				GiangVienChoDuyetHoSo mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.GiangVienChoDuyetHoSoProvider.Insert(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.GiangVienChoDuyetHoSoProvider.Update(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.GiangVienChoDuyetHoSoProvider.Update(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Delete the mock GiangVienChoDuyetHoSo entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (GiangVienChoDuyetHoSo)CreateMockInstance(tm);
				DataRepository.GiangVienChoDuyetHoSoProvider.Insert(tm, mock);
			
				Assert.IsTrue(DataRepository.GiangVienChoDuyetHoSoProvider.Delete(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.GiangVienChoDuyetHoSoProvider.Delete(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock GiangVienChoDuyetHoSo entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_GiangVienChoDuyetHoSo.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock GiangVienChoDuyetHoSo entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_GiangVienChoDuyetHoSo.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<GiangVienChoDuyetHoSo>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a GiangVienChoDuyetHoSo collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_GiangVienChoDuyetHoSoCollection.xml");
				
				mock = CreateMockInstance(tm);
				TList<GiangVienChoDuyetHoSo> mockCollection = new TList<GiangVienChoDuyetHoSo>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("TList<GiangVienChoDuyetHoSo> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a GiangVienChoDuyetHoSo collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_GiangVienChoDuyetHoSoCollection.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(TList<GiangVienChoDuyetHoSo>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				TList<GiangVienChoDuyetHoSo> mockCollection = (TList<GiangVienChoDuyetHoSo>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("TList<GiangVienChoDuyetHoSo> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				GiangVienChoDuyetHoSo entity = CreateMockInstance(tm);
				bool result = DataRepository.GiangVienChoDuyetHoSoProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
			}
		}
		
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				GiangVienChoDuyetHoSo entity = CreateMockInstance(tm);
				bool result = DataRepository.GiangVienChoDuyetHoSoProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				GiangVienChoDuyetHoSo t0 = DataRepository.GiangVienChoDuyetHoSoProvider.GetById(tm, entity.Id);
			}
		}
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				GiangVienChoDuyetHoSo entity = mock.Copy() as GiangVienChoDuyetHoSo;
				entity = (GiangVienChoDuyetHoSo)mock.Clone();
				Assert.IsTrue(GiangVienChoDuyetHoSo.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				GiangVienChoDuyetHoSo mock = CreateMockInstance(tm);
				bool result = DataRepository.GiangVienChoDuyetHoSoProvider.Insert(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				GiangVienChoDuyetHoSoQuery query = new GiangVienChoDuyetHoSoQuery();
			
				query.AppendEquals(GiangVienChoDuyetHoSoColumn.Id, mock.Id.ToString());
				if(mock.MaDanToc != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaDanToc, mock.MaDanToc.ToString());
				if(mock.MaTonGiao != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaTonGiao, mock.MaTonGiao.ToString());
				if(mock.MaDonVi != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaDonVi, mock.MaDonVi.ToString());
				if(mock.MaHocHam != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaHocHam, mock.MaHocHam.ToString());
				if(mock.MaHocVi != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaHocVi, mock.MaHocVi.ToString());
				if(mock.MaLoaiGiangVien != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaLoaiGiangVien, mock.MaLoaiGiangVien.ToString());
				if(mock.MaNguoiLap != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaNguoiLap, mock.MaNguoiLap.ToString());
				if(mock.MatKhau != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MatKhau, mock.MatKhau.ToString());
				if(mock.MaTinhTrang != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaTinhTrang, mock.MaTinhTrang.ToString());
				if(mock.MaQuanLy != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaQuanLy, mock.MaQuanLy.ToString());
				if(mock.Ho != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.Ho, mock.Ho.ToString());
				if(mock.TenDem != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.TenDem, mock.TenDem.ToString());
				if(mock.Ten != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.Ten, mock.Ten.ToString());
				if(mock.NgaySinh != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NgaySinh, mock.NgaySinh.ToString());
				if(mock.GioiTinh != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.GioiTinh, mock.GioiTinh.ToString());
				if(mock.NoiSinh != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NoiSinh, mock.NoiSinh.ToString());
				if(mock.Cmnd != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.Cmnd, mock.Cmnd.ToString());
				if(mock.NgayCap != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NgayCap, mock.NgayCap.ToString());
				if(mock.NoiCap != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NoiCap, mock.NoiCap.ToString());
				if(mock.DoanDang != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.DoanDang, mock.DoanDang.ToString());
				if(mock.NgayVaoDoanDang != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NgayVaoDoanDang, mock.NgayVaoDoanDang.ToString());
				if(mock.NgayKyHopDong != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NgayKyHopDong, mock.NgayKyHopDong.ToString());
				if(mock.NgayKetThucHopDong != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NgayKetThucHopDong, mock.NgayKetThucHopDong.ToString());
				if(mock.DiaChi != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.DiaChi, mock.DiaChi.ToString());
				if(mock.ThuongTru != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.ThuongTru, mock.ThuongTru.ToString());
				if(mock.NoiLamViec != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NoiLamViec, mock.NoiLamViec.ToString());
				if(mock.Email != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.Email, mock.Email.ToString());
				if(mock.DienThoai != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.DienThoai, mock.DienThoai.ToString());
				if(mock.SoDiDong != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.SoDiDong, mock.SoDiDong.ToString());
				if(mock.SoTaiKhoan != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.SoTaiKhoan, mock.SoTaiKhoan.ToString());
				if(mock.TenNganHang != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.TenNganHang, mock.TenNganHang.ToString());
				if(mock.MaSoThue != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaSoThue, mock.MaSoThue.ToString());
				if(mock.ChiNhanh != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.ChiNhanh, mock.ChiNhanh.ToString());
				if(mock.SoSoBaoHiem != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.SoSoBaoHiem, mock.SoSoBaoHiem.ToString());
				if(mock.ThoiGianBatDau != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.ThoiGianBatDau, mock.ThoiGianBatDau.ToString());
				if(mock.BacLuong != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.BacLuong, mock.BacLuong.ToString());
				if(mock.NgayHuongLuong != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NgayHuongLuong, mock.NgayHuongLuong.ToString());
				if(mock.NamLamViec != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NamLamViec, mock.NamLamViec.ToString());
				if(mock.ChuyenNganh != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.ChuyenNganh, mock.ChuyenNganh.ToString());
				if(mock.MaHeSoThuLao != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaHeSoThuLao, mock.MaHeSoThuLao.ToString());
				if(mock.Ngach != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.Ngach, mock.Ngach.ToString());
				if(mock.SoHieuCongChuc != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.SoHieuCongChuc, mock.SoHieuCongChuc.ToString());
				if(mock.Hrmid != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.Hrmid, mock.Hrmid.ToString());
				if(mock.NoiCapBang != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NoiCapBang, mock.NoiCapBang.ToString());
				if(mock.KhoaTaiKhoan != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.KhoaTaiKhoan, mock.KhoaTaiKhoan.ToString());
				if(mock.MaLoaiNhanVien != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaLoaiNhanVien, mock.MaLoaiNhanVien.ToString());
				if(mock.MaNgachCongChuc != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaNgachCongChuc, mock.MaNgachCongChuc.ToString());
				if(mock.MaTrinhDoChinhTri != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaTrinhDoChinhTri, mock.MaTrinhDoChinhTri.ToString());
				if(mock.MaTrinhDoSuPham != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaTrinhDoSuPham, mock.MaTrinhDoSuPham.ToString());
				if(mock.MaTrinhDoNgoaiNgu != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaTrinhDoNgoaiNgu, mock.MaTrinhDoNgoaiNgu.ToString());
				if(mock.MaTrinhDoTinHoc != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaTrinhDoTinHoc, mock.MaTrinhDoTinHoc.ToString());
				if(mock.MaTrinhDoQuanLyNhaNuoc != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.MaTrinhDoQuanLyNhaNuoc, mock.MaTrinhDoQuanLyNhaNuoc.ToString());
				if(mock.NguoiCapNhat != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NguoiCapNhat, mock.NguoiCapNhat.ToString());
				if(mock.NgayCapNhat != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NgayCapNhat, mock.NgayCapNhat.ToString());
				if(mock.KhoiKienThucGiangDay != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.KhoiKienThucGiangDay, mock.KhoiKienThucGiangDay.ToString());
				if(mock.NganhDaoTao != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.NganhDaoTao, mock.NganhDaoTao.ToString());
				if(mock.DonViGiangDay != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.DonViGiangDay, mock.DonViGiangDay.ToString());
				if(mock.DaDuyet != null)
					query.AppendEquals(GiangVienChoDuyetHoSoColumn.DaDuyet, mock.DaDuyet.ToString());
				
				TList<GiangVienChoDuyetHoSo> results = DataRepository.GiangVienChoDuyetHoSoProvider.Find(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed GiangVienChoDuyetHoSo Entity with mock values.
		///</summary>
		static public GiangVienChoDuyetHoSo CreateMockInstance_Generated(TransactionManager tm)
		{		
			GiangVienChoDuyetHoSo mock = new GiangVienChoDuyetHoSo();
						
			mock.MaDanToc = TestUtility.Instance.RandomString(9, false);;
			mock.MaTonGiao = TestUtility.Instance.RandomString(9, false);;
			mock.MaDonVi = TestUtility.Instance.RandomString(9, false);;
			mock.MaHocHam = TestUtility.Instance.RandomNumber();
			mock.MaHocVi = TestUtility.Instance.RandomNumber();
			mock.MaLoaiGiangVien = TestUtility.Instance.RandomNumber();
			mock.MaNguoiLap = TestUtility.Instance.RandomNumber();
			mock.MatKhau = TestUtility.Instance.RandomString(24, false);;
			mock.MaTinhTrang = TestUtility.Instance.RandomNumber();
			mock.MaQuanLy = TestUtility.Instance.RandomString(9, false);;
			mock.Ho = TestUtility.Instance.RandomString(24, false);;
			mock.TenDem = TestUtility.Instance.RandomString(24, false);;
			mock.Ten = TestUtility.Instance.RandomString(24, false);;
			mock.NgaySinh = TestUtility.Instance.RandomString(10, false);;
			mock.GioiTinh = TestUtility.Instance.RandomBoolean();
			mock.NoiSinh = TestUtility.Instance.RandomString(99, false);;
			mock.Cmnd = TestUtility.Instance.RandomString(9, false);;
			mock.NgayCap = TestUtility.Instance.RandomString(10, false);;
			mock.NoiCap = TestUtility.Instance.RandomString(99, false);;
			mock.DoanDang = TestUtility.Instance.RandomBoolean();
			mock.NgayVaoDoanDang = TestUtility.Instance.RandomString(10, false);;
			mock.NgayKyHopDong = TestUtility.Instance.RandomDateTime();
			mock.NgayKetThucHopDong = TestUtility.Instance.RandomDateTime();
			mock.HinhAnh = new byte[] { TestUtility.Instance.RandomByte() };
			mock.DiaChi = TestUtility.Instance.RandomString(99, false);;
			mock.ThuongTru = TestUtility.Instance.RandomString(99, false);;
			mock.NoiLamViec = TestUtility.Instance.RandomString(49, false);;
			mock.Email = TestUtility.Instance.RandomString(24, false);;
			mock.DienThoai = TestUtility.Instance.RandomString(9, false);;
			mock.SoDiDong = TestUtility.Instance.RandomString(9, false);;
			mock.SoTaiKhoan = TestUtility.Instance.RandomString(24, false);;
			mock.TenNganHang = TestUtility.Instance.RandomString(49, false);;
			mock.MaSoThue = TestUtility.Instance.RandomString(9, false);;
			mock.ChiNhanh = TestUtility.Instance.RandomString(49, false);;
			mock.SoSoBaoHiem = TestUtility.Instance.RandomString(24, false);;
			mock.ThoiGianBatDau = TestUtility.Instance.RandomString(24, false);;
			mock.BacLuong = (decimal)TestUtility.Instance.RandomShort();
			mock.NgayHuongLuong = TestUtility.Instance.RandomString(9, false);;
			mock.NamLamViec = TestUtility.Instance.RandomString(10, false);;
			mock.ChuyenNganh = TestUtility.Instance.RandomString(499, false);;
			mock.MaHeSoThuLao = TestUtility.Instance.RandomString(9, false);;
			mock.Ngach = TestUtility.Instance.RandomString(9, false);;
			mock.SoHieuCongChuc = TestUtility.Instance.RandomString(9, false);;
			mock.Hrmid = Guid.NewGuid();
			mock.NoiCapBang = TestUtility.Instance.RandomString(249, false);;
			mock.KhoaTaiKhoan = TestUtility.Instance.RandomBoolean();
			mock.MaLoaiNhanVien = TestUtility.Instance.RandomNumber();
			mock.MaNgachCongChuc = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoChinhTri = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoSuPham = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoNgoaiNgu = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoTinHoc = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoQuanLyNhaNuoc = TestUtility.Instance.RandomNumber();
			mock.NguoiCapNhat = TestUtility.Instance.RandomString(126, false);;
			mock.NgayCapNhat = TestUtility.Instance.RandomString(24, false);;
			mock.KhoiKienThucGiangDay = TestUtility.Instance.RandomString(249, false);;
			mock.NganhDaoTao = TestUtility.Instance.RandomString(249, false);;
			mock.DonViGiangDay = TestUtility.Instance.RandomString(9, false);;
			mock.DaDuyet = TestUtility.Instance.RandomBoolean();
			
		
			// create a temporary collection and add the item to it
			TList<GiangVienChoDuyetHoSo> tempMockCollection = new TList<GiangVienChoDuyetHoSo>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (GiangVienChoDuyetHoSo)mock;
		}
		
		
		///<summary>
		///  Update the Typed GiangVienChoDuyetHoSo Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, GiangVienChoDuyetHoSo mock)
		{
			mock.MaDanToc = TestUtility.Instance.RandomString(9, false);;
			mock.MaTonGiao = TestUtility.Instance.RandomString(9, false);;
			mock.MaDonVi = TestUtility.Instance.RandomString(9, false);;
			mock.MaHocHam = TestUtility.Instance.RandomNumber();
			mock.MaHocVi = TestUtility.Instance.RandomNumber();
			mock.MaLoaiGiangVien = TestUtility.Instance.RandomNumber();
			mock.MaNguoiLap = TestUtility.Instance.RandomNumber();
			mock.MatKhau = TestUtility.Instance.RandomString(24, false);;
			mock.MaTinhTrang = TestUtility.Instance.RandomNumber();
			mock.MaQuanLy = TestUtility.Instance.RandomString(9, false);;
			mock.Ho = TestUtility.Instance.RandomString(24, false);;
			mock.TenDem = TestUtility.Instance.RandomString(24, false);;
			mock.Ten = TestUtility.Instance.RandomString(24, false);;
			mock.NgaySinh = TestUtility.Instance.RandomString(10, false);;
			mock.GioiTinh = TestUtility.Instance.RandomBoolean();
			mock.NoiSinh = TestUtility.Instance.RandomString(99, false);;
			mock.Cmnd = TestUtility.Instance.RandomString(9, false);;
			mock.NgayCap = TestUtility.Instance.RandomString(10, false);;
			mock.NoiCap = TestUtility.Instance.RandomString(99, false);;
			mock.DoanDang = TestUtility.Instance.RandomBoolean();
			mock.NgayVaoDoanDang = TestUtility.Instance.RandomString(10, false);;
			mock.NgayKyHopDong = TestUtility.Instance.RandomDateTime();
			mock.NgayKetThucHopDong = TestUtility.Instance.RandomDateTime();
			mock.HinhAnh = new byte[] { TestUtility.Instance.RandomByte() };
			mock.DiaChi = TestUtility.Instance.RandomString(99, false);;
			mock.ThuongTru = TestUtility.Instance.RandomString(99, false);;
			mock.NoiLamViec = TestUtility.Instance.RandomString(49, false);;
			mock.Email = TestUtility.Instance.RandomString(24, false);;
			mock.DienThoai = TestUtility.Instance.RandomString(9, false);;
			mock.SoDiDong = TestUtility.Instance.RandomString(9, false);;
			mock.SoTaiKhoan = TestUtility.Instance.RandomString(24, false);;
			mock.TenNganHang = TestUtility.Instance.RandomString(49, false);;
			mock.MaSoThue = TestUtility.Instance.RandomString(9, false);;
			mock.ChiNhanh = TestUtility.Instance.RandomString(49, false);;
			mock.SoSoBaoHiem = TestUtility.Instance.RandomString(24, false);;
			mock.ThoiGianBatDau = TestUtility.Instance.RandomString(24, false);;
			mock.BacLuong = (decimal)TestUtility.Instance.RandomShort();
			mock.NgayHuongLuong = TestUtility.Instance.RandomString(9, false);;
			mock.NamLamViec = TestUtility.Instance.RandomString(10, false);;
			mock.ChuyenNganh = TestUtility.Instance.RandomString(499, false);;
			mock.MaHeSoThuLao = TestUtility.Instance.RandomString(9, false);;
			mock.Ngach = TestUtility.Instance.RandomString(9, false);;
			mock.SoHieuCongChuc = TestUtility.Instance.RandomString(9, false);;
			mock.Hrmid = Guid.NewGuid();
			mock.NoiCapBang = TestUtility.Instance.RandomString(249, false);;
			mock.KhoaTaiKhoan = TestUtility.Instance.RandomBoolean();
			mock.MaLoaiNhanVien = TestUtility.Instance.RandomNumber();
			mock.MaNgachCongChuc = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoChinhTri = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoSuPham = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoNgoaiNgu = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoTinHoc = TestUtility.Instance.RandomNumber();
			mock.MaTrinhDoQuanLyNhaNuoc = TestUtility.Instance.RandomNumber();
			mock.NguoiCapNhat = TestUtility.Instance.RandomString(126, false);;
			mock.NgayCapNhat = TestUtility.Instance.RandomString(24, false);;
			mock.KhoiKienThucGiangDay = TestUtility.Instance.RandomString(249, false);;
			mock.NganhDaoTao = TestUtility.Instance.RandomString(249, false);;
			mock.DonViGiangDay = TestUtility.Instance.RandomString(9, false);;
			mock.DaDuyet = TestUtility.Instance.RandomBoolean();
			
		}
		#endregion
    }
}
