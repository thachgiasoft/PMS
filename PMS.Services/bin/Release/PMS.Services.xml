<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMS.Services</name>
    </assembly>
    <members>
        <member name="T:PMS.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:PMS.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:PMS.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:PMS.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:PMS.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:PMS.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PMS.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:PMS.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:PMS.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:PMS.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:PMS.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:PMS.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:PMS.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:PMS.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:PMS.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:PMS.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:PMS.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewKhoaServiceBase">
            <summary>
             An object representation of the 'View_Khoa' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewKhoa.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewKhoa"/> class.
             </remarks>
        </member>
        <member name="T:PMS.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PMS.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PMS.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:PMS.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:PMS.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:PMS.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.OnProcessStarting(PMS.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.OnProcessEnded(PMS.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceViewBaseCore`1.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:PMS.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:PMS.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:PMS.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:PMS.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewKhoa"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.CreateViewKhoa(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewKhoa"/> instance.
            </summary>
            <param name="_thuTu"></param>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewKhoa} of <c>ViewKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewKhoa"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewKhoa"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewKhoa</c> objects.</returns>
        </member>
        <member name="T:PMS.Services.ViewGiangVienKhoaServiceBase">
            <summary>
             An object representation of the 'View_GiangVien_Khoa' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewGiangVienKhoa.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewGiangVienKhoa"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewGiangVienKhoa"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.CreateViewGiangVienKhoa(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewGiangVienKhoa"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_maBoMon"></param>
            <param name="_tenBoMon"></param>
            <param name="_maDonVi"></param>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewGiangVienKhoa} of <c>ViewGiangVienKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewGiangVienKhoa"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewGiangVienKhoa"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewGiangVienKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewGiangVienKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewGiangVienKhoa</c> objects.</returns>
        </member>
        <member name="T:PMS.Services.KhoiLuongKhacService">
            <summary>
            An component type implementation of the 'KhoiLuongKhac' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.KhoiLuongKhacServiceBase">
            <summary>
             An object representation of the 'KhoiLuongKhac' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the KhoiLuongKhac.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.KhoiLuongKhac"/> class.
             </remarks>
        </member>
        <member name="T:PMS.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PMS.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.OnProcessStarting(PMS.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.OnProcessEnded(PMS.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.BulkInsert(PMS.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,PMS.Data.DeepLoadType,System.Type[],PMS.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.DeepLoad(PMS.Entities.TList{`0},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.DeepSave(`0,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.DeepSave(`0,PMS.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:PMS.Services.ServiceBaseCore`2.DeepSave(PMS.Entities.TList{`0},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:PMS.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:PMS.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:PMS.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:PMS.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.KhoiLuongKhac"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.CreateKhoiLuongKhac(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.KhoiLuongKhac"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_loaiHocPhan"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_maLop"></param>
            <param name="_maMonHoc"></param>
            <param name="_maNhom"></param>
            <param name="_soTiet"></param>
            <param name="_soTuan"></param>
            <param name="_donGia"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_soLuong"></param>
            <param name="_tietQuyDoi"></param>
            <param name="_dienGiai"></param>
            <param name="_phanLoai">1. Khoi luong trung tam, 2. Khoi luong khac</param>
            <param name="_ngayTao"></param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetByMaGiangVien(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_KhoiLuongKhac_GiangVien key.
            	FK_KhoiLuongKhac_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a generic collection of KhoiLuongKhac objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetByMaGiangVien(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_KhoiLuongKhac_GiangVien key.
            	FK_KhoiLuongKhac_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Get(PMS.Entities.KhoiLuongKhacKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetByMaKhoiLuong(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_KhoiLuongKhac index.
            </summary>
            <param name="_maKhoiLuong"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoiLuongKhac"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetByMaKhoiLuong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_KhoiLuongKhac index.
            </summary>
            <param name="_maKhoiLuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoiLuongKhac"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.KhoiLuongKhac"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.KhoiLuongKhac"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{KhoiLuongKhac} of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KhoiLuongKhac</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Insert(PMS.Entities.KhoiLuongKhac)">
            <summary>
            public virtual method that Inserts a KhoiLuongKhac object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoiLuongKhac object to Insert.</param>
            <remarks>After Inserting into the datasource, the KhoiLuongKhac object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            KhoiLuongKhac entity = new KhoiLuongKhac();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KhoiLuongKhacService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Insert(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoiLuongKhac</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>KhoiLuongKhac</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of KhoiLuongKhac.
             <code><![CDATA[
             TList<KhoiLuongKhac> list = new TList<KhoiLuongKhac>();
             KhoiLuongKhac entity = new KhoiLuongKhac();
             entity.StringProperty = "foo";
             KhoiLuongKhac entity2 = new KhoiLuongKhac();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiLuongKhacService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Update(PMS.Entities.KhoiLuongKhac)">
            <summary>
            public virtual method that Updates a KhoiLuongKhac object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoiLuongKhac object to Update.</param>
            <remarks>After Updateing into the datasource, the KhoiLuongKhac object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            KhoiLuongKhac entity = KhoiLuongKhacService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KhoiLuongKhacService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Update(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoiLuongKhac</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>KhoiLuongKhac</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of KhoiLuongKhac.
             <code><![CDATA[
             TList<KhoiLuongKhac> list = new TList<KhoiLuongKhac>();
             KhoiLuongKhac entity = new KhoiLuongKhac();
             entity.StringProperty = "foo";
             KhoiLuongKhac entity2 = new KhoiLuongKhac();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiLuongKhacService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Save(PMS.Entities.KhoiLuongKhac)">
            <summary>
            public virtual method that Saves a KhoiLuongKhac object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoiLuongKhac object to Save.</param>
            <remarks>After Saveing into the datasource, the KhoiLuongKhac object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            KhoiLuongKhac entity = KhoiLuongKhacService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KhoiLuongKhacService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Save(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoiLuongKhac</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>KhoiLuongKhac</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of KhoiLuongKhac.
             <code><![CDATA[
             TList<KhoiLuongKhac> list = new TList<KhoiLuongKhac>();
             KhoiLuongKhac entity = new KhoiLuongKhac();
             entity.StringProperty = "foo";
             KhoiLuongKhac entity2 = new KhoiLuongKhac();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiLuongKhacService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Delete(PMS.Entities.KhoiLuongKhac)">
            <summary>
            public virtual method that Deletes a KhoiLuongKhac object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoiLuongKhac object to Delete.</param>
            <remarks>After Deleteing into the datasource, the KhoiLuongKhac object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            KhoiLuongKhac entity = KhoiLuongKhacService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KhoiLuongKhacService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Delete(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoiLuongKhac</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>KhoiLuongKhac</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of KhoiLuongKhac.
             <code><![CDATA[
             TList<KhoiLuongKhac> list = new TList<KhoiLuongKhac>();
             KhoiLuongKhac entity = new KhoiLuongKhac();
             entity.StringProperty = "foo";
             KhoiLuongKhac entity2 = new KhoiLuongKhac();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiLuongKhacService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Delete(PMS.Entities.KhoiLuongKhacKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maKhoiLuong
            </summary>
            <param name="_maKhoiLuong">KhoiLuongKhac pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetByNamHocHocKyPhanLoai(System.String,System.String,System.Int32)">
            <summary>
            This method wrap the 'cust_KhoiLuongKhac_GetByNamHocHocKyPhanLoai' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="phanLoai"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetByNamHocHocKyPhanLoai(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_KhoiLuongKhac_GetByNamHocHocKyPhanLoai' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="phanLoai"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetByNamHocHocKyPhanLoaiMaGiangVien(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_KhoiLuongKhac_GetByNamHocHocKyPhanLoaiMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="phanLoai"> A <c>System.Int32</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.GetByNamHocHocKyPhanLoaiMaGiangVien(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_KhoiLuongKhac_GetByNamHocHocKyPhanLoaiMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="phanLoai"> A <c>System.Int32</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoadByMaKhoiLuong(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.KhoiLuongKhac"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maKhoiLuong"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KhoiLuongKhac Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoiLuongKhac"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.KhoiLuongKhac)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">KhoiLuongKhac Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.KhoiLuongKhac)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.KhoiLuongKhac,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.KhoiLuongKhac)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">KhoiLuongKhac Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.KhoiLuongKhac,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.KhoiLuongKhac"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KhoiLuongKhac Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.KhoiLuongKhac)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.KhoiLuongKhac)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.KhoiLuongKhac"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepSave(PMS.Entities.KhoiLuongKhac)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.KhoiLuongKhac"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">KhoiLuongKhac Object</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepSave(PMS.Entities.KhoiLuongKhac,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the KhoiLuongKhac object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">KhoiLuongKhac Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>KhoiLuongKhac</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{KhoiLuongKhac} Object</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.KhoiLuongKhac},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">KhoiLuongKhac Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.KhoiLuongKhacServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.KhoiLuongKhacService.#ctor">
            <summary>
            Initializes a new instance of the KhoiLuongKhacService class.
            </summary>
        </member>
        <member name="T:PMS.Services.HoSoServiceBase">
            <summary>
             An object representation of the 'HoSo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HoSo.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.HoSo"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.HoSo"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.CreateHoSo(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.HoSo"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenHoSo"></param>
            <param name="_thuTu"></param>
            <param name="_trangThai"></param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Get(PMS.Entities.HoSoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HoSo index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HoSo index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetByMaHoSo(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HoSo index.
            </summary>
            <param name="_maHoSo"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetByMaHoSo(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HoSo index.
            </summary>
            <param name="_maHoSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.HoSo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.HoSo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HoSo} of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Insert(PMS.Entities.HoSo)">
            <summary>
            public virtual method that Inserts a HoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">HoSo object to Insert.</param>
            <remarks>After Inserting into the datasource, the HoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HoSo entity = new HoSo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HoSoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Insert(PMS.Entities.TList{PMS.Entities.HoSo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HoSo.
             <code><![CDATA[
             TList<HoSo> list = new TList<HoSo>();
             HoSo entity = new HoSo();
             entity.StringProperty = "foo";
             HoSo entity2 = new HoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HoSoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Update(PMS.Entities.HoSo)">
            <summary>
            public virtual method that Updates a HoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">HoSo object to Update.</param>
            <remarks>After Updateing into the datasource, the HoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HoSo entity = HoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HoSoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Update(PMS.Entities.TList{PMS.Entities.HoSo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HoSo.
             <code><![CDATA[
             TList<HoSo> list = new TList<HoSo>();
             HoSo entity = new HoSo();
             entity.StringProperty = "foo";
             HoSo entity2 = new HoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HoSoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Save(PMS.Entities.HoSo)">
            <summary>
            public virtual method that Saves a HoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">HoSo object to Save.</param>
            <remarks>After Saveing into the datasource, the HoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HoSo entity = HoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HoSoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Save(PMS.Entities.TList{PMS.Entities.HoSo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HoSo.
             <code><![CDATA[
             TList<HoSo> list = new TList<HoSo>();
             HoSo entity = new HoSo();
             entity.StringProperty = "foo";
             HoSo entity2 = new HoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HoSoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Delete(PMS.Entities.HoSo)">
            <summary>
            public virtual method that Deletes a HoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">HoSo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HoSo entity = HoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HoSoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Delete(PMS.Entities.TList{PMS.Entities.HoSo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HoSo.
             <code><![CDATA[
             TList<HoSo> list = new TList<HoSo>();
             HoSo entity = new HoSo();
             entity.StringProperty = "foo";
             HoSo entity2 = new HoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HoSoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Delete(PMS.Entities.HoSoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maHoSo
            </summary>
            <param name="_maHoSo">HoSo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetByMaGiangVienFromGiangVienHoSo(System.Int32)">
            <summary>
            	Gets HoSo objects from the datasource by MaGiangVien in the
            	GiangVien_HoSo table. Table HoSo is related to table GiangVien
            	through the (M:N) relationship defined in the GiangVien_HoSo table.
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a typed collection of HoSo objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.GetByMaGiangVienFromGiangVienHoSo(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets HoSo objects from the datasource by MaGiangVien in the
            	GiangVien_HoSo table. Table HoSo is related to table GiangVien
            	through the (M:N) relationship defined in the GiangVien_HoSo table.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of HoSo objects.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HoSo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HoSo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HoSo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepLoadByMaHoSo(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HoSo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maHoSo"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HoSo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HoSo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.HoSo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HoSo Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.HoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.HoSo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.HoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HoSo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.HoSo,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.HoSo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HoSo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HoSo})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.HoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HoSo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.HoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HoSo},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.HoSo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepSave(PMS.Entities.HoSo)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.HoSo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HoSo Object</param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepSave(PMS.Entities.HoSo,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HoSo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HoSo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HoSo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HoSo})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HoSo} Object</param>
        </member>
        <member name="M:PMS.Services.HoSoServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HoSo},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HoSo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.HoSoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.HeSoNgayService">
            <summary>
            An component type implementation of the 'HeSoNgay' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.HeSoNgayServiceBase">
            <summary>
             An object representation of the 'HeSoNgay' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HeSoNgay.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.HeSoNgay"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.HeSoNgay"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.CreateHeSoNgay(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.HeSoNgay"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenHeSo"></param>
            <param name="_heSo"></param>
            <param name="_tietBatDau"></param>
            <param name="_tietKetThuc"></param>
            <param name="_tietNghiaVu"></param>
            <param name="_trongGio"></param>
            <param name="_maBuoi"></param>
            <param name="_tenBuoi"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Get(PMS.Entities.HeSoNgayKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetByMaQuanLyMaBuoi(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HeSoNgayNghi index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_maBuoi"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoNgay"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetByMaQuanLyMaBuoi(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HeSoNgayNghi index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_maBuoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoNgay"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetByMaHeSo(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HeSoNgayNghi index.
            </summary>
            <param name="_maHeSo"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoNgay"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetByMaHeSo(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HeSoNgayNghi index.
            </summary>
            <param name="_maHeSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoNgay"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.HeSoNgay"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.HeSoNgay"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HeSoNgay} of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HeSoNgay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Insert(PMS.Entities.HeSoNgay)">
            <summary>
            public virtual method that Inserts a HeSoNgay object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoNgay object to Insert.</param>
            <remarks>After Inserting into the datasource, the HeSoNgay object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HeSoNgay entity = new HeSoNgay();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HeSoNgayService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Insert(PMS.Entities.TList{PMS.Entities.HeSoNgay})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoNgay</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HeSoNgay</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HeSoNgay.
             <code><![CDATA[
             TList<HeSoNgay> list = new TList<HeSoNgay>();
             HeSoNgay entity = new HeSoNgay();
             entity.StringProperty = "foo";
             HeSoNgay entity2 = new HeSoNgay();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoNgayService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Update(PMS.Entities.HeSoNgay)">
            <summary>
            public virtual method that Updates a HeSoNgay object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoNgay object to Update.</param>
            <remarks>After Updateing into the datasource, the HeSoNgay object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HeSoNgay entity = HeSoNgayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HeSoNgayService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Update(PMS.Entities.TList{PMS.Entities.HeSoNgay})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoNgay</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HeSoNgay</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HeSoNgay.
             <code><![CDATA[
             TList<HeSoNgay> list = new TList<HeSoNgay>();
             HeSoNgay entity = new HeSoNgay();
             entity.StringProperty = "foo";
             HeSoNgay entity2 = new HeSoNgay();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoNgayService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Save(PMS.Entities.HeSoNgay)">
            <summary>
            public virtual method that Saves a HeSoNgay object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoNgay object to Save.</param>
            <remarks>After Saveing into the datasource, the HeSoNgay object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HeSoNgay entity = HeSoNgayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HeSoNgayService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Save(PMS.Entities.TList{PMS.Entities.HeSoNgay})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoNgay</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HeSoNgay</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HeSoNgay.
             <code><![CDATA[
             TList<HeSoNgay> list = new TList<HeSoNgay>();
             HeSoNgay entity = new HeSoNgay();
             entity.StringProperty = "foo";
             HeSoNgay entity2 = new HeSoNgay();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoNgayService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Delete(PMS.Entities.HeSoNgay)">
            <summary>
            public virtual method that Deletes a HeSoNgay object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoNgay object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HeSoNgay object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HeSoNgay entity = HeSoNgayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HeSoNgayService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Delete(PMS.Entities.TList{PMS.Entities.HeSoNgay})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoNgay</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HeSoNgay</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HeSoNgay.
             <code><![CDATA[
             TList<HeSoNgay> list = new TList<HeSoNgay>();
             HeSoNgay entity = new HeSoNgay();
             entity.StringProperty = "foo";
             HeSoNgay entity2 = new HeSoNgay();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoNgayService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Delete(PMS.Entities.HeSoNgayKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maHeSo
            </summary>
            <param name="_maHeSo">HeSoNgay pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetByMaQuanLy(System.String)">
            <summary>
            This method wrap the 'cust_HeSoNgay_GetByMaQuanLy' stored procedure. 
            </summary>
            <param name="maQuanLy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_HeSoNgay_GetByMaQuanLy' stored procedure. 
            </summary>
            <param name="maQuanLy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepLoadByMaQuanLyMaBuoi(System.String,System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HeSoNgay"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_maBuoi"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoNgay Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoNgay"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepLoadByMaHeSo(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HeSoNgay"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maHeSo"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoNgay Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoNgay"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.HeSoNgay)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HeSoNgay Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.HeSoNgay)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.HeSoNgay,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.HeSoNgay)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HeSoNgay Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.HeSoNgay,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.HeSoNgay"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoNgay Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoNgay})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.HeSoNgay)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoNgay},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.HeSoNgay)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoNgay},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.HeSoNgay"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepSave(PMS.Entities.HeSoNgay)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.HeSoNgay"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HeSoNgay Object</param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepSave(PMS.Entities.HeSoNgay,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HeSoNgay object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HeSoNgay Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HeSoNgay</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HeSoNgay})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HeSoNgay} Object</param>
        </member>
        <member name="M:PMS.Services.HeSoNgayServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HeSoNgay},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HeSoNgay Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.HeSoNgayServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.HeSoNgayService.#ctor">
            <summary>
            Initializes a new instance of the HeSoNgayService class.
            </summary>
        </member>
        <member name="T:PMS.Services.DonViTinhServiceBase">
            <summary>
             An object representation of the 'DonViTinh' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DonViTinh.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.DonViTinh"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.DonViTinh"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.CreateDonViTinh(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.DonViTinh"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenDonVi"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Get(PMS.Entities.DonViTinhKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_DonViTinh index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.DonViTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_DonViTinh index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.DonViTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetByMaDonVi(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_DonViTinh index.
            </summary>
            <param name="_maDonVi"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.DonViTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetByMaDonVi(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_DonViTinh index.
            </summary>
            <param name="_maDonVi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.DonViTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.DonViTinh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.DonViTinh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DonViTinh} of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DonViTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Insert(PMS.Entities.DonViTinh)">
            <summary>
            public virtual method that Inserts a DonViTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">DonViTinh object to Insert.</param>
            <remarks>After Inserting into the datasource, the DonViTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DonViTinh entity = new DonViTinh();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DonViTinhService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Insert(PMS.Entities.TList{PMS.Entities.DonViTinh})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DonViTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DonViTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DonViTinh.
             <code><![CDATA[
             TList<DonViTinh> list = new TList<DonViTinh>();
             DonViTinh entity = new DonViTinh();
             entity.StringProperty = "foo";
             DonViTinh entity2 = new DonViTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DonViTinhService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Update(PMS.Entities.DonViTinh)">
            <summary>
            public virtual method that Updates a DonViTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">DonViTinh object to Update.</param>
            <remarks>After Updateing into the datasource, the DonViTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DonViTinh entity = DonViTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DonViTinhService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Update(PMS.Entities.TList{PMS.Entities.DonViTinh})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DonViTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DonViTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DonViTinh.
             <code><![CDATA[
             TList<DonViTinh> list = new TList<DonViTinh>();
             DonViTinh entity = new DonViTinh();
             entity.StringProperty = "foo";
             DonViTinh entity2 = new DonViTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DonViTinhService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Save(PMS.Entities.DonViTinh)">
            <summary>
            public virtual method that Saves a DonViTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">DonViTinh object to Save.</param>
            <remarks>After Saveing into the datasource, the DonViTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DonViTinh entity = DonViTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DonViTinhService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Save(PMS.Entities.TList{PMS.Entities.DonViTinh})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DonViTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DonViTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DonViTinh.
             <code><![CDATA[
             TList<DonViTinh> list = new TList<DonViTinh>();
             DonViTinh entity = new DonViTinh();
             entity.StringProperty = "foo";
             DonViTinh entity2 = new DonViTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DonViTinhService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Delete(PMS.Entities.DonViTinh)">
            <summary>
            public virtual method that Deletes a DonViTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">DonViTinh object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DonViTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DonViTinh entity = DonViTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DonViTinhService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Delete(PMS.Entities.TList{PMS.Entities.DonViTinh})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DonViTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DonViTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DonViTinh.
             <code><![CDATA[
             TList<DonViTinh> list = new TList<DonViTinh>();
             DonViTinh entity = new DonViTinh();
             entity.StringProperty = "foo";
             DonViTinh entity2 = new DonViTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DonViTinhService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Delete(PMS.Entities.DonViTinhKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maDonVi
            </summary>
            <param name="_maDonVi">DonViTinh pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.DonViTinh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DonViTinh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.DonViTinh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepLoadByMaDonVi(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.DonViTinh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maDonVi"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DonViTinh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.DonViTinh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.DonViTinh)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DonViTinh Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.DonViTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.DonViTinh,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.DonViTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DonViTinh Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.DonViTinh,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.DonViTinh"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DonViTinh Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.DonViTinh})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.DonViTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.DonViTinh},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.DonViTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.DonViTinh},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.DonViTinh"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepSave(PMS.Entities.DonViTinh)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.DonViTinh"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DonViTinh Object</param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepSave(PMS.Entities.DonViTinh,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DonViTinh object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DonViTinh Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DonViTinh</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.DonViTinh})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DonViTinh} Object</param>
        </member>
        <member name="M:PMS.Services.DonViTinhServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.DonViTinh},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DonViTinh Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.DonViTinhServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.HeSoHocKyService">
            <summary>
            An component type implementation of the 'HeSoHocKy' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.HeSoHocKyServiceBase">
            <summary>
             An object representation of the 'HeSoHocKy' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HeSoHocKy.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.HeSoHocKy"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.HeSoHocKy"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.CreateHeSoHocKy(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.HeSoHocKy"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenHocKy"></param>
            <param name="_heSo"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Get(PMS.Entities.HeSoHocKyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HeSoHocKy index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoHocKy"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HeSoHocKy index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoHocKy"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetByMaHocKy(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HeSoHocKy index.
            </summary>
            <param name="_maHocKy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoHocKy"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetByMaHocKy(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HeSoHocKy index.
            </summary>
            <param name="_maHocKy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoHocKy"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.HeSoHocKy"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.HeSoHocKy"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HeSoHocKy} of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HeSoHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Insert(PMS.Entities.HeSoHocKy)">
            <summary>
            public virtual method that Inserts a HeSoHocKy object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoHocKy object to Insert.</param>
            <remarks>After Inserting into the datasource, the HeSoHocKy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HeSoHocKy entity = new HeSoHocKy();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HeSoHocKyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Insert(PMS.Entities.TList{PMS.Entities.HeSoHocKy})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoHocKy</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HeSoHocKy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HeSoHocKy.
             <code><![CDATA[
             TList<HeSoHocKy> list = new TList<HeSoHocKy>();
             HeSoHocKy entity = new HeSoHocKy();
             entity.StringProperty = "foo";
             HeSoHocKy entity2 = new HeSoHocKy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoHocKyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Update(PMS.Entities.HeSoHocKy)">
            <summary>
            public virtual method that Updates a HeSoHocKy object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoHocKy object to Update.</param>
            <remarks>After Updateing into the datasource, the HeSoHocKy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HeSoHocKy entity = HeSoHocKyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HeSoHocKyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Update(PMS.Entities.TList{PMS.Entities.HeSoHocKy})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoHocKy</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HeSoHocKy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HeSoHocKy.
             <code><![CDATA[
             TList<HeSoHocKy> list = new TList<HeSoHocKy>();
             HeSoHocKy entity = new HeSoHocKy();
             entity.StringProperty = "foo";
             HeSoHocKy entity2 = new HeSoHocKy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoHocKyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Save(PMS.Entities.HeSoHocKy)">
            <summary>
            public virtual method that Saves a HeSoHocKy object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoHocKy object to Save.</param>
            <remarks>After Saveing into the datasource, the HeSoHocKy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HeSoHocKy entity = HeSoHocKyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HeSoHocKyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Save(PMS.Entities.TList{PMS.Entities.HeSoHocKy})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoHocKy</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HeSoHocKy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HeSoHocKy.
             <code><![CDATA[
             TList<HeSoHocKy> list = new TList<HeSoHocKy>();
             HeSoHocKy entity = new HeSoHocKy();
             entity.StringProperty = "foo";
             HeSoHocKy entity2 = new HeSoHocKy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoHocKyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Delete(PMS.Entities.HeSoHocKy)">
            <summary>
            public virtual method that Deletes a HeSoHocKy object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoHocKy object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HeSoHocKy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HeSoHocKy entity = HeSoHocKyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HeSoHocKyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Delete(PMS.Entities.TList{PMS.Entities.HeSoHocKy})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoHocKy</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HeSoHocKy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HeSoHocKy.
             <code><![CDATA[
             TList<HeSoHocKy> list = new TList<HeSoHocKy>();
             HeSoHocKy entity = new HeSoHocKy();
             entity.StringProperty = "foo";
             HeSoHocKy entity2 = new HeSoHocKy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoHocKyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Delete(PMS.Entities.HeSoHocKyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maHocKy
            </summary>
            <param name="_maHocKy">HeSoHocKy pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HeSoHocKy"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoHocKy Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoHocKy"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepLoadByMaHocKy(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HeSoHocKy"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maHocKy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoHocKy Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoHocKy"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.HeSoHocKy)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HeSoHocKy Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.HeSoHocKy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.HeSoHocKy,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.HeSoHocKy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HeSoHocKy Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.HeSoHocKy,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.HeSoHocKy"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoHocKy Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoHocKy})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.HeSoHocKy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoHocKy},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.HeSoHocKy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoHocKy},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.HeSoHocKy"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepSave(PMS.Entities.HeSoHocKy)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.HeSoHocKy"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HeSoHocKy Object</param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepSave(PMS.Entities.HeSoHocKy,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HeSoHocKy object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HeSoHocKy Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HeSoHocKy</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HeSoHocKy})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HeSoHocKy} Object</param>
        </member>
        <member name="M:PMS.Services.HeSoHocKyServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HeSoHocKy},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HeSoHocKy Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.HeSoHocKyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.HeSoHocKyService.#ctor">
            <summary>
            Initializes a new instance of the HeSoHocKyService class.
            </summary>
        </member>
        <member name="T:PMS.Services.GiangVienServiceBase">
            <summary>
             An object representation of the 'GiangVien' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the GiangVien.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.GiangVien"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.GiangVien"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.CreateGiangVien(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.GiangVien"/> instance.
            </summary>
            <param name="_maDanToc"></param>
            <param name="_maTonGiao"></param>
            <param name="_maDonVi"></param>
            <param name="_maHocHam"></param>
            <param name="_maHocVi"></param>
            <param name="_maLoaiGiangVien"></param>
            <param name="_maNguoiLap"></param>
            <param name="_matKhau"></param>
            <param name="_maTinhTrang"></param>
            <param name="_maQuanLy"></param>
            <param name="_ho"></param>
            <param name="_tenDem"></param>
            <param name="_ten"></param>
            <param name="_ngaySinh"></param>
            <param name="_gioiTinh"></param>
            <param name="_noiSinh"></param>
            <param name="_cmnd"></param>
            <param name="_ngayCap"></param>
            <param name="_noiCap"></param>
            <param name="_doanDang"></param>
            <param name="_ngayVaoDoanDang"></param>
            <param name="_ngayKyHopDong"></param>
            <param name="_ngayKetThucHopDong"></param>
            <param name="_hinhAnh"></param>
            <param name="_diaChi"></param>
            <param name="_thuongTru"></param>
            <param name="_noiLamViec"></param>
            <param name="_email"></param>
            <param name="_dienThoai"></param>
            <param name="_soDiDong"></param>
            <param name="_soTaiKhoan"></param>
            <param name="_tenNganHang"></param>
            <param name="_maSoThue"></param>
            <param name="_chiNhanh"></param>
            <param name="_soSoBaoHiem"></param>
            <param name="_thoiGianBatDau"></param>
            <param name="_bacLuong"></param>
            <param name="_ngayHuongLuong"></param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaHocHam(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_HocHam key.
            	FK_GiangVien_HocHam Description: 
            </summary>
            <param name="_maHocHam"></param>
            <returns>Returns a generic collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaHocHam(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_HocHam key.
            	FK_GiangVien_HocHam Description: 
            </summary>
            <param name="_maHocHam"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaHocVi(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_HocVi key.
            	FK_GiangVien_HocVi Description: 
            </summary>
            <param name="_maHocVi"></param>
            <returns>Returns a generic collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaHocVi(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_HocVi key.
            	FK_GiangVien_HocVi Description: 
            </summary>
            <param name="_maHocVi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaLoaiGiangVien(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_LoaiGiangVien key.
            	FK_GiangVien_LoaiGiangVien Description: 
            </summary>
            <param name="_maLoaiGiangVien"></param>
            <returns>Returns a generic collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaLoaiGiangVien(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_LoaiGiangVien key.
            	FK_GiangVien_LoaiGiangVien Description: 
            </summary>
            <param name="_maLoaiGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaNguoiLap(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_TaiKhoan key.
            	FK_GiangVien_TaiKhoan Description: 
            </summary>
            <param name="_maNguoiLap"></param>
            <returns>Returns a generic collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaNguoiLap(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_TaiKhoan key.
            	FK_GiangVien_TaiKhoan Description: 
            </summary>
            <param name="_maNguoiLap"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaTinhTrang(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_TinhTrang key.
            	FK_GiangVien_TinhTrang Description: 
            </summary>
            <param name="_maTinhTrang"></param>
            <returns>Returns a generic collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaTinhTrang(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_TinhTrang key.
            	FK_GiangVien_TinhTrang Description: 
            </summary>
            <param name="_maTinhTrang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Get(PMS.Entities.GiangVienKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_GiangVien index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_GiangVien index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaGiangVien(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GiangVien index.
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVien"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaGiangVien(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GiangVien index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVien"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.GiangVien"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.GiangVien"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{GiangVien} of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Insert(PMS.Entities.GiangVien)">
            <summary>
            public virtual method that Inserts a GiangVien object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVien object to Insert.</param>
            <remarks>After Inserting into the datasource, the GiangVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            GiangVien entity = new GiangVien();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GiangVienService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Insert(PMS.Entities.TList{PMS.Entities.GiangVien})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVien</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>GiangVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of GiangVien.
             <code><![CDATA[
             TList<GiangVien> list = new TList<GiangVien>();
             GiangVien entity = new GiangVien();
             entity.StringProperty = "foo";
             GiangVien entity2 = new GiangVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Update(PMS.Entities.GiangVien)">
            <summary>
            public virtual method that Updates a GiangVien object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVien object to Update.</param>
            <remarks>After Updateing into the datasource, the GiangVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            GiangVien entity = GiangVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GiangVienService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Update(PMS.Entities.TList{PMS.Entities.GiangVien})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVien</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>GiangVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of GiangVien.
             <code><![CDATA[
             TList<GiangVien> list = new TList<GiangVien>();
             GiangVien entity = new GiangVien();
             entity.StringProperty = "foo";
             GiangVien entity2 = new GiangVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Save(PMS.Entities.GiangVien)">
            <summary>
            public virtual method that Saves a GiangVien object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVien object to Save.</param>
            <remarks>After Saveing into the datasource, the GiangVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            GiangVien entity = GiangVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GiangVienService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Save(PMS.Entities.TList{PMS.Entities.GiangVien})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVien</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>GiangVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of GiangVien.
             <code><![CDATA[
             TList<GiangVien> list = new TList<GiangVien>();
             GiangVien entity = new GiangVien();
             entity.StringProperty = "foo";
             GiangVien entity2 = new GiangVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Delete(PMS.Entities.GiangVien)">
            <summary>
            public virtual method that Deletes a GiangVien object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVien object to Delete.</param>
            <remarks>After Deleteing into the datasource, the GiangVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            GiangVien entity = GiangVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GiangVienService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Delete(PMS.Entities.TList{PMS.Entities.GiangVien})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVien</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>GiangVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of GiangVien.
             <code><![CDATA[
             TList<GiangVien> list = new TList<GiangVien>();
             GiangVien entity = new GiangVien();
             entity.StringProperty = "foo";
             GiangVien entity2 = new GiangVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Delete(PMS.Entities.GiangVienKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maGiangVien
            </summary>
            <param name="_maGiangVien">GiangVien pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaChucVuFromGiangVienChucVu(System.Int32)">
            <summary>
            	Gets GiangVien objects from the datasource by MaChucVu in the
            	GiangVien_ChucVu table. Table GiangVien is related to table ChucVu
            	through the (M:N) relationship defined in the GiangVien_ChucVu table.
            </summary>
            <param name="_maChucVu"></param>
            <returns>Returns a typed collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaChucVuFromGiangVienChucVu(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets GiangVien objects from the datasource by MaChucVu in the
            	GiangVien_ChucVu table. Table GiangVien is related to table ChucVu
            	through the (M:N) relationship defined in the GiangVien_ChucVu table.
            </summary>
            <param name="_maChucVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaHoSoFromGiangVienHoSo(System.Int32)">
            <summary>
            	Gets GiangVien objects from the datasource by MaHoSo in the
            	GiangVien_HoSo table. Table GiangVien is related to table HoSo
            	through the (M:N) relationship defined in the GiangVien_HoSo table.
            </summary>
            <param name="_maHoSo"></param>
            <returns>Returns a typed collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaHoSoFromGiangVienHoSo(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets GiangVien objects from the datasource by MaHoSo in the
            	GiangVien_HoSo table. Table GiangVien is related to table HoSo
            	through the (M:N) relationship defined in the GiangVien_HoSo table.
            </summary>
            <param name="_maHoSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of GiangVien objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaDonVi(System.String)">
            <summary>
            This method wrap the 'cust_GiangVien_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetByMaDonVi(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_GiangVien_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetMaDonViMaTinhTrang(System.String,System.Int32)">
            <summary>
            This method wrap the 'cust_GiangVien_GetMaDonViMaTinhTrang' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="maTinhTrang"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.GetMaDonViMaTinhTrang(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_GiangVien_GetMaDonViMaTinhTrang' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="maTinhTrang"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVien Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepLoadByMaGiangVien(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.GiangVien"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVien Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVien"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.GiangVien)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">GiangVien Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.GiangVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.GiangVien,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.GiangVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">GiangVien Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.GiangVien,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.GiangVien"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVien Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVien})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.GiangVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVien},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.GiangVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVien},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.GiangVien"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepSave(PMS.Entities.GiangVien)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.GiangVien"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">GiangVien Object</param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepSave(PMS.Entities.GiangVien,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the GiangVien object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">GiangVien Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>GiangVien</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.GiangVien})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{GiangVien} Object</param>
        </member>
        <member name="M:PMS.Services.GiangVienServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.GiangVien},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">GiangVien Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.GiangVienServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.HocViServiceBase">
            <summary>
             An object representation of the 'HocVi' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HocVi.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.HocVi"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.HocVi"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.CreateHocVi(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.HocVi"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenHocVi"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Get(PMS.Entities.HocViKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HocVi index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocVi"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HocVi index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocVi"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetByMaHocVi(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HocVi index.
            </summary>
            <param name="_maHocVi"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocVi"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetByMaHocVi(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HocVi index.
            </summary>
            <param name="_maHocVi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocVi"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.HocVi"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.HocVi"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HocVi} of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HocVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Insert(PMS.Entities.HocVi)">
            <summary>
            public virtual method that Inserts a HocVi object into the datasource using a transaction.
            </summary>
            <param name="entity">HocVi object to Insert.</param>
            <remarks>After Inserting into the datasource, the HocVi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HocVi entity = new HocVi();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HocViService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Insert(PMS.Entities.TList{PMS.Entities.HocVi})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocVi</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HocVi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HocVi.
             <code><![CDATA[
             TList<HocVi> list = new TList<HocVi>();
             HocVi entity = new HocVi();
             entity.StringProperty = "foo";
             HocVi entity2 = new HocVi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocViService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Update(PMS.Entities.HocVi)">
            <summary>
            public virtual method that Updates a HocVi object into the datasource using a transaction.
            </summary>
            <param name="entity">HocVi object to Update.</param>
            <remarks>After Updateing into the datasource, the HocVi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HocVi entity = HocViService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HocViService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Update(PMS.Entities.TList{PMS.Entities.HocVi})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocVi</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HocVi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HocVi.
             <code><![CDATA[
             TList<HocVi> list = new TList<HocVi>();
             HocVi entity = new HocVi();
             entity.StringProperty = "foo";
             HocVi entity2 = new HocVi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocViService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Save(PMS.Entities.HocVi)">
            <summary>
            public virtual method that Saves a HocVi object into the datasource using a transaction.
            </summary>
            <param name="entity">HocVi object to Save.</param>
            <remarks>After Saveing into the datasource, the HocVi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HocVi entity = HocViService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HocViService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Save(PMS.Entities.TList{PMS.Entities.HocVi})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocVi</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HocVi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HocVi.
             <code><![CDATA[
             TList<HocVi> list = new TList<HocVi>();
             HocVi entity = new HocVi();
             entity.StringProperty = "foo";
             HocVi entity2 = new HocVi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocViService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Delete(PMS.Entities.HocVi)">
            <summary>
            public virtual method that Deletes a HocVi object into the datasource using a transaction.
            </summary>
            <param name="entity">HocVi object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HocVi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HocVi entity = HocViService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HocViService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Delete(PMS.Entities.TList{PMS.Entities.HocVi})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocVi</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HocVi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HocVi.
             <code><![CDATA[
             TList<HocVi> list = new TList<HocVi>();
             HocVi entity = new HocVi();
             entity.StringProperty = "foo";
             HocVi entity2 = new HocVi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocViService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Delete(PMS.Entities.HocViKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maHocVi
            </summary>
            <param name="_maHocVi">HocVi pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HocVi"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocVi Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocVi"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepLoadByMaHocVi(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HocVi"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maHocVi"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocVi Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocVi"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.HocVi)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HocVi Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.HocVi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.HocVi,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.HocVi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HocVi Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.HocVi,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.HocVi"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocVi Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HocVi})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.HocVi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HocVi},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.HocVi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HocVi},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.HocVi"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepSave(PMS.Entities.HocVi)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.HocVi"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HocVi Object</param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepSave(PMS.Entities.HocVi,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HocVi object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HocVi Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HocVi</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HocVi})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HocVi} Object</param>
        </member>
        <member name="M:PMS.Services.HocViServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HocVi},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HocVi Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.HocViServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewLopService">
            <summary>
             An component type implementation of the 'View_Lop' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewLopServiceBase">
            <summary>
             An object representation of the 'View_Lop' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewLop.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewLop"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewLop"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.CreateViewLop(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewLop"/> instance.
            </summary>
            <param name="_maBacDaoTao"></param>
            <param name="_maLoaiHinh"></param>
            <param name="_maBacLoaiHinh"></param>
            <param name="_maKhoaHoc"></param>
            <param name="_maLop"></param>
            <param name="_tenLop"></param>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewLop} of <c>ViewLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewLop"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewLop"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.DaiDien_GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_Lop_DaiDien_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.DaiDien_GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_Lop_DaiDien_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.GetByMaDonVi(System.String)">
            <summary>
            This method wrap the 'cust_View_Lop_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopServiceBase.GetByMaDonVi(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_Lop_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopService.#ctor">
            <summary>
            Initializes a new instance of the ViewLopService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewDanTocServiceBase">
            <summary>
             An object representation of the 'View_DanToc' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewDanToc.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewDanToc"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewDanToc"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.CreateViewDanToc(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewDanToc"/> instance.
            </summary>
            <param name="_maDanToc"></param>
            <param name="_tenDanToc"></param>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewDanToc} of <c>ViewDanToc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewDanToc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewDanToc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewDanToc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewDanToc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewDanToc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewDanToc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewDanToc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDanTocServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewDanToc</c> objects.</returns>
        </member>
        <member name="T:PMS.Services.ReportTemplateServiceBase">
            <summary>
             An object representation of the 'ReportTemplate' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ReportTemplate.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ReportTemplate"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ReportTemplate"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.CreateReportTemplate(System.String,System.Nullable{System.Int32},System.Byte[],System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ReportTemplate"/> instance.
            </summary>
            <param name="_reportId"></param>
            <param name="_userId"></param>
            <param name="_duLieu"></param>
            <param name="_ngayTao"></param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetByUserId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_ReportTemplate_TaiKhoan key.
            	FK_ReportTemplate_TaiKhoan Description: 
            </summary>
            <param name="_userId"></param>
            <returns>Returns a generic collection of ReportTemplate objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_ReportTemplate_TaiKhoan key.
            	FK_ReportTemplate_TaiKhoan Description: 
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Get(PMS.Entities.ReportTemplateKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetByReportId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_ReportTemplate index.
            </summary>
            <param name="_reportId"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ReportTemplate"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetByReportId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_ReportTemplate index.
            </summary>
            <param name="_reportId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ReportTemplate"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ReportTemplate"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ReportTemplate"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ReportTemplate} of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ReportTemplate</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Insert(PMS.Entities.ReportTemplate)">
            <summary>
            public virtual method that Inserts a ReportTemplate object into the datasource using a transaction.
            </summary>
            <param name="entity">ReportTemplate object to Insert.</param>
            <remarks>After Inserting into the datasource, the ReportTemplate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ReportTemplate entity = new ReportTemplate();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReportTemplateService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Insert(PMS.Entities.TList{PMS.Entities.ReportTemplate})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReportTemplate</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ReportTemplate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ReportTemplate.
             <code><![CDATA[
             TList<ReportTemplate> list = new TList<ReportTemplate>();
             ReportTemplate entity = new ReportTemplate();
             entity.StringProperty = "foo";
             ReportTemplate entity2 = new ReportTemplate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReportTemplateService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Update(PMS.Entities.ReportTemplate)">
            <summary>
            public virtual method that Updates a ReportTemplate object into the datasource using a transaction.
            </summary>
            <param name="entity">ReportTemplate object to Update.</param>
            <remarks>After Updateing into the datasource, the ReportTemplate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ReportTemplate entity = ReportTemplateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReportTemplateService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Update(PMS.Entities.TList{PMS.Entities.ReportTemplate})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReportTemplate</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ReportTemplate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ReportTemplate.
             <code><![CDATA[
             TList<ReportTemplate> list = new TList<ReportTemplate>();
             ReportTemplate entity = new ReportTemplate();
             entity.StringProperty = "foo";
             ReportTemplate entity2 = new ReportTemplate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReportTemplateService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Save(PMS.Entities.ReportTemplate)">
            <summary>
            public virtual method that Saves a ReportTemplate object into the datasource using a transaction.
            </summary>
            <param name="entity">ReportTemplate object to Save.</param>
            <remarks>After Saveing into the datasource, the ReportTemplate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ReportTemplate entity = ReportTemplateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ReportTemplateService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Save(PMS.Entities.TList{PMS.Entities.ReportTemplate})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReportTemplate</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ReportTemplate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ReportTemplate.
             <code><![CDATA[
             TList<ReportTemplate> list = new TList<ReportTemplate>();
             ReportTemplate entity = new ReportTemplate();
             entity.StringProperty = "foo";
             ReportTemplate entity2 = new ReportTemplate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReportTemplateService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Delete(PMS.Entities.ReportTemplate)">
            <summary>
            public virtual method that Deletes a ReportTemplate object into the datasource using a transaction.
            </summary>
            <param name="entity">ReportTemplate object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ReportTemplate object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ReportTemplate entity = ReportTemplateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReportTemplateService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Delete(PMS.Entities.TList{PMS.Entities.ReportTemplate})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReportTemplate</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ReportTemplate</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ReportTemplate.
             <code><![CDATA[
             TList<ReportTemplate> list = new TList<ReportTemplate>();
             ReportTemplate entity = new ReportTemplate();
             entity.StringProperty = "foo";
             ReportTemplate entity2 = new ReportTemplate();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReportTemplateService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Delete(PMS.Entities.ReportTemplateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _reportId
            </summary>
            <param name="_reportId">ReportTemplate pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepLoadByReportId(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.ReportTemplate"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_reportId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ReportTemplate Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ReportTemplate"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.ReportTemplate)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ReportTemplate Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.ReportTemplate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.ReportTemplate,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.ReportTemplate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ReportTemplate Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.ReportTemplate,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.ReportTemplate"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ReportTemplate Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ReportTemplate})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.ReportTemplate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ReportTemplate},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.ReportTemplate)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ReportTemplate},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.ReportTemplate"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepSave(PMS.Entities.ReportTemplate)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.ReportTemplate"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ReportTemplate Object</param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepSave(PMS.Entities.ReportTemplate,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ReportTemplate object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ReportTemplate Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ReportTemplate</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ReportTemplate})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ReportTemplate} Object</param>
        </member>
        <member name="M:PMS.Services.ReportTemplateServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ReportTemplate},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ReportTemplate Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.ReportTemplateServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.HoSoService">
            <summary>
            An component type implementation of the 'HoSo' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.HoSoService.#ctor">
            <summary>
            Initializes a new instance of the HoSoService class.
            </summary>
        </member>
        <member name="T:PMS.Services.GiangVienChuyenMonService">
            <summary>
            An component type implementation of the 'GiangVien_ChuyenMon' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.GiangVienChuyenMonServiceBase">
            <summary>
             An object representation of the 'GiangVien_ChuyenMon' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the GiangVienChuyenMon.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.GiangVienChuyenMon"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.CreateGiangVienChuyenMon(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.GiangVienChuyenMon"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maMonHoc"></param>
            <param name="_ngayPhanCong"></param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetByMaGiangVien(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_ChuyenMon_GiangVien key.
            	FK_GiangVien_ChuyenMon_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a generic collection of GiangVienChuyenMon objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetByMaGiangVien(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_ChuyenMon_GiangVien key.
            	FK_GiangVien_ChuyenMon_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Get(PMS.Entities.GiangVienChuyenMonKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetByMaGiangVienMaMonHoc(System.Nullable{System.Int32},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_GiangVien_ChuyenMon index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maMonHoc"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetByMaGiangVienMaMonHoc(System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_GiangVien_ChuyenMon index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maMonHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetByMaPhanCong(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GiangVien_ChuyenMon index.
            </summary>
            <param name="_maPhanCong"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetByMaPhanCong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GiangVien_ChuyenMon index.
            </summary>
            <param name="_maPhanCong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.GiangVienChuyenMon"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.GiangVienChuyenMon"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{GiangVienChuyenMon} of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiangVienChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Insert(PMS.Entities.GiangVienChuyenMon)">
            <summary>
            public virtual method that Inserts a GiangVienChuyenMon object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienChuyenMon object to Insert.</param>
            <remarks>After Inserting into the datasource, the GiangVienChuyenMon object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            GiangVienChuyenMon entity = new GiangVienChuyenMon();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GiangVienChuyenMonService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Insert(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienChuyenMon</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>GiangVienChuyenMon</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of GiangVienChuyenMon.
             <code><![CDATA[
             TList<GiangVienChuyenMon> list = new TList<GiangVienChuyenMon>();
             GiangVienChuyenMon entity = new GiangVienChuyenMon();
             entity.StringProperty = "foo";
             GiangVienChuyenMon entity2 = new GiangVienChuyenMon();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienChuyenMonService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Update(PMS.Entities.GiangVienChuyenMon)">
            <summary>
            public virtual method that Updates a GiangVienChuyenMon object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienChuyenMon object to Update.</param>
            <remarks>After Updateing into the datasource, the GiangVienChuyenMon object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            GiangVienChuyenMon entity = GiangVienChuyenMonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GiangVienChuyenMonService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Update(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienChuyenMon</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>GiangVienChuyenMon</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of GiangVienChuyenMon.
             <code><![CDATA[
             TList<GiangVienChuyenMon> list = new TList<GiangVienChuyenMon>();
             GiangVienChuyenMon entity = new GiangVienChuyenMon();
             entity.StringProperty = "foo";
             GiangVienChuyenMon entity2 = new GiangVienChuyenMon();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienChuyenMonService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Save(PMS.Entities.GiangVienChuyenMon)">
            <summary>
            public virtual method that Saves a GiangVienChuyenMon object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienChuyenMon object to Save.</param>
            <remarks>After Saveing into the datasource, the GiangVienChuyenMon object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            GiangVienChuyenMon entity = GiangVienChuyenMonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GiangVienChuyenMonService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Save(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienChuyenMon</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>GiangVienChuyenMon</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of GiangVienChuyenMon.
             <code><![CDATA[
             TList<GiangVienChuyenMon> list = new TList<GiangVienChuyenMon>();
             GiangVienChuyenMon entity = new GiangVienChuyenMon();
             entity.StringProperty = "foo";
             GiangVienChuyenMon entity2 = new GiangVienChuyenMon();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienChuyenMonService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Delete(PMS.Entities.GiangVienChuyenMon)">
            <summary>
            public virtual method that Deletes a GiangVienChuyenMon object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienChuyenMon object to Delete.</param>
            <remarks>After Deleteing into the datasource, the GiangVienChuyenMon object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            GiangVienChuyenMon entity = GiangVienChuyenMonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GiangVienChuyenMonService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Delete(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienChuyenMon</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>GiangVienChuyenMon</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of GiangVienChuyenMon.
             <code><![CDATA[
             TList<GiangVienChuyenMon> list = new TList<GiangVienChuyenMon>();
             GiangVienChuyenMon entity = new GiangVienChuyenMon();
             entity.StringProperty = "foo";
             GiangVienChuyenMon entity2 = new GiangVienChuyenMon();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienChuyenMonService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Delete(PMS.Entities.GiangVienChuyenMonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maPhanCong
            </summary>
            <param name="_maPhanCong">GiangVienChuyenMon pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoadByMaGiangVienMaMonHoc(System.Nullable{System.Int32},System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.GiangVienChuyenMon"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maMonHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVienChuyenMon Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoadByMaPhanCong(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.GiangVienChuyenMon"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maPhanCong"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVienChuyenMon Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.GiangVienChuyenMon)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">GiangVienChuyenMon Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.GiangVienChuyenMon)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.GiangVienChuyenMon,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.GiangVienChuyenMon)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">GiangVienChuyenMon Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.GiangVienChuyenMon,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.GiangVienChuyenMon"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVienChuyenMon Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.GiangVienChuyenMon)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.GiangVienChuyenMon)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.GiangVienChuyenMon"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepSave(PMS.Entities.GiangVienChuyenMon)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.GiangVienChuyenMon"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">GiangVienChuyenMon Object</param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepSave(PMS.Entities.GiangVienChuyenMon,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the GiangVienChuyenMon object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">GiangVienChuyenMon Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>GiangVienChuyenMon</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{GiangVienChuyenMon} Object</param>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.GiangVienChuyenMon},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">GiangVienChuyenMon Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.GiangVienChuyenMonServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.GiangVienChuyenMonService.#ctor">
            <summary>
            Initializes a new instance of the GiangVienChuyenMonService class.
            </summary>
        </member>
        <member name="T:PMS.Services.KhoiLuongGiangDayService">
            <summary>
            An component type implementation of the 'KhoiLuongGiangDay' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.KhoiLuongGiangDayServiceBase">
            <summary>
             An object representation of the 'KhoiLuongGiangDay' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the KhoiLuongGiangDay.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.CreateKhoiLuongGiangDay(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> instance.
            </summary>
            <param name="_maKetQua"></param>
            <param name="_maToaNha"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_maLop"></param>
            <param name="_maNhom"></param>
            <param name="_loaiHocPhan"></param>
            <param name="_phanLoai"></param>
            <param name="_maMonHoc"></param>
            <param name="_dienGiai"></param>
            <param name="_soTiet"></param>
            <param name="_soTinChi"></param>
            <param name="_siSoLop"></param>
            <param name="_soNhom"></param>
            <param name="_maDiaDiem"></param>
            <param name="_ngayBatDau"></param>
            <param name="_ngayKetThuc"></param>
            <param name="_chatLuongCao"></param>
            <param name="_ngoaiGio"></param>
            <param name="_trongGio"></param>
            <param name="_heSoLopDong"></param>
            <param name="_heSoCoSo"></param>
            <param name="_heSoHocKy"></param>
            <param name="_heSoThanhPhan"></param>
            <param name="_heSoTrongGio"></param>
            <param name="_heSoNgoaiGio"></param>
            <param name="_tietQuyDoi"></param>
            <param name="_loaiHocKy"></param>
            <param name="_thoiKhoaBieu"></param>
            <param name="_ngayTao"></param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetByMaKetQua(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_KhoiLuongGiangDay_KetQuaTinh key.
            	FK_KhoiLuongGiangDay_KetQuaTinh Description: 
            </summary>
            <param name="_maKetQua"></param>
            <returns>Returns a generic collection of KhoiLuongGiangDay objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetByMaKetQua(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_KhoiLuongGiangDay_KetQuaTinh key.
            	FK_KhoiLuongGiangDay_KetQuaTinh Description: 
            </summary>
            <param name="_maKetQua"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Get(PMS.Entities.KhoiLuongGiangDayKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetByMaKhoiLuong(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_KhoiLuongGiangDay index.
            </summary>
            <param name="_maKhoiLuong"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetByMaKhoiLuong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_KhoiLuongGiangDay index.
            </summary>
            <param name="_maKhoiLuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{KhoiLuongGiangDay} of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Insert(PMS.Entities.KhoiLuongGiangDay)">
            <summary>
            public virtual method that Inserts a KhoiLuongGiangDay object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoiLuongGiangDay object to Insert.</param>
            <remarks>After Inserting into the datasource, the KhoiLuongGiangDay object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            KhoiLuongGiangDay entity = new KhoiLuongGiangDay();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KhoiLuongGiangDayService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Insert(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoiLuongGiangDay</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>KhoiLuongGiangDay</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of KhoiLuongGiangDay.
             <code><![CDATA[
             TList<KhoiLuongGiangDay> list = new TList<KhoiLuongGiangDay>();
             KhoiLuongGiangDay entity = new KhoiLuongGiangDay();
             entity.StringProperty = "foo";
             KhoiLuongGiangDay entity2 = new KhoiLuongGiangDay();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiLuongGiangDayService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Update(PMS.Entities.KhoiLuongGiangDay)">
            <summary>
            public virtual method that Updates a KhoiLuongGiangDay object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoiLuongGiangDay object to Update.</param>
            <remarks>After Updateing into the datasource, the KhoiLuongGiangDay object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            KhoiLuongGiangDay entity = KhoiLuongGiangDayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KhoiLuongGiangDayService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Update(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoiLuongGiangDay</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>KhoiLuongGiangDay</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of KhoiLuongGiangDay.
             <code><![CDATA[
             TList<KhoiLuongGiangDay> list = new TList<KhoiLuongGiangDay>();
             KhoiLuongGiangDay entity = new KhoiLuongGiangDay();
             entity.StringProperty = "foo";
             KhoiLuongGiangDay entity2 = new KhoiLuongGiangDay();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiLuongGiangDayService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Save(PMS.Entities.KhoiLuongGiangDay)">
            <summary>
            public virtual method that Saves a KhoiLuongGiangDay object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoiLuongGiangDay object to Save.</param>
            <remarks>After Saveing into the datasource, the KhoiLuongGiangDay object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            KhoiLuongGiangDay entity = KhoiLuongGiangDayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KhoiLuongGiangDayService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Save(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoiLuongGiangDay</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>KhoiLuongGiangDay</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of KhoiLuongGiangDay.
             <code><![CDATA[
             TList<KhoiLuongGiangDay> list = new TList<KhoiLuongGiangDay>();
             KhoiLuongGiangDay entity = new KhoiLuongGiangDay();
             entity.StringProperty = "foo";
             KhoiLuongGiangDay entity2 = new KhoiLuongGiangDay();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiLuongGiangDayService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Delete(PMS.Entities.KhoiLuongGiangDay)">
            <summary>
            public virtual method that Deletes a KhoiLuongGiangDay object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoiLuongGiangDay object to Delete.</param>
            <remarks>After Deleteing into the datasource, the KhoiLuongGiangDay object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            KhoiLuongGiangDay entity = KhoiLuongGiangDayService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KhoiLuongGiangDayService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Delete(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoiLuongGiangDay</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>KhoiLuongGiangDay</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of KhoiLuongGiangDay.
             <code><![CDATA[
             TList<KhoiLuongGiangDay> list = new TList<KhoiLuongGiangDay>();
             KhoiLuongGiangDay entity = new KhoiLuongGiangDay();
             entity.StringProperty = "foo";
             KhoiLuongGiangDay entity2 = new KhoiLuongGiangDay();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiLuongGiangDayService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Delete(PMS.Entities.KhoiLuongGiangDayKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maKhoiLuong
            </summary>
            <param name="_maKhoiLuong">KhoiLuongGiangDay pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeleteByMaKetQua(System.Int32)">
            <summary>
            This method wrap the 'cust_KhoiLuongGiangDay_DeleteByMaKetQua' stored procedure. 
            </summary>
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeleteByMaKetQua(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_KhoiLuongGiangDay_DeleteByMaKetQua' stored procedure. 
            </summary>
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetByMaKetQuaMaLopHocPhan(System.Int32,System.String)">
            <summary>
            This method wrap the 'cust_KhoiLuongGiangDay_GetByMaKetQuaMaLopHocPhan' stored procedure. 
            </summary>
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetByMaKetQuaMaLopHocPhan(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_KhoiLuongGiangDay_GetByMaKetQuaMaLopHocPhan' stored procedure. 
            </summary>
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetByLoaiHocPhanNamHocHocKy(System.String,System.String,System.String)">
            <summary>
            This method wrap the 'cust_KhoiLuongGiangDay_GetByLoaiHocPhanNamHocHocKy' stored procedure. 
            </summary>
            <param name="loaiHocPhan"> A <c>System.String</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.GetByLoaiHocPhanNamHocHocKy(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_KhoiLuongGiangDay_GetByLoaiHocPhanNamHocHocKy' stored procedure. 
            </summary>
            <param name="loaiHocPhan"> A <c>System.String</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoadByMaKhoiLuong(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maKhoiLuong"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KhoiLuongGiangDay Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.KhoiLuongGiangDay)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">KhoiLuongGiangDay Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.KhoiLuongGiangDay)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.KhoiLuongGiangDay,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.KhoiLuongGiangDay)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">KhoiLuongGiangDay Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.KhoiLuongGiangDay,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KhoiLuongGiangDay Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.KhoiLuongGiangDay)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.KhoiLuongGiangDay)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.KhoiLuongGiangDay"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepSave(PMS.Entities.KhoiLuongGiangDay)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.KhoiLuongGiangDay"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">KhoiLuongGiangDay Object</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepSave(PMS.Entities.KhoiLuongGiangDay,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the KhoiLuongGiangDay object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">KhoiLuongGiangDay Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>KhoiLuongGiangDay</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{KhoiLuongGiangDay} Object</param>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.KhoiLuongGiangDay},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">KhoiLuongGiangDay Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.KhoiLuongGiangDayServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.KhoiLuongGiangDayService.#ctor">
            <summary>
            Initializes a new instance of the KhoiLuongGiangDayService class.
            </summary>
        </member>
        <member name="T:PMS.Services.TinhTrangServiceBase">
            <summary>
             An object representation of the 'TinhTrang' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TinhTrang.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.TinhTrang"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.TinhTrang"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.CreateTinhTrang(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.TinhTrang"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenTinhTrang"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Get(PMS.Entities.TinhTrangKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_TinhTrang index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TinhTrang"/> class.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_TinhTrang index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TinhTrang"/> class.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetByMaTinhTrang(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_TinhTrang index.
            </summary>
            <param name="_maTinhTrang"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TinhTrang"/> class.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetByMaTinhTrang(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_TinhTrang index.
            </summary>
            <param name="_maTinhTrang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TinhTrang"/> class.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.TinhTrang"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.TinhTrang"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TinhTrang} of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TinhTrang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Insert(PMS.Entities.TinhTrang)">
            <summary>
            public virtual method that Inserts a TinhTrang object into the datasource using a transaction.
            </summary>
            <param name="entity">TinhTrang object to Insert.</param>
            <remarks>After Inserting into the datasource, the TinhTrang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TinhTrang entity = new TinhTrang();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TinhTrangService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Insert(PMS.Entities.TList{PMS.Entities.TinhTrang})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TinhTrang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TinhTrang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TinhTrang.
             <code><![CDATA[
             TList<TinhTrang> list = new TList<TinhTrang>();
             TinhTrang entity = new TinhTrang();
             entity.StringProperty = "foo";
             TinhTrang entity2 = new TinhTrang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TinhTrangService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Update(PMS.Entities.TinhTrang)">
            <summary>
            public virtual method that Updates a TinhTrang object into the datasource using a transaction.
            </summary>
            <param name="entity">TinhTrang object to Update.</param>
            <remarks>After Updateing into the datasource, the TinhTrang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TinhTrang entity = TinhTrangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TinhTrangService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Update(PMS.Entities.TList{PMS.Entities.TinhTrang})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TinhTrang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TinhTrang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TinhTrang.
             <code><![CDATA[
             TList<TinhTrang> list = new TList<TinhTrang>();
             TinhTrang entity = new TinhTrang();
             entity.StringProperty = "foo";
             TinhTrang entity2 = new TinhTrang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TinhTrangService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Save(PMS.Entities.TinhTrang)">
            <summary>
            public virtual method that Saves a TinhTrang object into the datasource using a transaction.
            </summary>
            <param name="entity">TinhTrang object to Save.</param>
            <remarks>After Saveing into the datasource, the TinhTrang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TinhTrang entity = TinhTrangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TinhTrangService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Save(PMS.Entities.TList{PMS.Entities.TinhTrang})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TinhTrang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TinhTrang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TinhTrang.
             <code><![CDATA[
             TList<TinhTrang> list = new TList<TinhTrang>();
             TinhTrang entity = new TinhTrang();
             entity.StringProperty = "foo";
             TinhTrang entity2 = new TinhTrang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TinhTrangService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Delete(PMS.Entities.TinhTrang)">
            <summary>
            public virtual method that Deletes a TinhTrang object into the datasource using a transaction.
            </summary>
            <param name="entity">TinhTrang object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TinhTrang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TinhTrang entity = TinhTrangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TinhTrangService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Delete(PMS.Entities.TList{PMS.Entities.TinhTrang})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TinhTrang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TinhTrang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TinhTrang.
             <code><![CDATA[
             TList<TinhTrang> list = new TList<TinhTrang>();
             TinhTrang entity = new TinhTrang();
             entity.StringProperty = "foo";
             TinhTrang entity2 = new TinhTrang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TinhTrangService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Delete(PMS.Entities.TinhTrangKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maTinhTrang
            </summary>
            <param name="_maTinhTrang">TinhTrang pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.TinhTrang"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TinhTrang Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TinhTrang"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepLoadByMaTinhTrang(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.TinhTrang"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maTinhTrang"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TinhTrang Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TinhTrang"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TinhTrang)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TinhTrang Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TinhTrang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TinhTrang,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TinhTrang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TinhTrang Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TinhTrang,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.TinhTrang"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TinhTrang Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.TinhTrang})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TinhTrang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.TinhTrang},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TinhTrang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.TinhTrang},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.TinhTrang"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepSave(PMS.Entities.TinhTrang)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.TinhTrang"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TinhTrang Object</param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepSave(PMS.Entities.TinhTrang,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TinhTrang object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TinhTrang Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TinhTrang</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.TinhTrang})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TinhTrang} Object</param>
        </member>
        <member name="M:PMS.Services.TinhTrangServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.TinhTrang},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TinhTrang Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.TinhTrangServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.TaiKhoanService">
            <summary>
            An component type implementation of the 'TaiKhoan' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.TaiKhoanServiceBase">
            <summary>
             An object representation of the 'TaiKhoan' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TaiKhoan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.TaiKhoan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.TaiKhoan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.CreateTaiKhoan(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.TaiKhoan"/> instance.
            </summary>
            <param name="_maNhomQuyen"></param>
            <param name="_tenDangNhap"></param>
            <param name="_matKhau"></param>
            <param name="_hoTen"></param>
            <param name="_tenMayTinh"></param>
            <param name="_duongDan"></param>
            <param name="_phienBan"></param>
            <param name="_ngayDangNhap"></param>
            <param name="_trangThai"></param>
            <param name="_skinName"></param>
            <param name="_ngayTao"></param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByMaNhomQuyen(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_Users_Groups key.
            	FK_Users_Groups Description: 
            </summary>
            <param name="_maNhomQuyen"></param>
            <returns>Returns a generic collection of TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByMaNhomQuyen(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_Users_Groups key.
            	FK_Users_Groups Description: 
            </summary>
            <param name="_maNhomQuyen"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Get(PMS.Entities.TaiKhoanKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByTenDangNhap(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_Users index.
            </summary>
            <param name="_tenDangNhap"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TaiKhoan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByTenDangNhap(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_Users index.
            </summary>
            <param name="_tenDangNhap"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TaiKhoan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByMaTaiKhoan(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_Users index.
            </summary>
            <param name="_maTaiKhoan"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TaiKhoan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByMaTaiKhoan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_Users index.
            </summary>
            <param name="_maTaiKhoan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TaiKhoan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.TaiKhoan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.TaiKhoan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TaiKhoan} of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TaiKhoan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Insert(PMS.Entities.TaiKhoan)">
            <summary>
            public virtual method that Inserts a TaiKhoan object into the datasource using a transaction.
            </summary>
            <param name="entity">TaiKhoan object to Insert.</param>
            <remarks>After Inserting into the datasource, the TaiKhoan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TaiKhoan entity = new TaiKhoan();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TaiKhoanService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Insert(PMS.Entities.TList{PMS.Entities.TaiKhoan})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaiKhoan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TaiKhoan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TaiKhoan.
             <code><![CDATA[
             TList<TaiKhoan> list = new TList<TaiKhoan>();
             TaiKhoan entity = new TaiKhoan();
             entity.StringProperty = "foo";
             TaiKhoan entity2 = new TaiKhoan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaiKhoanService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Update(PMS.Entities.TaiKhoan)">
            <summary>
            public virtual method that Updates a TaiKhoan object into the datasource using a transaction.
            </summary>
            <param name="entity">TaiKhoan object to Update.</param>
            <remarks>After Updateing into the datasource, the TaiKhoan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TaiKhoan entity = TaiKhoanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TaiKhoanService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Update(PMS.Entities.TList{PMS.Entities.TaiKhoan})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaiKhoan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TaiKhoan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TaiKhoan.
             <code><![CDATA[
             TList<TaiKhoan> list = new TList<TaiKhoan>();
             TaiKhoan entity = new TaiKhoan();
             entity.StringProperty = "foo";
             TaiKhoan entity2 = new TaiKhoan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaiKhoanService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Save(PMS.Entities.TaiKhoan)">
            <summary>
            public virtual method that Saves a TaiKhoan object into the datasource using a transaction.
            </summary>
            <param name="entity">TaiKhoan object to Save.</param>
            <remarks>After Saveing into the datasource, the TaiKhoan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TaiKhoan entity = TaiKhoanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TaiKhoanService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Save(PMS.Entities.TList{PMS.Entities.TaiKhoan})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaiKhoan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TaiKhoan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TaiKhoan.
             <code><![CDATA[
             TList<TaiKhoan> list = new TList<TaiKhoan>();
             TaiKhoan entity = new TaiKhoan();
             entity.StringProperty = "foo";
             TaiKhoan entity2 = new TaiKhoan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaiKhoanService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Delete(PMS.Entities.TaiKhoan)">
            <summary>
            public virtual method that Deletes a TaiKhoan object into the datasource using a transaction.
            </summary>
            <param name="entity">TaiKhoan object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TaiKhoan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TaiKhoan entity = TaiKhoanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TaiKhoanService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Delete(PMS.Entities.TList{PMS.Entities.TaiKhoan})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TaiKhoan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TaiKhoan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TaiKhoan.
             <code><![CDATA[
             TList<TaiKhoan> list = new TList<TaiKhoan>();
             TaiKhoan entity = new TaiKhoan();
             entity.StringProperty = "foo";
             TaiKhoan entity2 = new TaiKhoan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TaiKhoanService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Delete(PMS.Entities.TaiKhoanKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maTaiKhoan
            </summary>
            <param name="_maTaiKhoan">TaiKhoan pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByParentIdFromHeThong(System.Int32)">
            <summary>
            	Gets TaiKhoan objects from the datasource by ParentID in the
            	HeThong table. Table TaiKhoan is related to table TaiKhoan
            	through the (M:N) relationship defined in the HeThong table.
            </summary>
            <param name="_parentId"></param>
            <returns>Returns a typed collection of TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByParentIdFromHeThong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TaiKhoan objects from the datasource by ParentID in the
            	HeThong table. Table TaiKhoan is related to table TaiKhoan
            	through the (M:N) relationship defined in the HeThong table.
            </summary>
            <param name="_parentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByUserIdFromHeThong(System.Int32)">
            <summary>
            	Gets TaiKhoan objects from the datasource by UserID in the
            	HeThong table. Table TaiKhoan is related to table TaiKhoan
            	through the (M:N) relationship defined in the HeThong table.
            </summary>
            <param name="_userId"></param>
            <returns>Returns a typed collection of TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByUserIdFromHeThong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets TaiKhoan objects from the datasource by UserID in the
            	HeThong table. Table TaiKhoan is related to table TaiKhoan
            	through the (M:N) relationship defined in the HeThong table.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of TaiKhoan objects.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByTenDangNhapMatKhau(System.String,System.String)">
            <summary>
            This method wrap the 'cust_TaiKhoan_GetByTenDangNhapMatKhau' stored procedure. 
            </summary>
            <param name="tenDangNhap"> A <c>System.String</c> instance.</param>
            <param name="matKhau"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.GetByTenDangNhapMatKhau(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_TaiKhoan_GetByTenDangNhapMatKhau' stored procedure. 
            </summary>
            <param name="tenDangNhap"> A <c>System.String</c> instance.</param>
            <param name="matKhau"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepLoadByTenDangNhap(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.TaiKhoan"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_tenDangNhap"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaiKhoan Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TaiKhoan"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepLoadByMaTaiKhoan(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.TaiKhoan"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maTaiKhoan"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaiKhoan Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.TaiKhoan"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TaiKhoan)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TaiKhoan Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TaiKhoan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TaiKhoan,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TaiKhoan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TaiKhoan Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TaiKhoan,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.TaiKhoan"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TaiKhoan Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.TaiKhoan})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TaiKhoan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.TaiKhoan},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TaiKhoan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.TaiKhoan},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.TaiKhoan"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepSave(PMS.Entities.TaiKhoan)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.TaiKhoan"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TaiKhoan Object</param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepSave(PMS.Entities.TaiKhoan,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TaiKhoan object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TaiKhoan Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TaiKhoan</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.TaiKhoan})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TaiKhoan} Object</param>
        </member>
        <member name="M:PMS.Services.TaiKhoanServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.TaiKhoan},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TaiKhoan Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.TaiKhoanServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.TaiKhoanService.#ctor">
            <summary>
            Initializes a new instance of the TaiKhoanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewTonGiaoService">
            <summary>
             An component type implementation of the 'View_TonGiao' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewTonGiaoServiceBase">
            <summary>
             An object representation of the 'View_TonGiao' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewTonGiao.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewTonGiao"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewTonGiao"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.CreateViewTonGiao(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewTonGiao"/> instance.
            </summary>
            <param name="_maTonGiao"></param>
            <param name="_tenTonGiao"></param>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewTonGiao} of <c>ViewTonGiao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewTonGiao"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewTonGiao"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTonGiao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTonGiao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTonGiao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewTonGiao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewTonGiao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewTonGiao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTonGiaoService.#ctor">
            <summary>
            Initializes a new instance of the ViewTonGiaoService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewNamHocService">
            <summary>
             An component type implementation of the 'View_NamHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewNamHocServiceBase">
            <summary>
             An object representation of the 'View_NamHoc' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewNamHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewNamHoc"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewNamHoc"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.CreateViewNamHoc(System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewNamHoc"/> instance.
            </summary>
            <param name="_namHoc"></param>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewNamHoc} of <c>ViewNamHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewNamHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewNamHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewNamHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewNamHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewNamHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewNamHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewNamHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewNamHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewNamHocService.#ctor">
            <summary>
            Initializes a new instance of the ViewNamHocService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewMonHocKhoaServiceBase">
            <summary>
             An object representation of the 'View_MonHoc_Khoa' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewMonHocKhoa.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewMonHocKhoa"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewMonHocKhoa"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.CreateViewMonHocKhoa(System.String,System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewMonHocKhoa"/> instance.
            </summary>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_tenHienThi"></param>
            <param name="_soTinChi"></param>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_maBoMon"></param>
            <param name="_tenBoMon"></param>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewMonHocKhoa} of <c>ViewMonHocKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewMonHocKhoa"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewMonHocKhoa"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewMonHocKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewMonHocKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewMonHocKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewMonHocKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewMonHocKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewMonHocKhoa</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.GetByMaDonVi(System.String)">
            <summary>
            This method wrap the 'cust_View_MonHoc_Khoa_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaServiceBase.GetByMaDonVi(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_MonHoc_Khoa_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewKetQuaTinhServiceBase">
            <summary>
             An object representation of the 'View_KetQuaTinh' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewKetQuaTinh.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewKetQuaTinh"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewKetQuaTinh"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.CreateViewKetQuaTinh(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewKetQuaTinh"/> instance.
            </summary>
            <param name="_maKetQua"></param>
            <param name="_maGiangVien"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_donGia"></param>
            <param name="_tietNghiaVu"></param>
            <param name="_tietGioiHan"></param>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewKetQuaTinh} of <c>ViewKetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewKetQuaTinh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewKetQuaTinh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewKetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewKetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewKetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_KetQuaTinh_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_KetQuaTinh_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetByNamHocHocKyMaGiangVien(System.String,System.String,System.Int32)">
            <summary>
            This method wrap the 'cust_View_KetQuaTinh_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhServiceBase.GetByNamHocHocKyMaGiangVien(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_KetQuaTinh_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase">
            <summary>
             An object representation of the 'View_ChiTiet_KhoiLuong_GiangDay' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewChiTietKhoiLuongGiangDay.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewChiTietKhoiLuongGiangDay"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewChiTietKhoiLuongGiangDay"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.CreateViewChiTietKhoiLuongGiangDay(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Int32},System.Byte,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Decimal,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewChiTietKhoiLuongGiangDay"/> instance.
            </summary>
            <param name="_maLichHoc"></param>
            <param name="_maGiangVien"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_nhom"></param>
            <param name="_soTinChi"></param>
            <param name="_lyThuyet"></param>
            <param name="_thucHanh"></param>
            <param name="_baiTap"></param>
            <param name="_baiTapLon"></param>
            <param name="_doAn"></param>
            <param name="_luanAn"></param>
            <param name="_tieuLuan"></param>
            <param name="_thucTap"></param>
            <param name="_soLuong"></param>
            <param name="_maLoaiHocPhan"></param>
            <param name="_loaiHocPhan"></param>
            <param name="_phanLoai"></param>
            <param name="_heSoThanhPhan"></param>
            <param name="_nam"></param>
            <param name="_tuan"></param>
            <param name="_donViTinh"></param>
            <param name="_maBuoiHoc"></param>
            <param name="_maLop"></param>
            <param name="_tietBatDau"></param>
            <param name="_soTiet"></param>
            <param name="_loaiHocKy"></param>
            <param name="_heSoHocKy"></param>
            <param name="_tinhTrang"></param>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewChiTietKhoiLuongGiangDay} of <c>ViewChiTietKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewChiTietKhoiLuongGiangDay"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewChiTietKhoiLuongGiangDay"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewChiTietGiangDayService">
            <summary>
             An component type implementation of the 'View_ChiTiet_GiangDay' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewChiTietGiangDayServiceBase">
            <summary>
             An object representation of the 'View_ChiTiet_GiangDay' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewChiTietGiangDay.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewChiTietGiangDay"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewChiTietGiangDay"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.CreateViewChiTietGiangDay(System.Int32,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Decimal,System.Nullable{System.Int32},System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewChiTietGiangDay"/> instance.
            </summary>
            <param name="_maLichHoc"></param>
            <param name="_maGiangVien"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_nam"></param>
            <param name="_tuan"></param>
            <param name="_maPhong"></param>
            <param name="_maToaNha"></param>
            <param name="_maBuoiHoc"></param>
            <param name="_maKhoaHoc"></param>
            <param name="_tietBatDau"></param>
            <param name="_soTinChi"></param>
            <param name="_soTiet"></param>
            <param name="_tinhTrang"></param>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewChiTietGiangDay} of <c>ViewChiTietGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewChiTietGiangDay"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewChiTietGiangDay"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewChiTietGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewChiTietGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewChiTietGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.GetByMaGiangVienMaLopHocPhanMaKhoaHoc(System.String,System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_GiangDay_GetByMaGiangVienMaLopHocPhanMaKhoaHoc' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayServiceBase.GetByMaGiangVienMaLopHocPhanMaKhoaHoc(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_GiangDay_GetByMaGiangVienMaLopHocPhanMaKhoaHoc' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietGiangDayService.#ctor">
            <summary>
            Initializes a new instance of the ViewChiTietGiangDayService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewChiTienCoVanService">
            <summary>
             An component type implementation of the 'View_ChiTien_CoVan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewChiTienCoVanServiceBase">
            <summary>
             An object representation of the 'View_ChiTien_CoVan' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewChiTienCoVan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewChiTienCoVan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewChiTienCoVan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.CreateViewChiTienCoVan(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewChiTienCoVan"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_hoLot"></param>
            <param name="_ten"></param>
            <param name="_maDonVi"></param>
            <param name="_chucDanh"></param>
            <param name="_hocKy"></param>
            <param name="_namHoc"></param>
            <param name="_soTien"></param>
            <param name="_soTiet"></param>
            <param name="_thanhTien"></param>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewChiTienCoVan} of <c>ViewChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewChiTienCoVan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewChiTienCoVan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTien_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTien_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTienCoVanService.#ctor">
            <summary>
            Initializes a new instance of the ViewChiTienCoVanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ChucNangService">
            <summary>
            An component type implementation of the 'ChucNang' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.ChucNangServiceBase">
            <summary>
             An object representation of the 'ChucNang' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ChucNang.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ChucNang"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ChucNang"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.CreateChucNang(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.Byte[],System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ChucNang"/> instance.
            </summary>
            <param name="_parentId"></param>
            <param name="_phanLoai"></param>
            <param name="_menu"></param>
            <param name="_beginGroup"></param>
            <param name="_ribbonStyle"></param>
            <param name="_dataLayout"></param>
            <param name="_tenChucNang"></param>
            <param name="_tenForm"></param>
            <param name="_hinhAnh"></param>
            <param name="_thuTu"></param>
            <param name="_tenPhuongThuc"></param>
            <param name="_thamSo"></param>
            <param name="_kieuForm"></param>
            <param name="_trangThai"></param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByParentId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_Modules_Modules key.
            	FK_Modules_Modules Description: 
            </summary>
            <param name="_parentId"></param>
            <returns>Returns a generic collection of ChucNang objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByParentId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_Modules_Modules key.
            	FK_Modules_Modules Description: 
            </summary>
            <param name="_parentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Get(PMS.Entities.ChucNangKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetById(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_Modules index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucNang"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_Modules index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucNang"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ChucNang"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ChucNang"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ChucNang} of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Insert(PMS.Entities.ChucNang)">
            <summary>
            public virtual method that Inserts a ChucNang object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucNang object to Insert.</param>
            <remarks>After Inserting into the datasource, the ChucNang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ChucNang entity = new ChucNang();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ChucNangService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Insert(PMS.Entities.TList{PMS.Entities.ChucNang})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucNang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ChucNang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ChucNang.
             <code><![CDATA[
             TList<ChucNang> list = new TList<ChucNang>();
             ChucNang entity = new ChucNang();
             entity.StringProperty = "foo";
             ChucNang entity2 = new ChucNang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucNangService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Update(PMS.Entities.ChucNang)">
            <summary>
            public virtual method that Updates a ChucNang object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucNang object to Update.</param>
            <remarks>After Updateing into the datasource, the ChucNang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ChucNang entity = ChucNangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ChucNangService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Update(PMS.Entities.TList{PMS.Entities.ChucNang})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucNang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ChucNang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ChucNang.
             <code><![CDATA[
             TList<ChucNang> list = new TList<ChucNang>();
             ChucNang entity = new ChucNang();
             entity.StringProperty = "foo";
             ChucNang entity2 = new ChucNang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucNangService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Save(PMS.Entities.ChucNang)">
            <summary>
            public virtual method that Saves a ChucNang object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucNang object to Save.</param>
            <remarks>After Saveing into the datasource, the ChucNang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ChucNang entity = ChucNangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ChucNangService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Save(PMS.Entities.TList{PMS.Entities.ChucNang})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucNang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ChucNang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ChucNang.
             <code><![CDATA[
             TList<ChucNang> list = new TList<ChucNang>();
             ChucNang entity = new ChucNang();
             entity.StringProperty = "foo";
             ChucNang entity2 = new ChucNang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucNangService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Delete(PMS.Entities.ChucNang)">
            <summary>
            public virtual method that Deletes a ChucNang object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucNang object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ChucNang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ChucNang entity = ChucNangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ChucNangService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Delete(PMS.Entities.TList{PMS.Entities.ChucNang})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucNang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ChucNang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ChucNang.
             <code><![CDATA[
             TList<ChucNang> list = new TList<ChucNang>();
             ChucNang entity = new ChucNang();
             entity.StringProperty = "foo";
             ChucNang entity2 = new ChucNang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucNangService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Delete(PMS.Entities.ChucNangKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _id
            </summary>
            <param name="_id">ChucNang pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByMaNhomQuyenFromNhomChucNang(System.Int32)">
            <summary>
            	Gets ChucNang objects from the datasource by MaNhomQuyen in the
            	NhomChucNang table. Table ChucNang is related to table NhomQuyen
            	through the (M:N) relationship defined in the NhomChucNang table.
            </summary>
            <param name="_maNhomQuyen"></param>
            <returns>Returns a typed collection of ChucNang objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByMaNhomQuyenFromNhomChucNang(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ChucNang objects from the datasource by MaNhomQuyen in the
            	NhomChucNang table. Table ChucNang is related to table NhomQuyen
            	through the (M:N) relationship defined in the NhomChucNang table.
            </summary>
            <param name="_maNhomQuyen"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ChucNang objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByMaNhomQuyenParentIDPhanLoaiTrangThai(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByMaNhomQuyenParentIDPhanLoaiTrangThai' stored procedure. 
            </summary>
            <param name="maNhomQuyen"> A <c>System.Int32</c> instance.</param>
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByMaNhomQuyenParentIDPhanLoaiTrangThai(System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByMaNhomQuyenParentIDPhanLoaiTrangThai' stored procedure. 
            </summary>
            <param name="maNhomQuyen"> A <c>System.Int32</c> instance.</param>
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByTrangThai(System.Boolean)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByTrangThai' stored procedure. 
            </summary>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByTrangThai(System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByTrangThai' stored procedure. 
            </summary>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByTenFormTrangThai(System.String,System.Boolean)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByTenFormTrangThai' stored procedure. 
            </summary>
            <param name="tenForm"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByTenFormTrangThai(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByTenFormTrangThai' stored procedure. 
            </summary>
            <param name="tenForm"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByParentIDPhanLoaiTrangThai(System.Int32,System.String,System.Boolean)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByParentIDPhanLoaiTrangThai' stored procedure. 
            </summary>
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByParentIDPhanLoaiTrangThai(System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByParentIDPhanLoaiTrangThai' stored procedure. 
            </summary>
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByParentIDTrangThai(System.Int32,System.Boolean)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByParentIDTrangThai' stored procedure. 
            </summary>
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByParentIDTrangThai(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByParentIDTrangThai' stored procedure. 
            </summary>
            <param name="parentId"> A <c>System.Int32</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByIDTrangThai(System.Int32,System.Boolean)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByIDTrangThai' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByIDTrangThai(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByIDTrangThai' stored procedure. 
            </summary>
            <param name="id"> A <c>System.Int32</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByMaNhomQuyenPhanLoaiTrangThai(System.Int32,System.String,System.Boolean)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByMaNhomQuyenPhanLoaiTrangThai' stored procedure. 
            </summary>
            <param name="maNhomQuyen"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByMaNhomQuyenPhanLoaiTrangThai(System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByMaNhomQuyenPhanLoaiTrangThai' stored procedure. 
            </summary>
            <param name="maNhomQuyen"> A <c>System.Int32</c> instance.</param>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByPhanLoaiTrangThai(System.String,System.Boolean)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByPhanLoaiTrangThai' stored procedure. 
            </summary>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetByPhanLoaiTrangThai(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetByPhanLoaiTrangThai' stored procedure. 
            </summary>
            <param name="phanLoai"> A <c>System.String</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetModulesByGroupID(System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetModulesByGroupID' stored procedure. 
            </summary>
            <param name="groupId"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.GetModulesByGroupID(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_ChucNang_GetModulesByGroupID' stored procedure. 
            </summary>
            <param name="groupId"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepLoadById(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.ChucNang"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChucNang Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucNang"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.ChucNang)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ChucNang Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.ChucNang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.ChucNang,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.ChucNang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ChucNang Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.ChucNang,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.ChucNang"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChucNang Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChucNang})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.ChucNang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChucNang},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.ChucNang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChucNang},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.ChucNang"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepSave(PMS.Entities.ChucNang)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.ChucNang"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ChucNang Object</param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepSave(PMS.Entities.ChucNang,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ChucNang object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ChucNang Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ChucNang</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ChucNang})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ChucNang} Object</param>
        </member>
        <member name="M:PMS.Services.ChucNangServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ChucNang},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ChucNang Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.ChucNangServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.ChucNangService.#ctor">
            <summary>
            Initializes a new instance of the ChucNangService class.
            </summary>
        </member>
        <member name="T:PMS.Services.GiangVienChucVuServiceBase">
            <summary>
             An object representation of the 'GiangVien_ChucVu' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the GiangVienChucVu.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.GiangVienChucVu"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.GiangVienChucVu"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.CreateGiangVienChucVu(System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.GiangVienChucVu"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maChucVu"></param>
            <param name="_ngayHieuLuc"></param>
            <param name="_trangThai"></param>
            <param name="_ngayHetHieuLuc"></param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetByMaChucVu(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_ChucVu_ChucVu key.
            	FK_GiangVien_ChucVu_ChucVu Description: 
            </summary>
            <param name="_maChucVu"></param>
            <returns>Returns a generic collection of GiangVienChucVu objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetByMaChucVu(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_ChucVu_ChucVu key.
            	FK_GiangVien_ChucVu_ChucVu Description: 
            </summary>
            <param name="_maChucVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetByMaGiangVien(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_ChucVu_GiangVien key.
            	FK_GiangVien_ChucVu_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a generic collection of GiangVienChucVu objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetByMaGiangVien(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_ChucVu_GiangVien key.
            	FK_GiangVien_ChucVu_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Get(PMS.Entities.GiangVienChucVuKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetByMaGiangVienMaChucVu(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GiangVien_ChucVu index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maChucVu"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChucVu"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetByMaGiangVienMaChucVu(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GiangVien_ChucVu index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maChucVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChucVu"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.GiangVienChucVu"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.GiangVienChucVu"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{GiangVienChucVu} of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiangVienChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Insert(PMS.Entities.GiangVienChucVu)">
            <summary>
            public virtual method that Inserts a GiangVienChucVu object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienChucVu object to Insert.</param>
            <remarks>After Inserting into the datasource, the GiangVienChucVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            GiangVienChucVu entity = new GiangVienChucVu();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GiangVienChucVuService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Insert(PMS.Entities.TList{PMS.Entities.GiangVienChucVu})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienChucVu</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>GiangVienChucVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of GiangVienChucVu.
             <code><![CDATA[
             TList<GiangVienChucVu> list = new TList<GiangVienChucVu>();
             GiangVienChucVu entity = new GiangVienChucVu();
             entity.StringProperty = "foo";
             GiangVienChucVu entity2 = new GiangVienChucVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienChucVuService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Update(PMS.Entities.GiangVienChucVu)">
            <summary>
            public virtual method that Updates a GiangVienChucVu object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienChucVu object to Update.</param>
            <remarks>After Updateing into the datasource, the GiangVienChucVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            GiangVienChucVu entity = GiangVienChucVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GiangVienChucVuService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Update(PMS.Entities.TList{PMS.Entities.GiangVienChucVu})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienChucVu</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>GiangVienChucVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of GiangVienChucVu.
             <code><![CDATA[
             TList<GiangVienChucVu> list = new TList<GiangVienChucVu>();
             GiangVienChucVu entity = new GiangVienChucVu();
             entity.StringProperty = "foo";
             GiangVienChucVu entity2 = new GiangVienChucVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienChucVuService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Save(PMS.Entities.GiangVienChucVu)">
            <summary>
            public virtual method that Saves a GiangVienChucVu object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienChucVu object to Save.</param>
            <remarks>After Saveing into the datasource, the GiangVienChucVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            GiangVienChucVu entity = GiangVienChucVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GiangVienChucVuService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Save(PMS.Entities.TList{PMS.Entities.GiangVienChucVu})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienChucVu</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>GiangVienChucVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of GiangVienChucVu.
             <code><![CDATA[
             TList<GiangVienChucVu> list = new TList<GiangVienChucVu>();
             GiangVienChucVu entity = new GiangVienChucVu();
             entity.StringProperty = "foo";
             GiangVienChucVu entity2 = new GiangVienChucVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienChucVuService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Delete(PMS.Entities.GiangVienChucVu)">
            <summary>
            public virtual method that Deletes a GiangVienChucVu object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienChucVu object to Delete.</param>
            <remarks>After Deleteing into the datasource, the GiangVienChucVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            GiangVienChucVu entity = GiangVienChucVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GiangVienChucVuService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Delete(PMS.Entities.TList{PMS.Entities.GiangVienChucVu})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienChucVu</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>GiangVienChucVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of GiangVienChucVu.
             <code><![CDATA[
             TList<GiangVienChucVu> list = new TList<GiangVienChucVu>();
             GiangVienChucVu entity = new GiangVienChucVu();
             entity.StringProperty = "foo";
             GiangVienChucVu entity2 = new GiangVienChucVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienChucVuService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Delete(PMS.Entities.GiangVienChucVuKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maGiangVien, System.Int32 _maChucVu
            </summary>
            <param name="_maGiangVien">GiangVienChucVu pk id.</param>
            <param name="_maChucVu">GiangVienChucVu pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoadByMaGiangVienMaChucVu(System.Int32,System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.GiangVienChucVu"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maChucVu"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVienChucVu Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienChucVu"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.GiangVienChucVu)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">GiangVienChucVu Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.GiangVienChucVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.GiangVienChucVu,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.GiangVienChucVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">GiangVienChucVu Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.GiangVienChucVu,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.GiangVienChucVu"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVienChucVu Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienChucVu})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.GiangVienChucVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienChucVu},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.GiangVienChucVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienChucVu},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.GiangVienChucVu"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepSave(PMS.Entities.GiangVienChucVu)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.GiangVienChucVu"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">GiangVienChucVu Object</param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepSave(PMS.Entities.GiangVienChucVu,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the GiangVienChucVu object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">GiangVienChucVu Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>GiangVienChucVu</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.GiangVienChucVu})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{GiangVienChucVu} Object</param>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.GiangVienChucVu},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">GiangVienChucVu Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.GiangVienChucVuServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.ThuLaoThoaThuanServiceBase">
            <summary>
             An object representation of the 'ThuLaoThoaThuan' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ThuLaoThoaThuan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.CreateThuLaoThoaThuan(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maHeDaoTao"></param>
            <param name="_maBacDaoTao"></param>
            <param name="_donGia"></param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetByMaGiangVien(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_ThuLaoThoaThuan_GiangVien key.
            	FK_ThuLaoThoaThuan_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a generic collection of ThuLaoThoaThuan objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetByMaGiangVien(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_ThuLaoThoaThuan_GiangVien key.
            	FK_ThuLaoThoaThuan_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Get(PMS.Entities.ThuLaoThoaThuanKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetByMaThuLao(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_ThuLaoThoaThuan index.
            </summary>
            <param name="_maThuLao"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetByMaThuLao(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_ThuLaoThoaThuan index.
            </summary>
            <param name="_maThuLao"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ThuLaoThoaThuan} of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ThuLaoThoaThuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Insert(PMS.Entities.ThuLaoThoaThuan)">
            <summary>
            public virtual method that Inserts a ThuLaoThoaThuan object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuLaoThoaThuan object to Insert.</param>
            <remarks>After Inserting into the datasource, the ThuLaoThoaThuan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ThuLaoThoaThuan entity = new ThuLaoThoaThuan();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ThuLaoThoaThuanService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Insert(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuLaoThoaThuan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ThuLaoThoaThuan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ThuLaoThoaThuan.
             <code><![CDATA[
             TList<ThuLaoThoaThuan> list = new TList<ThuLaoThoaThuan>();
             ThuLaoThoaThuan entity = new ThuLaoThoaThuan();
             entity.StringProperty = "foo";
             ThuLaoThoaThuan entity2 = new ThuLaoThoaThuan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuLaoThoaThuanService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Update(PMS.Entities.ThuLaoThoaThuan)">
            <summary>
            public virtual method that Updates a ThuLaoThoaThuan object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuLaoThoaThuan object to Update.</param>
            <remarks>After Updateing into the datasource, the ThuLaoThoaThuan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ThuLaoThoaThuan entity = ThuLaoThoaThuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ThuLaoThoaThuanService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Update(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuLaoThoaThuan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ThuLaoThoaThuan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ThuLaoThoaThuan.
             <code><![CDATA[
             TList<ThuLaoThoaThuan> list = new TList<ThuLaoThoaThuan>();
             ThuLaoThoaThuan entity = new ThuLaoThoaThuan();
             entity.StringProperty = "foo";
             ThuLaoThoaThuan entity2 = new ThuLaoThoaThuan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuLaoThoaThuanService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Save(PMS.Entities.ThuLaoThoaThuan)">
            <summary>
            public virtual method that Saves a ThuLaoThoaThuan object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuLaoThoaThuan object to Save.</param>
            <remarks>After Saveing into the datasource, the ThuLaoThoaThuan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ThuLaoThoaThuan entity = ThuLaoThoaThuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ThuLaoThoaThuanService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Save(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuLaoThoaThuan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ThuLaoThoaThuan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ThuLaoThoaThuan.
             <code><![CDATA[
             TList<ThuLaoThoaThuan> list = new TList<ThuLaoThoaThuan>();
             ThuLaoThoaThuan entity = new ThuLaoThoaThuan();
             entity.StringProperty = "foo";
             ThuLaoThoaThuan entity2 = new ThuLaoThoaThuan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuLaoThoaThuanService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Delete(PMS.Entities.ThuLaoThoaThuan)">
            <summary>
            public virtual method that Deletes a ThuLaoThoaThuan object into the datasource using a transaction.
            </summary>
            <param name="entity">ThuLaoThoaThuan object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ThuLaoThoaThuan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ThuLaoThoaThuan entity = ThuLaoThoaThuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ThuLaoThoaThuanService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Delete(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThuLaoThoaThuan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ThuLaoThoaThuan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ThuLaoThoaThuan.
             <code><![CDATA[
             TList<ThuLaoThoaThuan> list = new TList<ThuLaoThoaThuan>();
             ThuLaoThoaThuan entity = new ThuLaoThoaThuan();
             entity.StringProperty = "foo";
             ThuLaoThoaThuan entity2 = new ThuLaoThoaThuan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThuLaoThoaThuanService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Delete(PMS.Entities.ThuLaoThoaThuanKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maThuLao
            </summary>
            <param name="_maThuLao">ThuLaoThoaThuan pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoadByMaThuLao(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maThuLao"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThuLaoThoaThuan Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.ThuLaoThoaThuan)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ThuLaoThoaThuan Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.ThuLaoThoaThuan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.ThuLaoThoaThuan,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.ThuLaoThoaThuan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ThuLaoThoaThuan Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.ThuLaoThoaThuan,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThuLaoThoaThuan Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.ThuLaoThoaThuan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.ThuLaoThoaThuan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.ThuLaoThoaThuan"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepSave(PMS.Entities.ThuLaoThoaThuan)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.ThuLaoThoaThuan"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ThuLaoThoaThuan Object</param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepSave(PMS.Entities.ThuLaoThoaThuan,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ThuLaoThoaThuan object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ThuLaoThoaThuan Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ThuLaoThoaThuan</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ThuLaoThoaThuan} Object</param>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ThuLaoThoaThuan},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ThuLaoThoaThuan Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.ThuLaoThoaThuanServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.NhomQuyenService">
            <summary>
            An component type implementation of the 'NhomQuyen' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.NhomQuyenServiceBase">
            <summary>
             An object representation of the 'NhomQuyen' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NhomQuyen.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.NhomQuyen"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.NhomQuyen"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.CreateNhomQuyen(System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.NhomQuyen"/> instance.
            </summary>
            <param name="_tenNhomQuyen"></param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Get(PMS.Entities.NhomQuyenKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetByMaNhomQuyen(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_UserGroup index.
            </summary>
            <param name="_maNhomQuyen"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomQuyen"/> class.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetByMaNhomQuyen(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_UserGroup index.
            </summary>
            <param name="_maNhomQuyen"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomQuyen"/> class.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.NhomQuyen"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.NhomQuyen"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{NhomQuyen} of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NhomQuyen</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Insert(PMS.Entities.NhomQuyen)">
            <summary>
            public virtual method that Inserts a NhomQuyen object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomQuyen object to Insert.</param>
            <remarks>After Inserting into the datasource, the NhomQuyen object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            NhomQuyen entity = new NhomQuyen();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NhomQuyenService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Insert(PMS.Entities.TList{PMS.Entities.NhomQuyen})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomQuyen</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>NhomQuyen</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of NhomQuyen.
             <code><![CDATA[
             TList<NhomQuyen> list = new TList<NhomQuyen>();
             NhomQuyen entity = new NhomQuyen();
             entity.StringProperty = "foo";
             NhomQuyen entity2 = new NhomQuyen();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomQuyenService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Update(PMS.Entities.NhomQuyen)">
            <summary>
            public virtual method that Updates a NhomQuyen object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomQuyen object to Update.</param>
            <remarks>After Updateing into the datasource, the NhomQuyen object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            NhomQuyen entity = NhomQuyenService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NhomQuyenService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Update(PMS.Entities.TList{PMS.Entities.NhomQuyen})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomQuyen</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>NhomQuyen</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of NhomQuyen.
             <code><![CDATA[
             TList<NhomQuyen> list = new TList<NhomQuyen>();
             NhomQuyen entity = new NhomQuyen();
             entity.StringProperty = "foo";
             NhomQuyen entity2 = new NhomQuyen();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomQuyenService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Save(PMS.Entities.NhomQuyen)">
            <summary>
            public virtual method that Saves a NhomQuyen object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomQuyen object to Save.</param>
            <remarks>After Saveing into the datasource, the NhomQuyen object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            NhomQuyen entity = NhomQuyenService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NhomQuyenService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Save(PMS.Entities.TList{PMS.Entities.NhomQuyen})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomQuyen</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>NhomQuyen</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of NhomQuyen.
             <code><![CDATA[
             TList<NhomQuyen> list = new TList<NhomQuyen>();
             NhomQuyen entity = new NhomQuyen();
             entity.StringProperty = "foo";
             NhomQuyen entity2 = new NhomQuyen();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomQuyenService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Delete(PMS.Entities.NhomQuyen)">
            <summary>
            public virtual method that Deletes a NhomQuyen object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomQuyen object to Delete.</param>
            <remarks>After Deleteing into the datasource, the NhomQuyen object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            NhomQuyen entity = NhomQuyenService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NhomQuyenService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Delete(PMS.Entities.TList{PMS.Entities.NhomQuyen})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomQuyen</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>NhomQuyen</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of NhomQuyen.
             <code><![CDATA[
             TList<NhomQuyen> list = new TList<NhomQuyen>();
             NhomQuyen entity = new NhomQuyen();
             entity.StringProperty = "foo";
             NhomQuyen entity2 = new NhomQuyen();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomQuyenService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Delete(PMS.Entities.NhomQuyenKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maNhomQuyen
            </summary>
            <param name="_maNhomQuyen">NhomQuyen pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetByMaChucNangFromNhomChucNang(System.Int32)">
            <summary>
            	Gets NhomQuyen objects from the datasource by MaChucNang in the
            	NhomChucNang table. Table NhomQuyen is related to table ChucNang
            	through the (M:N) relationship defined in the NhomChucNang table.
            </summary>
            <param name="_maChucNang"></param>
            <returns>Returns a typed collection of NhomQuyen objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.GetByMaChucNangFromNhomChucNang(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets NhomQuyen objects from the datasource by MaChucNang in the
            	NhomChucNang table. Table NhomQuyen is related to table ChucNang
            	through the (M:N) relationship defined in the NhomChucNang table.
            </summary>
            <param name="_maChucNang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NhomQuyen objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepLoadByMaNhomQuyen(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.NhomQuyen"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maNhomQuyen"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NhomQuyen Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomQuyen"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.NhomQuyen)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">NhomQuyen Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.NhomQuyen)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.NhomQuyen,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.NhomQuyen)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">NhomQuyen Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.NhomQuyen,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.NhomQuyen"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NhomQuyen Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomQuyen})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.NhomQuyen)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomQuyen},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.NhomQuyen)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomQuyen},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.NhomQuyen"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepSave(PMS.Entities.NhomQuyen)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.NhomQuyen"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">NhomQuyen Object</param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepSave(PMS.Entities.NhomQuyen,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the NhomQuyen object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">NhomQuyen Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>NhomQuyen</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.NhomQuyen})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{NhomQuyen} Object</param>
        </member>
        <member name="M:PMS.Services.NhomQuyenServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.NhomQuyen},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">NhomQuyen Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.NhomQuyenServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.NhomQuyenService.#ctor">
            <summary>
            Initializes a new instance of the NhomQuyenService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewTongHopQuyDoiServiceBase">
            <summary>
             An object representation of the 'View_TongHop_QuyDoi' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewTongHopQuyDoi.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewTongHopQuyDoi"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewTongHopQuyDoi"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.CreateViewTongHopQuyDoi(System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewTongHopQuyDoi"/> instance.
            </summary>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_soTiet1"></param>
            <param name="_tietDoAn1"></param>
            <param name="_soTiet2"></param>
            <param name="_tietDoAn2"></param>
            <param name="_tietLyThuyet"></param>
            <param name="_tietThucHanh"></param>
            <param name="_tietThiNghiem"></param>
            <param name="_tietThucTap"></param>
            <param name="_tietDoAn"></param>
            <param name="_tongCong"></param>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewTongHopQuyDoi} of <c>ViewTongHopQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewTongHopQuyDoi"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewTongHopQuyDoi"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTongHopQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTongHopQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTongHopQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewTongHopQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewTongHopQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewTongHopQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_TongHop_QuyDoi_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TongHop_QuyDoi_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewTongHopQuyDoiService">
            <summary>
             An component type implementation of the 'View_TongHop_QuyDoi' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTongHopQuyDoiService.#ctor">
            <summary>
            Initializes a new instance of the ViewTongHopQuyDoiService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewPhanCongCoVanServiceBase">
            <summary>
             An object representation of the 'View_PhanCong_CoVan' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewPhanCongCoVan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewPhanCongCoVan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewPhanCongCoVan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.CreateViewPhanCongCoVan(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewPhanCongCoVan"/> instance.
            </summary>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_maKhoaHoc"></param>
            <param name="_maGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_chucDanh"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maBacDaoTao"></param>
            <param name="_maLoaiHinh"></param>
            <param name="_maBacLoaiHinh"></param>
            <param name="_maLop"></param>
            <param name="_tenLop"></param>
            <param name="_ngayTao"></param>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewPhanCongCoVan} of <c>ViewPhanCongCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewPhanCongCoVan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewPhanCongCoVan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewPhanCongCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewPhanCongCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewPhanCongCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewPhanCongCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewPhanCongCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewPhanCongCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetByMaDonViNamHocHocKy(System.String,System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_PhanCong_CoVan_GetByMaDonViNamHocHocKy' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetByMaDonViNamHocHocKy(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_PhanCong_CoVan_GetByMaDonViNamHocHocKy' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_PhanCong_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_PhanCong_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewPhanCongChuyenMonService">
            <summary>
             An component type implementation of the 'View_PhanCong_ChuyenMon' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewPhanCongChuyenMonServiceBase">
            <summary>
             An object representation of the 'View_PhanCong_ChuyenMon' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewPhanCongChuyenMon.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewPhanCongChuyenMon"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewPhanCongChuyenMon"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.CreateViewPhanCongChuyenMon(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewPhanCongChuyenMon"/> instance.
            </summary>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_maBoMon"></param>
            <param name="_tenBoMon"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_chucDanh"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_soTinChi"></param>
            <param name="_ngayPhanCong"></param>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewPhanCongChuyenMon} of <c>ViewPhanCongChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewPhanCongChuyenMon"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewPhanCongChuyenMon"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewPhanCongChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewPhanCongChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewPhanCongChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewPhanCongChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewPhanCongChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewPhanCongChuyenMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.GetByMaDonVi(System.String)">
            <summary>
            This method wrap the 'cust_View_PhanCong_ChuyenMon_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonServiceBase.GetByMaDonVi(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_PhanCong_ChuyenMon_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewPhanCongChuyenMonService.#ctor">
            <summary>
            Initializes a new instance of the ViewPhanCongChuyenMonService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewKhoiLuongThucDayServiceBase">
            <summary>
             An object representation of the 'View_KhoiLuong_ThucDay' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewKhoiLuongThucDay.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewKhoiLuongThucDay"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewKhoiLuongThucDay"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.CreateViewKhoiLuongThucDay(System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewKhoiLuongThucDay"/> instance.
            </summary>
            <param name="_hocKy"></param>
            <param name="_namHoc"></param>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_lyThuyet1"></param>
            <param name="_thucHanh1"></param>
            <param name="_thiNghiem1"></param>
            <param name="_doAn1"></param>
            <param name="_lyThuyet2"></param>
            <param name="_thucHanh2"></param>
            <param name="_thiNghiem2"></param>
            <param name="_doAn2"></param>
            <param name="_tietLyThuyet"></param>
            <param name="_tietThucHanh"></param>
            <param name="_tietThiNghiem"></param>
            <param name="_tietDoAn"></param>
            <param name="_tongCong"></param>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewKhoiLuongThucDay} of <c>ViewKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewKhoiLuongThucDay"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewKhoiLuongThucDay"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewKhoaHocService">
            <summary>
             An component type implementation of the 'View_KhoaHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewKhoaHocServiceBase">
            <summary>
             An object representation of the 'View_KhoaHoc' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewKhoaHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewKhoaHoc"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewKhoaHoc"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.CreateViewKhoaHoc(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewKhoaHoc"/> instance.
            </summary>
            <param name="_maKhoaHoc"></param>
            <param name="_tenKhoaHoc"></param>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewKhoaHoc} of <c>ViewKhoaHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewKhoaHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewKhoaHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoaHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoaHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoaHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewKhoaHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewKhoaHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewKhoaHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaHocService.#ctor">
            <summary>
            Initializes a new instance of the ViewKhoaHocService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewGiangVienLopHocPhanService">
            <summary>
             An component type implementation of the 'View_GiangVien_LopHocPhan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewGiangVienLopHocPhanServiceBase">
            <summary>
             An object representation of the 'View_GiangVien_LopHocPhan' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewGiangVienLopHocPhan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewGiangVienLopHocPhan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewGiangVienLopHocPhan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.CreateViewGiangVienLopHocPhan(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewGiangVienLopHocPhan"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_maLop"></param>
            <param name="_maBacDaoTao"></param>
            <param name="_maLoaiHinh"></param>
            <param name="_maBacLoaiHinh"></param>
            <param name="_donGia"></param>
            <param name="_tienThem"></param>
            <param name="_tongCong"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_ngayBatDau"></param>
            <param name="_ngayKetThuc"></param>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewGiangVienLopHocPhan} of <c>ViewGiangVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewGiangVienLopHocPhan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewGiangVienLopHocPhan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewGiangVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewGiangVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewGiangVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetKetThucByTuNgayDenNgay(System.DateTime,System.DateTime)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetKetThucByTuNgayDenNgay(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetBatDauByTuNgayDenNgay(System.DateTime,System.DateTime)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetBatDauByTuNgayDenNgay(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetByNamHocHocKyMaGiangVien(System.String,System.String,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanServiceBase.GetByNamHocHocKyMaGiangVien(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienLopHocPhanService.#ctor">
            <summary>
            Initializes a new instance of the ViewGiangVienLopHocPhanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewChiTietKhoiLuongGiangDayService">
            <summary>
             An component type implementation of the 'View_ChiTiet_KhoiLuong_GiangDay' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongGiangDayService.#ctor">
            <summary>
            Initializes a new instance of the ViewChiTietKhoiLuongGiangDayService class.
            </summary>
        </member>
        <member name="T:PMS.Services.NhomKhoiLuongService">
            <summary>
            An component type implementation of the 'NhomKhoiLuong' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.NhomKhoiLuongServiceBase">
            <summary>
             An object representation of the 'NhomKhoiLuong' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NhomKhoiLuong.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.NhomKhoiLuong"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.NhomKhoiLuong"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.CreateNhomKhoiLuong(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.NhomKhoiLuong"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenNhom"></param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Get(PMS.Entities.NhomKhoiLuongKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.GetByMaNhom(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_NhomKhoiLuong index.
            </summary>
            <param name="_maNhom"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomKhoiLuong"/> class.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.GetByMaNhom(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_NhomKhoiLuong index.
            </summary>
            <param name="_maNhom"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomKhoiLuong"/> class.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.NhomKhoiLuong"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.NhomKhoiLuong"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{NhomKhoiLuong} of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NhomKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Insert(PMS.Entities.NhomKhoiLuong)">
            <summary>
            public virtual method that Inserts a NhomKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomKhoiLuong object to Insert.</param>
            <remarks>After Inserting into the datasource, the NhomKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            NhomKhoiLuong entity = new NhomKhoiLuong();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NhomKhoiLuongService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Insert(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>NhomKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of NhomKhoiLuong.
             <code><![CDATA[
             TList<NhomKhoiLuong> list = new TList<NhomKhoiLuong>();
             NhomKhoiLuong entity = new NhomKhoiLuong();
             entity.StringProperty = "foo";
             NhomKhoiLuong entity2 = new NhomKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomKhoiLuongService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Update(PMS.Entities.NhomKhoiLuong)">
            <summary>
            public virtual method that Updates a NhomKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomKhoiLuong object to Update.</param>
            <remarks>After Updateing into the datasource, the NhomKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            NhomKhoiLuong entity = NhomKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NhomKhoiLuongService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Update(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>NhomKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of NhomKhoiLuong.
             <code><![CDATA[
             TList<NhomKhoiLuong> list = new TList<NhomKhoiLuong>();
             NhomKhoiLuong entity = new NhomKhoiLuong();
             entity.StringProperty = "foo";
             NhomKhoiLuong entity2 = new NhomKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomKhoiLuongService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Save(PMS.Entities.NhomKhoiLuong)">
            <summary>
            public virtual method that Saves a NhomKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomKhoiLuong object to Save.</param>
            <remarks>After Saveing into the datasource, the NhomKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            NhomKhoiLuong entity = NhomKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NhomKhoiLuongService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Save(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>NhomKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of NhomKhoiLuong.
             <code><![CDATA[
             TList<NhomKhoiLuong> list = new TList<NhomKhoiLuong>();
             NhomKhoiLuong entity = new NhomKhoiLuong();
             entity.StringProperty = "foo";
             NhomKhoiLuong entity2 = new NhomKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomKhoiLuongService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Delete(PMS.Entities.NhomKhoiLuong)">
            <summary>
            public virtual method that Deletes a NhomKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomKhoiLuong object to Delete.</param>
            <remarks>After Deleteing into the datasource, the NhomKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            NhomKhoiLuong entity = NhomKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NhomKhoiLuongService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Delete(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>NhomKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of NhomKhoiLuong.
             <code><![CDATA[
             TList<NhomKhoiLuong> list = new TList<NhomKhoiLuong>();
             NhomKhoiLuong entity = new NhomKhoiLuong();
             entity.StringProperty = "foo";
             NhomKhoiLuong entity2 = new NhomKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomKhoiLuongService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Delete(PMS.Entities.NhomKhoiLuongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maNhom
            </summary>
            <param name="_maNhom">NhomKhoiLuong pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoadByMaNhom(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.NhomKhoiLuong"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maNhom"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NhomKhoiLuong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomKhoiLuong"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.NhomKhoiLuong)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">NhomKhoiLuong Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.NhomKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.NhomKhoiLuong,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.NhomKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">NhomKhoiLuong Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.NhomKhoiLuong,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.NhomKhoiLuong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NhomKhoiLuong Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.NhomKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.NhomKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.NhomKhoiLuong"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepSave(PMS.Entities.NhomKhoiLuong)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.NhomKhoiLuong"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">NhomKhoiLuong Object</param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepSave(PMS.Entities.NhomKhoiLuong,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the NhomKhoiLuong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">NhomKhoiLuong Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>NhomKhoiLuong</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{NhomKhoiLuong} Object</param>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.NhomKhoiLuong},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">NhomKhoiLuong Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.NhomKhoiLuongServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.NhomKhoiLuongService.#ctor">
            <summary>
            Initializes a new instance of the NhomKhoiLuongService class.
            </summary>
        </member>
        <member name="T:PMS.Services.GiangVienService">
            <summary>
            An component type implementation of the 'GiangVien' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienService.#ctor">
            <summary>
            Initializes a new instance of the GiangVienService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewXuLyQuyDoiServiceBase">
            <summary>
             An object representation of the 'View_XuLy_QuyDoi' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewXuLyQuyDoi.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewXuLyQuyDoi"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewXuLyQuyDoi"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.CreateViewXuLyQuyDoi(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewXuLyQuyDoi"/> instance.
            </summary>
            <param name="_maKhoiLuong"></param>
            <param name="_maKetQua"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_loaiHocPhan"></param>
            <param name="_soTiet"></param>
            <param name="_soTinChi"></param>
            <param name="_siSoLop"></param>
            <param name="_chatLuongCao"></param>
            <param name="_ngoaiGio"></param>
            <param name="_trongGio"></param>
            <param name="_heSoLopDong"></param>
            <param name="_heSoCoSo"></param>
            <param name="_heSoHocKy"></param>
            <param name="_heSoThanhPhan"></param>
            <param name="_heSoTrongGio"></param>
            <param name="_heSoNgoaiGio"></param>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewXuLyQuyDoi} of <c>ViewXuLyQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewXuLyQuyDoi"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewXuLyQuyDoi"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewXuLyQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewXuLyQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewXuLyQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewXuLyQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewXuLyQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewXuLyQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.GetByMaKetQua(System.Int32)">
            <summary>
            This method wrap the 'cust_View_XuLy_QuyDoi_GetByMaKetQua' stored procedure. 
            </summary>
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiServiceBase.GetByMaKetQua(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_XuLy_QuyDoi_GetByMaKetQua' stored procedure. 
            </summary>
            <param name="maKetQua"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewCoSoServiceBase">
            <summary>
             An object representation of the 'View_CoSo' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewCoSo.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewCoSo"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewCoSo"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.CreateViewCoSo(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewCoSo"/> instance.
            </summary>
            <param name="_maCoSo"></param>
            <param name="_tenCoSo"></param>
            <param name="_diaChi"></param>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewCoSo} of <c>ViewCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewCoSo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewCoSo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewCoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewCoSo</c> objects.</returns>
        </member>
        <member name="T:PMS.Services.ViewChiTietQuyDoiService">
            <summary>
             An component type implementation of the 'View_ChiTiet_QuyDoi' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewChiTietQuyDoiServiceBase">
            <summary>
             An object representation of the 'View_ChiTiet_QuyDoi' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewChiTietQuyDoi.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewChiTietQuyDoi"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewChiTietQuyDoi"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.CreateViewChiTietQuyDoi(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewChiTietQuyDoi"/> instance.
            </summary>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_maBoMon"></param>
            <param name="_tenBoMon"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_soTiet1"></param>
            <param name="_tietDoAn1"></param>
            <param name="_soTiet2"></param>
            <param name="_tietDoAn2"></param>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewChiTietQuyDoi} of <c>ViewChiTietQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewChiTietQuyDoi"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewChiTietQuyDoi"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewChiTietQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewChiTietQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewChiTietQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_QuyDoi_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_QuyDoi_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietQuyDoiService.#ctor">
            <summary>
            Initializes a new instance of the ViewChiTietQuyDoiService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewChiTietHocPhanServiceBase">
            <summary>
             An object representation of the 'View_ChiTiet_HocPhan' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewChiTietHocPhan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewChiTietHocPhan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewChiTietHocPhan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.CreateViewChiTietHocPhan(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Byte,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Decimal,System.Decimal,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewChiTietHocPhan"/> instance.
            </summary>
            <param name="_maLichHoc"></param>
            <param name="_maGiangVien"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_soTinChi"></param>
            <param name="_soLuong"></param>
            <param name="_maLoaiHocPhan"></param>
            <param name="_loaiHocPhan"></param>
            <param name="_nam"></param>
            <param name="_tuan"></param>
            <param name="_maPhong"></param>
            <param name="_maToaNha"></param>
            <param name="_donViTinh"></param>
            <param name="_maCoSo"></param>
            <param name="_maBuoiHoc"></param>
            <param name="_maLop"></param>
            <param name="_tietBatDau"></param>
            <param name="_soTiet"></param>
            <param name="_loaiHocKy"></param>
            <param name="_heSoCoSo"></param>
            <param name="_heSoHocKy"></param>
            <param name="_tinhTrang"></param>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewChiTietHocPhan} of <c>ViewChiTietHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewChiTietHocPhan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewChiTietHocPhan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewChiTietHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewChiTietHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewChiTietHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetByMaGiangVienMaLopHocPhanMaLop(System.String,System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_HocPhan_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetByMaGiangVienMaLopHocPhanMaLop(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_HocPhan_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetByMaLopHocPhan(System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_HocPhan_GetByMaLopHocPhan' stored procedure. 
            </summary>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanServiceBase.GetByMaLopHocPhan(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_HocPhan_GetByMaLopHocPhan' stored procedure. 
            </summary>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.KetQuaTinhServiceBase">
            <summary>
             An object representation of the 'KetQuaTinh' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the KetQuaTinh.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.KetQuaTinh"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.KetQuaTinh"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.CreateKetQuaTinh(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.KetQuaTinh"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_hocKy"></param>
            <param name="_namHoc"></param>
            <param name="_tietNghiaVu"></param>
            <param name="_tietGioiHan"></param>
            <param name="_donGia"></param>
            <param name="_ngayTao"></param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetByMaGiangVien(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_KetQuaTinh_GiangVien key.
            	FK_KetQuaTinh_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a generic collection of KetQuaTinh objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetByMaGiangVien(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_KetQuaTinh_GiangVien key.
            	FK_KetQuaTinh_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Get(PMS.Entities.KetQuaTinhKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetByMaGiangVienNamHocHocKy(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_KetQuaTinh index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KetQuaTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetByMaGiangVienNamHocHocKy(System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_KetQuaTinh index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KetQuaTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetByMaKetQua(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_KetQuaTinh index.
            </summary>
            <param name="_maKetQua"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KetQuaTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetByMaKetQua(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_KetQuaTinh index.
            </summary>
            <param name="_maKetQua"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KetQuaTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.KetQuaTinh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.KetQuaTinh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{KetQuaTinh} of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KetQuaTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Insert(PMS.Entities.KetQuaTinh)">
            <summary>
            public virtual method that Inserts a KetQuaTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">KetQuaTinh object to Insert.</param>
            <remarks>After Inserting into the datasource, the KetQuaTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            KetQuaTinh entity = new KetQuaTinh();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KetQuaTinhService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Insert(PMS.Entities.TList{PMS.Entities.KetQuaTinh})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KetQuaTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>KetQuaTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of KetQuaTinh.
             <code><![CDATA[
             TList<KetQuaTinh> list = new TList<KetQuaTinh>();
             KetQuaTinh entity = new KetQuaTinh();
             entity.StringProperty = "foo";
             KetQuaTinh entity2 = new KetQuaTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KetQuaTinhService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Update(PMS.Entities.KetQuaTinh)">
            <summary>
            public virtual method that Updates a KetQuaTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">KetQuaTinh object to Update.</param>
            <remarks>After Updateing into the datasource, the KetQuaTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            KetQuaTinh entity = KetQuaTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KetQuaTinhService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Update(PMS.Entities.TList{PMS.Entities.KetQuaTinh})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KetQuaTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>KetQuaTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of KetQuaTinh.
             <code><![CDATA[
             TList<KetQuaTinh> list = new TList<KetQuaTinh>();
             KetQuaTinh entity = new KetQuaTinh();
             entity.StringProperty = "foo";
             KetQuaTinh entity2 = new KetQuaTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KetQuaTinhService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Save(PMS.Entities.KetQuaTinh)">
            <summary>
            public virtual method that Saves a KetQuaTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">KetQuaTinh object to Save.</param>
            <remarks>After Saveing into the datasource, the KetQuaTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            KetQuaTinh entity = KetQuaTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KetQuaTinhService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Save(PMS.Entities.TList{PMS.Entities.KetQuaTinh})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KetQuaTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>KetQuaTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of KetQuaTinh.
             <code><![CDATA[
             TList<KetQuaTinh> list = new TList<KetQuaTinh>();
             KetQuaTinh entity = new KetQuaTinh();
             entity.StringProperty = "foo";
             KetQuaTinh entity2 = new KetQuaTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KetQuaTinhService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Delete(PMS.Entities.KetQuaTinh)">
            <summary>
            public virtual method that Deletes a KetQuaTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">KetQuaTinh object to Delete.</param>
            <remarks>After Deleteing into the datasource, the KetQuaTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            KetQuaTinh entity = KetQuaTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KetQuaTinhService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Delete(PMS.Entities.TList{PMS.Entities.KetQuaTinh})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KetQuaTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>KetQuaTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of KetQuaTinh.
             <code><![CDATA[
             TList<KetQuaTinh> list = new TList<KetQuaTinh>();
             KetQuaTinh entity = new KetQuaTinh();
             entity.StringProperty = "foo";
             KetQuaTinh entity2 = new KetQuaTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KetQuaTinhService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Delete(PMS.Entities.KetQuaTinhKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maKetQua
            </summary>
            <param name="_maKetQua">KetQuaTinh pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_KetQuaTinh_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_KetQuaTinh_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetKetQuaByMaGiangVienNamHocHocKy(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            This method wrap the 'cust_KetQuaTinh_GetKetQuaByMaGiangVienNamHocHocKy' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.Int32?</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.GetKetQuaByMaGiangVienNamHocHocKy(System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_KetQuaTinh_GetKetQuaByMaGiangVienNamHocHocKy' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.Int32?</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepLoadByMaGiangVienNamHocHocKy(System.Nullable{System.Int32},System.String,System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.KetQuaTinh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KetQuaTinh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KetQuaTinh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepLoadByMaKetQua(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.KetQuaTinh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maKetQua"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KetQuaTinh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KetQuaTinh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.KetQuaTinh)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">KetQuaTinh Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.KetQuaTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.KetQuaTinh,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.KetQuaTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">KetQuaTinh Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.KetQuaTinh,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.KetQuaTinh"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KetQuaTinh Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KetQuaTinh})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.KetQuaTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KetQuaTinh},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.KetQuaTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KetQuaTinh},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.KetQuaTinh"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepSave(PMS.Entities.KetQuaTinh)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.KetQuaTinh"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">KetQuaTinh Object</param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepSave(PMS.Entities.KetQuaTinh,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the KetQuaTinh object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">KetQuaTinh Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>KetQuaTinh</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.KetQuaTinh})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{KetQuaTinh} Object</param>
        </member>
        <member name="M:PMS.Services.KetQuaTinhServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.KetQuaTinh},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">KetQuaTinh Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.KetQuaTinhServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.KetQuaTinhService">
            <summary>
            An component type implementation of the 'KetQuaTinh' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.KetQuaTinhService.#ctor">
            <summary>
            Initializes a new instance of the KetQuaTinhService class.
            </summary>
        </member>
        <member name="T:PMS.Services.TinhTrangService">
            <summary>
            An component type implementation of the 'TinhTrang' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.TinhTrangService.#ctor">
            <summary>
            Initializes a new instance of the TinhTrangService class.
            </summary>
        </member>
        <member name="T:PMS.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PMS.Services.IProcessorResult.AddBrokenRulesList(System.Type,PMS.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:PMS.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:PMS.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewGiangVienService">
            <summary>
             An component type implementation of the 'View_GiangVien' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewGiangVienServiceBase">
            <summary>
             An object representation of the 'View_GiangVien' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewGiangVien.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewGiangVien"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewGiangVien"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.CreateViewGiangVien(System.Nullable{System.Int64},System.Int32,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewGiangVien"/> instance.
            </summary>
            <param name="_thuTu"></param>
            <param name="_maGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_donGia"></param>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewGiangVien} of <c>ViewGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewGiangVien"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewGiangVien"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.LopHocPhan_GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.LopHocPhan_GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.LopHocPhan_GetKetThucByTuNgayDenNgay(System.DateTime,System.DateTime)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.LopHocPhan_GetKetThucByTuNgayDenNgay(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.LopHocPhan_GetByNamHocHocKyMaGiangVien(System.String,System.String,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.LopHocPhan_GetByNamHocHocKyMaGiangVien(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.DonGia_GetByMaDonVi(System.String)">
            <summary>
            This method wrap the 'cust_View_GiangVien_DonGia_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.DonGia_GetByMaDonVi(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_DonGia_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.LopHocPhan_GetBatDauByTuNgayDenNgay(System.DateTime,System.DateTime)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienServiceBase.LopHocPhan_GetBatDauByTuNgayDenNgay(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienService.#ctor">
            <summary>
            Initializes a new instance of the ViewGiangVienService class.
            </summary>
        </member>
        <member name="T:PMS.Services.DonViTinhService">
            <summary>
            An component type implementation of the 'DonViTinh' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.DonViTinhService.#ctor">
            <summary>
            Initializes a new instance of the DonViTinhService class.
            </summary>
        </member>
        <member name="T:PMS.Services.KhoanQuyDoiServiceBase">
            <summary>
             An object representation of the 'KhoanQuyDoi' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the KhoanQuyDoi.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.KhoanQuyDoi"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.KhoanQuyDoi"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.CreateKhoanQuyDoi(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.KhoanQuyDoi"/> instance.
            </summary>
            <param name="_maQuyDoi"></param>
            <param name="_tuKhoan"></param>
            <param name="_denKhoan"></param>
            <param name="_heSo"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetByMaQuyDoi(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_KhoanQuyDoi_QuyDoiGioChuan key.
            	FK_KhoanQuyDoi_QuyDoiGioChuan Description: 
            </summary>
            <param name="_maQuyDoi"></param>
            <returns>Returns a generic collection of KhoanQuyDoi objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetByMaQuyDoi(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_KhoanQuyDoi_QuyDoiGioChuan key.
            	FK_KhoanQuyDoi_QuyDoiGioChuan Description: 
            </summary>
            <param name="_maQuyDoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Get(PMS.Entities.KhoanQuyDoiKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetByMaKhoan(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_KhoanQuyDoi index.
            </summary>
            <param name="_maKhoan"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoanQuyDoi"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetByMaKhoan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_KhoanQuyDoi index.
            </summary>
            <param name="_maKhoan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoanQuyDoi"/> class.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.KhoanQuyDoi"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.KhoanQuyDoi"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{KhoanQuyDoi} of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KhoanQuyDoi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Insert(PMS.Entities.KhoanQuyDoi)">
            <summary>
            public virtual method that Inserts a KhoanQuyDoi object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoanQuyDoi object to Insert.</param>
            <remarks>After Inserting into the datasource, the KhoanQuyDoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            KhoanQuyDoi entity = new KhoanQuyDoi();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KhoanQuyDoiService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Insert(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoanQuyDoi</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>KhoanQuyDoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of KhoanQuyDoi.
             <code><![CDATA[
             TList<KhoanQuyDoi> list = new TList<KhoanQuyDoi>();
             KhoanQuyDoi entity = new KhoanQuyDoi();
             entity.StringProperty = "foo";
             KhoanQuyDoi entity2 = new KhoanQuyDoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoanQuyDoiService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Update(PMS.Entities.KhoanQuyDoi)">
            <summary>
            public virtual method that Updates a KhoanQuyDoi object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoanQuyDoi object to Update.</param>
            <remarks>After Updateing into the datasource, the KhoanQuyDoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            KhoanQuyDoi entity = KhoanQuyDoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KhoanQuyDoiService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Update(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoanQuyDoi</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>KhoanQuyDoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of KhoanQuyDoi.
             <code><![CDATA[
             TList<KhoanQuyDoi> list = new TList<KhoanQuyDoi>();
             KhoanQuyDoi entity = new KhoanQuyDoi();
             entity.StringProperty = "foo";
             KhoanQuyDoi entity2 = new KhoanQuyDoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoanQuyDoiService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Save(PMS.Entities.KhoanQuyDoi)">
            <summary>
            public virtual method that Saves a KhoanQuyDoi object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoanQuyDoi object to Save.</param>
            <remarks>After Saveing into the datasource, the KhoanQuyDoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            KhoanQuyDoi entity = KhoanQuyDoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KhoanQuyDoiService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Save(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoanQuyDoi</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>KhoanQuyDoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of KhoanQuyDoi.
             <code><![CDATA[
             TList<KhoanQuyDoi> list = new TList<KhoanQuyDoi>();
             KhoanQuyDoi entity = new KhoanQuyDoi();
             entity.StringProperty = "foo";
             KhoanQuyDoi entity2 = new KhoanQuyDoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoanQuyDoiService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Delete(PMS.Entities.KhoanQuyDoi)">
            <summary>
            public virtual method that Deletes a KhoanQuyDoi object into the datasource using a transaction.
            </summary>
            <param name="entity">KhoanQuyDoi object to Delete.</param>
            <remarks>After Deleteing into the datasource, the KhoanQuyDoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            KhoanQuyDoi entity = KhoanQuyDoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KhoanQuyDoiService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Delete(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KhoanQuyDoi</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>KhoanQuyDoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of KhoanQuyDoi.
             <code><![CDATA[
             TList<KhoanQuyDoi> list = new TList<KhoanQuyDoi>();
             KhoanQuyDoi entity = new KhoanQuyDoi();
             entity.StringProperty = "foo";
             KhoanQuyDoi entity2 = new KhoanQuyDoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoanQuyDoiService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Delete(PMS.Entities.KhoanQuyDoiKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maKhoan
            </summary>
            <param name="_maKhoan">KhoanQuyDoi pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoadByMaKhoan(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.KhoanQuyDoi"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maKhoan"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KhoanQuyDoi Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.KhoanQuyDoi"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.KhoanQuyDoi)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">KhoanQuyDoi Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.KhoanQuyDoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.KhoanQuyDoi,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.KhoanQuyDoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">KhoanQuyDoi Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.KhoanQuyDoi,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.KhoanQuyDoi"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KhoanQuyDoi Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.KhoanQuyDoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.KhoanQuyDoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.KhoanQuyDoi"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepSave(PMS.Entities.KhoanQuyDoi)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.KhoanQuyDoi"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">KhoanQuyDoi Object</param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepSave(PMS.Entities.KhoanQuyDoi,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the KhoanQuyDoi object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">KhoanQuyDoi Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>KhoanQuyDoi</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{KhoanQuyDoi} Object</param>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.KhoanQuyDoi},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">KhoanQuyDoi Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.KhoanQuyDoiServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.KhoanQuyDoiService">
            <summary>
            An component type implementation of the 'KhoanQuyDoi' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.KhoanQuyDoiService.#ctor">
            <summary>
            Initializes a new instance of the KhoanQuyDoiService class.
            </summary>
        </member>
        <member name="T:PMS.Services.CauHinhService">
            <summary>
            An component type implementation of the 'CauHinh' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.CauHinhServiceBase">
            <summary>
             An object representation of the 'CauHinh' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CauHinh.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.CauHinh"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.CauHinh"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.CreateCauHinh(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.CauHinh"/> instance.
            </summary>
            <param name="_tenTruong"></param>
            <param name="_phongDaoTao"></param>
            <param name="_nguoiLapbieu"></param>
            <param name="_trangThai"></param>
            <param name="_phongToChucCanBo"></param>
            <param name="_phongKeHoachTaiChinh"></param>
            <param name="_banGiamHieu"></param>
            <param name="_keToan"></param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Get(PMS.Entities.CauHinhKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.GetByMaCauHinh(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_CauHinh index.
            </summary>
            <param name="_maCauHinh"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CauHinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.GetByMaCauHinh(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_CauHinh index.
            </summary>
            <param name="_maCauHinh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CauHinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.CauHinh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.CauHinh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CauHinh} of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CauHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Insert(PMS.Entities.CauHinh)">
            <summary>
            public virtual method that Inserts a CauHinh object into the datasource using a transaction.
            </summary>
            <param name="entity">CauHinh object to Insert.</param>
            <remarks>After Inserting into the datasource, the CauHinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CauHinh entity = new CauHinh();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CauHinhService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Insert(PMS.Entities.TList{PMS.Entities.CauHinh})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CauHinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CauHinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CauHinh.
             <code><![CDATA[
             TList<CauHinh> list = new TList<CauHinh>();
             CauHinh entity = new CauHinh();
             entity.StringProperty = "foo";
             CauHinh entity2 = new CauHinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CauHinhService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Update(PMS.Entities.CauHinh)">
            <summary>
            public virtual method that Updates a CauHinh object into the datasource using a transaction.
            </summary>
            <param name="entity">CauHinh object to Update.</param>
            <remarks>After Updateing into the datasource, the CauHinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CauHinh entity = CauHinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CauHinhService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Update(PMS.Entities.TList{PMS.Entities.CauHinh})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CauHinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CauHinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CauHinh.
             <code><![CDATA[
             TList<CauHinh> list = new TList<CauHinh>();
             CauHinh entity = new CauHinh();
             entity.StringProperty = "foo";
             CauHinh entity2 = new CauHinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CauHinhService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Save(PMS.Entities.CauHinh)">
            <summary>
            public virtual method that Saves a CauHinh object into the datasource using a transaction.
            </summary>
            <param name="entity">CauHinh object to Save.</param>
            <remarks>After Saveing into the datasource, the CauHinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CauHinh entity = CauHinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CauHinhService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Save(PMS.Entities.TList{PMS.Entities.CauHinh})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CauHinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CauHinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CauHinh.
             <code><![CDATA[
             TList<CauHinh> list = new TList<CauHinh>();
             CauHinh entity = new CauHinh();
             entity.StringProperty = "foo";
             CauHinh entity2 = new CauHinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CauHinhService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Delete(PMS.Entities.CauHinh)">
            <summary>
            public virtual method that Deletes a CauHinh object into the datasource using a transaction.
            </summary>
            <param name="entity">CauHinh object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CauHinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CauHinh entity = CauHinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CauHinhService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Delete(PMS.Entities.TList{PMS.Entities.CauHinh})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CauHinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CauHinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CauHinh.
             <code><![CDATA[
             TList<CauHinh> list = new TList<CauHinh>();
             CauHinh entity = new CauHinh();
             entity.StringProperty = "foo";
             CauHinh entity2 = new CauHinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CauHinhService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Delete(PMS.Entities.CauHinhKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maCauHinh
            </summary>
            <param name="_maCauHinh">CauHinh pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepLoadByMaCauHinh(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.CauHinh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maCauHinh"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CauHinh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CauHinh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.CauHinh)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CauHinh Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.CauHinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.CauHinh,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.CauHinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CauHinh Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.CauHinh,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.CauHinh"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CauHinh Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.CauHinh})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.CauHinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.CauHinh},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.CauHinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.CauHinh},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.CauHinh"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepSave(PMS.Entities.CauHinh)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.CauHinh"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CauHinh Object</param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepSave(PMS.Entities.CauHinh,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CauHinh object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CauHinh Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CauHinh</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.CauHinh})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CauHinh} Object</param>
        </member>
        <member name="M:PMS.Services.CauHinhServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.CauHinh},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CauHinh Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.CauHinhServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.CauHinhService.#ctor">
            <summary>
            Initializes a new instance of the CauHinhService class.
            </summary>
        </member>
        <member name="T:PMS.Services.LoaiGiangVienService">
            <summary>
            An component type implementation of the 'LoaiGiangVien' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.LoaiGiangVienServiceBase">
            <summary>
             An object representation of the 'LoaiGiangVien' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LoaiGiangVien.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.LoaiGiangVien"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.LoaiGiangVien"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.CreateLoaiGiangVien(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.LoaiGiangVien"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenLoaiGiangVien"></param>
            <param name="_tienThem"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Get(PMS.Entities.LoaiGiangVienKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_LoaiGiangVien index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiGiangVien"/> class.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_LoaiGiangVien index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiGiangVien"/> class.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetByMaLoaiGiangVien(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_LoaiGiangVien index.
            </summary>
            <param name="_maLoaiGiangVien"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiGiangVien"/> class.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetByMaLoaiGiangVien(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_LoaiGiangVien index.
            </summary>
            <param name="_maLoaiGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiGiangVien"/> class.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.LoaiGiangVien"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.LoaiGiangVien"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LoaiGiangVien} of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LoaiGiangVien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Insert(PMS.Entities.LoaiGiangVien)">
            <summary>
            public virtual method that Inserts a LoaiGiangVien object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiGiangVien object to Insert.</param>
            <remarks>After Inserting into the datasource, the LoaiGiangVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LoaiGiangVien entity = new LoaiGiangVien();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LoaiGiangVienService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Insert(PMS.Entities.TList{PMS.Entities.LoaiGiangVien})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiGiangVien</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LoaiGiangVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LoaiGiangVien.
             <code><![CDATA[
             TList<LoaiGiangVien> list = new TList<LoaiGiangVien>();
             LoaiGiangVien entity = new LoaiGiangVien();
             entity.StringProperty = "foo";
             LoaiGiangVien entity2 = new LoaiGiangVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiGiangVienService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Update(PMS.Entities.LoaiGiangVien)">
            <summary>
            public virtual method that Updates a LoaiGiangVien object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiGiangVien object to Update.</param>
            <remarks>After Updateing into the datasource, the LoaiGiangVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LoaiGiangVien entity = LoaiGiangVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LoaiGiangVienService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Update(PMS.Entities.TList{PMS.Entities.LoaiGiangVien})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiGiangVien</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LoaiGiangVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LoaiGiangVien.
             <code><![CDATA[
             TList<LoaiGiangVien> list = new TList<LoaiGiangVien>();
             LoaiGiangVien entity = new LoaiGiangVien();
             entity.StringProperty = "foo";
             LoaiGiangVien entity2 = new LoaiGiangVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiGiangVienService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Save(PMS.Entities.LoaiGiangVien)">
            <summary>
            public virtual method that Saves a LoaiGiangVien object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiGiangVien object to Save.</param>
            <remarks>After Saveing into the datasource, the LoaiGiangVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LoaiGiangVien entity = LoaiGiangVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LoaiGiangVienService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Save(PMS.Entities.TList{PMS.Entities.LoaiGiangVien})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiGiangVien</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LoaiGiangVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LoaiGiangVien.
             <code><![CDATA[
             TList<LoaiGiangVien> list = new TList<LoaiGiangVien>();
             LoaiGiangVien entity = new LoaiGiangVien();
             entity.StringProperty = "foo";
             LoaiGiangVien entity2 = new LoaiGiangVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiGiangVienService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Delete(PMS.Entities.LoaiGiangVien)">
            <summary>
            public virtual method that Deletes a LoaiGiangVien object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiGiangVien object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LoaiGiangVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LoaiGiangVien entity = LoaiGiangVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LoaiGiangVienService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Delete(PMS.Entities.TList{PMS.Entities.LoaiGiangVien})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiGiangVien</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LoaiGiangVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LoaiGiangVien.
             <code><![CDATA[
             TList<LoaiGiangVien> list = new TList<LoaiGiangVien>();
             LoaiGiangVien entity = new LoaiGiangVien();
             entity.StringProperty = "foo";
             LoaiGiangVien entity2 = new LoaiGiangVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiGiangVienService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Delete(PMS.Entities.LoaiGiangVienKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maLoaiGiangVien
            </summary>
            <param name="_maLoaiGiangVien">LoaiGiangVien pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.LoaiGiangVien"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoaiGiangVien Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiGiangVien"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoadByMaLoaiGiangVien(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.LoaiGiangVien"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maLoaiGiangVien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoaiGiangVien Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiGiangVien"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.LoaiGiangVien)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LoaiGiangVien Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.LoaiGiangVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.LoaiGiangVien,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.LoaiGiangVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LoaiGiangVien Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.LoaiGiangVien,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.LoaiGiangVien"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoaiGiangVien Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.LoaiGiangVien})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.LoaiGiangVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.LoaiGiangVien},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.LoaiGiangVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.LoaiGiangVien},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.LoaiGiangVien"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepSave(PMS.Entities.LoaiGiangVien)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.LoaiGiangVien"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LoaiGiangVien Object</param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepSave(PMS.Entities.LoaiGiangVien,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LoaiGiangVien object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LoaiGiangVien Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LoaiGiangVien</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.LoaiGiangVien})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LoaiGiangVien} Object</param>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.LoaiGiangVien},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LoaiGiangVien Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.LoaiGiangVienServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.LoaiGiangVienService.#ctor">
            <summary>
            Initializes a new instance of the LoaiGiangVienService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:PMS.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:PMS.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:PMS.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:PMS.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:PMS.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PMS.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PMS.Services.IProcessor.ChangeProcessorState(PMS.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:PMS.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewTinhKhoiLuongServiceBase">
            <summary>
             An object representation of the 'View_Tinh_KhoiLuong' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewTinhKhoiLuong.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewTinhKhoiLuong"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewTinhKhoiLuong"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.CreateViewTinhKhoiLuong(System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewTinhKhoiLuong"/> instance.
            </summary>
            <param name="_maKetQua"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_tietQuyDoi"></param>
            <param name="_ngoaiGio"></param>
            <param name="_tietDoAn"></param>
            <param name="_tietNghiaVu"></param>
            <param name="_tietGioiHan"></param>
            <param name="_donGia"></param>
            <param name="_tietThieu"></param>
            <param name="_tietVuot"></param>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewTinhKhoiLuong} of <c>ViewTinhKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewTinhKhoiLuong"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewTinhKhoiLuong"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTinhKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTinhKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTinhKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewTinhKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewTinhKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewTinhKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_Tinh_KhoiLuong_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_Tinh_KhoiLuong_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetByNamHocHocKyMaGiangVien(System.String,System.String,System.Int32)">
            <summary>
            This method wrap the 'cust_View_Tinh_KhoiLuong_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongServiceBase.GetByNamHocHocKyMaGiangVien(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_Tinh_KhoiLuong_GetByNamHocHocKyMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewTheoDoiLichGiangService">
            <summary>
             An component type implementation of the 'View_TheoDoi_LichGiang' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewTheoDoiLichGiangServiceBase">
            <summary>
             An object representation of the 'View_TheoDoi_LichGiang' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewTheoDoiLichGiang.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewTheoDoiLichGiang"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewTheoDoiLichGiang"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.CreateViewTheoDoiLichGiang(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewTheoDoiLichGiang"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_maPhong"></param>
            <param name="_maToaNha"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_maKhoaHoc"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_ngayHoc"></param>
            <param name="_ngayBatDau"></param>
            <param name="_ngayKetThuc"></param>
            <param name="_thoiGianGiang"></param>
            <param name="_tietBatDau"></param>
            <param name="_tietKetThuc"></param>
            <param name="_soTiet"></param>
            <param name="_ngay"></param>
            <param name="_tuan"></param>
            <param name="_nam"></param>
            <param name="_maBacLoaiHinh"></param>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewTheoDoiLichGiang} of <c>ViewTheoDoiLichGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewTheoDoiLichGiang"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewTheoDoiLichGiang"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTheoDoiLichGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTheoDoiLichGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTheoDoiLichGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewTheoDoiLichGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewTheoDoiLichGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewTheoDoiLichGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetTheoNgayByTuNgayDenNgayMaCoSoMaBacLoaiHinh(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetTheoNgayByTuNgayDenNgayMaCoSoMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetTheoNgayByTuNgayDenNgayMaCoSoMaBacLoaiHinh(System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetTheoNgayByTuNgayDenNgayMaCoSoMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetByTuNgayDenNgayMaCoSo(System.DateTime,System.DateTime,System.String)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetByTuNgayDenNgayMaCoSo' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetByTuNgayDenNgayMaCoSo(System.DateTime,System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetByTuNgayDenNgayMaCoSo' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetByNgayMaCoSoTietBatDauKetThuc(System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetByNgayMaCoSoTietBatDauKetThuc' stored procedure. 
            </summary>
            <param name="ngay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
            <param name="tietKetThuc"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetByNgayMaCoSoTietBatDauKetThuc(System.DateTime,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetByNgayMaCoSoTietBatDauKetThuc' stored procedure. 
            </summary>
            <param name="ngay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
            <param name="tietKetThuc"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetByNgayMaCoSoTietBatDauKetThucMaBacLoaiHinh(System.DateTime,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetByNgayMaCoSoTietBatDauKetThucMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="ngay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
            <param name="tietKetThuc"> A <c>System.Int32</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetByNgayMaCoSoTietBatDauKetThucMaBacLoaiHinh(System.DateTime,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetByNgayMaCoSoTietBatDauKetThucMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="ngay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
            <param name="tietKetThuc"> A <c>System.Int32</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetByTuNgayDenNgayMaCoSoMaBacLoaiHinh(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetByTuNgayDenNgayMaCoSoMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangServiceBase.GetByTuNgayDenNgayMaCoSoMaBacLoaiHinh(System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_LichGiang_GetByTuNgayDenNgayMaCoSoMaBacLoaiHinh' stored procedure. 
            </summary>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiLichGiangService.#ctor">
            <summary>
            Initializes a new instance of the ViewTheoDoiLichGiangService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewSinhVienLopHocPhanService">
            <summary>
             An component type implementation of the 'View_SinhVien_LopHocPhan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewSinhVienLopHocPhanServiceBase">
            <summary>
             An object representation of the 'View_SinhVien_LopHocPhan' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewSinhVienLopHocPhan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewSinhVienLopHocPhan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewSinhVienLopHocPhan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.CreateViewSinhVienLopHocPhan(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewSinhVienLopHocPhan"/> instance.
            </summary>
            <param name="_maLopHocPhan"></param>
            <param name="_maSinhVien"></param>
            <param name="_hoTen"></param>
            <param name="_gioiTinh"></param>
            <param name="_ngaySinh"></param>
            <param name="_maLop"></param>
            <param name="_maKhoa"></param>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewSinhVienLopHocPhan} of <c>ViewSinhVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewSinhVienLopHocPhan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewSinhVienLopHocPhan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewSinhVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewSinhVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewSinhVienLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.GetByMaLopHocPhan(System.String)">
            <summary>
            This method wrap the 'cust_View_SinhVien_LopHocPhan_GetByMaLopHocPhan' stored procedure. 
            </summary>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanServiceBase.GetByMaLopHocPhan(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_SinhVien_LopHocPhan_GetByMaLopHocPhan' stored procedure. 
            </summary>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopHocPhanService.#ctor">
            <summary>
            Initializes a new instance of the ViewSinhVienLopHocPhanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewLopDaiDienService">
            <summary>
             An component type implementation of the 'View_Lop_DaiDien' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewLopDaiDienServiceBase">
            <summary>
             An object representation of the 'View_Lop_DaiDien' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewLopDaiDien.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewLopDaiDien"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewLopDaiDien"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.CreateViewLopDaiDien(System.Nullable{System.Int32},System.Nullable{System.Decimal},System.String,System.String,System.Byte,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewLopDaiDien"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_donGia"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maLoaiHocPhan"></param>
            <param name="_loaiHocPhan"></param>
            <param name="_phanLoai"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_maNhom"></param>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewLopDaiDien} of <c>ViewLopDaiDien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewLopDaiDien"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewLopDaiDien"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLopDaiDien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLopDaiDien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLopDaiDien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewLopDaiDien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewLopDaiDien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewLopDaiDien</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_Lop_DaiDien_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_Lop_DaiDien_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopDaiDienService.#ctor">
            <summary>
            Initializes a new instance of the ViewLopDaiDienService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewKhoiLuongGiangDayServiceBase">
            <summary>
             An object representation of the 'View_KhoiLuong_GiangDay' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewKhoiLuongGiangDay.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewKhoiLuongGiangDay"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewKhoiLuongGiangDay"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.CreateViewKhoiLuongGiangDay(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Int32},System.Byte,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Decimal,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewKhoiLuongGiangDay"/> instance.
            </summary>
            <param name="_maLichHoc"></param>
            <param name="_maGiangVien"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_nhom"></param>
            <param name="_soTinChi"></param>
            <param name="_lyThuyet"></param>
            <param name="_thucHanh"></param>
            <param name="_baiTap"></param>
            <param name="_baiTapLon"></param>
            <param name="_doAn"></param>
            <param name="_luanAn"></param>
            <param name="_tieuLuan"></param>
            <param name="_thucTap"></param>
            <param name="_soLuong"></param>
            <param name="_maLoaiHocPhan"></param>
            <param name="_loaiHocPhan"></param>
            <param name="_phanLoai"></param>
            <param name="_heSoThanhPhan"></param>
            <param name="_nam"></param>
            <param name="_tuan"></param>
            <param name="_donViTinh"></param>
            <param name="_maBuoiHoc"></param>
            <param name="_maLop"></param>
            <param name="_tietBatDau"></param>
            <param name="_soTiet"></param>
            <param name="_loaiHocKy"></param>
            <param name="_heSoHocKy"></param>
            <param name="_tinhTrang"></param>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewKhoiLuongGiangDay} of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewKhoiLuongGiangDay"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewKhoiLuongGiangDay"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetByMaGiangVienMaLopHocPhanMaLop(System.String,System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetByMaGiangVienMaLopHocPhanMaLop(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.String</c> instance.</param>
            <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewKhoiLuongGiangDayService">
            <summary>
             An component type implementation of the 'View_KhoiLuong_GiangDay' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongGiangDayService.#ctor">
            <summary>
            Initializes a new instance of the ViewKhoiLuongGiangDayService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewHocKyService">
            <summary>
             An component type implementation of the 'View_HocKy' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewHocKyServiceBase">
            <summary>
             An object representation of the 'View_HocKy' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewHocKy.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewHocKy"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewHocKy"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.CreateViewHocKy(System.String,System.String,System.String,System.Byte)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewHocKy"/> instance.
            </summary>
            <param name="_namHoc"></param>
            <param name="_maHocKy"></param>
            <param name="_tenHocKy"></param>
            <param name="_loaiHocKy"></param>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewHocKy} of <c>ViewHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewHocKy"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewHocKy"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewHocKy</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.GetByNamHoc(System.String)">
            <summary>
            This method wrap the 'cust_View_HocKy_GetByNamHoc' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyServiceBase.GetByNamHoc(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_HocKy_GetByNamHoc' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewHocKyService.#ctor">
            <summary>
            Initializes a new instance of the ViewHocKyService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewDonViServiceBase">
            <summary>
             An object representation of the 'View_DonVi' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewDonVi.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewDonVi"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewDonVi"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.CreateViewDonVi(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewDonVi"/> instance.
            </summary>
            <param name="_maDonVi"></param>
            <param name="_tenDonVi"></param>
            <param name="_boMon"></param>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewDonVi} of <c>ViewDonVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewDonVi"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewDonVi"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewDonVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewDonVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewDonVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewDonVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewDonVi</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewDonViServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewDonVi</c> objects.</returns>
        </member>
        <member name="T:PMS.Services.ViewDonViService">
            <summary>
             An component type implementation of the 'View_DonVi' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewDonViService.#ctor">
            <summary>
            Initializes a new instance of the ViewDonViService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewCoSoService">
            <summary>
             An component type implementation of the 'View_CoSo' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewCoSoService.#ctor">
            <summary>
            Initializes a new instance of the ViewCoSoService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase">
            <summary>
             An object representation of the 'View_BacDaoTao_LoaiHinh' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewBacDaoTaoLoaiHinh.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewBacDaoTaoLoaiHinh"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewBacDaoTaoLoaiHinh"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.CreateViewBacDaoTaoLoaiHinh(System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewBacDaoTaoLoaiHinh"/> instance.
            </summary>
            <param name="_maBacDaoTao"></param>
            <param name="_maLoaiHinh"></param>
            <param name="_maBacLoaiHinh"></param>
            <param name="_tenBacLoaiHinh"></param>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewBacDaoTaoLoaiHinh} of <c>ViewBacDaoTaoLoaiHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewBacDaoTaoLoaiHinh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewBacDaoTaoLoaiHinh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewBacDaoTaoLoaiHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewBacDaoTaoLoaiHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewBacDaoTaoLoaiHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewBacDaoTaoLoaiHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewBacDaoTaoLoaiHinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewBacDaoTaoLoaiHinh</c> objects.</returns>
        </member>
        <member name="T:PMS.Services.ChiTietKhoiLuongService">
            <summary>
            An component type implementation of the 'ChiTietKhoiLuong' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.ChiTietKhoiLuongServiceBase">
            <summary>
             An object representation of the 'ChiTietKhoiLuong' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ChiTietKhoiLuong.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.CreateChiTietKhoiLuong(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> instance.
            </summary>
            <param name="_maKhoiLuong"></param>
            <param name="_maSinhVien"></param>
            <param name="_ngayTao"></param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetByMaKhoiLuong(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_ChiTietKhoiLuong_KhoiLuongKhac key.
            	FK_ChiTietKhoiLuong_KhoiLuongKhac Description: 
            </summary>
            <param name="_maKhoiLuong"></param>
            <returns>Returns a generic collection of ChiTietKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetByMaKhoiLuong(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_ChiTietKhoiLuong_KhoiLuongKhac key.
            	FK_ChiTietKhoiLuong_KhoiLuongKhac Description: 
            </summary>
            <param name="_maKhoiLuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Get(PMS.Entities.ChiTietKhoiLuongKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetByMaChiTiet(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_ChiTietKhoiLuong index.
            </summary>
            <param name="_maChiTiet"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetByMaChiTiet(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_ChiTietKhoiLuong index.
            </summary>
            <param name="_maChiTiet"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ChiTietKhoiLuong} of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Insert(PMS.Entities.ChiTietKhoiLuong)">
            <summary>
            public virtual method that Inserts a ChiTietKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">ChiTietKhoiLuong object to Insert.</param>
            <remarks>After Inserting into the datasource, the ChiTietKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ChiTietKhoiLuong entity = new ChiTietKhoiLuong();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ChiTietKhoiLuongService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Insert(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChiTietKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ChiTietKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ChiTietKhoiLuong.
             <code><![CDATA[
             TList<ChiTietKhoiLuong> list = new TList<ChiTietKhoiLuong>();
             ChiTietKhoiLuong entity = new ChiTietKhoiLuong();
             entity.StringProperty = "foo";
             ChiTietKhoiLuong entity2 = new ChiTietKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChiTietKhoiLuongService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Update(PMS.Entities.ChiTietKhoiLuong)">
            <summary>
            public virtual method that Updates a ChiTietKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">ChiTietKhoiLuong object to Update.</param>
            <remarks>After Updateing into the datasource, the ChiTietKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ChiTietKhoiLuong entity = ChiTietKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ChiTietKhoiLuongService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Update(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChiTietKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ChiTietKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ChiTietKhoiLuong.
             <code><![CDATA[
             TList<ChiTietKhoiLuong> list = new TList<ChiTietKhoiLuong>();
             ChiTietKhoiLuong entity = new ChiTietKhoiLuong();
             entity.StringProperty = "foo";
             ChiTietKhoiLuong entity2 = new ChiTietKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChiTietKhoiLuongService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Save(PMS.Entities.ChiTietKhoiLuong)">
            <summary>
            public virtual method that Saves a ChiTietKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">ChiTietKhoiLuong object to Save.</param>
            <remarks>After Saveing into the datasource, the ChiTietKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ChiTietKhoiLuong entity = ChiTietKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ChiTietKhoiLuongService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Save(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChiTietKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ChiTietKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ChiTietKhoiLuong.
             <code><![CDATA[
             TList<ChiTietKhoiLuong> list = new TList<ChiTietKhoiLuong>();
             ChiTietKhoiLuong entity = new ChiTietKhoiLuong();
             entity.StringProperty = "foo";
             ChiTietKhoiLuong entity2 = new ChiTietKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChiTietKhoiLuongService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Delete(PMS.Entities.ChiTietKhoiLuong)">
            <summary>
            public virtual method that Deletes a ChiTietKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">ChiTietKhoiLuong object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ChiTietKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ChiTietKhoiLuong entity = ChiTietKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ChiTietKhoiLuongService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Delete(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChiTietKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ChiTietKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ChiTietKhoiLuong.
             <code><![CDATA[
             TList<ChiTietKhoiLuong> list = new TList<ChiTietKhoiLuong>();
             ChiTietKhoiLuong entity = new ChiTietKhoiLuong();
             entity.StringProperty = "foo";
             ChiTietKhoiLuong entity2 = new ChiTietKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChiTietKhoiLuongService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Delete(PMS.Entities.ChiTietKhoiLuongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maChiTiet
            </summary>
            <param name="_maChiTiet">ChiTietKhoiLuong pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoadByMaChiTiet(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maChiTiet"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChiTietKhoiLuong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.ChiTietKhoiLuong)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ChiTietKhoiLuong Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.ChiTietKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.ChiTietKhoiLuong,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.ChiTietKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ChiTietKhoiLuong Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.ChiTietKhoiLuong,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChiTietKhoiLuong Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.ChiTietKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.ChiTietKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.ChiTietKhoiLuong"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepSave(PMS.Entities.ChiTietKhoiLuong)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.ChiTietKhoiLuong"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ChiTietKhoiLuong Object</param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepSave(PMS.Entities.ChiTietKhoiLuong,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ChiTietKhoiLuong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ChiTietKhoiLuong Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ChiTietKhoiLuong</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ChiTietKhoiLuong} Object</param>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ChiTietKhoiLuong},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ChiTietKhoiLuong Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.ChiTietKhoiLuongServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.ChiTietKhoiLuongService.#ctor">
            <summary>
            Initializes a new instance of the ChiTietKhoiLuongService class.
            </summary>
        </member>
        <member name="T:PMS.Services.HeSoCoSoServiceBase">
            <summary>
             An object representation of the 'HeSoCoSo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HeSoCoSo.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.HeSoCoSo"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.HeSoCoSo"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.CreateHeSoCoSo(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.HeSoCoSo"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenCoSo"></param>
            <param name="_heSo"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Get(PMS.Entities.HeSoCoSoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HeSoCoSo index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoCoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HeSoCoSo index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoCoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetByMaCoSo(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HeSoCoSo index.
            </summary>
            <param name="_maCoSo"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoCoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetByMaCoSo(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HeSoCoSo index.
            </summary>
            <param name="_maCoSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoCoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.HeSoCoSo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.HeSoCoSo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HeSoCoSo} of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HeSoCoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Insert(PMS.Entities.HeSoCoSo)">
            <summary>
            public virtual method that Inserts a HeSoCoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoCoSo object to Insert.</param>
            <remarks>After Inserting into the datasource, the HeSoCoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HeSoCoSo entity = new HeSoCoSo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HeSoCoSoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Insert(PMS.Entities.TList{PMS.Entities.HeSoCoSo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoCoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HeSoCoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HeSoCoSo.
             <code><![CDATA[
             TList<HeSoCoSo> list = new TList<HeSoCoSo>();
             HeSoCoSo entity = new HeSoCoSo();
             entity.StringProperty = "foo";
             HeSoCoSo entity2 = new HeSoCoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoCoSoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Update(PMS.Entities.HeSoCoSo)">
            <summary>
            public virtual method that Updates a HeSoCoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoCoSo object to Update.</param>
            <remarks>After Updateing into the datasource, the HeSoCoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HeSoCoSo entity = HeSoCoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HeSoCoSoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Update(PMS.Entities.TList{PMS.Entities.HeSoCoSo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoCoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HeSoCoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HeSoCoSo.
             <code><![CDATA[
             TList<HeSoCoSo> list = new TList<HeSoCoSo>();
             HeSoCoSo entity = new HeSoCoSo();
             entity.StringProperty = "foo";
             HeSoCoSo entity2 = new HeSoCoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoCoSoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Save(PMS.Entities.HeSoCoSo)">
            <summary>
            public virtual method that Saves a HeSoCoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoCoSo object to Save.</param>
            <remarks>After Saveing into the datasource, the HeSoCoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HeSoCoSo entity = HeSoCoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HeSoCoSoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Save(PMS.Entities.TList{PMS.Entities.HeSoCoSo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoCoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HeSoCoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HeSoCoSo.
             <code><![CDATA[
             TList<HeSoCoSo> list = new TList<HeSoCoSo>();
             HeSoCoSo entity = new HeSoCoSo();
             entity.StringProperty = "foo";
             HeSoCoSo entity2 = new HeSoCoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoCoSoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Delete(PMS.Entities.HeSoCoSo)">
            <summary>
            public virtual method that Deletes a HeSoCoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">HeSoCoSo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HeSoCoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HeSoCoSo entity = HeSoCoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HeSoCoSoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Delete(PMS.Entities.TList{PMS.Entities.HeSoCoSo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeSoCoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HeSoCoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HeSoCoSo.
             <code><![CDATA[
             TList<HeSoCoSo> list = new TList<HeSoCoSo>();
             HeSoCoSo entity = new HeSoCoSo();
             entity.StringProperty = "foo";
             HeSoCoSo entity2 = new HeSoCoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeSoCoSoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Delete(PMS.Entities.HeSoCoSoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maCoSo
            </summary>
            <param name="_maCoSo">HeSoCoSo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HeSoCoSo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoCoSo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoCoSo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepLoadByMaCoSo(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HeSoCoSo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maCoSo"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoCoSo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeSoCoSo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.HeSoCoSo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HeSoCoSo Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.HeSoCoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.HeSoCoSo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.HeSoCoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HeSoCoSo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.HeSoCoSo,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.HeSoCoSo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeSoCoSo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoCoSo})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.HeSoCoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoCoSo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.HeSoCoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeSoCoSo},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.HeSoCoSo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepSave(PMS.Entities.HeSoCoSo)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.HeSoCoSo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HeSoCoSo Object</param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepSave(PMS.Entities.HeSoCoSo,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HeSoCoSo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HeSoCoSo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HeSoCoSo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HeSoCoSo})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HeSoCoSo} Object</param>
        </member>
        <member name="M:PMS.Services.HeSoCoSoServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HeSoCoSo},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HeSoCoSo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.HeSoCoSoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.HeSoCoSoService">
            <summary>
            An component type implementation of the 'HeSoCoSo' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.HeSoCoSoService.#ctor">
            <summary>
            Initializes a new instance of the HeSoCoSoService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewThanhToanTienGiangService">
            <summary>
             An component type implementation of the 'View_ThanhToan_TienGiang' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewThanhToanTienGiangServiceBase">
            <summary>
             An object representation of the 'View_ThanhToan_TienGiang' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewThanhToanTienGiang.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewThanhToanTienGiang"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewThanhToanTienGiang"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.CreateViewThanhToanTienGiang(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewThanhToanTienGiang"/> instance.
            </summary>
            <param name="_maLoaiGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_chucDanh"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_maNhom"></param>
            <param name="_maLop"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_soTinChi"></param>
            <param name="_siSoLop"></param>
            <param name="_trongGio"></param>
            <param name="_ngoaiGio"></param>
            <param name="_giangHe"></param>
            <param name="_heSoCoSo"></param>
            <param name="_ngayBatDau"></param>
            <param name="_ngayKetThuc"></param>
            <param name="_thoiGianGiang"></param>
            <param name="_maDiaDiem"></param>
            <param name="_maBacLoaiHinh"></param>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewThanhToanTienGiang} of <c>ViewThanhToanTienGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewThanhToanTienGiang"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewThanhToanTienGiang"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewThanhToanTienGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewThanhToanTienGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewThanhToanTienGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewThanhToanTienGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewThanhToanTienGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewThanhToanTienGiang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.GetByMaLoaiGiangVienTuNgayDenNgay(System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            This method wrap the 'cust_View_ThanhToan_TienGiang_GetByMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangServiceBase.GetByMaLoaiGiangVienTuNgayDenNgay(System.Int32,System.DateTime,System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ThanhToan_TienGiang_GetByMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanTienGiangService.#ctor">
            <summary>
            Initializes a new instance of the ViewThanhToanTienGiangService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewThanhToanThuLaoService">
            <summary>
             An component type implementation of the 'View_ThanhToan_ThuLao' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewThanhToanThuLaoServiceBase">
            <summary>
             An object representation of the 'View_ThanhToan_ThuLao' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewThanhToanThuLao.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewThanhToanThuLao"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewThanhToanThuLao"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.CreateViewThanhToanThuLao(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewThanhToanThuLao"/> instance.
            </summary>
            <param name="_maLoaiGiangVien"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_hoDem"></param>
            <param name="_ten"></param>
            <param name="_chucDanh"></param>
            <param name="_maDonVi"></param>
            <param name="_tietNghiaVu"></param>
            <param name="_tietGioiHan"></param>
            <param name="_tietQuyDoi"></param>
            <param name="_tietDoAn"></param>
            <param name="_ngoaiGio"></param>
            <param name="_donGia"></param>
            <param name="_tienDay"></param>
            <param name="_tienDoAn"></param>
            <param name="_tietThieu"></param>
            <param name="_tietVuot"></param>
            <param name="_tienVuot"></param>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewThanhToanThuLao} of <c>ViewThanhToanThuLao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewThanhToanThuLao"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewThanhToanThuLao"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewThanhToanThuLao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewThanhToanThuLao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewThanhToanThuLao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewThanhToanThuLao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewThanhToanThuLao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewThanhToanThuLao</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.GetByNamHocHocKyDonViLoaiGiangVien(System.String,System.String,System.String,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ThanhToan_ThuLao_GetByNamHocHocKyDonViLoaiGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoServiceBase.GetByNamHocHocKyDonViLoaiGiangVien(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ThanhToan_ThuLao_GetByNamHocHocKyDonViLoaiGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewThanhToanThuLaoService.#ctor">
            <summary>
            Initializes a new instance of the ViewThanhToanThuLaoService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewSinhVienHocPhanServiceBase">
            <summary>
             An object representation of the 'View_SinhVien_HocPhan' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewSinhVienHocPhan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewSinhVienHocPhan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewSinhVienHocPhan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.CreateViewSinhVienHocPhan(System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewSinhVienHocPhan"/> instance.
            </summary>
            <param name="_maLopHocPhan"></param>
            <param name="_soLuong"></param>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewSinhVienHocPhan} of <c>ViewSinhVienHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewSinhVienHocPhan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewSinhVienHocPhan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewSinhVienHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewSinhVienHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewSinhVienHocPhan</c> objects.</returns>
        </member>
        <member name="T:PMS.Services.ViewPhanCongCoVanService">
            <summary>
             An component type implementation of the 'View_PhanCong_CoVan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewPhanCongCoVanService.#ctor">
            <summary>
            Initializes a new instance of the ViewPhanCongCoVanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewLopHocPhanService">
            <summary>
             An component type implementation of the 'View_LopHocPhan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewLopHocPhanServiceBase">
            <summary>
             An object representation of the 'View_LopHocPhan' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewLopHocPhan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewLopHocPhan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewLopHocPhan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.CreateViewLopHocPhan(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewLopHocPhan"/> instance.
            </summary>
            <param name="_maLopHocPhan"></param>
            <param name="_tenLopHocPhan"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewLopHocPhan} of <c>ViewLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewLopHocPhan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewLopHocPhan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewLopHocPhan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_LopHocPhan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewLopHocPhanService.#ctor">
            <summary>
            Initializes a new instance of the ViewLopHocPhanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewKhoiLuongThucDayService">
            <summary>
             An component type implementation of the 'View_KhoiLuong_ThucDay' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKhoiLuongThucDayService.#ctor">
            <summary>
            Initializes a new instance of the ViewKhoiLuongThucDayService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewBacDaoTaoLoaiHinhService">
            <summary>
             An component type implementation of the 'View_BacDaoTao_LoaiHinh' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewBacDaoTaoLoaiHinhService.#ctor">
            <summary>
            Initializes a new instance of the ViewBacDaoTaoLoaiHinhService class.
            </summary>
        </member>
        <member name="T:PMS.Services.LoaiKhoiLuongService">
            <summary>
            An component type implementation of the 'LoaiKhoiLuong' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.LoaiKhoiLuongServiceBase">
            <summary>
             An object representation of the 'LoaiKhoiLuong' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LoaiKhoiLuong.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.LoaiKhoiLuong"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.CreateLoaiKhoiLuong(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.LoaiKhoiLuong"/> instance.
            </summary>
            <param name="_maLoaiKhoiLuong"></param>
            <param name="_maNhom"></param>
            <param name="_tenLoaiKhoiLuong"></param>
            <param name="_nghiaVu"></param>
            <param name="_heSo"></param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetByMaNhom(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_LoaiKhoiLuong_NhomKhoiLuong key.
            	FK_LoaiKhoiLuong_NhomKhoiLuong Description: 
            </summary>
            <param name="_maNhom"></param>
            <returns>Returns a generic collection of LoaiKhoiLuong objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetByMaNhom(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_LoaiKhoiLuong_NhomKhoiLuong key.
            	FK_LoaiKhoiLuong_NhomKhoiLuong Description: 
            </summary>
            <param name="_maNhom"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Get(PMS.Entities.LoaiKhoiLuongKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetByMaLoaiKhoiLuong(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_LoaiKhoiLuong index.
            </summary>
            <param name="_maLoaiKhoiLuong"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> class.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetByMaLoaiKhoiLuong(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_LoaiKhoiLuong index.
            </summary>
            <param name="_maLoaiKhoiLuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> class.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.LoaiKhoiLuong"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.LoaiKhoiLuong"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LoaiKhoiLuong} of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LoaiKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Insert(PMS.Entities.LoaiKhoiLuong)">
            <summary>
            public virtual method that Inserts a LoaiKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiKhoiLuong object to Insert.</param>
            <remarks>After Inserting into the datasource, the LoaiKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LoaiKhoiLuong entity = new LoaiKhoiLuong();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LoaiKhoiLuongService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Insert(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LoaiKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LoaiKhoiLuong.
             <code><![CDATA[
             TList<LoaiKhoiLuong> list = new TList<LoaiKhoiLuong>();
             LoaiKhoiLuong entity = new LoaiKhoiLuong();
             entity.StringProperty = "foo";
             LoaiKhoiLuong entity2 = new LoaiKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiKhoiLuongService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Update(PMS.Entities.LoaiKhoiLuong)">
            <summary>
            public virtual method that Updates a LoaiKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiKhoiLuong object to Update.</param>
            <remarks>After Updateing into the datasource, the LoaiKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LoaiKhoiLuong entity = LoaiKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LoaiKhoiLuongService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Update(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LoaiKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LoaiKhoiLuong.
             <code><![CDATA[
             TList<LoaiKhoiLuong> list = new TList<LoaiKhoiLuong>();
             LoaiKhoiLuong entity = new LoaiKhoiLuong();
             entity.StringProperty = "foo";
             LoaiKhoiLuong entity2 = new LoaiKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiKhoiLuongService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Save(PMS.Entities.LoaiKhoiLuong)">
            <summary>
            public virtual method that Saves a LoaiKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiKhoiLuong object to Save.</param>
            <remarks>After Saveing into the datasource, the LoaiKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LoaiKhoiLuong entity = LoaiKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LoaiKhoiLuongService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Save(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LoaiKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LoaiKhoiLuong.
             <code><![CDATA[
             TList<LoaiKhoiLuong> list = new TList<LoaiKhoiLuong>();
             LoaiKhoiLuong entity = new LoaiKhoiLuong();
             entity.StringProperty = "foo";
             LoaiKhoiLuong entity2 = new LoaiKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiKhoiLuongService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Delete(PMS.Entities.LoaiKhoiLuong)">
            <summary>
            public virtual method that Deletes a LoaiKhoiLuong object into the datasource using a transaction.
            </summary>
            <param name="entity">LoaiKhoiLuong object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LoaiKhoiLuong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LoaiKhoiLuong entity = LoaiKhoiLuongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LoaiKhoiLuongService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Delete(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoaiKhoiLuong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LoaiKhoiLuong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LoaiKhoiLuong.
             <code><![CDATA[
             TList<LoaiKhoiLuong> list = new TList<LoaiKhoiLuong>();
             LoaiKhoiLuong entity = new LoaiKhoiLuong();
             entity.StringProperty = "foo";
             LoaiKhoiLuong entity2 = new LoaiKhoiLuong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoaiKhoiLuongService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Delete(PMS.Entities.LoaiKhoiLuongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _maLoaiKhoiLuong
            </summary>
            <param name="_maLoaiKhoiLuong">LoaiKhoiLuong pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoadByMaLoaiKhoiLuong(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.LoaiKhoiLuong"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maLoaiKhoiLuong"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoaiKhoiLuong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.LoaiKhoiLuong)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LoaiKhoiLuong Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.LoaiKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.LoaiKhoiLuong,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.LoaiKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LoaiKhoiLuong Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.LoaiKhoiLuong,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.LoaiKhoiLuong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoaiKhoiLuong Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.LoaiKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.LoaiKhoiLuong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.LoaiKhoiLuong"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepSave(PMS.Entities.LoaiKhoiLuong)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.LoaiKhoiLuong"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LoaiKhoiLuong Object</param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepSave(PMS.Entities.LoaiKhoiLuong,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LoaiKhoiLuong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LoaiKhoiLuong Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LoaiKhoiLuong</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LoaiKhoiLuong} Object</param>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.LoaiKhoiLuong},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LoaiKhoiLuong Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.LoaiKhoiLuongServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.LoaiKhoiLuongService.#ctor">
            <summary>
            Initializes a new instance of the LoaiKhoiLuongService class.
            </summary>
        </member>
        <member name="T:PMS.Services.MonKhongTinhServiceBase">
            <summary>
             An object representation of the 'MonKhongTinh' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the MonKhongTinh.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.MonKhongTinh"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.MonKhongTinh"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.CreateMonKhongTinh(System.String,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.MonKhongTinh"/> instance.
            </summary>
            <param name="_maMonHoc"></param>
            <param name="_ngayTao"></param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Get(PMS.Entities.MonKhongTinhKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.GetByMaMonHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_MonKhongTinh index.
            </summary>
            <param name="_maMonHoc"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.MonKhongTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.GetByMaMonHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_MonKhongTinh index.
            </summary>
            <param name="_maMonHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.MonKhongTinh"/> class.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.MonKhongTinh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.MonKhongTinh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{MonKhongTinh} of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MonKhongTinh</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Insert(PMS.Entities.MonKhongTinh)">
            <summary>
            public virtual method that Inserts a MonKhongTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">MonKhongTinh object to Insert.</param>
            <remarks>After Inserting into the datasource, the MonKhongTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            MonKhongTinh entity = new MonKhongTinh();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MonKhongTinhService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Insert(PMS.Entities.TList{PMS.Entities.MonKhongTinh})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonKhongTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>MonKhongTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of MonKhongTinh.
             <code><![CDATA[
             TList<MonKhongTinh> list = new TList<MonKhongTinh>();
             MonKhongTinh entity = new MonKhongTinh();
             entity.StringProperty = "foo";
             MonKhongTinh entity2 = new MonKhongTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonKhongTinhService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Update(PMS.Entities.MonKhongTinh)">
            <summary>
            public virtual method that Updates a MonKhongTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">MonKhongTinh object to Update.</param>
            <remarks>After Updateing into the datasource, the MonKhongTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            MonKhongTinh entity = MonKhongTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MonKhongTinhService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Update(PMS.Entities.TList{PMS.Entities.MonKhongTinh})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonKhongTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>MonKhongTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of MonKhongTinh.
             <code><![CDATA[
             TList<MonKhongTinh> list = new TList<MonKhongTinh>();
             MonKhongTinh entity = new MonKhongTinh();
             entity.StringProperty = "foo";
             MonKhongTinh entity2 = new MonKhongTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonKhongTinhService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Save(PMS.Entities.MonKhongTinh)">
            <summary>
            public virtual method that Saves a MonKhongTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">MonKhongTinh object to Save.</param>
            <remarks>After Saveing into the datasource, the MonKhongTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            MonKhongTinh entity = MonKhongTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MonKhongTinhService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Save(PMS.Entities.TList{PMS.Entities.MonKhongTinh})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonKhongTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>MonKhongTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of MonKhongTinh.
             <code><![CDATA[
             TList<MonKhongTinh> list = new TList<MonKhongTinh>();
             MonKhongTinh entity = new MonKhongTinh();
             entity.StringProperty = "foo";
             MonKhongTinh entity2 = new MonKhongTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonKhongTinhService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Delete(PMS.Entities.MonKhongTinh)">
            <summary>
            public virtual method that Deletes a MonKhongTinh object into the datasource using a transaction.
            </summary>
            <param name="entity">MonKhongTinh object to Delete.</param>
            <remarks>After Deleteing into the datasource, the MonKhongTinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            MonKhongTinh entity = MonKhongTinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MonKhongTinhService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Delete(PMS.Entities.TList{PMS.Entities.MonKhongTinh})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonKhongTinh</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>MonKhongTinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of MonKhongTinh.
             <code><![CDATA[
             TList<MonKhongTinh> list = new TList<MonKhongTinh>();
             MonKhongTinh entity = new MonKhongTinh();
             entity.StringProperty = "foo";
             MonKhongTinh entity2 = new MonKhongTinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonKhongTinhService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Delete(PMS.Entities.MonKhongTinhKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _maMonHoc
            </summary>
            <param name="_maMonHoc">MonKhongTinh pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepLoadByMaMonHoc(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.MonKhongTinh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maMonHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MonKhongTinh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.MonKhongTinh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.MonKhongTinh)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">MonKhongTinh Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.MonKhongTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.MonKhongTinh,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.MonKhongTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">MonKhongTinh Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.MonKhongTinh,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.MonKhongTinh"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MonKhongTinh Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.MonKhongTinh})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.MonKhongTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.MonKhongTinh},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.MonKhongTinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.MonKhongTinh},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.MonKhongTinh"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepSave(PMS.Entities.MonKhongTinh)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.MonKhongTinh"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">MonKhongTinh Object</param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepSave(PMS.Entities.MonKhongTinh,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the MonKhongTinh object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">MonKhongTinh Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>MonKhongTinh</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.MonKhongTinh})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{MonKhongTinh} Object</param>
        </member>
        <member name="M:PMS.Services.MonKhongTinhServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.MonKhongTinh},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">MonKhongTinh Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.MonKhongTinhServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.MonKhongTinhService">
            <summary>
            An component type implementation of the 'MonKhongTinh' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.MonKhongTinhService.#ctor">
            <summary>
            Initializes a new instance of the MonKhongTinhService class.
            </summary>
        </member>
        <member name="T:PMS.Services.GiangVienChucVuService">
            <summary>
            An component type implementation of the 'GiangVien_ChucVu' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienChucVuService.#ctor">
            <summary>
            Initializes a new instance of the GiangVienChucVuService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ThuLaoThoaThuanService">
            <summary>
            An component type implementation of the 'ThuLaoThoaThuan' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.ThuLaoThoaThuanService.#ctor">
            <summary>
            Initializes a new instance of the ThuLaoThoaThuanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.HeThongServiceBase">
            <summary>
             An object representation of the 'HeThong' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HeThong.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.HeThong"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.HeThong"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.CreateHeThong(System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.HeThong"/> instance.
            </summary>
            <param name="_userId"></param>
            <param name="_parentId"></param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetByUserId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_HeThong_TaiKhoan key.
            	FK_HeThong_TaiKhoan Description: 
            </summary>
            <param name="_userId"></param>
            <returns>Returns a generic collection of HeThong objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetByUserId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_HeThong_TaiKhoan key.
            	FK_HeThong_TaiKhoan Description: 
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetByParentId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_HeThong_TaiKhoan1 key.
            	FK_HeThong_TaiKhoan1 Description: 
            </summary>
            <param name="_parentId"></param>
            <returns>Returns a generic collection of HeThong objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetByParentId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_HeThong_TaiKhoan1 key.
            	FK_HeThong_TaiKhoan1 Description: 
            </summary>
            <param name="_parentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Get(PMS.Entities.HeThongKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetByUserIdParentId(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HeThong index.
            </summary>
            <param name="_userId"></param>
            <param name="_parentId"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeThong"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetByUserIdParentId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HeThong index.
            </summary>
            <param name="_userId"></param>
            <param name="_parentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeThong"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.HeThong"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.HeThong"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HeThong} of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HeThong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Insert(PMS.Entities.HeThong)">
            <summary>
            public virtual method that Inserts a HeThong object into the datasource using a transaction.
            </summary>
            <param name="entity">HeThong object to Insert.</param>
            <remarks>After Inserting into the datasource, the HeThong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HeThong entity = new HeThong();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HeThongService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Insert(PMS.Entities.TList{PMS.Entities.HeThong})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeThong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HeThong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HeThong.
             <code><![CDATA[
             TList<HeThong> list = new TList<HeThong>();
             HeThong entity = new HeThong();
             entity.StringProperty = "foo";
             HeThong entity2 = new HeThong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeThongService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Update(PMS.Entities.HeThong)">
            <summary>
            public virtual method that Updates a HeThong object into the datasource using a transaction.
            </summary>
            <param name="entity">HeThong object to Update.</param>
            <remarks>After Updateing into the datasource, the HeThong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HeThong entity = HeThongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HeThongService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Update(PMS.Entities.TList{PMS.Entities.HeThong})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeThong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HeThong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HeThong.
             <code><![CDATA[
             TList<HeThong> list = new TList<HeThong>();
             HeThong entity = new HeThong();
             entity.StringProperty = "foo";
             HeThong entity2 = new HeThong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeThongService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Save(PMS.Entities.HeThong)">
            <summary>
            public virtual method that Saves a HeThong object into the datasource using a transaction.
            </summary>
            <param name="entity">HeThong object to Save.</param>
            <remarks>After Saveing into the datasource, the HeThong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HeThong entity = HeThongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HeThongService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Save(PMS.Entities.TList{PMS.Entities.HeThong})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeThong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HeThong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HeThong.
             <code><![CDATA[
             TList<HeThong> list = new TList<HeThong>();
             HeThong entity = new HeThong();
             entity.StringProperty = "foo";
             HeThong entity2 = new HeThong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeThongService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Delete(PMS.Entities.HeThong)">
            <summary>
            public virtual method that Deletes a HeThong object into the datasource using a transaction.
            </summary>
            <param name="entity">HeThong object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HeThong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HeThong entity = HeThongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HeThongService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Delete(PMS.Entities.TList{PMS.Entities.HeThong})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HeThong</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HeThong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HeThong.
             <code><![CDATA[
             TList<HeThong> list = new TList<HeThong>();
             HeThong entity = new HeThong();
             entity.StringProperty = "foo";
             HeThong entity2 = new HeThong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HeThongService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Delete(PMS.Entities.HeThongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _userId, System.Int32 _parentId
            </summary>
            <param name="_userId">HeThong pk id.</param>
            <param name="_parentId">HeThong pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepLoadByUserIdParentId(System.Int32,System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HeThong"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="_parentId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeThong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HeThong"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.HeThong)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HeThong Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.HeThong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.HeThong,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.HeThong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HeThong Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.HeThong,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.HeThong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HeThong Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeThong})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.HeThong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeThong},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.HeThong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HeThong},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.HeThong"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepSave(PMS.Entities.HeThong)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.HeThong"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HeThong Object</param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepSave(PMS.Entities.HeThong,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HeThong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HeThong Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HeThong</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HeThong})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HeThong} Object</param>
        </member>
        <member name="M:PMS.Services.HeThongServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HeThong},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HeThong Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.HeThongServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.HeThongService">
            <summary>
            An component type implementation of the 'HeThong' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.HeThongService.#ctor">
            <summary>
            Initializes a new instance of the HeThongService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:PMS.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:PMS.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:PMS.Services.ProcessorEventArgs.#ctor(PMS.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:PMS.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:PMS.Services.ViewKetQuaTinhService">
            <summary>
             An component type implementation of the 'View_KetQuaTinh' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKetQuaTinhService.#ctor">
            <summary>
            Initializes a new instance of the ViewKetQuaTinhService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewGiangVienDonGiaServiceBase">
            <summary>
             An object representation of the 'View_GiangVien_DonGia' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewGiangVienDonGia.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewGiangVienDonGia"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewGiangVienDonGia"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.CreateViewGiangVienDonGia(System.Int32,System.String,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewGiangVienDonGia"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_maDonVi"></param>
            <param name="_donGia"></param>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewGiangVienDonGia} of <c>ViewGiangVienDonGia</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewGiangVienDonGia"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewGiangVienDonGia"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienDonGia</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienDonGia</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewGiangVienDonGia</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewGiangVienDonGia</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewGiangVienDonGia</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewGiangVienDonGia</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.GetByMaDonVi(System.String)">
            <summary>
            This method wrap the 'cust_View_GiangVien_DonGia_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaServiceBase.GetByMaDonVi(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_GiangVien_DonGia_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewChiTietKhoiLuongService">
            <summary>
             An component type implementation of the 'View_ChiTiet_KhoiLuong' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewChiTietKhoiLuongServiceBase">
            <summary>
             An object representation of the 'View_ChiTiet_KhoiLuong' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewChiTietKhoiLuong.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewChiTietKhoiLuong"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewChiTietKhoiLuong"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.CreateViewChiTietKhoiLuong(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewChiTietKhoiLuong"/> instance.
            </summary>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_maKhoa"></param>
            <param name="_maBoMon"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_maNhom"></param>
            <param name="_maLop"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_siSoLop"></param>
            <param name="_trongGio"></param>
            <param name="_chatLuongCao"></param>
            <param name="_ngoaiGio"></param>
            <param name="_heSoThanhPhan"></param>
            <param name="_heSoLopDong"></param>
            <param name="_donGia"></param>
            <param name="_tietQuyDoi"></param>
            <param name="_maLoaiKhoiLuong"></param>
            <param name="_tenLoaiKhoiLuong"></param>
            <param name="_phanLoai"></param>
            <param name="_nghiaVu"></param>
            <param name="_nguongTiet"></param>
            <param name="_tietNghiaVu"></param>
            <param name="_thanhTien"></param>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewChiTietKhoiLuong} of <c>ViewChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewChiTietKhoiLuong"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewChiTietKhoiLuong"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuong</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.ThucDay_GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.ThucDay_GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GiangDay_GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GiangDay_GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GetByNamHocHocKyMaDonViMaGiangVien(System.String,System.String,System.String,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_GetByNamHocHocKyMaDonViMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maBoMon"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongServiceBase.GetByNamHocHocKyMaDonViMaGiangVien(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_GetByNamHocHocKyMaDonViMaGiangVien' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maBoMon"> A <c>System.String</c> instance.</param>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongService.#ctor">
            <summary>
            Initializes a new instance of the ViewChiTietKhoiLuongService class.
            </summary>
        </member>
        <member name="T:PMS.Services.QuyDoiGioChuanServiceBase">
            <summary>
             An object representation of the 'QuyDoiGioChuan' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuyDoiGioChuan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.QuyDoiGioChuan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.CreateQuyDoiGioChuan(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.QuyDoiGioChuan"/> instance.
            </summary>
            <param name="_maDonVi"></param>
            <param name="_maQuanLy"></param>
            <param name="_tenQuyDoi"></param>
            <param name="_soLuong"></param>
            <param name="_heSo"></param>
            <param name="_congDon"></param>
            <param name="_loaiQuyDoi"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetByMaDonVi(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_QuyDoiGioChuan_DonViTinh key.
            	FK_QuyDoiGioChuan_DonViTinh Description: 
            </summary>
            <param name="_maDonVi"></param>
            <returns>Returns a generic collection of QuyDoiGioChuan objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetByMaDonVi(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_QuyDoiGioChuan_DonViTinh key.
            	FK_QuyDoiGioChuan_DonViTinh Description: 
            </summary>
            <param name="_maDonVi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Get(PMS.Entities.QuyDoiGioChuanKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_QuyDoiGioChuan index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_QuyDoiGioChuan index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetByMaQuyDoi(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_QuyDoiGioChuan index.
            </summary>
            <param name="_maQuyDoi"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetByMaQuyDoi(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_QuyDoiGioChuan index.
            </summary>
            <param name="_maQuyDoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.QuyDoiGioChuan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.QuyDoiGioChuan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuyDoiGioChuan} of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuyDoiGioChuan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Insert(PMS.Entities.QuyDoiGioChuan)">
            <summary>
            public virtual method that Inserts a QuyDoiGioChuan object into the datasource using a transaction.
            </summary>
            <param name="entity">QuyDoiGioChuan object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuyDoiGioChuan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuyDoiGioChuan entity = new QuyDoiGioChuan();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuyDoiGioChuanService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Insert(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuyDoiGioChuan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuyDoiGioChuan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuyDoiGioChuan.
             <code><![CDATA[
             TList<QuyDoiGioChuan> list = new TList<QuyDoiGioChuan>();
             QuyDoiGioChuan entity = new QuyDoiGioChuan();
             entity.StringProperty = "foo";
             QuyDoiGioChuan entity2 = new QuyDoiGioChuan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuyDoiGioChuanService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Update(PMS.Entities.QuyDoiGioChuan)">
            <summary>
            public virtual method that Updates a QuyDoiGioChuan object into the datasource using a transaction.
            </summary>
            <param name="entity">QuyDoiGioChuan object to Update.</param>
            <remarks>After Updateing into the datasource, the QuyDoiGioChuan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuyDoiGioChuan entity = QuyDoiGioChuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuyDoiGioChuanService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Update(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuyDoiGioChuan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuyDoiGioChuan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuyDoiGioChuan.
             <code><![CDATA[
             TList<QuyDoiGioChuan> list = new TList<QuyDoiGioChuan>();
             QuyDoiGioChuan entity = new QuyDoiGioChuan();
             entity.StringProperty = "foo";
             QuyDoiGioChuan entity2 = new QuyDoiGioChuan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuyDoiGioChuanService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Save(PMS.Entities.QuyDoiGioChuan)">
            <summary>
            public virtual method that Saves a QuyDoiGioChuan object into the datasource using a transaction.
            </summary>
            <param name="entity">QuyDoiGioChuan object to Save.</param>
            <remarks>After Saveing into the datasource, the QuyDoiGioChuan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuyDoiGioChuan entity = QuyDoiGioChuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuyDoiGioChuanService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Save(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuyDoiGioChuan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuyDoiGioChuan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuyDoiGioChuan.
             <code><![CDATA[
             TList<QuyDoiGioChuan> list = new TList<QuyDoiGioChuan>();
             QuyDoiGioChuan entity = new QuyDoiGioChuan();
             entity.StringProperty = "foo";
             QuyDoiGioChuan entity2 = new QuyDoiGioChuan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuyDoiGioChuanService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Delete(PMS.Entities.QuyDoiGioChuan)">
            <summary>
            public virtual method that Deletes a QuyDoiGioChuan object into the datasource using a transaction.
            </summary>
            <param name="entity">QuyDoiGioChuan object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuyDoiGioChuan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuyDoiGioChuan entity = QuyDoiGioChuanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuyDoiGioChuanService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Delete(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuyDoiGioChuan</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuyDoiGioChuan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuyDoiGioChuan.
             <code><![CDATA[
             TList<QuyDoiGioChuan> list = new TList<QuyDoiGioChuan>();
             QuyDoiGioChuan entity = new QuyDoiGioChuan();
             entity.StringProperty = "foo";
             QuyDoiGioChuan entity2 = new QuyDoiGioChuan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuyDoiGioChuanService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Delete(PMS.Entities.QuyDoiGioChuanKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maQuyDoi
            </summary>
            <param name="_maQuyDoi">QuyDoiGioChuan pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.QuyDoiGioChuan"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuyDoiGioChuan Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoadByMaQuyDoi(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.QuyDoiGioChuan"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuyDoi"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuyDoiGioChuan Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.QuyDoiGioChuan)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuyDoiGioChuan Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.QuyDoiGioChuan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.QuyDoiGioChuan,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.QuyDoiGioChuan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuyDoiGioChuan Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.QuyDoiGioChuan,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.QuyDoiGioChuan"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuyDoiGioChuan Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.QuyDoiGioChuan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.QuyDoiGioChuan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.QuyDoiGioChuan"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepSave(PMS.Entities.QuyDoiGioChuan)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.QuyDoiGioChuan"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuyDoiGioChuan Object</param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepSave(PMS.Entities.QuyDoiGioChuan,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuyDoiGioChuan object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuyDoiGioChuan Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuyDoiGioChuan</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuyDoiGioChuan} Object</param>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.QuyDoiGioChuan},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuyDoiGioChuan Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.QuyDoiGioChuanServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.ReportTemplateService">
            <summary>
            An component type implementation of the 'ReportTemplate' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.ReportTemplateService.#ctor">
            <summary>
            Initializes a new instance of the ReportTemplateService class.
            </summary>
        </member>
        <member name="T:PMS.Services.NhomChucNangServiceBase">
            <summary>
             An object representation of the 'NhomChucNang' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NhomChucNang.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.NhomChucNang"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.NhomChucNang"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.CreateNhomChucNang(System.Int32,System.Int32,System.Byte[])">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.NhomChucNang"/> instance.
            </summary>
            <param name="_maChucNang"></param>
            <param name="_maNhomQuyen"></param>
            <param name="_duLieu"></param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetByMaNhomQuyen(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GroupModules_Groups key.
            	FK_GroupModules_Groups Description: 
            </summary>
            <param name="_maNhomQuyen"></param>
            <returns>Returns a generic collection of NhomChucNang objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetByMaNhomQuyen(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GroupModules_Groups key.
            	FK_GroupModules_Groups Description: 
            </summary>
            <param name="_maNhomQuyen"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetByMaChucNang(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GroupModules_Modules key.
            	FK_GroupModules_Modules Description: 
            </summary>
            <param name="_maChucNang"></param>
            <returns>Returns a generic collection of NhomChucNang objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetByMaChucNang(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GroupModules_Modules key.
            	FK_GroupModules_Modules Description: 
            </summary>
            <param name="_maChucNang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Get(PMS.Entities.NhomChucNangKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetByMaChucNangMaNhomQuyen(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GroupModules index.
            </summary>
            <param name="_maChucNang"></param>
            <param name="_maNhomQuyen"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomChucNang"/> class.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetByMaChucNangMaNhomQuyen(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GroupModules index.
            </summary>
            <param name="_maChucNang"></param>
            <param name="_maNhomQuyen"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomChucNang"/> class.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.NhomChucNang"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.NhomChucNang"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{NhomChucNang} of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NhomChucNang</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Insert(PMS.Entities.NhomChucNang)">
            <summary>
            public virtual method that Inserts a NhomChucNang object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomChucNang object to Insert.</param>
            <remarks>After Inserting into the datasource, the NhomChucNang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            NhomChucNang entity = new NhomChucNang();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NhomChucNangService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Insert(PMS.Entities.TList{PMS.Entities.NhomChucNang})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomChucNang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>NhomChucNang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of NhomChucNang.
             <code><![CDATA[
             TList<NhomChucNang> list = new TList<NhomChucNang>();
             NhomChucNang entity = new NhomChucNang();
             entity.StringProperty = "foo";
             NhomChucNang entity2 = new NhomChucNang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomChucNangService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Update(PMS.Entities.NhomChucNang)">
            <summary>
            public virtual method that Updates a NhomChucNang object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomChucNang object to Update.</param>
            <remarks>After Updateing into the datasource, the NhomChucNang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            NhomChucNang entity = NhomChucNangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NhomChucNangService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Update(PMS.Entities.TList{PMS.Entities.NhomChucNang})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomChucNang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>NhomChucNang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of NhomChucNang.
             <code><![CDATA[
             TList<NhomChucNang> list = new TList<NhomChucNang>();
             NhomChucNang entity = new NhomChucNang();
             entity.StringProperty = "foo";
             NhomChucNang entity2 = new NhomChucNang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomChucNangService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Save(PMS.Entities.NhomChucNang)">
            <summary>
            public virtual method that Saves a NhomChucNang object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomChucNang object to Save.</param>
            <remarks>After Saveing into the datasource, the NhomChucNang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            NhomChucNang entity = NhomChucNangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NhomChucNangService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Save(PMS.Entities.TList{PMS.Entities.NhomChucNang})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomChucNang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>NhomChucNang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of NhomChucNang.
             <code><![CDATA[
             TList<NhomChucNang> list = new TList<NhomChucNang>();
             NhomChucNang entity = new NhomChucNang();
             entity.StringProperty = "foo";
             NhomChucNang entity2 = new NhomChucNang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomChucNangService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Delete(PMS.Entities.NhomChucNang)">
            <summary>
            public virtual method that Deletes a NhomChucNang object into the datasource using a transaction.
            </summary>
            <param name="entity">NhomChucNang object to Delete.</param>
            <remarks>After Deleteing into the datasource, the NhomChucNang object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            NhomChucNang entity = NhomChucNangService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NhomChucNangService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Delete(PMS.Entities.TList{PMS.Entities.NhomChucNang})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NhomChucNang</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>NhomChucNang</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of NhomChucNang.
             <code><![CDATA[
             TList<NhomChucNang> list = new TList<NhomChucNang>();
             NhomChucNang entity = new NhomChucNang();
             entity.StringProperty = "foo";
             NhomChucNang entity2 = new NhomChucNang();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NhomChucNangService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Delete(PMS.Entities.NhomChucNangKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maChucNang, System.Int32 _maNhomQuyen
            </summary>
            <param name="_maChucNang">NhomChucNang pk id.</param>
            <param name="_maNhomQuyen">NhomChucNang pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepLoadByMaChucNangMaNhomQuyen(System.Int32,System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.NhomChucNang"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maChucNang"></param>
            <param name="_maNhomQuyen"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NhomChucNang Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.NhomChucNang"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.NhomChucNang)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">NhomChucNang Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.NhomChucNang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.NhomChucNang,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.NhomChucNang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">NhomChucNang Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.NhomChucNang,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.NhomChucNang"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NhomChucNang Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomChucNang})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.NhomChucNang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomChucNang},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.NhomChucNang)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.NhomChucNang},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.NhomChucNang"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepSave(PMS.Entities.NhomChucNang)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.NhomChucNang"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">NhomChucNang Object</param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepSave(PMS.Entities.NhomChucNang,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the NhomChucNang object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">NhomChucNang Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>NhomChucNang</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.NhomChucNang})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{NhomChucNang} Object</param>
        </member>
        <member name="M:PMS.Services.NhomChucNangServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.NhomChucNang},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">NhomChucNang Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.NhomChucNangServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.HocHamServiceBase">
            <summary>
             An object representation of the 'HocHam' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HocHam.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.HocHam"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.HocHam"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.CreateHocHam(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.HocHam"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenHocHam"></param>
            <param name="_donGia"></param>
            <param name="_thucLanh"></param>
            <param name="_thuTu"></param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Get(PMS.Entities.HocHamKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HocHam index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocHam"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_HocHam index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocHam"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetByMaHocHam(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HocHam index.
            </summary>
            <param name="_maHocHam"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocHam"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetByMaHocHam(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_HocHam index.
            </summary>
            <param name="_maHocHam"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocHam"/> class.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.HocHam"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.HocHam"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HocHam} of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HocHam</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Insert(PMS.Entities.HocHam)">
            <summary>
            public virtual method that Inserts a HocHam object into the datasource using a transaction.
            </summary>
            <param name="entity">HocHam object to Insert.</param>
            <remarks>After Inserting into the datasource, the HocHam object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HocHam entity = new HocHam();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HocHamService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Insert(PMS.Entities.TList{PMS.Entities.HocHam})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocHam</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HocHam</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HocHam.
             <code><![CDATA[
             TList<HocHam> list = new TList<HocHam>();
             HocHam entity = new HocHam();
             entity.StringProperty = "foo";
             HocHam entity2 = new HocHam();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocHamService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Update(PMS.Entities.HocHam)">
            <summary>
            public virtual method that Updates a HocHam object into the datasource using a transaction.
            </summary>
            <param name="entity">HocHam object to Update.</param>
            <remarks>After Updateing into the datasource, the HocHam object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HocHam entity = HocHamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HocHamService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Update(PMS.Entities.TList{PMS.Entities.HocHam})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocHam</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HocHam</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HocHam.
             <code><![CDATA[
             TList<HocHam> list = new TList<HocHam>();
             HocHam entity = new HocHam();
             entity.StringProperty = "foo";
             HocHam entity2 = new HocHam();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocHamService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Save(PMS.Entities.HocHam)">
            <summary>
            public virtual method that Saves a HocHam object into the datasource using a transaction.
            </summary>
            <param name="entity">HocHam object to Save.</param>
            <remarks>After Saveing into the datasource, the HocHam object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HocHam entity = HocHamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HocHamService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Save(PMS.Entities.TList{PMS.Entities.HocHam})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocHam</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HocHam</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HocHam.
             <code><![CDATA[
             TList<HocHam> list = new TList<HocHam>();
             HocHam entity = new HocHam();
             entity.StringProperty = "foo";
             HocHam entity2 = new HocHam();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocHamService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Delete(PMS.Entities.HocHam)">
            <summary>
            public virtual method that Deletes a HocHam object into the datasource using a transaction.
            </summary>
            <param name="entity">HocHam object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HocHam object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HocHam entity = HocHamService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HocHamService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Delete(PMS.Entities.TList{PMS.Entities.HocHam})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocHam</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HocHam</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HocHam.
             <code><![CDATA[
             TList<HocHam> list = new TList<HocHam>();
             HocHam entity = new HocHam();
             entity.StringProperty = "foo";
             HocHam entity2 = new HocHam();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocHamService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Delete(PMS.Entities.HocHamKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maHocHam
            </summary>
            <param name="_maHocHam">HocHam pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HocHam"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocHam Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocHam"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepLoadByMaHocHam(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.HocHam"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maHocHam"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocHam Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.HocHam"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.HocHam)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HocHam Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.HocHam)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.HocHam,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.HocHam)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HocHam Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.HocHam,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.HocHam"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocHam Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HocHam})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.HocHam)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HocHam},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.HocHam)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.HocHam},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.HocHam"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepSave(PMS.Entities.HocHam)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.HocHam"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HocHam Object</param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepSave(PMS.Entities.HocHam,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HocHam object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HocHam Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HocHam</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HocHam})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HocHam} Object</param>
        </member>
        <member name="M:PMS.Services.HocHamServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.HocHam},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HocHam Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.HocHamServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:PMS.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PMS.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:PMS.Services.ContextView`2.#ctor(`0,PMS.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PMS.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:PMS.Services.ContextView`2.#ctor(`0,PMS.Services.SecurityContext{`0},PMS.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:PMS.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:PMS.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:PMS.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:PMS.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:PMS.Services.ViewTinhKhoiLuongService">
            <summary>
             An component type implementation of the 'View_Tinh_KhoiLuong' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTinhKhoiLuongService.#ctor">
            <summary>
            Initializes a new instance of the ViewTinhKhoiLuongService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewSinhVienHocPhanService">
            <summary>
             An component type implementation of the 'View_SinhVien_HocPhan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewSinhVienHocPhanService.#ctor">
            <summary>
            Initializes a new instance of the ViewSinhVienHocPhanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase">
            <summary>
             An object representation of the 'View_ChiTiet_KhoiLuong_ThucDay' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewChiTietKhoiLuongThucDay.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewChiTietKhoiLuongThucDay"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewChiTietKhoiLuongThucDay"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.CreateViewChiTietKhoiLuongThucDay(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewChiTietKhoiLuongThucDay"/> instance.
            </summary>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_maBoMon"></param>
            <param name="_tenBoMon"></param>
            <param name="_lyThuyet1"></param>
            <param name="_thucHanh1"></param>
            <param name="_thiNghiem1"></param>
            <param name="_doAn1"></param>
            <param name="_lyThuyet2"></param>
            <param name="_thucHanh2"></param>
            <param name="_thiNghiem2"></param>
            <param name="_doAn2"></param>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewChiTietKhoiLuongThucDay} of <c>ViewChiTietKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewChiTietKhoiLuongThucDay"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewChiTietKhoiLuongThucDay"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewChiTietKhoiLuongThucDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_ChiTiet_KhoiLuong_ThucDay_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.GiangVienHoSoService">
            <summary>
            An component type implementation of the 'GiangVien_HoSo' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.GiangVienHoSoServiceBase">
            <summary>
             An object representation of the 'GiangVien_HoSo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the GiangVienHoSo.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.GiangVienHoSo"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.GiangVienHoSo"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.CreateGiangVienHoSo(System.Int32,System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.GiangVienHoSo"/> instance.
            </summary>
            <param name="_maHoSo"></param>
            <param name="_maGiangVien"></param>
            <param name="_soHoSo"></param>
            <param name="_ngayCap"></param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetByMaGiangVien(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_HoSo_GiangVien key.
            	FK_GiangVien_HoSo_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a generic collection of GiangVienHoSo objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetByMaGiangVien(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_HoSo_GiangVien key.
            	FK_GiangVien_HoSo_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetByMaHoSo(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_HoSo_HoSo key.
            	FK_GiangVien_HoSo_HoSo Description: 
            </summary>
            <param name="_maHoSo"></param>
            <returns>Returns a generic collection of GiangVienHoSo objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetByMaHoSo(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_GiangVien_HoSo_HoSo key.
            	FK_GiangVien_HoSo_HoSo Description: 
            </summary>
            <param name="_maHoSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Get(PMS.Entities.GiangVienHoSoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetByMaHoSoMaGiangVien(System.Int32,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GiangVien_HoSo index.
            </summary>
            <param name="_maHoSo"></param>
            <param name="_maGiangVien"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienHoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetByMaHoSoMaGiangVien(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_GiangVien_HoSo index.
            </summary>
            <param name="_maHoSo"></param>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienHoSo"/> class.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.GiangVienHoSo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.GiangVienHoSo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{GiangVienHoSo} of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiangVienHoSo</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Insert(PMS.Entities.GiangVienHoSo)">
            <summary>
            public virtual method that Inserts a GiangVienHoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienHoSo object to Insert.</param>
            <remarks>After Inserting into the datasource, the GiangVienHoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            GiangVienHoSo entity = new GiangVienHoSo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GiangVienHoSoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Insert(PMS.Entities.TList{PMS.Entities.GiangVienHoSo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienHoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>GiangVienHoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of GiangVienHoSo.
             <code><![CDATA[
             TList<GiangVienHoSo> list = new TList<GiangVienHoSo>();
             GiangVienHoSo entity = new GiangVienHoSo();
             entity.StringProperty = "foo";
             GiangVienHoSo entity2 = new GiangVienHoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienHoSoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Update(PMS.Entities.GiangVienHoSo)">
            <summary>
            public virtual method that Updates a GiangVienHoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienHoSo object to Update.</param>
            <remarks>After Updateing into the datasource, the GiangVienHoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            GiangVienHoSo entity = GiangVienHoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GiangVienHoSoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Update(PMS.Entities.TList{PMS.Entities.GiangVienHoSo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienHoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>GiangVienHoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of GiangVienHoSo.
             <code><![CDATA[
             TList<GiangVienHoSo> list = new TList<GiangVienHoSo>();
             GiangVienHoSo entity = new GiangVienHoSo();
             entity.StringProperty = "foo";
             GiangVienHoSo entity2 = new GiangVienHoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienHoSoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Save(PMS.Entities.GiangVienHoSo)">
            <summary>
            public virtual method that Saves a GiangVienHoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienHoSo object to Save.</param>
            <remarks>After Saveing into the datasource, the GiangVienHoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            GiangVienHoSo entity = GiangVienHoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GiangVienHoSoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Save(PMS.Entities.TList{PMS.Entities.GiangVienHoSo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienHoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>GiangVienHoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of GiangVienHoSo.
             <code><![CDATA[
             TList<GiangVienHoSo> list = new TList<GiangVienHoSo>();
             GiangVienHoSo entity = new GiangVienHoSo();
             entity.StringProperty = "foo";
             GiangVienHoSo entity2 = new GiangVienHoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienHoSoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Delete(PMS.Entities.GiangVienHoSo)">
            <summary>
            public virtual method that Deletes a GiangVienHoSo object into the datasource using a transaction.
            </summary>
            <param name="entity">GiangVienHoSo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the GiangVienHoSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            GiangVienHoSo entity = GiangVienHoSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GiangVienHoSoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Delete(PMS.Entities.TList{PMS.Entities.GiangVienHoSo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiangVienHoSo</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>GiangVienHoSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of GiangVienHoSo.
             <code><![CDATA[
             TList<GiangVienHoSo> list = new TList<GiangVienHoSo>();
             GiangVienHoSo entity = new GiangVienHoSo();
             entity.StringProperty = "foo";
             GiangVienHoSo entity2 = new GiangVienHoSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiangVienHoSoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Delete(PMS.Entities.GiangVienHoSoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maHoSo, System.Int32 _maGiangVien
            </summary>
            <param name="_maHoSo">GiangVienHoSo pk id.</param>
            <param name="_maGiangVien">GiangVienHoSo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoadByMaHoSoMaGiangVien(System.Int32,System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.GiangVienHoSo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maHoSo"></param>
            <param name="_maGiangVien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVienHoSo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.GiangVienHoSo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.GiangVienHoSo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">GiangVienHoSo Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.GiangVienHoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.GiangVienHoSo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.GiangVienHoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">GiangVienHoSo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.GiangVienHoSo,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.GiangVienHoSo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiangVienHoSo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienHoSo})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.GiangVienHoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienHoSo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.GiangVienHoSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.GiangVienHoSo},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.GiangVienHoSo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepSave(PMS.Entities.GiangVienHoSo)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.GiangVienHoSo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">GiangVienHoSo Object</param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepSave(PMS.Entities.GiangVienHoSo,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the GiangVienHoSo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">GiangVienHoSo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>GiangVienHoSo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.GiangVienHoSo})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{GiangVienHoSo} Object</param>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.GiangVienHoSo},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">GiangVienHoSo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.GiangVienHoSoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.GiangVienHoSoService.#ctor">
            <summary>
            Initializes a new instance of the GiangVienHoSoService class.
            </summary>
        </member>
        <member name="T:PMS.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:PMS.Services.DomainUtil.GetErrorsFromList``1(PMS.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:PMS.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:PMS.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:PMS.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:PMS.Services.ViewChiTietHocPhanService">
            <summary>
             An component type implementation of the 'View_ChiTiet_HocPhan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietHocPhanService.#ctor">
            <summary>
            Initializes a new instance of the ViewChiTietHocPhanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.CoVanHocTapServiceBase">
            <summary>
             An object representation of the 'CoVanHocTap' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CoVanHocTap.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.CoVanHocTap"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.CoVanHocTap"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.CreateCoVanHocTap(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.CoVanHocTap"/> instance.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maLop"></param>
            <param name="_maKhoaHoc"></param>
            <param name="_soTiet"></param>
            <param name="_soTien"></param>
            <param name="_ngayTao"></param>
            <param name="_trangThai"></param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByMaGiangVien(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_CoVanHocTap_GiangVien key.
            	FK_CoVanHocTap_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a generic collection of CoVanHocTap objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByMaGiangVien(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the FK_CoVanHocTap_GiangVien key.
            	FK_CoVanHocTap_GiangVien Description: 
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:PMS.Entities.TList`1"/> of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Get(PMS.Entities.CoVanHocTapKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByMaGiangVienMaLopNamHocHocKy(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_CoVanHocTap index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maLop"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CoVanHocTap"/> class.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByMaGiangVienMaLopNamHocHocKy(System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_CoVanHocTap index.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maLop"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CoVanHocTap"/> class.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByMaCoVan(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_CoVanHocTap index.
            </summary>
            <param name="_maCoVan"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CoVanHocTap"/> class.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByMaCoVan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_CoVanHocTap index.
            </summary>
            <param name="_maCoVan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CoVanHocTap"/> class.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.CoVanHocTap"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.CoVanHocTap"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CoVanHocTap} of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CoVanHocTap</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Insert(PMS.Entities.CoVanHocTap)">
            <summary>
            public virtual method that Inserts a CoVanHocTap object into the datasource using a transaction.
            </summary>
            <param name="entity">CoVanHocTap object to Insert.</param>
            <remarks>After Inserting into the datasource, the CoVanHocTap object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CoVanHocTap entity = new CoVanHocTap();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CoVanHocTapService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Insert(PMS.Entities.TList{PMS.Entities.CoVanHocTap})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CoVanHocTap</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CoVanHocTap</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CoVanHocTap.
             <code><![CDATA[
             TList<CoVanHocTap> list = new TList<CoVanHocTap>();
             CoVanHocTap entity = new CoVanHocTap();
             entity.StringProperty = "foo";
             CoVanHocTap entity2 = new CoVanHocTap();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CoVanHocTapService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Update(PMS.Entities.CoVanHocTap)">
            <summary>
            public virtual method that Updates a CoVanHocTap object into the datasource using a transaction.
            </summary>
            <param name="entity">CoVanHocTap object to Update.</param>
            <remarks>After Updateing into the datasource, the CoVanHocTap object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CoVanHocTap entity = CoVanHocTapService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CoVanHocTapService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Update(PMS.Entities.TList{PMS.Entities.CoVanHocTap})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CoVanHocTap</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CoVanHocTap</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CoVanHocTap.
             <code><![CDATA[
             TList<CoVanHocTap> list = new TList<CoVanHocTap>();
             CoVanHocTap entity = new CoVanHocTap();
             entity.StringProperty = "foo";
             CoVanHocTap entity2 = new CoVanHocTap();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CoVanHocTapService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Save(PMS.Entities.CoVanHocTap)">
            <summary>
            public virtual method that Saves a CoVanHocTap object into the datasource using a transaction.
            </summary>
            <param name="entity">CoVanHocTap object to Save.</param>
            <remarks>After Saveing into the datasource, the CoVanHocTap object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CoVanHocTap entity = CoVanHocTapService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CoVanHocTapService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Save(PMS.Entities.TList{PMS.Entities.CoVanHocTap})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CoVanHocTap</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CoVanHocTap</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CoVanHocTap.
             <code><![CDATA[
             TList<CoVanHocTap> list = new TList<CoVanHocTap>();
             CoVanHocTap entity = new CoVanHocTap();
             entity.StringProperty = "foo";
             CoVanHocTap entity2 = new CoVanHocTap();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CoVanHocTapService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Delete(PMS.Entities.CoVanHocTap)">
            <summary>
            public virtual method that Deletes a CoVanHocTap object into the datasource using a transaction.
            </summary>
            <param name="entity">CoVanHocTap object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CoVanHocTap object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CoVanHocTap entity = CoVanHocTapService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CoVanHocTapService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Delete(PMS.Entities.TList{PMS.Entities.CoVanHocTap})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CoVanHocTap</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CoVanHocTap</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CoVanHocTap.
             <code><![CDATA[
             TList<CoVanHocTap> list = new TList<CoVanHocTap>();
             CoVanHocTap entity = new CoVanHocTap();
             entity.StringProperty = "foo";
             CoVanHocTap entity2 = new CoVanHocTap();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CoVanHocTapService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Delete(PMS.Entities.CoVanHocTapKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maCoVan
            </summary>
            <param name="_maCoVan">CoVanHocTap pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByMaGiangVienNamHocHocKy(System.Int32,System.String,System.String)">
            <summary>
            This method wrap the 'cust_CoVanHocTap_GetByMaGiangVienNamHocHocKy' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByMaGiangVienNamHocHocKy(System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_CoVanHocTap_GetByMaGiangVienNamHocHocKy' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.InsertUpdate(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
            This method wrap the 'cust_CoVanHocTap_InsertUpdate' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.Int32?</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <param name="ngayTao"> A <c>System.DateTime</c> instance.</param>
            <param name="soTiet"> A <c>System.Int32?</c> instance.</param>
            <param name="soTien"> A <c>System.Decimal?</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.InsertUpdate(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_CoVanHocTap_InsertUpdate' stored procedure. 
            </summary>
            <param name="maGiangVien"> A <c>System.Int32?</c> instance.</param>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maLop"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <param name="ngayTao"> A <c>System.DateTime</c> instance.</param>
            <param name="soTiet"> A <c>System.Int32?</c> instance.</param>
            <param name="soTien"> A <c>System.Decimal?</c> instance.</param>
            <param name="trangThai"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByNamHocHocKyMaKhoaHoc(System.String,System.String,System.String)">
            <summary>
            This method wrap the 'cust_CoVanHocTap_GetByNamHocHocKyMaKhoaHoc' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByNamHocHocKyMaKhoaHoc(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_CoVanHocTap_GetByNamHocHocKyMaKhoaHoc' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByTrangThai(System.Boolean)">
            <summary>
            This method wrap the 'cust_CoVanHocTap_GetByTrangThai' stored procedure. 
            </summary>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.GetByTrangThai(System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_CoVanHocTap_GetByTrangThai' stored procedure. 
            </summary>
            <param name="trangThai"> A <c>System.Boolean</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepLoadByMaGiangVienMaLopNamHocHocKy(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.CoVanHocTap"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="_maLop"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CoVanHocTap Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CoVanHocTap"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepLoadByMaCoVan(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.CoVanHocTap"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maCoVan"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CoVanHocTap Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.CoVanHocTap"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.CoVanHocTap)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CoVanHocTap Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.CoVanHocTap)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.CoVanHocTap,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.CoVanHocTap)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CoVanHocTap Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.CoVanHocTap,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.CoVanHocTap"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CoVanHocTap Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.CoVanHocTap})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.CoVanHocTap)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.CoVanHocTap},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.CoVanHocTap)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.CoVanHocTap},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.CoVanHocTap"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepSave(PMS.Entities.CoVanHocTap)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.CoVanHocTap"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CoVanHocTap Object</param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepSave(PMS.Entities.CoVanHocTap,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CoVanHocTap object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CoVanHocTap Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CoVanHocTap</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.CoVanHocTap})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CoVanHocTap} Object</param>
        </member>
        <member name="M:PMS.Services.CoVanHocTapServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.CoVanHocTap},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CoVanHocTap Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.CoVanHocTapServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PMS.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="T:PMS.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:PMS.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:PMS.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:PMS.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:PMS.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:PMS.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:PMS.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="M:PMS.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:PMS.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:PMS.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:PMS.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,PMS.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:PMS.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PMS.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:PMS.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewTheoDoiGiangDayService">
            <summary>
             An component type implementation of the 'View_TheoDoi_GiangDay' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PMS.Services.ViewTheoDoiGiangDayServiceBase">
            <summary>
             An object representation of the 'View_TheoDoi_GiangDay' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewTheoDoiGiangDay.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewTheoDoiGiangDay"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewTheoDoiGiangDay"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.CreateViewTheoDoiGiangDay(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewTheoDoiGiangDay"/> instance.
            </summary>
            <param name="_maLoaiGiangVien"></param>
            <param name="_maQuanLy"></param>
            <param name="_hoTen"></param>
            <param name="_soDiDong"></param>
            <param name="_chucDanh"></param>
            <param name="_tenKhoa"></param>
            <param name="_tenBoMon"></param>
            <param name="_maMonHoc"></param>
            <param name="_soTiet"></param>
            <param name="_soTinChi"></param>
            <param name="_tenMonHoc"></param>
            <param name="_thoiKhoaBieu"></param>
            <param name="_maNhom"></param>
            <param name="_maLopHocPhan"></param>
            <param name="_ngayBatDau"></param>
            <param name="_ngayKetThuc"></param>
            <param name="_thoiGianGiang"></param>
            <param name="_maToaNha"></param>
            <param name="_maDiaDiem"></param>
            <param name="_maBacLoaiHinh"></param>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewTheoDoiGiangDay} of <c>ViewTheoDoiGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewTheoDoiGiangDay"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewTheoDoiGiangDay"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTheoDoiGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTheoDoiGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTheoDoiGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewTheoDoiGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewTheoDoiGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewTheoDoiGiangDay</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetByMaLoaiGiangVienTuNgayDenNgay(System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_GiangDay_GetByMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetByMaLoaiGiangVienTuNgayDenNgay(System.Int32,System.DateTime,System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_GiangDay_GetByMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetByMaCoSoMaLoaiGiangVienTuNgayDenNgay(System.String,System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_GiangDay_GetByMaCoSoMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayServiceBase.GetByMaCoSoMaLoaiGiangVienTuNgayDenNgay(System.String,System.Int32,System.DateTime,System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TheoDoi_GiangDay_GetByMaCoSoMaLoaiGiangVienTuNgayDenNgay' stored procedure. 
            </summary>
            <param name="maCoSo"> A <c>System.String</c> instance.</param>
            <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
            <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
            <param name="value"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTheoDoiGiangDayService.#ctor">
            <summary>
            Initializes a new instance of the ViewTheoDoiGiangDayService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewSinhVienLopServiceBase">
            <summary>
             An object representation of the 'View_SinhVien_Lop' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewSinhVienLop.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewSinhVienLop"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewSinhVienLop"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.CreateViewSinhVienLop(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewSinhVienLop"/> instance.
            </summary>
            <param name="_maSinhVien"></param>
            <param name="_hoTen"></param>
            <param name="_gioiTinh"></param>
            <param name="_ngaySinh"></param>
            <param name="_maLop"></param>
            <param name="_maKhoa"></param>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewSinhVienLop} of <c>ViewSinhVienLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewSinhVienLop"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewSinhVienLop"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewSinhVienLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewSinhVienLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewSinhVienLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewSinhVienLop</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.GetByMaKhoa(System.String)">
            <summary>
            This method wrap the 'cust_View_SinhVien_Lop_GetByMaKhoa' stored procedure. 
            </summary>
            <param name="maKhoa"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopServiceBase.GetByMaKhoa(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_SinhVien_Lop_GetByMaKhoa' stored procedure. 
            </summary>
            <param name="maKhoa"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewGiangVienKhoaService">
            <summary>
             An component type implementation of the 'View_GiangVien_Khoa' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewGiangVienKhoaService.#ctor">
            <summary>
            Initializes a new instance of the ViewGiangVienKhoaService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewChiTietKhoiLuongThucDayService">
            <summary>
             An component type implementation of the 'View_ChiTiet_KhoiLuong_ThucDay' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewChiTietKhoiLuongThucDayService.#ctor">
            <summary>
            Initializes a new instance of the ViewChiTietKhoiLuongThucDayService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="M:PMS.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PMS.Services.ProcessorBase.ChangeProcessorState(PMS.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PMS.Services.ProcessorBase.OnNotifyProcessorStateChanging(PMS.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:PMS.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:PMS.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:PMS.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:PMS.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:PMS.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:PMS.Services.ViewMonHocKhoaService">
            <summary>
             An component type implementation of the 'View_MonHoc_Khoa' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewMonHocKhoaService.#ctor">
            <summary>
            Initializes a new instance of the ViewMonHocKhoaService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewKhoaBoMonServiceBase">
            <summary>
             An object representation of the 'View_Khoa_BoMon' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewKhoaBoMon.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewKhoaBoMon"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewKhoaBoMon"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.CreateViewKhoaBoMon(System.Nullable{System.Int64},System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewKhoaBoMon"/> instance.
            </summary>
            <param name="_thuTu"></param>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_maBoMon"></param>
            <param name="_tenBoMon"></param>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewKhoaBoMon} of <c>ViewKhoaBoMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewKhoaBoMon"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewKhoaBoMon"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoaBoMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoaBoMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewKhoaBoMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewKhoaBoMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewKhoaBoMon</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewKhoaBoMon</c> objects.</returns>
        </member>
        <member name="T:PMS.Services.ChucVuService">
            <summary>
            An component type implementation of the 'ChucVu' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:PMS.Services.ChucVuServiceBase">
            <summary>
             An object representation of the 'ChucVu' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ChucVu.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ChucVu"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ChucVu"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.CreateChucVu(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ChucVu"/> instance.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="_tenChucVu"></param>
            <param name="_soTiet"></param>
            <param name="_phanTramGio"></param>
            <param name="_nguongTiet"></param>
            <param name="_thuTu"></param>
            <param name="_kyHieu"></param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Get(PMS.Entities.ChucVuKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_ChucVu index.
            </summary>
            <param name="_maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucVu"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key IX_ChucVu index.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucVu"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetByMaChucVu(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_ChucVu index.
            </summary>
            <param name="_maChucVu"></param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucVu"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetByMaChucVu(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PMS.Entities.TList`1"/> from the datasource based on the primary key PK_ChucVu index.
            </summary>
            <param name="_maChucVu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucVu"/> class.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ChucVu"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ChucVu"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ChucVu} of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection,PMS.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:PMS.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ChucVu</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Insert(PMS.Entities.ChucVu)">
            <summary>
            public virtual method that Inserts a ChucVu object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucVu object to Insert.</param>
            <remarks>After Inserting into the datasource, the ChucVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ChucVu entity = new ChucVu();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ChucVuService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Insert(PMS.Entities.TList{PMS.Entities.ChucVu})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucVu</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ChucVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ChucVu.
             <code><![CDATA[
             TList<ChucVu> list = new TList<ChucVu>();
             ChucVu entity = new ChucVu();
             entity.StringProperty = "foo";
             ChucVu entity2 = new ChucVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucVuService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Update(PMS.Entities.ChucVu)">
            <summary>
            public virtual method that Updates a ChucVu object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucVu object to Update.</param>
            <remarks>After Updateing into the datasource, the ChucVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ChucVu entity = ChucVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ChucVuService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Update(PMS.Entities.TList{PMS.Entities.ChucVu})">
             <summary>
             public virtual method that Updates rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucVu</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ChucVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ChucVu.
             <code><![CDATA[
             TList<ChucVu> list = new TList<ChucVu>();
             ChucVu entity = new ChucVu();
             entity.StringProperty = "foo";
             ChucVu entity2 = new ChucVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucVuService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Save(PMS.Entities.ChucVu)">
            <summary>
            public virtual method that Saves a ChucVu object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucVu object to Save.</param>
            <remarks>After Saveing into the datasource, the ChucVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ChucVu entity = ChucVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ChucVuService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Save(PMS.Entities.TList{PMS.Entities.ChucVu})">
             <summary>
             public virtual method that Saves rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucVu</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ChucVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ChucVu.
             <code><![CDATA[
             TList<ChucVu> list = new TList<ChucVu>();
             ChucVu entity = new ChucVu();
             entity.StringProperty = "foo";
             ChucVu entity2 = new ChucVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucVuService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Delete(PMS.Entities.ChucVu)">
            <summary>
            public virtual method that Deletes a ChucVu object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucVu object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ChucVu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ChucVu entity = ChucVuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ChucVuService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Delete(PMS.Entities.TList{PMS.Entities.ChucVu})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:PMS.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucVu</c> objects in a <see cref="T:PMS.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ChucVu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ChucVu.
             <code><![CDATA[
             TList<ChucVu> list = new TList<ChucVu>();
             ChucVu entity = new ChucVu();
             entity.StringProperty = "foo";
             ChucVu entity2 = new ChucVu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucVuService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Delete(PMS.Entities.ChucVuKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _maChucVu
            </summary>
            <param name="_maChucVu">ChucVu pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetByMaGiangVienFromGiangVienChucVu(System.Int32)">
            <summary>
            	Gets ChucVu objects from the datasource by MaGiangVien in the
            	GiangVien_ChucVu table. Table ChucVu is related to table GiangVien
            	through the (M:N) relationship defined in the GiangVien_ChucVu table.
            </summary>
            <param name="_maGiangVien"></param>
            <returns>Returns a typed collection of ChucVu objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.GetByMaGiangVienFromGiangVienChucVu(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ChucVu objects from the datasource by MaGiangVien in the
            	GiangVien_ChucVu table. Table ChucVu is related to table GiangVien
            	through the (M:N) relationship defined in the GiangVien_ChucVu table.
            </summary>
            <param name="_maGiangVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ChucVu objects.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.ChucVu"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChucVu Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucVu"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepLoadByMaChucVu(System.Int32,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PMS.Entities.ChucVu"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <param name="_maChucVu"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChucVu Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PMS.Entities.ChucVu"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.ChucVu)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ChucVu Object</param>
            <remarks>
            <seealso cref="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.ChucVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.ChucVu,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.ChucVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ChucVu Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.ChucVu,System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PMS.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PMS.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PMS.Entities.ChucVu"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChucVu Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChucVu})">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.ChucVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChucVu},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PMS.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.ChucVu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PMS.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepLoad(PMS.Entities.TList{PMS.Entities.ChucVu},System.Boolean,PMS.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PMS.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PMS.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PMS.Entities.ChucVu"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepSave(PMS.Entities.ChucVu)">
            <summary>
            public virtualDeep Saves the <see cref="T:PMS.Entities.ChucVu"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ChucVu Object</param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepSave(PMS.Entities.ChucVu,PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ChucVu object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ChucVu Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ChucVu</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ChucVu})">
            <summary>
            Deep Save the entire <see cref="T:PMS.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ChucVu} Object</param>
        </member>
        <member name="M:PMS.Services.ChucVuServiceBase.DeepSave(PMS.Entities.TList{PMS.Entities.ChucVu},PMS.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PMS.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PMS.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ChucVu Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PMS.Services.ChucVuServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PMS.Services.ChucVuService.#ctor">
            <summary>
            Initializes a new instance of the ChucVuService class.
            </summary>
        </member>
        <member name="T:PMS.Services.QuyDoiGioChuanService">
            <summary>
            An component type implementation of the 'QuyDoiGioChuan' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.QuyDoiGioChuanService.#ctor">
            <summary>
            Initializes a new instance of the QuyDoiGioChuanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:PMS.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:PMS.Services.ViewXuLyQuyDoiService">
            <summary>
             An component type implementation of the 'View_XuLy_QuyDoi' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewXuLyQuyDoiService.#ctor">
            <summary>
            Initializes a new instance of the ViewXuLyQuyDoiService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewMonHocServiceBase">
            <summary>
             An object representation of the 'View_MonHoc' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewMonHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewMonHoc"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewMonHoc"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.CreateViewMonHoc(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewMonHoc"/> instance.
            </summary>
            <param name="_maLopHocPhan"></param>
            <param name="_tenLopHocPhan"></param>
            <param name="_namHoc"></param>
            <param name="_hocKy"></param>
            <param name="_maBacLoaiHinh"></param>
            <param name="_maMonHoc"></param>
            <param name="_tenMonHoc"></param>
            <param name="_tenMonHocVietTat"></param>
            <param name="_soTinChi"></param>
            <param name="_maDonVi"></param>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewMonHoc} of <c>ViewMonHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewMonHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewMonHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewMonHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewMonHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewMonHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewMonHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewMonHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewMonHoc</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.Khoa_GetByMaDonVi(System.String)">
            <summary>
            This method wrap the 'cust_View_MonHoc_Khoa_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewMonHocServiceBase.Khoa_GetByMaDonVi(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_MonHoc_Khoa_GetByMaDonVi' stored procedure. 
            </summary>
            <param name="maDonVi"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewMonHocService">
            <summary>
             An component type implementation of the 'View_MonHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewMonHocService.#ctor">
            <summary>
            Initializes a new instance of the ViewMonHocService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewKhoaBoMonService">
            <summary>
             An component type implementation of the 'View_Khoa_BoMon' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKhoaBoMonService.#ctor">
            <summary>
            Initializes a new instance of the ViewKhoaBoMonService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewKhoaService">
            <summary>
             An component type implementation of the 'View_Khoa' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewKhoaService.#ctor">
            <summary>
            Initializes a new instance of the ViewKhoaService class.
            </summary>
        </member>
        <member name="T:PMS.Services.CoVanHocTapService">
            <summary>
            An component type implementation of the 'CoVanHocTap' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.CoVanHocTapService.#ctor">
            <summary>
            Initializes a new instance of the CoVanHocTapService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:PMS.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:PMS.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:PMS.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:PMS.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:PMS.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:PMS.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:PMS.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:PMS.Services.ConnectionScope.Copy(PMS.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:PMS.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:PMS.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:PMS.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <see cref="T:PMS.Data.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:PMS.Data.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:PMS.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <see cref="T:PMS.Data.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:PMS.Data.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:PMS.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:PMS.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <see cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:PMS.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:PMS.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:PMS.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewTongHopChiTienCoVanServiceBase">
            <summary>
             An object representation of the 'View_TongHop_ChiTien_CoVan' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ViewTongHopChiTienCoVan.cs file instead.
             All custom implementations should be done in the <see cref="T:PMS.Entities.ViewTongHopChiTienCoVan"/> class.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PMS.Entities.ViewTongHopChiTienCoVan"/> instance .
            </summary>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.CreateViewTongHopChiTienCoVan(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PMS.Entities.ViewTongHopChiTienCoVan"/> instance.
            </summary>
            <param name="_maKhoa"></param>
            <param name="_tenKhoa"></param>
            <param name="_soLuong"></param>
            <param name="_soTien"></param>
            <param name="_hocKy"></param>
            <param name="_namHoc"></param>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ViewTongHopChiTienCoVan} of <c>ViewTongHopChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PMS.Entities.ViewTongHopChiTienCoVan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PMS.Entities.ViewTongHopChiTienCoVan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PMS.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTongHopChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PMS.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTongHopChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PMS.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ViewTongHopChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ViewTongHopChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ViewTongHopChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.Find(PMS.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PMS.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ViewTongHopChiTienCoVan</c> objects.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.GetByNamHocHocKy(System.String,System.String)">
            <summary>
            This method wrap the 'cust_View_TongHop_ChiTien_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanServiceBase.GetByNamHocHocKy(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'cust_View_TongHop_ChiTien_CoVan_GetByNamHocHocKy' stored procedure. 
            </summary>
            <param name="namHoc"> A <c>System.String</c> instance.</param>
            <param name="hocKy"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:PMS.Entities.VList`1"/> instance.</returns>
        </member>
        <member name="T:PMS.Services.ViewTongHopChiTienCoVanService">
            <summary>
             An component type implementation of the 'View_TongHop_ChiTien_CoVan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewTongHopChiTienCoVanService.#ctor">
            <summary>
            Initializes a new instance of the ViewTongHopChiTienCoVanService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewSinhVienLopService">
            <summary>
             An component type implementation of the 'View_SinhVien_Lop' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewSinhVienLopService.#ctor">
            <summary>
            Initializes a new instance of the ViewSinhVienLopService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewGiangVienDonGiaService">
            <summary>
             An component type implementation of the 'View_GiangVien_DonGia' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewGiangVienDonGiaService.#ctor">
            <summary>
            Initializes a new instance of the ViewGiangVienDonGiaService class.
            </summary>
        </member>
        <member name="T:PMS.Services.ViewDanTocService">
            <summary>
             An component type implementation of the 'View_DanToc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PMS.Services.ViewDanTocService.#ctor">
            <summary>
            Initializes a new instance of the ViewDanTocService class.
            </summary>
        </member>
        <member name="T:PMS.Services.NhomChucNangService">
            <summary>
            An component type implementation of the 'NhomChucNang' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.NhomChucNangService.#ctor">
            <summary>
            Initializes a new instance of the NhomChucNangService class.
            </summary>
        </member>
        <member name="T:PMS.Services.HocHamService">
            <summary>
            An component type implementation of the 'HocHam' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.HocHamService.#ctor">
            <summary>
            Initializes a new instance of the HocHamService class.
            </summary>
        </member>
        <member name="T:PMS.Services.HocViService">
            <summary>
            An component type implementation of the 'HocVi' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:PMS.Services.HocViService.#ctor">
            <summary>
            Initializes a new instance of the HocViService class.
            </summary>
        </member>
    </members>
</doc>
