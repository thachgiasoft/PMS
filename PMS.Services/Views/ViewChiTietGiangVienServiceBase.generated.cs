
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file ViewChiTietGiangVien.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'View_ChiTiet_GiangVien' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ViewChiTietGiangVien.cs file instead.
	/// All custom implementations should be done in the <see cref="ViewChiTietGiangVien"/> class.
	/// </remarks>
	[DataObject]
	public partial class ViewChiTietGiangVienServiceBase : ServiceViewBase<ViewChiTietGiangVien>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewChiTietGiangVien"/> instance .
		///</summary>
		public ViewChiTietGiangVienServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewChiTietGiangVien"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_matKhau"></param>
		///<param name="_tenTinhTrang"></param>
		///<param name="_hoTen"></param>
		///<param name="_gioiTinh"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_noiSinh"></param>
		///<param name="_cmnd"></param>
		///<param name="_ngayCap"></param>
		///<param name="_noiCap"></param>
		///<param name="_tenDanToc"></param>
		///<param name="_tenTonGiao"></param>
		///<param name="_doanDang"></param>
		///<param name="_ngayVaoDoanDang"></param>
		///<param name="_thuongTru"></param>
		///<param name="_diaChi"></param>
		///<param name="_soDiDong"></param>
		///<param name="_dienThoai"></param>
		///<param name="_soSoBaoHiem"></param>
		///<param name="_email"></param>
		///<param name="_soTaiKhoan"></param>
		///<param name="_maSoThue"></param>
		///<param name="_tenNganHang"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_tenLoaiGiangVien"></param>
		///<param name="_ngayKyHopDong"></param>
		///<param name="_ngayKetThucHopDong"></param>
		///<param name="_tenKhoa"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maHeSoThuLao"></param>
		///<param name="_noiLamViec"></param>
		///<param name="_namLamViec"></param>
		///<param name="_bacLuong"></param>
		public static ViewChiTietGiangVien CreateViewChiTietGiangVien(System.String _maGiangVien, System.String _matKhau, System.String _tenTinhTrang, System.String _hoTen, System.String _gioiTinh, System.String _ngaySinh, System.String _noiSinh, System.String _cmnd, System.String _ngayCap, System.String _noiCap, System.String _tenDanToc, System.String _tenTonGiao, System.String _doanDang, System.String _ngayVaoDoanDang, System.String _thuongTru, System.String _diaChi, System.String _soDiDong, System.String _dienThoai, System.String _soSoBaoHiem, System.String _email, System.String _soTaiKhoan, System.String _maSoThue, System.String _tenNganHang, System.String _tenHocHam, System.String _tenHocVi, System.String _tenLoaiGiangVien, System.DateTime? _ngayKyHopDong, System.DateTime? _ngayKetThucHopDong, System.String _tenKhoa, System.String _chuyenNganh, System.String _maHeSoThuLao, System.String _noiLamViec, System.String _namLamViec, System.Decimal? _bacLuong)
		{
			ViewChiTietGiangVien newEntityViewChiTietGiangVien = new ViewChiTietGiangVien();
			newEntityViewChiTietGiangVien.MaGiangVien  = _maGiangVien;
			newEntityViewChiTietGiangVien.MatKhau  = _matKhau;
			newEntityViewChiTietGiangVien.TenTinhTrang  = _tenTinhTrang;
			newEntityViewChiTietGiangVien.HoTen  = _hoTen;
			newEntityViewChiTietGiangVien.GioiTinh  = _gioiTinh;
			newEntityViewChiTietGiangVien.NgaySinh  = _ngaySinh;
			newEntityViewChiTietGiangVien.NoiSinh  = _noiSinh;
			newEntityViewChiTietGiangVien.Cmnd  = _cmnd;
			newEntityViewChiTietGiangVien.NgayCap  = _ngayCap;
			newEntityViewChiTietGiangVien.NoiCap  = _noiCap;
			newEntityViewChiTietGiangVien.TenDanToc  = _tenDanToc;
			newEntityViewChiTietGiangVien.TenTonGiao  = _tenTonGiao;
			newEntityViewChiTietGiangVien.DoanDang  = _doanDang;
			newEntityViewChiTietGiangVien.NgayVaoDoanDang  = _ngayVaoDoanDang;
			newEntityViewChiTietGiangVien.ThuongTru  = _thuongTru;
			newEntityViewChiTietGiangVien.DiaChi  = _diaChi;
			newEntityViewChiTietGiangVien.SoDiDong  = _soDiDong;
			newEntityViewChiTietGiangVien.DienThoai  = _dienThoai;
			newEntityViewChiTietGiangVien.SoSoBaoHiem  = _soSoBaoHiem;
			newEntityViewChiTietGiangVien.Email  = _email;
			newEntityViewChiTietGiangVien.SoTaiKhoan  = _soTaiKhoan;
			newEntityViewChiTietGiangVien.MaSoThue  = _maSoThue;
			newEntityViewChiTietGiangVien.TenNganHang  = _tenNganHang;
			newEntityViewChiTietGiangVien.TenHocHam  = _tenHocHam;
			newEntityViewChiTietGiangVien.TenHocVi  = _tenHocVi;
			newEntityViewChiTietGiangVien.TenLoaiGiangVien  = _tenLoaiGiangVien;
			newEntityViewChiTietGiangVien.NgayKyHopDong  = _ngayKyHopDong;
			newEntityViewChiTietGiangVien.NgayKetThucHopDong  = _ngayKetThucHopDong;
			newEntityViewChiTietGiangVien.TenKhoa  = _tenKhoa;
			newEntityViewChiTietGiangVien.ChuyenNganh  = _chuyenNganh;
			newEntityViewChiTietGiangVien.MaHeSoThuLao  = _maHeSoThuLao;
			newEntityViewChiTietGiangVien.NoiLamViec  = _noiLamViec;
			newEntityViewChiTietGiangVien.NamLamViec  = _namLamViec;
			newEntityViewChiTietGiangVien.BacLuong  = _bacLuong;
			return newEntityViewChiTietGiangVien;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ViewChiTietGiangVien> securityContext = new SecurityContext<ViewChiTietGiangVien>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ViewChiTietGiangVien> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ViewChiTietGiangVien} of <c>ViewChiTietGiangVien</c> objects.</returns>
		public override VList<ViewChiTietGiangVien> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ViewChiTietGiangVien> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewChiTietGiangVienProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ViewChiTietGiangVien" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ViewChiTietGiangVien> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ViewChiTietGiangVien" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ViewChiTietGiangVien}"/> </returns>
		public override VList<ViewChiTietGiangVien> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ViewChiTietGiangVien> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ViewChiTietGiangVienProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ViewChiTietGiangVien}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewChiTietGiangVien</c> objects.</returns>
		public virtual VList<ViewChiTietGiangVien> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ViewChiTietGiangVien}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewChiTietGiangVien</c> objects.</returns>
		public virtual VList<ViewChiTietGiangVien> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ViewChiTietGiangVien}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewChiTietGiangVien</c> objects.</returns>
		public override VList<ViewChiTietGiangVien> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ViewChiTietGiangVien> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewChiTietGiangVienProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ViewChiTietGiangVien</c> objects.</returns>
		public virtual VList<ViewChiTietGiangVien> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ViewChiTietGiangVien</c> objects.</returns>
		public virtual VList<ViewChiTietGiangVien> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ViewChiTietGiangVien</c> objects.</returns>
		public override VList<ViewChiTietGiangVien> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ViewChiTietGiangVien> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewChiTietGiangVienProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



