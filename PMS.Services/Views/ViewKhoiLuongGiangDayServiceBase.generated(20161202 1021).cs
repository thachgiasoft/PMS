
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewKhoiLuongGiangDay.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'View_KhoiLuong_GiangDay' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ViewKhoiLuongGiangDay.cs file instead.
	/// All custom implementations should be done in the <see cref="ViewKhoiLuongGiangDay"/> class.
	/// </remarks>
	[DataObject]
	public partial class ViewKhoiLuongGiangDayServiceBase : ServiceViewBase<ViewKhoiLuongGiangDay>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewKhoiLuongGiangDay"/> instance .
		///</summary>
		public ViewKhoiLuongGiangDayServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewKhoiLuongGiangDay"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_nhom"></param>
		///<param name="_soTinChi"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_baiTap"></param>
		///<param name="_baiTapLon"></param>
		///<param name="_doAn"></param>
		///<param name="_luanAn"></param>
		///<param name="_tieuLuan"></param>
		///<param name="_thucTap"></param>
		///<param name="_soLuong"></param>
		///<param name="_maLoaiHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_phanLoai"></param>
		///<param name="_heSoThanhPhan"></param>
		///<param name="_nam"></param>
		///<param name="_tuan"></param>
		///<param name="_donViTinh"></param>
		///<param name="_maBuoiHoc"></param>
		///<param name="_maLop"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_tinhTrang"></param>
		///<param name="_ngayDay"></param>
		///<param name="_compensate"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_maPhongHoc"></param>
		///<param name="_maKhoaHoc"></param>
		public static ViewKhoiLuongGiangDay CreateViewKhoiLuongGiangDay(System.Int32 _maLichHoc, System.String _maGiangVien, System.String _maLopHocPhan, System.String _namHoc, System.String _hocKy, System.String _maMonHoc, System.String _tenMonHoc, System.String _nhom, System.Decimal _soTinChi, System.Decimal _lyThuyet, System.Decimal _thucHanh, System.Decimal _baiTap, System.Decimal _baiTapLon, System.Decimal _doAn, System.Decimal _luanAn, System.Decimal _tieuLuan, System.Decimal _thucTap, System.Int32 _soLuong, System.Byte _maLoaiHocPhan, System.String _loaiHocPhan, System.String _phanLoai, System.Decimal? _heSoThanhPhan, System.Int32? _nam, System.Int32? _tuan, System.String _donViTinh, System.Int32? _maBuoiHoc, System.String _maLop, System.Int32? _tietBatDau, System.Int32? _soTiet, System.Int32 _tinhTrang, System.DateTime? _ngayDay, System.Byte? _compensate, System.String _maBacDaoTao, System.String _maNhomMonHoc, System.String _maPhongHoc, System.String _maKhoaHoc)
		{
			ViewKhoiLuongGiangDay newEntityViewKhoiLuongGiangDay = new ViewKhoiLuongGiangDay();
			newEntityViewKhoiLuongGiangDay.MaLichHoc  = _maLichHoc;
			newEntityViewKhoiLuongGiangDay.MaGiangVien  = _maGiangVien;
			newEntityViewKhoiLuongGiangDay.MaLopHocPhan  = _maLopHocPhan;
			newEntityViewKhoiLuongGiangDay.NamHoc  = _namHoc;
			newEntityViewKhoiLuongGiangDay.HocKy  = _hocKy;
			newEntityViewKhoiLuongGiangDay.MaMonHoc  = _maMonHoc;
			newEntityViewKhoiLuongGiangDay.TenMonHoc  = _tenMonHoc;
			newEntityViewKhoiLuongGiangDay.Nhom  = _nhom;
			newEntityViewKhoiLuongGiangDay.SoTinChi  = _soTinChi;
			newEntityViewKhoiLuongGiangDay.LyThuyet  = _lyThuyet;
			newEntityViewKhoiLuongGiangDay.ThucHanh  = _thucHanh;
			newEntityViewKhoiLuongGiangDay.BaiTap  = _baiTap;
			newEntityViewKhoiLuongGiangDay.BaiTapLon  = _baiTapLon;
			newEntityViewKhoiLuongGiangDay.DoAn  = _doAn;
			newEntityViewKhoiLuongGiangDay.LuanAn  = _luanAn;
			newEntityViewKhoiLuongGiangDay.TieuLuan  = _tieuLuan;
			newEntityViewKhoiLuongGiangDay.ThucTap  = _thucTap;
			newEntityViewKhoiLuongGiangDay.SoLuong  = _soLuong;
			newEntityViewKhoiLuongGiangDay.MaLoaiHocPhan  = _maLoaiHocPhan;
			newEntityViewKhoiLuongGiangDay.LoaiHocPhan  = _loaiHocPhan;
			newEntityViewKhoiLuongGiangDay.PhanLoai  = _phanLoai;
			newEntityViewKhoiLuongGiangDay.HeSoThanhPhan  = _heSoThanhPhan;
			newEntityViewKhoiLuongGiangDay.Nam  = _nam;
			newEntityViewKhoiLuongGiangDay.Tuan  = _tuan;
			newEntityViewKhoiLuongGiangDay.DonViTinh  = _donViTinh;
			newEntityViewKhoiLuongGiangDay.MaBuoiHoc  = _maBuoiHoc;
			newEntityViewKhoiLuongGiangDay.MaLop  = _maLop;
			newEntityViewKhoiLuongGiangDay.TietBatDau  = _tietBatDau;
			newEntityViewKhoiLuongGiangDay.SoTiet  = _soTiet;
			newEntityViewKhoiLuongGiangDay.TinhTrang  = _tinhTrang;
			newEntityViewKhoiLuongGiangDay.NgayDay  = _ngayDay;
			newEntityViewKhoiLuongGiangDay.Compensate  = _compensate;
			newEntityViewKhoiLuongGiangDay.MaBacDaoTao  = _maBacDaoTao;
			newEntityViewKhoiLuongGiangDay.MaNhomMonHoc  = _maNhomMonHoc;
			newEntityViewKhoiLuongGiangDay.MaPhongHoc  = _maPhongHoc;
			newEntityViewKhoiLuongGiangDay.MaKhoaHoc  = _maKhoaHoc;
			return newEntityViewKhoiLuongGiangDay;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ViewKhoiLuongGiangDay> securityContext = new SecurityContext<ViewKhoiLuongGiangDay>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 1000000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ViewKhoiLuongGiangDay> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ViewKhoiLuongGiangDay} of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
		public override VList<ViewKhoiLuongGiangDay> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ViewKhoiLuongGiangDay> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewKhoiLuongGiangDayProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ViewKhoiLuongGiangDay" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ViewKhoiLuongGiangDay" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ViewKhoiLuongGiangDay}"/> </returns>
		public override VList<ViewKhoiLuongGiangDay> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ViewKhoiLuongGiangDay> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ViewKhoiLuongGiangDayProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ViewKhoiLuongGiangDay}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ViewKhoiLuongGiangDay}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ViewKhoiLuongGiangDay}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
		public override VList<ViewKhoiLuongGiangDay> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ViewKhoiLuongGiangDay> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewKhoiLuongGiangDayProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ViewKhoiLuongGiangDay</c> objects.</returns>
		public override VList<ViewKhoiLuongGiangDay> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ViewKhoiLuongGiangDay> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewKhoiLuongGiangDayProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		
		#region cust_View_KhoiLuong_GiangDay_DongBoKcq
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBoKcq' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dot"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBoKcq(System.String namHoc, System.String hocKy, System.String dot)
		{
			 DongBoKcq( namHoc, hocKy, dot, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBoKcq' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dot"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBoKcq(System.String namHoc, System.String hocKy, System.String dot, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("DongBoKcq");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ViewKhoiLuongGiangDayProvider.DongBoKcq(transactionManager, start, pageLength , namHoc, hocKy, dot);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region cust_View_KhoiLuong_GiangDay_GetByTuNgayDenNgay
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByTuNgayDenNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewKhoiLuongGiangDay}"/> instance.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetByTuNgayDenNgay(System.DateTime tuNgay, System.DateTime denNgay)
		{
			return GetByTuNgayDenNgay( tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByTuNgayDenNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewKhoiLuongGiangDay}"/> instance.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetByTuNgayDenNgay(System.DateTime tuNgay, System.DateTime denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByTuNgayDenNgay");
			
		
			VList<ViewKhoiLuongGiangDay> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewKhoiLuongGiangDayProvider.GetByTuNgayDenNgay(transactionManager, start, pageLength , tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_KhoiLuong_GiangDay_GetByNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewKhoiLuongGiangDay}"/> instance.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetByNamHocHocKy(System.String namHoc, System.String hocKy)
		{
			return GetByNamHocHocKy( namHoc, hocKy, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewKhoiLuongGiangDay}"/> instance.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetByNamHocHocKy(System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByNamHocHocKy");
			
		
			VList<ViewKhoiLuongGiangDay> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewKhoiLuongGiangDayProvider.GetByNamHocHocKy(transactionManager, start, pageLength , namHoc, hocKy);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_KhoiLuong_GiangDay_DongBoTheoNgay
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBoTheoNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBoTheoNgay(System.DateTime tuNgay, System.DateTime denNgay)
		{
			 DongBoTheoNgay( tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBoTheoNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBoTheoNgay(System.DateTime tuNgay, System.DateTime denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("DongBoTheoNgay");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ViewKhoiLuongGiangDayProvider.DongBoTheoNgay(transactionManager, start, pageLength , tuNgay, denNgay);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region cust_View_KhoiLuong_GiangDay_DongBoTheoDonVi
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBoTheoDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBoTheoDonVi(System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			 DongBoTheoDonVi( namHoc, hocKy, maDonVi, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBoTheoDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBoTheoDonVi(System.String namHoc, System.String hocKy, System.String maDonVi, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("DongBoTheoDonVi");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ViewKhoiLuongGiangDayProvider.DongBoTheoDonVi(transactionManager, start, pageLength , namHoc, hocKy, maDonVi);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region cust_View_KhoiLuong_GiangDay_DongBoTheoDot
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBoTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBoTheoDot(System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio)
		{
			 DongBoTheoDot( namHoc, hocKy, maCauHinhChotGio, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBoTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBoTheoDot(System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("DongBoTheoDot");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ViewKhoiLuongGiangDayProvider.DongBoTheoDot(transactionManager, start, pageLength , namHoc, hocKy, maCauHinhChotGio);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region cust_View_KhoiLuong_GiangDay_DongBo
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBo' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBo(System.String namHoc, System.String hocKy)
		{
			 DongBo( namHoc, hocKy, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_DongBo' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DongBo(System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("DongBo");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ViewKhoiLuongGiangDayProvider.DongBo(transactionManager, start, pageLength , namHoc, hocKy);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region cust_View_KhoiLuong_GiangDay_GetByMaGiangVienMaLopHocPhanMaLop
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maLop"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewKhoiLuongGiangDay}"/> instance.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetByMaGiangVienMaLopHocPhanMaLop(System.String maGiangVien, System.String maLopHocPhan, System.String maLop)
		{
			return GetByMaGiangVienMaLopHocPhanMaLop( maGiangVien, maLopHocPhan, maLop, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_KhoiLuong_GiangDay_GetByMaGiangVienMaLopHocPhanMaLop' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maLop"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewKhoiLuongGiangDay}"/> instance.</returns>
		public virtual VList<ViewKhoiLuongGiangDay> GetByMaGiangVienMaLopHocPhanMaLop(System.String maGiangVien, System.String maLopHocPhan, System.String maLop, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByMaGiangVienMaLopHocPhanMaLop");
			
		
			VList<ViewKhoiLuongGiangDay> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewKhoiLuongGiangDayProvider.GetByMaGiangVienMaLopHocPhanMaLop(transactionManager, start, pageLength , maGiangVien, maLopHocPhan, maLop);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



