
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file ViewThongTinGiangDayNamHocHocKy.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'View_ThongTinGiangDay_NamHocHocKy' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ViewThongTinGiangDayNamHocHocKy.cs file instead.
	/// All custom implementations should be done in the <see cref="ViewThongTinGiangDayNamHocHocKy"/> class.
	/// </remarks>
	[DataObject]
	public partial class ViewThongTinGiangDayNamHocHocKyServiceBase : ServiceViewBase<ViewThongTinGiangDayNamHocHocKy>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewThongTinGiangDayNamHocHocKy"/> instance .
		///</summary>
		public ViewThongTinGiangDayNamHocHocKyServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewThongTinGiangDayNamHocHocKy"/> instance.
		///</summary>
		///<param name="_maQuanLy"></param>
		///<param name="_hoTen"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_noiLamViec"></param>
		///<param name="_cmnd"></param>
		///<param name="_maSoThue"></param>
		///<param name="_thuongTru"></param>
		///<param name="_maHocVi"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_maHocHam"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maLoaiHinh"></param>
		///<param name="_maBacLoaiHinh"></param>
		///<param name="_tenBacDaoTao"></param>
		///<param name="_tenHeDaoTao"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_tenHocKy"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_tenHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_tenLopHocPhan"></param>
		///<param name="_maLopSinhVien"></param>
		///<param name="_tenLopSinhVien"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_maPhong"></param>
		///<param name="_tenPhong"></param>
		///<param name="_maCoSo"></param>
		///<param name="_tenCoSo"></param>
		///<param name="_soLuong"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_buoiHoc"></param>
		///<param name="_soTiet"></param>
		///<param name="_tietGiangDay"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_ngayBatDauDay"></param>
		///<param name="_ngayKetThucDay"></param>
		///<param name="_heSoTinChi"></param>
		///<param name="_hoanTat"></param>
		///<param name="_donGia"></param>
		///<param name="_tienThem"></param>
		///<param name="_tongCong"></param>
		///<param name="_donGiaMotTiet"></param>
		///<param name="_tienGiangDayTruocThue"></param>
		///<param name="_tienThueGiangDay"></param>
		///<param name="_tienGiangDaySauThue"></param>
		///<param name="_soBaiDaCham"></param>
		///<param name="_donGiaChamThiChuan"></param>
		///<param name="_tienChamThiTruocThue"></param>
		///<param name="_tienThueChamThi"></param>
		///<param name="_tienChamThiSauThue"></param>
		///<param name="_soDeThiDapAn"></param>
		///<param name="_donGiaRaDeThiChuan"></param>
		///<param name="_tienRaDeTruocThue"></param>
		///<param name="_tienThueRaDe"></param>
		///<param name="_tienRaDeSauThue"></param>
		///<param name="_soLanDiLai"></param>
		///<param name="_soNgayLuuTru"></param>
		///<param name="_chiPhiDiLai"></param>
		///<param name="_chiPhiLuuTru"></param>
		///<param name="_tienLuuTruTruocThue"></param>
		///<param name="_tienThueLuuTru"></param>
		///<param name="_tienLuuTruSauThue"></param>
		///<param name="_tienDiLaiTruocThue"></param>
		///<param name="_tienThueDiLai"></param>
		///<param name="_tienDiLaiSauThue"></param>
		public static ViewThongTinGiangDayNamHocHocKy CreateViewThongTinGiangDayNamHocHocKy(System.String _maQuanLy, System.String _hoTen, System.String _chuyenNganh, System.String _noiLamViec, System.String _cmnd, System.String _maSoThue, System.String _thuongTru, System.String _maHocVi, System.String _tenHocVi, System.String _maHocHam, System.String _tenHocHam, System.Int32? _maLoaiGiangVien, System.String _maBacDaoTao, System.String _maLoaiHinh, System.String _maBacLoaiHinh, System.String _tenBacDaoTao, System.String _tenHeDaoTao, System.String _namHoc, System.String _hocKy, System.String _tenHocKy, System.String _maHocPhan, System.String _tenHocPhan, System.String _maLopHocPhan, System.String _tenLopHocPhan, System.String _maLopSinhVien, System.String _tenLopSinhVien, System.String _maMonHoc, System.String _tenMonHoc, System.String _maPhong, System.String _tenPhong, System.String _maCoSo, System.String _tenCoSo, System.Int32? _soLuong, System.Decimal? _heSoLopDong, System.String _buoiHoc, System.Int32? _soTiet, System.Int32 _tietGiangDay, System.Decimal? _tietQuyDoi, System.DateTime? _ngayBatDauDay, System.DateTime? _ngayKetThucDay, System.Decimal _heSoTinChi, System.Boolean _hoanTat, System.Decimal _donGia, System.Decimal _tienThem, System.Decimal? _tongCong, System.Decimal? _donGiaMotTiet, System.Decimal? _tienGiangDayTruocThue, System.Decimal? _tienThueGiangDay, System.Decimal? _tienGiangDaySauThue, System.Int32 _soBaiDaCham, System.Decimal? _donGiaChamThiChuan, System.Decimal? _tienChamThiTruocThue, System.Decimal? _tienThueChamThi, System.Decimal? _tienChamThiSauThue, System.Int32 _soDeThiDapAn, System.Decimal? _donGiaRaDeThiChuan, System.Decimal? _tienRaDeTruocThue, System.Decimal? _tienThueRaDe, System.Decimal? _tienRaDeSauThue, System.Decimal? _soLanDiLai, System.Decimal? _soNgayLuuTru, System.Decimal? _chiPhiDiLai, System.Decimal? _chiPhiLuuTru, System.Decimal? _tienLuuTruTruocThue, System.Decimal? _tienThueLuuTru, System.Decimal? _tienLuuTruSauThue, System.Decimal? _tienDiLaiTruocThue, System.Decimal? _tienThueDiLai, System.Decimal? _tienDiLaiSauThue)
		{
			ViewThongTinGiangDayNamHocHocKy newEntityViewThongTinGiangDayNamHocHocKy = new ViewThongTinGiangDayNamHocHocKy();
			newEntityViewThongTinGiangDayNamHocHocKy.MaQuanLy  = _maQuanLy;
			newEntityViewThongTinGiangDayNamHocHocKy.HoTen  = _hoTen;
			newEntityViewThongTinGiangDayNamHocHocKy.ChuyenNganh  = _chuyenNganh;
			newEntityViewThongTinGiangDayNamHocHocKy.NoiLamViec  = _noiLamViec;
			newEntityViewThongTinGiangDayNamHocHocKy.Cmnd  = _cmnd;
			newEntityViewThongTinGiangDayNamHocHocKy.MaSoThue  = _maSoThue;
			newEntityViewThongTinGiangDayNamHocHocKy.ThuongTru  = _thuongTru;
			newEntityViewThongTinGiangDayNamHocHocKy.MaHocVi  = _maHocVi;
			newEntityViewThongTinGiangDayNamHocHocKy.TenHocVi  = _tenHocVi;
			newEntityViewThongTinGiangDayNamHocHocKy.MaHocHam  = _maHocHam;
			newEntityViewThongTinGiangDayNamHocHocKy.TenHocHam  = _tenHocHam;
			newEntityViewThongTinGiangDayNamHocHocKy.MaLoaiGiangVien  = _maLoaiGiangVien;
			newEntityViewThongTinGiangDayNamHocHocKy.MaBacDaoTao  = _maBacDaoTao;
			newEntityViewThongTinGiangDayNamHocHocKy.MaLoaiHinh  = _maLoaiHinh;
			newEntityViewThongTinGiangDayNamHocHocKy.MaBacLoaiHinh  = _maBacLoaiHinh;
			newEntityViewThongTinGiangDayNamHocHocKy.TenBacDaoTao  = _tenBacDaoTao;
			newEntityViewThongTinGiangDayNamHocHocKy.TenHeDaoTao  = _tenHeDaoTao;
			newEntityViewThongTinGiangDayNamHocHocKy.NamHoc  = _namHoc;
			newEntityViewThongTinGiangDayNamHocHocKy.HocKy  = _hocKy;
			newEntityViewThongTinGiangDayNamHocHocKy.TenHocKy  = _tenHocKy;
			newEntityViewThongTinGiangDayNamHocHocKy.MaHocPhan  = _maHocPhan;
			newEntityViewThongTinGiangDayNamHocHocKy.TenHocPhan  = _tenHocPhan;
			newEntityViewThongTinGiangDayNamHocHocKy.MaLopHocPhan  = _maLopHocPhan;
			newEntityViewThongTinGiangDayNamHocHocKy.TenLopHocPhan  = _tenLopHocPhan;
			newEntityViewThongTinGiangDayNamHocHocKy.MaLopSinhVien  = _maLopSinhVien;
			newEntityViewThongTinGiangDayNamHocHocKy.TenLopSinhVien  = _tenLopSinhVien;
			newEntityViewThongTinGiangDayNamHocHocKy.MaMonHoc  = _maMonHoc;
			newEntityViewThongTinGiangDayNamHocHocKy.TenMonHoc  = _tenMonHoc;
			newEntityViewThongTinGiangDayNamHocHocKy.MaPhong  = _maPhong;
			newEntityViewThongTinGiangDayNamHocHocKy.TenPhong  = _tenPhong;
			newEntityViewThongTinGiangDayNamHocHocKy.MaCoSo  = _maCoSo;
			newEntityViewThongTinGiangDayNamHocHocKy.TenCoSo  = _tenCoSo;
			newEntityViewThongTinGiangDayNamHocHocKy.SoLuong  = _soLuong;
			newEntityViewThongTinGiangDayNamHocHocKy.HeSoLopDong  = _heSoLopDong;
			newEntityViewThongTinGiangDayNamHocHocKy.BuoiHoc  = _buoiHoc;
			newEntityViewThongTinGiangDayNamHocHocKy.SoTiet  = _soTiet;
			newEntityViewThongTinGiangDayNamHocHocKy.TietGiangDay  = _tietGiangDay;
			newEntityViewThongTinGiangDayNamHocHocKy.TietQuyDoi  = _tietQuyDoi;
			newEntityViewThongTinGiangDayNamHocHocKy.NgayBatDauDay  = _ngayBatDauDay;
			newEntityViewThongTinGiangDayNamHocHocKy.NgayKetThucDay  = _ngayKetThucDay;
			newEntityViewThongTinGiangDayNamHocHocKy.HeSoTinChi  = _heSoTinChi;
			newEntityViewThongTinGiangDayNamHocHocKy.HoanTat  = _hoanTat;
			newEntityViewThongTinGiangDayNamHocHocKy.DonGia  = _donGia;
			newEntityViewThongTinGiangDayNamHocHocKy.TienThem  = _tienThem;
			newEntityViewThongTinGiangDayNamHocHocKy.TongCong  = _tongCong;
			newEntityViewThongTinGiangDayNamHocHocKy.DonGiaMotTiet  = _donGiaMotTiet;
			newEntityViewThongTinGiangDayNamHocHocKy.TienGiangDayTruocThue  = _tienGiangDayTruocThue;
			newEntityViewThongTinGiangDayNamHocHocKy.TienThueGiangDay  = _tienThueGiangDay;
			newEntityViewThongTinGiangDayNamHocHocKy.TienGiangDaySauThue  = _tienGiangDaySauThue;
			newEntityViewThongTinGiangDayNamHocHocKy.SoBaiDaCham  = _soBaiDaCham;
			newEntityViewThongTinGiangDayNamHocHocKy.DonGiaChamThiChuan  = _donGiaChamThiChuan;
			newEntityViewThongTinGiangDayNamHocHocKy.TienChamThiTruocThue  = _tienChamThiTruocThue;
			newEntityViewThongTinGiangDayNamHocHocKy.TienThueChamThi  = _tienThueChamThi;
			newEntityViewThongTinGiangDayNamHocHocKy.TienChamThiSauThue  = _tienChamThiSauThue;
			newEntityViewThongTinGiangDayNamHocHocKy.SoDeThiDapAn  = _soDeThiDapAn;
			newEntityViewThongTinGiangDayNamHocHocKy.DonGiaRaDeThiChuan  = _donGiaRaDeThiChuan;
			newEntityViewThongTinGiangDayNamHocHocKy.TienRaDeTruocThue  = _tienRaDeTruocThue;
			newEntityViewThongTinGiangDayNamHocHocKy.TienThueRaDe  = _tienThueRaDe;
			newEntityViewThongTinGiangDayNamHocHocKy.TienRaDeSauThue  = _tienRaDeSauThue;
			newEntityViewThongTinGiangDayNamHocHocKy.SoLanDiLai  = _soLanDiLai;
			newEntityViewThongTinGiangDayNamHocHocKy.SoNgayLuuTru  = _soNgayLuuTru;
			newEntityViewThongTinGiangDayNamHocHocKy.ChiPhiDiLai  = _chiPhiDiLai;
			newEntityViewThongTinGiangDayNamHocHocKy.ChiPhiLuuTru  = _chiPhiLuuTru;
			newEntityViewThongTinGiangDayNamHocHocKy.TienLuuTruTruocThue  = _tienLuuTruTruocThue;
			newEntityViewThongTinGiangDayNamHocHocKy.TienThueLuuTru  = _tienThueLuuTru;
			newEntityViewThongTinGiangDayNamHocHocKy.TienLuuTruSauThue  = _tienLuuTruSauThue;
			newEntityViewThongTinGiangDayNamHocHocKy.TienDiLaiTruocThue  = _tienDiLaiTruocThue;
			newEntityViewThongTinGiangDayNamHocHocKy.TienThueDiLai  = _tienThueDiLai;
			newEntityViewThongTinGiangDayNamHocHocKy.TienDiLaiSauThue  = _tienDiLaiSauThue;
			return newEntityViewThongTinGiangDayNamHocHocKy;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ViewThongTinGiangDayNamHocHocKy> securityContext = new SecurityContext<ViewThongTinGiangDayNamHocHocKy>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ViewThongTinGiangDayNamHocHocKy> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ViewThongTinGiangDayNamHocHocKy} of <c>ViewThongTinGiangDayNamHocHocKy</c> objects.</returns>
		public override VList<ViewThongTinGiangDayNamHocHocKy> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ViewThongTinGiangDayNamHocHocKy> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewThongTinGiangDayNamHocHocKyProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ViewThongTinGiangDayNamHocHocKy" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ViewThongTinGiangDayNamHocHocKy> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ViewThongTinGiangDayNamHocHocKy" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ViewThongTinGiangDayNamHocHocKy}"/> </returns>
		public override VList<ViewThongTinGiangDayNamHocHocKy> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ViewThongTinGiangDayNamHocHocKy> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ViewThongTinGiangDayNamHocHocKyProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ViewThongTinGiangDayNamHocHocKy}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewThongTinGiangDayNamHocHocKy</c> objects.</returns>
		public virtual VList<ViewThongTinGiangDayNamHocHocKy> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ViewThongTinGiangDayNamHocHocKy}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewThongTinGiangDayNamHocHocKy</c> objects.</returns>
		public virtual VList<ViewThongTinGiangDayNamHocHocKy> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ViewThongTinGiangDayNamHocHocKy}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewThongTinGiangDayNamHocHocKy</c> objects.</returns>
		public override VList<ViewThongTinGiangDayNamHocHocKy> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ViewThongTinGiangDayNamHocHocKy> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewThongTinGiangDayNamHocHocKyProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ViewThongTinGiangDayNamHocHocKy</c> objects.</returns>
		public virtual VList<ViewThongTinGiangDayNamHocHocKy> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ViewThongTinGiangDayNamHocHocKy</c> objects.</returns>
		public virtual VList<ViewThongTinGiangDayNamHocHocKy> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ViewThongTinGiangDayNamHocHocKy</c> objects.</returns>
		public override VList<ViewThongTinGiangDayNamHocHocKy> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ViewThongTinGiangDayNamHocHocKy> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewThongTinGiangDayNamHocHocKyProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		
		#region cust_View_ThongTinGiangDay_NamHocHocKy_GetByNamHocHocKyMaLop
		/// <summary>
		///	This method wrap the 'cust_View_ThongTinGiangDay_NamHocHocKy_GetByNamHocHocKyMaLop' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maLop"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThongTinGiangDayNamHocHocKy}"/> instance.</returns>
		public virtual VList<ViewThongTinGiangDayNamHocHocKy> GetByNamHocHocKyMaLop(System.String namHoc, System.String hocKy, System.String maLop)
		{
			return GetByNamHocHocKyMaLop( namHoc, hocKy, maLop, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThongTinGiangDay_NamHocHocKy_GetByNamHocHocKyMaLop' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maLop"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThongTinGiangDayNamHocHocKy}"/> instance.</returns>
		public virtual VList<ViewThongTinGiangDayNamHocHocKy> GetByNamHocHocKyMaLop(System.String namHoc, System.String hocKy, System.String maLop, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByNamHocHocKyMaLop");
			
		
			VList<ViewThongTinGiangDayNamHocHocKy> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThongTinGiangDayNamHocHocKyProvider.GetByNamHocHocKyMaLop(transactionManager, start, pageLength , namHoc, hocKy, maLop);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



