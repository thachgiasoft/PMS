
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewGiangVien.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'View_GiangVien' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ViewGiangVien.cs file instead.
	/// All custom implementations should be done in the <see cref="ViewGiangVien"/> class.
	/// </remarks>
	[DataObject]
	public partial class ViewGiangVienServiceBase : ServiceViewBase<ViewGiangVien>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewGiangVien"/> instance .
		///</summary>
		public ViewGiangVienServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewGiangVien"/> instance.
		///</summary>
		///<param name="_thuTu"></param>
		///<param name="_maGiangVien"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_ten"></param>
		///<param name="_hoTen"></param>
		///<param name="_gioiTinh"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_tenHocHam"></param>
		///<param name="_tenHocVi"></param>
		///<param name="_tenLoaiGiangVien"></param>
		///<param name="_maDonVi"></param>
		///<param name="_donGia"></param>
		///<param name="_tenDonVi"></param>
		///<param name="_khoaTaiKhoan"></param>
		///<param name="_cmnd"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maSoThue"></param>
		///<param name="_noiLamViec"></param>
		public static ViewGiangVien CreateViewGiangVien(System.Int64? _thuTu, System.Int32 _maGiangVien, System.String _maQuanLy, System.String _ho, System.String _ten, System.String _hoTen, System.String _gioiTinh, System.String _ngaySinh, System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien, System.String _tenHocHam, System.String _tenHocVi, System.String _tenLoaiGiangVien, System.String _maDonVi, System.Decimal _donGia, System.String _tenDonVi, System.Boolean? _khoaTaiKhoan, System.String _cmnd, System.String _chuyenNganh, System.String _maSoThue, System.String _noiLamViec)
		{
			ViewGiangVien newEntityViewGiangVien = new ViewGiangVien();
			newEntityViewGiangVien.ThuTu  = _thuTu;
			newEntityViewGiangVien.MaGiangVien  = _maGiangVien;
			newEntityViewGiangVien.MaQuanLy  = _maQuanLy;
			newEntityViewGiangVien.Ho  = _ho;
			newEntityViewGiangVien.Ten  = _ten;
			newEntityViewGiangVien.HoTen  = _hoTen;
			newEntityViewGiangVien.GioiTinh  = _gioiTinh;
			newEntityViewGiangVien.NgaySinh  = _ngaySinh;
			newEntityViewGiangVien.MaHocHam  = _maHocHam;
			newEntityViewGiangVien.MaHocVi  = _maHocVi;
			newEntityViewGiangVien.MaLoaiGiangVien  = _maLoaiGiangVien;
			newEntityViewGiangVien.TenHocHam  = _tenHocHam;
			newEntityViewGiangVien.TenHocVi  = _tenHocVi;
			newEntityViewGiangVien.TenLoaiGiangVien  = _tenLoaiGiangVien;
			newEntityViewGiangVien.MaDonVi  = _maDonVi;
			newEntityViewGiangVien.DonGia  = _donGia;
			newEntityViewGiangVien.TenDonVi  = _tenDonVi;
			newEntityViewGiangVien.KhoaTaiKhoan  = _khoaTaiKhoan;
			newEntityViewGiangVien.Cmnd  = _cmnd;
			newEntityViewGiangVien.ChuyenNganh  = _chuyenNganh;
			newEntityViewGiangVien.MaSoThue  = _maSoThue;
			newEntityViewGiangVien.NoiLamViec  = _noiLamViec;
			return newEntityViewGiangVien;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ViewGiangVien> securityContext = new SecurityContext<ViewGiangVien>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 1000000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ViewGiangVien> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ViewGiangVien} of <c>ViewGiangVien</c> objects.</returns>
		public override VList<ViewGiangVien> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ViewGiangVien> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewGiangVienProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ViewGiangVien" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ViewGiangVien> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ViewGiangVien" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ViewGiangVien}"/> </returns>
		public override VList<ViewGiangVien> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ViewGiangVien> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ViewGiangVienProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ViewGiangVien}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
		public virtual VList<ViewGiangVien> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ViewGiangVien}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
		public virtual VList<ViewGiangVien> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ViewGiangVien}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
		public override VList<ViewGiangVien> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ViewGiangVien> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewGiangVienProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
		public virtual VList<ViewGiangVien> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
		public virtual VList<ViewGiangVien> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ViewGiangVien</c> objects.</returns>
		public override VList<ViewGiangVien> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ViewGiangVien> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewGiangVienProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		
		#region cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader LopHocPhan_GetBatDauByTuNgayDenNgay(System.DateTime tuNgay, System.DateTime denNgay)
		{
			return LopHocPhan_GetBatDauByTuNgayDenNgay( tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LopHocPhan_GetBatDauByTuNgayDenNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader LopHocPhan_GetBatDauByTuNgayDenNgay(System.DateTime tuNgay, System.DateTime denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("LopHocPhan_GetBatDauByTuNgayDenNgay");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.LopHocPhan_GetBatDauByTuNgayDenNgay(transactionManager, start, pageLength , tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_view_GiangVien_NghienCuuKhoaHoc_GetByMaDonViNamHoc
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_NghienCuuKhoaHoc_GetByMaDonViNamHoc' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader NghienCuuKhoaHoc_GetByMaDonViNamHoc(System.String maDonVi, System.String namHoc)
		{
			return NghienCuuKhoaHoc_GetByMaDonViNamHoc( maDonVi, namHoc, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_NghienCuuKhoaHoc_GetByMaDonViNamHoc' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader NghienCuuKhoaHoc_GetByMaDonViNamHoc(System.String maDonVi, System.String namHoc, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("NghienCuuKhoaHoc_GetByMaDonViNamHoc");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.NghienCuuKhoaHoc_GetByMaDonViNamHoc(transactionManager, start, pageLength , maDonVi, namHoc);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_view_GiangVien_GetByMaDonViThongKeThanhTra
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_GetByMaDonViThongKeThanhTra' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonViThongKeThanhTra(System.String maDonVi)
		{
			return GetByMaDonViThongKeThanhTra( maDonVi, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_GetByMaDonViThongKeThanhTra' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonViThongKeThanhTra(System.String maDonVi, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByMaDonViThongKeThanhTra");
			
		
			VList<ViewGiangVien> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.GetByMaDonViThongKeThanhTra(transactionManager, start, pageLength , maDonVi);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_view_GiangVien_GetByMaDonViNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_GetByMaDonViNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonViNamHocHocKy(System.String maDonVi, System.String namHoc, System.String hocKy)
		{
			return GetByMaDonViNamHocHocKy( maDonVi, namHoc, hocKy, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_GetByMaDonViNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonViNamHocHocKy(System.String maDonVi, System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByMaDonViNamHocHocKy");
			
		
			VList<ViewGiangVien> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.GetByMaDonViNamHocHocKy(transactionManager, start, pageLength , maDonVi, namHoc, hocKy);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_GiangVien_Nckh_GetByNamHoc
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_Nckh_GetByNamHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader Nckh_GetByNamHoc(System.String namHoc)
		{
			return Nckh_GetByNamHoc( namHoc, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_Nckh_GetByNamHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader Nckh_GetByNamHoc(System.String namHoc, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Nckh_GetByNamHoc");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.Nckh_GetByNamHoc(transactionManager, start, pageLength , namHoc);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_GiangVien_LuuKhoaTaiKhoan
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LuuKhoaTaiKhoan' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void LuuKhoaTaiKhoan(System.String xmlData, ref System.Int32 reVal)
		{
			 LuuKhoaTaiKhoan( xmlData, ref reVal, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LuuKhoaTaiKhoan' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void LuuKhoaTaiKhoan(System.String xmlData, ref System.Int32 reVal, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("LuuKhoaTaiKhoan");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ViewGiangVienProvider.LuuKhoaTaiKhoan(transactionManager, start, pageLength , xmlData, ref reVal);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region cust_View_GiangVien_Nckh_GetByNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_Nckh_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader Nckh_GetByNamHocHocKy(System.String namHoc, System.String hocKy)
		{
			return Nckh_GetByNamHocHocKy( namHoc, hocKy, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_Nckh_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader Nckh_GetByNamHocHocKy(System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Nckh_GetByNamHocHocKy");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.Nckh_GetByNamHocHocKy(transactionManager, start, pageLength , namHoc, hocKy);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_GiangVien_GetByMaDonViMaLoaiGiangVien
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_GetByMaDonViMaLoaiGiangVien' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonViMaLoaiGiangVien(System.String maDonVi, System.String maLoaiGiangVien)
		{
			return GetByMaDonViMaLoaiGiangVien( maDonVi, maLoaiGiangVien, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_GetByMaDonViMaLoaiGiangVien' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonViMaLoaiGiangVien(System.String maDonVi, System.String maLoaiGiangVien, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByMaDonViMaLoaiGiangVien");
			
		
			VList<ViewGiangVien> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.GetByMaDonViMaLoaiGiangVien(transactionManager, start, pageLength , maDonVi, maLoaiGiangVien);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_view_GiangVien_NghienCuuKhoaHoc_GetByMaDonViNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_NghienCuuKhoaHoc_GetByMaDonViNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader NghienCuuKhoaHoc_GetByMaDonViNamHocHocKy(System.String maDonVi, System.String namHoc, System.String hocKy)
		{
			return NghienCuuKhoaHoc_GetByMaDonViNamHocHocKy( maDonVi, namHoc, hocKy, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_NghienCuuKhoaHoc_GetByMaDonViNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader NghienCuuKhoaHoc_GetByMaDonViNamHocHocKy(System.String maDonVi, System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("NghienCuuKhoaHoc_GetByMaDonViNamHocHocKy");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.NghienCuuKhoaHoc_GetByMaDonViNamHocHocKy(transactionManager, start, pageLength , maDonVi, namHoc, hocKy);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_view_GiangVien_GetByMaDonVi
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_GetByMaDonVi' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonVi(System.String maDonVi)
		{
			return GetByMaDonVi( maDonVi, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_GetByMaDonVi' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonVi(System.String maDonVi, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByMaDonVi");
			
		
			VList<ViewGiangVien> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.GetByMaDonVi(transactionManager, start, pageLength , maDonVi);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_GiangVien_DonVi_HocHam_HocVi_HoSo_ChucVu_TinhTrang_GetByAll
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_DonVi_HocHam_HocVi_HoSo_ChucVu_TinhTrang_GetByAll' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DonVi_HocHam_HocVi_HoSo_ChucVu_TinhTrang_GetByAll(System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi, System.Int32 maTinhTrang)
		{
			 DonVi_HocHam_HocVi_HoSo_ChucVu_TinhTrang_GetByAll( maDonVi, maHocHam, maHocVi, maTinhTrang, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_DonVi_HocHam_HocVi_HoSo_ChucVu_TinhTrang_GetByAll' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual void DonVi_HocHam_HocVi_HoSo_ChucVu_TinhTrang_GetByAll(System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi, System.Int32 maTinhTrang, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("DonVi_HocHam_HocVi_HoSo_ChucVu_TinhTrang_GetByAll");
			
		
			 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				dataProvider.ViewGiangVienProvider.DonVi_HocHam_HocVi_HoSo_ChucVu_TinhTrang_GetByAll(transactionManager, start, pageLength , maDonVi, maHocHam, maHocVi, maTinhTrang);
	        
				//If success, Commit
				if(!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return ;
		}
		#endregion 
		
		#region cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader LopHocPhan_GetKetThucByTuNgayDenNgay(System.DateTime tuNgay, System.DateTime denNgay)
		{
			return LopHocPhan_GetKetThucByTuNgayDenNgay( tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LopHocPhan_GetKetThucByTuNgayDenNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader LopHocPhan_GetKetThucByTuNgayDenNgay(System.DateTime tuNgay, System.DateTime denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("LopHocPhan_GetKetThucByTuNgayDenNgay");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.LopHocPhan_GetKetThucByTuNgayDenNgay(transactionManager, start, pageLength , tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_GiangVien_Nckh_GetByNamHocHocKyMaDonVi
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_Nckh_GetByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader Nckh_GetByNamHocHocKyMaDonVi(System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			return Nckh_GetByNamHocHocKyMaDonVi( namHoc, hocKy, maDonVi, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_Nckh_GetByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader Nckh_GetByNamHocHocKyMaDonVi(System.String namHoc, System.String hocKy, System.String maDonVi, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Nckh_GetByNamHocHocKyMaDonVi");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.Nckh_GetByNamHocHocKyMaDonVi(transactionManager, start, pageLength , namHoc, hocKy, maDonVi);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader LopHocPhan_GetByNamHocHocKyMaGiangVien(System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			return LopHocPhan_GetByNamHocHocKyMaGiangVien( namHoc, hocKy, maGiangVien, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKyMaGiangVien' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader LopHocPhan_GetByNamHocHocKyMaGiangVien(System.String namHoc, System.String hocKy, System.Int32 maGiangVien, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("LopHocPhan_GetByNamHocHocKyMaGiangVien");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.LopHocPhan_GetByNamHocHocKyMaGiangVien(transactionManager, start, pageLength , namHoc, hocKy, maGiangVien);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader LopHocPhan_GetByNamHocHocKy(System.String namHoc, System.String hocKy)
		{
			return LopHocPhan_GetByNamHocHocKy( namHoc, hocKy, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader LopHocPhan_GetByNamHocHocKy(System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("LopHocPhan_GetByNamHocHocKy");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.LopHocPhan_GetByNamHocHocKy(transactionManager, start, pageLength , namHoc, hocKy);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_GiangVien_GetByNhomQuyen
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_GetByNhomQuyen' stored procedure. 
		/// </summary>
		/// <param name="nhomQuyen"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByNhomQuyen(System.String nhomQuyen)
		{
			return GetByNhomQuyen( nhomQuyen, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_GiangVien_GetByNhomQuyen' stored procedure. 
		/// </summary>
		/// <param name="nhomQuyen"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByNhomQuyen(System.String nhomQuyen, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByNhomQuyen");
			
		
			VList<ViewGiangVien> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.GetByNhomQuyen(transactionManager, start, pageLength , nhomQuyen);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_view_GiangVien_GetByMaDonViTuNgayDenNgay
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_GetByMaDonViTuNgayDenNgay' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonViTuNgayDenNgay(System.String maDonVi, System.DateTime tuNgay, System.DateTime denNgay)
		{
			return GetByMaDonViTuNgayDenNgay( maDonVi, tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_view_GiangVien_GetByMaDonViTuNgayDenNgay' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewGiangVien}"/> instance.</returns>
		public virtual VList<ViewGiangVien> GetByMaDonViTuNgayDenNgay(System.String maDonVi, System.DateTime tuNgay, System.DateTime denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByMaDonViTuNgayDenNgay");
			
		
			VList<ViewGiangVien> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewGiangVienProvider.GetByMaDonViTuNgayDenNgay(transactionManager, start, pageLength , maDonVi, tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



