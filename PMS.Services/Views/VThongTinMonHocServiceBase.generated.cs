
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file VThongTinMonHoc.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'v_ThongTinMonHoc' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the VThongTinMonHoc.cs file instead.
	/// All custom implementations should be done in the <see cref="VThongTinMonHoc"/> class.
	/// </remarks>
	[DataObject]
	public partial class VThongTinMonHocServiceBase : ServiceViewBase<VThongTinMonHoc>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="VThongTinMonHoc"/> instance .
		///</summary>
		public VThongTinMonHocServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VThongTinMonHoc"/> instance.
		///</summary>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_credits"></param>
		///<param name="_theoryCredits"></param>
		///<param name="_practiceCredits"></param>
		///<param name="_selfCredits"></param>
		///<param name="_note"></param>
		///<param name="_creditInfos"></param>
		///<param name="_lyThuyet"></param>
		///<param name="_thucHanh"></param>
		///<param name="_thucTap"></param>
		///<param name="_tieuLuan"></param>
		///<param name="_doAn"></param>
		///<param name="_luanAn"></param>
		///<param name="_baiTap"></param>
		///<param name="_baiTapLon"></param>
		///<param name="_maLoaiPhong"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_tenBacDaoTao"></param>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_tenNhomMonHoc"></param>
		///<param name="_maDonVi"></param>
		///<param name="_tenDonVi"></param>
		///<param name="_maKhoaBoMon"></param>
		///<param name="_tenKhoaBoMon"></param>
		///<param name="_thongTinDonVi"></param>
		///<param name="_updateStaff"></param>
		///<param name="_updateDate"></param>
		///<param name="_creditInfo"></param>
		///<param name="_loaiMonHoc"></param>
		public static VThongTinMonHoc CreateVThongTinMonHoc(System.String _maMonHoc, System.String _tenMonHoc, System.Int32? _credits, System.Decimal? _theoryCredits, System.Decimal? _practiceCredits, System.Decimal? _selfCredits, System.String _note, System.String _creditInfos, System.Decimal _lyThuyet, System.Decimal _thucHanh, System.Decimal _thucTap, System.Decimal _tieuLuan, System.Decimal _doAn, System.Decimal _luanAn, System.Int32 _baiTap, System.Int32 _baiTapLon, System.String _maLoaiPhong, System.String _maBacDaoTao, System.String _tenBacDaoTao, System.String _maNhomMonHoc, System.String _tenNhomMonHoc, System.String _maDonVi, System.String _tenDonVi, System.String _maKhoaBoMon, System.String _tenKhoaBoMon, System.String _thongTinDonVi, System.String _updateStaff, System.DateTime? _updateDate, System.String _creditInfo, System.String _loaiMonHoc)
		{
			VThongTinMonHoc newEntityVThongTinMonHoc = new VThongTinMonHoc();
			newEntityVThongTinMonHoc.MaMonHoc  = _maMonHoc;
			newEntityVThongTinMonHoc.TenMonHoc  = _tenMonHoc;
			newEntityVThongTinMonHoc.Credits  = _credits;
			newEntityVThongTinMonHoc.TheoryCredits  = _theoryCredits;
			newEntityVThongTinMonHoc.PracticeCredits  = _practiceCredits;
			newEntityVThongTinMonHoc.SelfCredits  = _selfCredits;
			newEntityVThongTinMonHoc.Note  = _note;
			newEntityVThongTinMonHoc.CreditInfos  = _creditInfos;
			newEntityVThongTinMonHoc.LyThuyet  = _lyThuyet;
			newEntityVThongTinMonHoc.ThucHanh  = _thucHanh;
			newEntityVThongTinMonHoc.ThucTap  = _thucTap;
			newEntityVThongTinMonHoc.TieuLuan  = _tieuLuan;
			newEntityVThongTinMonHoc.DoAn  = _doAn;
			newEntityVThongTinMonHoc.LuanAn  = _luanAn;
			newEntityVThongTinMonHoc.BaiTap  = _baiTap;
			newEntityVThongTinMonHoc.BaiTapLon  = _baiTapLon;
			newEntityVThongTinMonHoc.MaLoaiPhong  = _maLoaiPhong;
			newEntityVThongTinMonHoc.MaBacDaoTao  = _maBacDaoTao;
			newEntityVThongTinMonHoc.TenBacDaoTao  = _tenBacDaoTao;
			newEntityVThongTinMonHoc.MaNhomMonHoc  = _maNhomMonHoc;
			newEntityVThongTinMonHoc.TenNhomMonHoc  = _tenNhomMonHoc;
			newEntityVThongTinMonHoc.MaDonVi  = _maDonVi;
			newEntityVThongTinMonHoc.TenDonVi  = _tenDonVi;
			newEntityVThongTinMonHoc.MaKhoaBoMon  = _maKhoaBoMon;
			newEntityVThongTinMonHoc.TenKhoaBoMon  = _tenKhoaBoMon;
			newEntityVThongTinMonHoc.ThongTinDonVi  = _thongTinDonVi;
			newEntityVThongTinMonHoc.UpdateStaff  = _updateStaff;
			newEntityVThongTinMonHoc.UpdateDate  = _updateDate;
			newEntityVThongTinMonHoc.CreditInfo  = _creditInfo;
			newEntityVThongTinMonHoc.LoaiMonHoc  = _loaiMonHoc;
			return newEntityVThongTinMonHoc;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<VThongTinMonHoc> securityContext = new SecurityContext<VThongTinMonHoc>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<VThongTinMonHoc> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{VThongTinMonHoc} of <c>VThongTinMonHoc</c> objects.</returns>
		public override VList<VThongTinMonHoc> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<VThongTinMonHoc> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.VThongTinMonHocProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="VThongTinMonHoc" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<VThongTinMonHoc> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="VThongTinMonHoc" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{VThongTinMonHoc}"/> </returns>
		public override VList<VThongTinMonHoc> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<VThongTinMonHoc> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.VThongTinMonHocProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{VThongTinMonHoc}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>VThongTinMonHoc</c> objects.</returns>
		public virtual VList<VThongTinMonHoc> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{VThongTinMonHoc}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>VThongTinMonHoc</c> objects.</returns>
		public virtual VList<VThongTinMonHoc> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{VThongTinMonHoc}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>VThongTinMonHoc</c> objects.</returns>
		public override VList<VThongTinMonHoc> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<VThongTinMonHoc> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.VThongTinMonHocProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>VThongTinMonHoc</c> objects.</returns>
		public virtual VList<VThongTinMonHoc> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>VThongTinMonHoc</c> objects.</returns>
		public virtual VList<VThongTinMonHoc> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>VThongTinMonHoc</c> objects.</returns>
		public override VList<VThongTinMonHoc> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<VThongTinMonHoc> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.VThongTinMonHocProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



