
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file ViewThanhTraTheoThoiKhoaBieu.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'View_ThanhTraTheoThoiKhoaBieu' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ViewThanhTraTheoThoiKhoaBieu.cs file instead.
	/// All custom implementations should be done in the <see cref="ViewThanhTraTheoThoiKhoaBieu"/> class.
	/// </remarks>
	[DataObject]
	public partial class ViewThanhTraTheoThoiKhoaBieuServiceBase : ServiceViewBase<ViewThanhTraTheoThoiKhoaBieu>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewThanhTraTheoThoiKhoaBieu"/> instance .
		///</summary>
		public ViewThanhTraTheoThoiKhoaBieuServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewThanhTraTheoThoiKhoaBieu"/> instance.
		///</summary>
		///<param name="_maLichHoc"></param>
		///<param name="_maGocLopHocPhan"></param>
		///<param name="_maLopHocPhan"></param>
		///<param name="_maHocPhan"></param>
		///<param name="_tenHocPhan"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_maLop"></param>
		///<param name="_ngay"></param>
		///<param name="_thu"></param>
		///<param name="_tietBatDau"></param>
		///<param name="_soTiet"></param>
		///<param name="_phong"></param>
		///<param name="_khoa"></param>
		///<param name="_maCanBoGiangDay"></param>
		///<param name="_hoTen"></param>
		///<param name="_tienDo"></param>
		///<param name="_siSo"></param>
		///<param name="_maViPham"></param>
		///<param name="_noiDungViPham"></param>
		///<param name="_maHinhThucViPhamHrm"></param>
		///<param name="_tenHinhThucViPham"></param>
		///<param name="_thoiDiemGhiNhan"></param>
		///<param name="_lyDo"></param>
		///<param name="_ghiChu"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_soTietGhiNhan"></param>
		///<param name="_xacNhan"></param>
		///<param name="_trangThai"></param>
		public static ViewThanhTraTheoThoiKhoaBieu CreateViewThanhTraTheoThoiKhoaBieu(System.Int32 _maLichHoc, System.String _maGocLopHocPhan, System.String _maLopHocPhan, System.String _maHocPhan, System.String _tenHocPhan, System.String _loaiHocPhan, System.String _maLop, System.String _ngay, System.String _thu, System.Int32? _tietBatDau, System.Int32? _soTiet, System.String _phong, System.String _khoa, System.String _maCanBoGiangDay, System.String _hoTen, System.String _tienDo, System.Int32? _siSo, System.String _maViPham, System.String _noiDungViPham, System.Guid? _maHinhThucViPhamHrm, System.String _tenHinhThucViPham, System.String _thoiDiemGhiNhan, System.String _lyDo, System.String _ghiChu, System.String _ngayCapNhat, System.String _nguoiCapNhat, System.Int32? _soTietGhiNhan, System.Boolean? _xacNhan, System.Boolean? _trangThai)
		{
			ViewThanhTraTheoThoiKhoaBieu newEntityViewThanhTraTheoThoiKhoaBieu = new ViewThanhTraTheoThoiKhoaBieu();
			newEntityViewThanhTraTheoThoiKhoaBieu.MaLichHoc  = _maLichHoc;
			newEntityViewThanhTraTheoThoiKhoaBieu.MaGocLopHocPhan  = _maGocLopHocPhan;
			newEntityViewThanhTraTheoThoiKhoaBieu.MaLopHocPhan  = _maLopHocPhan;
			newEntityViewThanhTraTheoThoiKhoaBieu.MaHocPhan  = _maHocPhan;
			newEntityViewThanhTraTheoThoiKhoaBieu.TenHocPhan  = _tenHocPhan;
			newEntityViewThanhTraTheoThoiKhoaBieu.LoaiHocPhan  = _loaiHocPhan;
			newEntityViewThanhTraTheoThoiKhoaBieu.MaLop  = _maLop;
			newEntityViewThanhTraTheoThoiKhoaBieu.Ngay  = _ngay;
			newEntityViewThanhTraTheoThoiKhoaBieu.Thu  = _thu;
			newEntityViewThanhTraTheoThoiKhoaBieu.TietBatDau  = _tietBatDau;
			newEntityViewThanhTraTheoThoiKhoaBieu.SoTiet  = _soTiet;
			newEntityViewThanhTraTheoThoiKhoaBieu.Phong  = _phong;
			newEntityViewThanhTraTheoThoiKhoaBieu.Khoa  = _khoa;
			newEntityViewThanhTraTheoThoiKhoaBieu.MaCanBoGiangDay  = _maCanBoGiangDay;
			newEntityViewThanhTraTheoThoiKhoaBieu.HoTen  = _hoTen;
			newEntityViewThanhTraTheoThoiKhoaBieu.TienDo  = _tienDo;
			newEntityViewThanhTraTheoThoiKhoaBieu.SiSo  = _siSo;
			newEntityViewThanhTraTheoThoiKhoaBieu.MaViPham  = _maViPham;
			newEntityViewThanhTraTheoThoiKhoaBieu.NoiDungViPham  = _noiDungViPham;
			newEntityViewThanhTraTheoThoiKhoaBieu.MaHinhThucViPhamHrm  = _maHinhThucViPhamHrm;
			newEntityViewThanhTraTheoThoiKhoaBieu.TenHinhThucViPham  = _tenHinhThucViPham;
			newEntityViewThanhTraTheoThoiKhoaBieu.ThoiDiemGhiNhan  = _thoiDiemGhiNhan;
			newEntityViewThanhTraTheoThoiKhoaBieu.LyDo  = _lyDo;
			newEntityViewThanhTraTheoThoiKhoaBieu.GhiChu  = _ghiChu;
			newEntityViewThanhTraTheoThoiKhoaBieu.NgayCapNhat  = _ngayCapNhat;
			newEntityViewThanhTraTheoThoiKhoaBieu.NguoiCapNhat  = _nguoiCapNhat;
			newEntityViewThanhTraTheoThoiKhoaBieu.SoTietGhiNhan  = _soTietGhiNhan;
			newEntityViewThanhTraTheoThoiKhoaBieu.XacNhan  = _xacNhan;
			newEntityViewThanhTraTheoThoiKhoaBieu.TrangThai  = _trangThai;
			return newEntityViewThanhTraTheoThoiKhoaBieu;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ViewThanhTraTheoThoiKhoaBieu> securityContext = new SecurityContext<ViewThanhTraTheoThoiKhoaBieu>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 1000000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ViewThanhTraTheoThoiKhoaBieu> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ViewThanhTraTheoThoiKhoaBieu} of <c>ViewThanhTraTheoThoiKhoaBieu</c> objects.</returns>
		public override VList<ViewThanhTraTheoThoiKhoaBieu> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ViewThanhTraTheoThoiKhoaBieu> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ViewThanhTraTheoThoiKhoaBieu" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ViewThanhTraTheoThoiKhoaBieu" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ViewThanhTraTheoThoiKhoaBieu}"/> </returns>
		public override VList<ViewThanhTraTheoThoiKhoaBieu> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ViewThanhTraTheoThoiKhoaBieu> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ViewThanhTraTheoThoiKhoaBieu}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewThanhTraTheoThoiKhoaBieu</c> objects.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ViewThanhTraTheoThoiKhoaBieu}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewThanhTraTheoThoiKhoaBieu</c> objects.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ViewThanhTraTheoThoiKhoaBieu}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewThanhTraTheoThoiKhoaBieu</c> objects.</returns>
		public override VList<ViewThanhTraTheoThoiKhoaBieu> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ViewThanhTraTheoThoiKhoaBieu> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ViewThanhTraTheoThoiKhoaBieu</c> objects.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ViewThanhTraTheoThoiKhoaBieu</c> objects.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ViewThanhTraTheoThoiKhoaBieu</c> objects.</returns>
		public override VList<ViewThanhTraTheoThoiKhoaBieu> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ViewThanhTraTheoThoiKhoaBieu> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgayKhoa
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgayKhoa' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="khoa"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader GetByNgayKhoa(System.String tuNgay, System.String denNgay, System.String khoa)
		{
			return GetByNgayKhoa( tuNgay, denNgay, khoa, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgayKhoa' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="khoa"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader GetByNgayKhoa(System.String tuNgay, System.String denNgay, System.String khoa, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByNgayKhoa");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.GetByNgayKhoa(transactionManager, start, pageLength , tuNgay, denNgay, khoa);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgayToaNha
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgayToaNha' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="toaNha"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> ThongKeTheoNgayToaNha(System.String tuNgay, System.String denNgay, System.String toaNha)
		{
			return ThongKeTheoNgayToaNha( tuNgay, denNgay, toaNha, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgayToaNha' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="toaNha"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> ThongKeTheoNgayToaNha(System.String tuNgay, System.String denNgay, System.String toaNha, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("ThongKeTheoNgayToaNha");
			
		
			VList<ViewThanhTraTheoThoiKhoaBieu> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.ThongKeTheoNgayToaNha(transactionManager, start, pageLength , tuNgay, denNgay, toaNha);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgay
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetByNgay(System.String tuNgay, System.String denNgay)
		{
			return GetByNgay( tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetByNgay(System.String tuNgay, System.String denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByNgay");
			
		
			VList<ViewThanhTraTheoThoiKhoaBieu> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.GetByNgay(transactionManager, start, pageLength , tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgayKhoa
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgayKhoa' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="khoa"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader ThongKeTheoNgayKhoa(System.String tuNgay, System.String denNgay, System.String khoa)
		{
			return ThongKeTheoNgayKhoa( tuNgay, denNgay, khoa, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgayKhoa' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="khoa"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader ThongKeTheoNgayKhoa(System.String tuNgay, System.String denNgay, System.String khoa, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("ThongKeTheoNgayKhoa");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.ThongKeTheoNgayKhoa(transactionManager, start, pageLength , tuNgay, denNgay, khoa);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_GetByMaGiangVien
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_GetByMaGiangVien' stored procedure. 
		/// </summary>
		/// <param name="maCanBoGiangDay"> A <c>System.String</c> instance.</param>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetByMaGiangVien(System.String maCanBoGiangDay, System.String tuNgay, System.String denNgay)
		{
			return GetByMaGiangVien( maCanBoGiangDay, tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_GetByMaGiangVien' stored procedure. 
		/// </summary>
		/// <param name="maCanBoGiangDay"> A <c>System.String</c> instance.</param>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetByMaGiangVien(System.String maCanBoGiangDay, System.String tuNgay, System.String denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByMaGiangVien");
			
		
			VList<ViewThanhTraTheoThoiKhoaBieu> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.GetByMaGiangVien(transactionManager, start, pageLength , maCanBoGiangDay, tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgay
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> ThongKeTheoNgay(System.String tuNgay, System.String denNgay)
		{
			return ThongKeTheoNgay( tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoNgay' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> ThongKeTheoNgay(System.String tuNgay, System.String denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("ThongKeTheoNgay");
			
		
			VList<ViewThanhTraTheoThoiKhoaBieu> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.ThongKeTheoNgay(transactionManager, start, pageLength , tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgayCoSoToaNha
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgayCoSoToaNha' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="toaNha"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetByNgayCoSoToaNha(System.String tuNgay, System.String denNgay, System.String toaNha)
		{
			return GetByNgayCoSoToaNha( tuNgay, denNgay, toaNha, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_GetByNgayCoSoToaNha' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="toaNha"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="VList{ViewThanhTraTheoThoiKhoaBieu}"/> instance.</returns>
		public virtual VList<ViewThanhTraTheoThoiKhoaBieu> GetByNgayCoSoToaNha(System.String tuNgay, System.String denNgay, System.String toaNha, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetByNgayCoSoToaNha");
			
		
			VList<ViewThanhTraTheoThoiKhoaBieu> result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.GetByNgayCoSoToaNha(transactionManager, start, pageLength , tuNgay, denNgay, toaNha);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoGiangVien
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoGiangVien' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader ThongKeTheoGiangVien(System.String tuNgay, System.String denNgay)
		{
			return ThongKeTheoGiangVien( tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_ThongKeTheoGiangVien' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader ThongKeTheoGiangVien(System.String tuNgay, System.String denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("ThongKeTheoGiangVien");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.ThongKeTheoGiangVien(transactionManager, start, pageLength , tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		
		#region cust_View_ThanhTraTheoThoiKhoaBieu_SoSanhTienDo
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_SoSanhTienDo' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader SoSanhTienDo(System.String tuNgay, System.String denNgay)
		{
			return SoSanhTienDo( tuNgay, denNgay, 0, defaultMaxRecords );
		}
	
		/// <summary>
		///	This method wrap the 'cust_View_ThanhTraTheoThoiKhoaBieu_SoSanhTienDo' stored procedure. 
		/// </summary>
		/// <param name="tuNgay"> A <c>System.String</c> instance.</param>
		/// <param name="denNgay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual IDataReader SoSanhTienDo(System.String tuNgay, System.String denNgay, int start, int pageLength)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("SoSanhTienDo");
			
		
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			
			try
            {
				bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
                
				//Call Custom Procedure from Repository
				result = dataProvider.ViewThanhTraTheoThoiKhoaBieuProvider.SoSanhTienDo(transactionManager, start, pageLength , tuNgay, denNgay);
	        
            	
			}
            catch (Exception exc)
            {
				//if open, rollback
                if (transactionManager != null && transactionManager.IsOpen)
                        transactionManager.Rollback();
                    
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



