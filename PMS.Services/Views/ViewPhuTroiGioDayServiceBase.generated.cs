
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file ViewPhuTroiGioDay.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'View_PhuTroi_GioDay' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the ViewPhuTroiGioDay.cs file instead.
	/// All custom implementations should be done in the <see cref="ViewPhuTroiGioDay"/> class.
	/// </remarks>
	[DataObject]
	public partial class ViewPhuTroiGioDayServiceBase : ServiceViewBase<ViewPhuTroiGioDay>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="ViewPhuTroiGioDay"/> instance .
		///</summary>
		public ViewPhuTroiGioDayServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ViewPhuTroiGioDay"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_tenQuanLy"></param>
		///<param name="_tietThucDayCd"></param>
		///<param name="_tietThucDayTc"></param>
		///<param name="_tietQuyDoiCd"></param>
		///<param name="_tietQuyDoiTc"></param>
		///<param name="_tcQuyDoi"></param>
		///<param name="_maKhoa"></param>
		///<param name="_maBoMon"></param>
		///<param name="_tenKhoa"></param>
		///<param name="_tenBoMon"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_tenLoaiGiangVien"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_maHeDaoTao"></param>
		///<param name="_maChucVu"></param>
		///<param name="_tenChucVu"></param>
		///<param name="_tietNghiaVu"></param>
		///<param name="_nckh"></param>
		///<param name="_nhiemVuKhac"></param>
		///<param name="_gioChuan"></param>
		public static ViewPhuTroiGioDay CreateViewPhuTroiGioDay(System.String _maGiangVien, System.String _tenQuanLy, System.String _tietThucDayCd, System.String _tietThucDayTc, System.String _tietQuyDoiCd, System.String _tietQuyDoiTc, System.String _tcQuyDoi, System.String _maKhoa, System.String _maBoMon, System.String _tenKhoa, System.String _tenBoMon, System.Int32? _maLoaiGiangVien, System.String _tenLoaiGiangVien, System.String _maBacDaoTao, System.String _maHeDaoTao, System.String _maChucVu, System.String _tenChucVu, System.Int32 _tietNghiaVu, System.Decimal? _nckh, System.Decimal? _nhiemVuKhac, System.Decimal? _gioChuan)
		{
			ViewPhuTroiGioDay newEntityViewPhuTroiGioDay = new ViewPhuTroiGioDay();
			newEntityViewPhuTroiGioDay.MaGiangVien  = _maGiangVien;
			newEntityViewPhuTroiGioDay.TenQuanLy  = _tenQuanLy;
			newEntityViewPhuTroiGioDay.TietThucDayCd  = _tietThucDayCd;
			newEntityViewPhuTroiGioDay.TietThucDayTc  = _tietThucDayTc;
			newEntityViewPhuTroiGioDay.TietQuyDoiCd  = _tietQuyDoiCd;
			newEntityViewPhuTroiGioDay.TietQuyDoiTc  = _tietQuyDoiTc;
			newEntityViewPhuTroiGioDay.TcQuyDoi  = _tcQuyDoi;
			newEntityViewPhuTroiGioDay.MaKhoa  = _maKhoa;
			newEntityViewPhuTroiGioDay.MaBoMon  = _maBoMon;
			newEntityViewPhuTroiGioDay.TenKhoa  = _tenKhoa;
			newEntityViewPhuTroiGioDay.TenBoMon  = _tenBoMon;
			newEntityViewPhuTroiGioDay.MaLoaiGiangVien  = _maLoaiGiangVien;
			newEntityViewPhuTroiGioDay.TenLoaiGiangVien  = _tenLoaiGiangVien;
			newEntityViewPhuTroiGioDay.MaBacDaoTao  = _maBacDaoTao;
			newEntityViewPhuTroiGioDay.MaHeDaoTao  = _maHeDaoTao;
			newEntityViewPhuTroiGioDay.MaChucVu  = _maChucVu;
			newEntityViewPhuTroiGioDay.TenChucVu  = _tenChucVu;
			newEntityViewPhuTroiGioDay.TietNghiaVu  = _tietNghiaVu;
			newEntityViewPhuTroiGioDay.Nckh  = _nckh;
			newEntityViewPhuTroiGioDay.NhiemVuKhac  = _nhiemVuKhac;
			newEntityViewPhuTroiGioDay.GioChuan  = _gioChuan;
			return newEntityViewPhuTroiGioDay;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<ViewPhuTroiGioDay> securityContext = new SecurityContext<ViewPhuTroiGioDay>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<ViewPhuTroiGioDay> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{ViewPhuTroiGioDay} of <c>ViewPhuTroiGioDay</c> objects.</returns>
		public override VList<ViewPhuTroiGioDay> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<ViewPhuTroiGioDay> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewPhuTroiGioDayProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="ViewPhuTroiGioDay" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<ViewPhuTroiGioDay> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="ViewPhuTroiGioDay" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{ViewPhuTroiGioDay}"/> </returns>
		public override VList<ViewPhuTroiGioDay> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<ViewPhuTroiGioDay> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.ViewPhuTroiGioDayProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{ViewPhuTroiGioDay}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewPhuTroiGioDay</c> objects.</returns>
		public virtual VList<ViewPhuTroiGioDay> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{ViewPhuTroiGioDay}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewPhuTroiGioDay</c> objects.</returns>
		public virtual VList<ViewPhuTroiGioDay> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{ViewPhuTroiGioDay}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>ViewPhuTroiGioDay</c> objects.</returns>
		public override VList<ViewPhuTroiGioDay> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<ViewPhuTroiGioDay> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewPhuTroiGioDayProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>ViewPhuTroiGioDay</c> objects.</returns>
		public virtual VList<ViewPhuTroiGioDay> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>ViewPhuTroiGioDay</c> objects.</returns>
		public virtual VList<ViewPhuTroiGioDay> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>ViewPhuTroiGioDay</c> objects.</returns>
		public override VList<ViewPhuTroiGioDay> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<ViewPhuTroiGioDay> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.ViewPhuTroiGioDayProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



