
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file GiangVien.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
//using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'GiangVien' table.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the GiangVien.cs file instead.
	/// All custom implementations should be done in the <see cref="GiangVien"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public partial class GiangVienServiceBase : ServiceBase<GiangVien, GiangVienKey>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="GiangVien"/> instance .
		///</summary>
		public GiangVienServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GiangVien"/> instance.
		///</summary>
		///<param name="_maDanToc"></param>
		///<param name="_maTonGiao"></param>
		///<param name="_maDonVi"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maNguoiLap"></param>
		///<param name="_matKhau"></param>
		///<param name="_maTinhTrang"></param>
		///<param name="_maQuanLy"></param>
		///<param name="_ho"></param>
		///<param name="_tenDem"></param>
		///<param name="_ten"></param>
		///<param name="_ngaySinh"></param>
		///<param name="_gioiTinh"></param>
		///<param name="_noiSinh"></param>
		///<param name="_cmnd"></param>
		///<param name="_ngayCap"></param>
		///<param name="_noiCap"></param>
		///<param name="_doanDang"></param>
		///<param name="_ngayVaoDoanDang"></param>
		///<param name="_ngayKyHopDong"></param>
		///<param name="_ngayKetThucHopDong"></param>
		///<param name="_hinhAnh"></param>
		///<param name="_diaChi"></param>
		///<param name="_thuongTru"></param>
		///<param name="_noiLamViec"></param>
		///<param name="_email"></param>
		///<param name="_dienThoai"></param>
		///<param name="_soDiDong"></param>
		///<param name="_soTaiKhoan"></param>
		///<param name="_tenNganHang"></param>
		///<param name="_maSoThue"></param>
		///<param name="_chiNhanh"></param>
		///<param name="_soSoBaoHiem"></param>
		///<param name="_thoiGianBatDau"></param>
		///<param name="_bacLuong"></param>
		///<param name="_ngayHuongLuong"></param>
		///<param name="_namLamViec"></param>
		///<param name="_chuyenNganh"></param>
		///<param name="_maHeSoThuLao"></param>
		///<param name="_ngach"></param>
		///<param name="_soHieuCongChuc"></param>
		///<param name="_hrmid"></param>
		///<param name="_noiCapBang"></param>
		///<param name="_khoaTaiKhoan"></param>
		///<param name="_maLoaiNhanVien"></param>
		///<param name="_maNgachCongChuc"></param>
		///<param name="_maTrinhDoChinhTri"></param>
		///<param name="_maTrinhDoSuPham"></param>
		///<param name="_maTrinhDoNgoaiNgu"></param>
		///<param name="_maTrinhDoTinHoc"></param>
		///<param name="_maTrinhDoQuanLyNhaNuoc"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_khoiKienThucGiangDay"></param>
		///<param name="_nganhDaoTao"></param>
		///<param name="_donViGiangDay"></param>
		///<param name="_idHoSo"></param>
		///<param name="_maQuocTich"></param>
		///<param name="_daXoaHrm"></param>
		public static GiangVien CreateGiangVien(System.String _maDanToc, System.String _maTonGiao, System.String _maDonVi, System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien, System.Int32? _maNguoiLap, System.String _matKhau, System.Int32? _maTinhTrang, System.String _maQuanLy, System.String _ho, System.String _tenDem, System.String _ten, System.String _ngaySinh, System.Boolean? _gioiTinh, System.String _noiSinh, System.String _cmnd, System.String _ngayCap, System.String _noiCap, System.Boolean? _doanDang, System.String _ngayVaoDoanDang, System.DateTime? _ngayKyHopDong, System.DateTime? _ngayKetThucHopDong, System.Byte[] _hinhAnh, System.String _diaChi, System.String _thuongTru, System.String _noiLamViec, System.String _email, System.String _dienThoai, System.String _soDiDong, System.String _soTaiKhoan, System.String _tenNganHang, System.String _maSoThue, System.String _chiNhanh, System.String _soSoBaoHiem, System.String _thoiGianBatDau, System.Decimal? _bacLuong, System.String _ngayHuongLuong, System.String _namLamViec, System.String _chuyenNganh, System.String _maHeSoThuLao, System.String _ngach, System.String _soHieuCongChuc, System.Guid? _hrmid, System.String _noiCapBang, System.Boolean? _khoaTaiKhoan, System.Int32? _maLoaiNhanVien, System.Int32? _maNgachCongChuc, System.Int32? _maTrinhDoChinhTri, System.Int32? _maTrinhDoSuPham, System.Int32? _maTrinhDoNgoaiNgu, System.Int32? _maTrinhDoTinHoc, System.Int32? _maTrinhDoQuanLyNhaNuoc, System.String _nguoiCapNhat, System.DateTime? _ngayCapNhat, System.String _khoiKienThucGiangDay, System.String _nganhDaoTao, System.String _donViGiangDay, System.Int32? _idHoSo, System.Int32? _maQuocTich, System.Boolean? _daXoaHrm)
		{
			GiangVien newEntityGiangVien = new GiangVien();
			newEntityGiangVien.MaDanToc  = _maDanToc;
			newEntityGiangVien.MaTonGiao  = _maTonGiao;
			newEntityGiangVien.MaDonVi  = _maDonVi;
			newEntityGiangVien.MaHocHam  = _maHocHam;
			newEntityGiangVien.MaHocVi  = _maHocVi;
			newEntityGiangVien.MaLoaiGiangVien  = _maLoaiGiangVien;
			newEntityGiangVien.MaNguoiLap  = _maNguoiLap;
			newEntityGiangVien.MatKhau  = _matKhau;
			newEntityGiangVien.MaTinhTrang  = _maTinhTrang;
			newEntityGiangVien.MaQuanLy  = _maQuanLy;
			newEntityGiangVien.Ho  = _ho;
			newEntityGiangVien.TenDem  = _tenDem;
			newEntityGiangVien.Ten  = _ten;
			newEntityGiangVien.NgaySinh  = _ngaySinh;
			newEntityGiangVien.GioiTinh  = _gioiTinh;
			newEntityGiangVien.NoiSinh  = _noiSinh;
			newEntityGiangVien.Cmnd  = _cmnd;
			newEntityGiangVien.NgayCap  = _ngayCap;
			newEntityGiangVien.NoiCap  = _noiCap;
			newEntityGiangVien.DoanDang  = _doanDang;
			newEntityGiangVien.NgayVaoDoanDang  = _ngayVaoDoanDang;
			newEntityGiangVien.NgayKyHopDong  = _ngayKyHopDong;
			newEntityGiangVien.NgayKetThucHopDong  = _ngayKetThucHopDong;
			newEntityGiangVien.HinhAnh  = _hinhAnh;
			newEntityGiangVien.DiaChi  = _diaChi;
			newEntityGiangVien.ThuongTru  = _thuongTru;
			newEntityGiangVien.NoiLamViec  = _noiLamViec;
			newEntityGiangVien.Email  = _email;
			newEntityGiangVien.DienThoai  = _dienThoai;
			newEntityGiangVien.SoDiDong  = _soDiDong;
			newEntityGiangVien.SoTaiKhoan  = _soTaiKhoan;
			newEntityGiangVien.TenNganHang  = _tenNganHang;
			newEntityGiangVien.MaSoThue  = _maSoThue;
			newEntityGiangVien.ChiNhanh  = _chiNhanh;
			newEntityGiangVien.SoSoBaoHiem  = _soSoBaoHiem;
			newEntityGiangVien.ThoiGianBatDau  = _thoiGianBatDau;
			newEntityGiangVien.BacLuong  = _bacLuong;
			newEntityGiangVien.NgayHuongLuong  = _ngayHuongLuong;
			newEntityGiangVien.NamLamViec  = _namLamViec;
			newEntityGiangVien.ChuyenNganh  = _chuyenNganh;
			newEntityGiangVien.MaHeSoThuLao  = _maHeSoThuLao;
			newEntityGiangVien.Ngach  = _ngach;
			newEntityGiangVien.SoHieuCongChuc  = _soHieuCongChuc;
			newEntityGiangVien.Hrmid  = _hrmid;
			newEntityGiangVien.NoiCapBang  = _noiCapBang;
			newEntityGiangVien.KhoaTaiKhoan  = _khoaTaiKhoan;
			newEntityGiangVien.MaLoaiNhanVien  = _maLoaiNhanVien;
			newEntityGiangVien.MaNgachCongChuc  = _maNgachCongChuc;
			newEntityGiangVien.MaTrinhDoChinhTri  = _maTrinhDoChinhTri;
			newEntityGiangVien.MaTrinhDoSuPham  = _maTrinhDoSuPham;
			newEntityGiangVien.MaTrinhDoNgoaiNgu  = _maTrinhDoNgoaiNgu;
			newEntityGiangVien.MaTrinhDoTinHoc  = _maTrinhDoTinHoc;
			newEntityGiangVien.MaTrinhDoQuanLyNhaNuoc  = _maTrinhDoQuanLyNhaNuoc;
			newEntityGiangVien.NguoiCapNhat  = _nguoiCapNhat;
			newEntityGiangVien.NgayCapNhat  = _ngayCapNhat;
			newEntityGiangVien.KhoiKienThucGiangDay  = _khoiKienThucGiangDay;
			newEntityGiangVien.NganhDaoTao  = _nganhDaoTao;
			newEntityGiangVien.DonViGiangDay  = _donViGiangDay;
			newEntityGiangVien.IdHoSo  = _idHoSo;
			newEntityGiangVien.MaQuocTich  = _maQuocTich;
			newEntityGiangVien.DaXoaHrm  = _daXoaHrm;
			return newEntityGiangVien;
		}
		#endregion Constructors

		#region Fields
		private static SecurityContext<GiangVien> securityContext = new SecurityContext<GiangVien>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		#endregion 
		
		#region SecurityContext
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<GiangVien> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		#endregion 
		
		#region Data Access Methods
		
		#region GetByForeignKey Methods
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_HocHam key.
		///		FK_GiangVien_HocHam Description: 
		/// </summary>
		/// <param name="_maHocHam"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaHocHam(System.Int32? _maHocHam)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaHocHam");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaHocHam(transactionManager, _maHocHam));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_HocHam key.
		///		FK_GiangVien_HocHam Description: 
		/// </summary>
		/// <param name="_maHocHam"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaHocHam(System.Int32? _maHocHam, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaHocHam");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaHocHam(transactionManager, _maHocHam, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_HocVi key.
		///		FK_GiangVien_HocVi Description: 
		/// </summary>
		/// <param name="_maHocVi"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaHocVi(System.Int32? _maHocVi)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaHocVi");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaHocVi(transactionManager, _maHocVi));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_HocVi key.
		///		FK_GiangVien_HocVi Description: 
		/// </summary>
		/// <param name="_maHocVi"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaHocVi(System.Int32? _maHocVi, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaHocVi");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaHocVi(transactionManager, _maHocVi, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_LoaiGiangVien key.
		///		FK_GiangVien_LoaiGiangVien Description: 
		/// </summary>
		/// <param name="_maLoaiGiangVien"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaLoaiGiangVien(System.Int32? _maLoaiGiangVien)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaLoaiGiangVien");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaLoaiGiangVien(transactionManager, _maLoaiGiangVien));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_LoaiGiangVien key.
		///		FK_GiangVien_LoaiGiangVien Description: 
		/// </summary>
		/// <param name="_maLoaiGiangVien"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaLoaiGiangVien(System.Int32? _maLoaiGiangVien, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaLoaiGiangVien");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaLoaiGiangVien(transactionManager, _maLoaiGiangVien, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_LoaiNhanVien key.
		///		FK_GiangVien_LoaiNhanVien Description: 
		/// </summary>
		/// <param name="_maLoaiNhanVien"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaLoaiNhanVien(System.Int32? _maLoaiNhanVien)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaLoaiNhanVien");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaLoaiNhanVien(transactionManager, _maLoaiNhanVien));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_LoaiNhanVien key.
		///		FK_GiangVien_LoaiNhanVien Description: 
		/// </summary>
		/// <param name="_maLoaiNhanVien"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaLoaiNhanVien(System.Int32? _maLoaiNhanVien, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaLoaiNhanVien");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaLoaiNhanVien(transactionManager, _maLoaiNhanVien, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_NgachCongChuc key.
		///		FK_GiangVien_NgachCongChuc Description: 
		/// </summary>
		/// <param name="_maNgachCongChuc"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaNgachCongChuc(System.Int32? _maNgachCongChuc)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaNgachCongChuc");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaNgachCongChuc(transactionManager, _maNgachCongChuc));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_NgachCongChuc key.
		///		FK_GiangVien_NgachCongChuc Description: 
		/// </summary>
		/// <param name="_maNgachCongChuc"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaNgachCongChuc(System.Int32? _maNgachCongChuc, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaNgachCongChuc");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaNgachCongChuc(transactionManager, _maNgachCongChuc, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TaiKhoan key.
		///		FK_GiangVien_TaiKhoan Description: 
		/// </summary>
		/// <param name="_maNguoiLap"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaNguoiLap(System.Int32? _maNguoiLap)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaNguoiLap");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaNguoiLap(transactionManager, _maNguoiLap));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TaiKhoan key.
		///		FK_GiangVien_TaiKhoan Description: 
		/// </summary>
		/// <param name="_maNguoiLap"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaNguoiLap(System.Int32? _maNguoiLap, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaNguoiLap");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaNguoiLap(transactionManager, _maNguoiLap, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TinhTrang key.
		///		FK_GiangVien_TinhTrang Description: 
		/// </summary>
		/// <param name="_maTinhTrang"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTinhTrang(System.Int32? _maTinhTrang)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTinhTrang");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTinhTrang(transactionManager, _maTinhTrang));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TinhTrang key.
		///		FK_GiangVien_TinhTrang Description: 
		/// </summary>
		/// <param name="_maTinhTrang"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTinhTrang(System.Int32? _maTinhTrang, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTinhTrang");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTinhTrang(transactionManager, _maTinhTrang, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoChinhTri key.
		///		FK_GiangVien_TrinhDoChinhTri Description: 
		/// </summary>
		/// <param name="_maTrinhDoChinhTri"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoChinhTri(System.Int32? _maTrinhDoChinhTri)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoChinhTri");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoChinhTri(transactionManager, _maTrinhDoChinhTri));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoChinhTri key.
		///		FK_GiangVien_TrinhDoChinhTri Description: 
		/// </summary>
		/// <param name="_maTrinhDoChinhTri"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoChinhTri(System.Int32? _maTrinhDoChinhTri, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoChinhTri");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoChinhTri(transactionManager, _maTrinhDoChinhTri, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoNgoaiNgu key.
		///		FK_GiangVien_TrinhDoNgoaiNgu Description: 
		/// </summary>
		/// <param name="_maTrinhDoNgoaiNgu"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoNgoaiNgu(System.Int32? _maTrinhDoNgoaiNgu)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoNgoaiNgu");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoNgoaiNgu(transactionManager, _maTrinhDoNgoaiNgu));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoNgoaiNgu key.
		///		FK_GiangVien_TrinhDoNgoaiNgu Description: 
		/// </summary>
		/// <param name="_maTrinhDoNgoaiNgu"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoNgoaiNgu(System.Int32? _maTrinhDoNgoaiNgu, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoNgoaiNgu");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoNgoaiNgu(transactionManager, _maTrinhDoNgoaiNgu, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoQuanLyNhaNuoc key.
		///		FK_GiangVien_TrinhDoQuanLyNhaNuoc Description: 
		/// </summary>
		/// <param name="_maTrinhDoQuanLyNhaNuoc"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoQuanLyNhaNuoc(System.Int32? _maTrinhDoQuanLyNhaNuoc)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoQuanLyNhaNuoc");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoQuanLyNhaNuoc(transactionManager, _maTrinhDoQuanLyNhaNuoc));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoQuanLyNhaNuoc key.
		///		FK_GiangVien_TrinhDoQuanLyNhaNuoc Description: 
		/// </summary>
		/// <param name="_maTrinhDoQuanLyNhaNuoc"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoQuanLyNhaNuoc(System.Int32? _maTrinhDoQuanLyNhaNuoc, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoQuanLyNhaNuoc");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoQuanLyNhaNuoc(transactionManager, _maTrinhDoQuanLyNhaNuoc, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoSuPham key.
		///		FK_GiangVien_TrinhDoSuPham Description: 
		/// </summary>
		/// <param name="_maTrinhDoSuPham"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoSuPham(System.Int32? _maTrinhDoSuPham)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoSuPham");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoSuPham(transactionManager, _maTrinhDoSuPham));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoSuPham key.
		///		FK_GiangVien_TrinhDoSuPham Description: 
		/// </summary>
		/// <param name="_maTrinhDoSuPham"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoSuPham(System.Int32? _maTrinhDoSuPham, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoSuPham");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoSuPham(transactionManager, _maTrinhDoSuPham, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoTinHoc key.
		///		FK_GiangVien_TrinhDoTinHoc Description: 
		/// </summary>
		/// <param name="_maTrinhDoTinHoc"></param>
		/// <returns>Returns a generic collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoTinHoc(System.Int32? _maTrinhDoTinHoc)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoTinHoc");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoTinHoc(transactionManager, _maTrinhDoTinHoc));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the FK_GiangVien_TrinhDoTinHoc key.
		///		FK_GiangVien_TrinhDoTinHoc Description: 
		/// </summary>
		/// <param name="_maTrinhDoTinHoc"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{GiangVien}" /> of <c>GiangVien</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaTrinhDoTinHoc(System.Int32? _maTrinhDoTinHoc, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaTrinhDoTinHoc");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<GiangVien>(dataProvider.GiangVienProvider.GetByMaTrinhDoTinHoc(transactionManager, _maTrinhDoTinHoc, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion GetByForeignKey Methods
		
		#region GetByIndexes
		/// <summary>
		/// 	Gets a row from the DataSource based on its primary key.
		/// </summary>
		/// <param name="key">The unique identifier of the row to retrieve.</param>
		/// <returns>Returns an instance of the Entity class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public override GiangVien Get(GiangVienKey key)
		{
			return GetByMaGiangVien(key.MaGiangVien);
		}

		/// <summary>
		///  method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the primary key IX_GiangVien index.
		/// </summary>
		/// <param name="_maQuanLy"></param>
		/// <returns>Returns an instance of the <see cref="TList{GiangVien}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaQuanLy(System.String _maQuanLy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaQuanLy");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.GiangVienProvider.GetByMaQuanLy(transactionManager, _maQuanLy)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the primary key IX_GiangVien index.
		/// </summary>
		/// <param name="_maQuanLy"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{GiangVien}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaQuanLy(System.String _maQuanLy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaQuanLy");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.GiangVienProvider.GetByMaQuanLy(transactionManager, _maQuanLy, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the primary key PK_GiangVien index.
		/// </summary>
		/// <param name="_maGiangVien"></param>
		/// <returns>Returns an instance of the <see cref="GiangVien"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual GiangVien GetByMaGiangVien(System.Int32 _maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaGiangVien");
			#endregion Security check
			
			#region Initialisation
			GiangVien entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.GiangVienProvider.GetByMaGiangVien(transactionManager, _maGiangVien)   as GiangVien;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{GiangVien}" /> from the datasource based on the primary key PK_GiangVien index.
		/// </summary>
		/// <param name="_maGiangVien"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="GiangVien"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual GiangVien GetByMaGiangVien(System.Int32 _maGiangVien, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaGiangVien");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			GiangVien entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.GiangVienProvider.GetByMaGiangVien(transactionManager, _maGiangVien, start, pageLength, out totalCount)   as GiangVien;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	
		#endregion GetByIndexes
	
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="GiangVien" /> entities.
		/// </summary>
		/// <returns></returns>
		public override TList<GiangVien> GetAll() 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.GetAll(transactionManager);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}

		/// <summary>
		/// Get a set portion of a complete list of <see cref="GiangVien" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{GiangVien}"/> </returns>
		public virtual TList<GiangVien> GetAll(int start, int pageLength, out int totalCount) 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{GiangVien}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
		public virtual TList<GiangVien> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, int.MaxValue, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{GiangVien}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
		public virtual TList<GiangVien> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{GiangVien}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
		public override TList<GiangVien> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, int.MaxValue, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
				
		#region Find
		
		#region Parsed Find Methods
		
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual TList<GiangVien> Find(string whereClause)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.Find(transactionManager, whereClause);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}	
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{GiangVien} of <c>GiangVien</c> objects.</returns>
		public override TList<GiangVien> Find(string whereClause, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.Find(transactionManager, whereClause, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods

		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
		public virtual TList<GiangVien> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, (string) null);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        public virtual TList<GiangVien> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns)
        {
            return Find(parameters, sortColumns.ToString());
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
		public virtual TList<GiangVien> Find(IFilterParameterCollection parameters, string orderBy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			TList<GiangVien> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.Find(transactionManager, parameters, orderBy);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;		
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="count">out. The number of rows that match this query.</param>
        /// <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
        public virtual TList<GiangVien> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns, int start, int pageLength, out int count)
        {
            return Find(parameters, sortColumns.ToString(), start, pageLength, out count);
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>GiangVien</c> objects.</returns>
		public virtual TList<GiangVien> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			count = -1;
			TransactionManager transactionManager = null; 
			TList<GiangVien> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion
		
		#region Insert

		#region Insert Entity
		/// <summary>
		/// public virtual method that Inserts a GiangVien object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">GiangVien object to Insert.</param>
		/// <remarks>After Inserting into the datasource, the GiangVien object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with an already open transaction.
        /// <code>
		/// GiangVien entity = new GiangVien();
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Insert Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Insert(entity.ChildObjectSource);
		///		GiangVienService.Insert(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public override bool Insert(GiangVien entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Insert", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.GiangVienProvider.Insert(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Insert Entity
		
		#region Insert Collection
		/// <summary>
		/// public virtual method that Inserts rows in <see cref="TList{GiangVien}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>GiangVien</c> objects in a <see cref="TList{GiangVien}" /> object to Insert.</param>
		/// <remarks>
		///		This function will only Insert entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Inserting the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Inserting into the datasource, the <c>GiangVien</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Insert.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with a collection of GiangVien.
        /// <code><![CDATA[
		/// TList<GiangVien> list = new TList<GiangVien>();
		/// GiangVien entity = new GiangVien();
		/// entity.StringProperty = "foo";
		/// GiangVien entity2 = new GiangVien();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	GiangVienService.Insert(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public virtual TList<GiangVien> Insert(TList<GiangVien> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Insert", DomainUtil.GetErrorsFromList<GiangVien>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.GiangVienProvider.Insert(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Insert Collection

		#endregion Insert 
		
		#region Update

		#region Update Entity
		/// <summary>
		/// public virtual method that Updates a GiangVien object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">GiangVien object to Update.</param>
		/// <remarks>After Updateing into the datasource, the GiangVien object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with an already open transaction.
        /// <code>
		///	GiangVien entity = GiangVienService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Update Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Update(entity.ChildObjectSource);
		///		GiangVienService.Update(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool Update(GiangVien entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Update", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.GiangVienProvider.Update(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Update Entity
		
		#region Update Collection
		/// <summary>
		/// public virtual method that Updates rows in <see cref="TList{GiangVien}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>GiangVien</c> objects in a <see cref="TList{GiangVien}" /> object to Update.</param>
		/// <remarks>
		///		This function will only Update entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Updateing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Updateing into the datasource, the <c>GiangVien</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Update.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with a collection of GiangVien.
        /// <code><![CDATA[
		/// TList<GiangVien> list = new TList<GiangVien>();
		/// GiangVien entity = new GiangVien();
		/// entity.StringProperty = "foo";
		/// GiangVien entity2 = new GiangVien();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	GiangVienService.Update(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<GiangVien> Update(TList<GiangVien> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Update", DomainUtil.GetErrorsFromList<GiangVien>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.GiangVienProvider.Update(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Update Collection

		#endregion Update 
		
		#region Save

		#region Save Entity
		/// <summary>
		/// public virtual method that Saves a GiangVien object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">GiangVien object to Save.</param>
		/// <remarks>After Saveing into the datasource, the GiangVien object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with an already open transaction.
        /// <code>
		///	GiangVien entity = GiangVienService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Save Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Save(entity.ChildObjectSource);
		///		GiangVienService.Save(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override GiangVien Save(GiangVien entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Save", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.GiangVienProvider.Save(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		#endregion Save Entity
		
		#region Save Collection
		/// <summary>
		/// public virtual method that Saves rows in <see cref="TList{GiangVien}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>GiangVien</c> objects in a <see cref="TList{GiangVien}" /> object to Save.</param>
		/// <remarks>
		///		This function will only Save entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Saveing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Saveing into the datasource, the <c>GiangVien</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Save.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with a collection of GiangVien.
        /// <code><![CDATA[
		/// TList<GiangVien> list = new TList<GiangVien>();
		/// GiangVien entity = new GiangVien();
		/// entity.StringProperty = "foo";
		/// GiangVien entity2 = new GiangVien();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	GiangVienService.Save(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<GiangVien> Save(TList<GiangVien> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Save", DomainUtil.GetErrorsFromList<GiangVien>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.GiangVienProvider.Save(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Save Collection

		#endregion Save 
		
		#region Delete

		#region Delete Entity
		/// <summary>
		/// public virtual method that Deletes a GiangVien object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">GiangVien object to Delete.</param>
		/// <remarks>After Deleteing into the datasource, the GiangVien object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with an already open transaction.
        /// <code>
		///	GiangVien entity = GiangVienService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Delete Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Delete(entity.ChildObjectSource);
		///		GiangVienService.Delete(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public override bool Delete(GiangVien entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Delete", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.GiangVienProvider.Delete(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Delete Entity
		
		#region Delete Collection
		/// <summary>
		/// public virtual method that Deletes rows in <see cref="TList{GiangVien}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>GiangVien</c> objects in a <see cref="TList{GiangVien}" /> object to Delete.</param>
		/// <remarks>
		///		This function will only Delete entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Deleteing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Deleteing into the datasource, the <c>GiangVien</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Delete.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with a collection of GiangVien.
        /// <code><![CDATA[
		/// TList<GiangVien> list = new TList<GiangVien>();
		/// GiangVien entity = new GiangVien();
		/// entity.StringProperty = "foo";
		/// GiangVien entity2 = new GiangVien();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	GiangVienService.Delete(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual TList<GiangVien> Delete(TList<GiangVien> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Delete", DomainUtil.GetErrorsFromList<GiangVien>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.GiangVienProvider.Delete(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Delete Collection

		#endregion Delete 

		#region   Delete
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="key">The unique identifier of the row to delete.</param>
		/// <returns>Returns true if operation suceeded.</returns>
		public bool Delete(GiangVienKey key)
		{
			return Delete(key.MaGiangVien );
		}
		
		/// <summary>
		/// 	Deletes a row from the DataSource based on the PK'S System.Int32 _maGiangVien
		/// </summary>
		/// <param name="_maGiangVien">GiangVien pk id.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual bool Delete(System.Int32 _maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check

			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.GiangVienProvider.Delete(transactionManager, _maGiangVien);
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
			
		}
		#endregion 
		
		#region  GetBy m:m Aggregate Relationships
		#region GetByMaHoSoFromGiangVienHoSo
		/// <summary>
		///		Gets GiangVien objects from the datasource by MaHoSo in the
		///		GiangVien_HoSo table. Table GiangVien is related to table HoSo
		///		through the (M:N) relationship defined in the GiangVien_HoSo table.
		/// </summary>
		/// <param name="_maHoSo"></param>
		/// <returns>Returns a typed collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaHoSoFromGiangVienHoSo(System.Int32 _maHoSo)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaHoSoFromGiangVienHoSo");
			#endregion Security check
			
			#region Initialisation
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.GetByMaHoSoFromGiangVienHoSo(transactionManager, _maHoSo);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return list;
		}
		
		/// <summary>
		///		Gets GiangVien objects from the datasource by MaHoSo in the
		///		GiangVien_HoSo table. Table GiangVien is related to table HoSo
		///		through the (M:N) relationship defined in the GiangVien_HoSo table.
		/// </summary>
		/// <param name="_maHoSo"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out param: Total Number of results returned.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of GiangVien objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> GetByMaHoSoFromGiangVienHoSo(System.Int32 _maHoSo, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaHoSoFromGiangVienHoSo");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<GiangVien> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.GiangVienProvider.GetByMaHoSoFromGiangVienHoSo(transactionManager, _maHoSo, start,  pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return list;			
		}
		#endregion GetByMaHoSoFromGiangVienHoSo
		
		#endregion	N2N Relationships

		#region Custom Methods
		
		#region cust_GiangVien_ThongKeSoLuongTheoLoaiGiangVien
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeSoLuongTheoLoaiGiangVien' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeSoLuongTheoLoaiGiangVien()
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeSoLuongTheoLoaiGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.ThongKeSoLuongTheoLoaiGiangVien(transactionManager );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeSoLuongTheoLoaiGiangVien' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeSoLuongTheoLoaiGiangVien( int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeSoLuongTheoLoaiGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.ThongKeSoLuongTheoLoaiGiangVien(transactionManager, start, pageLength );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_DinhMucKhauTru_Luu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DinhMucKhauTru_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DinhMucKhauTru_Luu(System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reval)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DinhMucKhauTru_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.DinhMucKhauTru_Luu(transactionManager , xmlData, namHoc, hocKy, ref reval);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DinhMucKhauTru_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DinhMucKhauTru_Luu( System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reval, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DinhMucKhauTru_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.DinhMucKhauTru_Luu(transactionManager, start, pageLength , xmlData, namHoc, hocKy, ref reval);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_ThongKeDuThieu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_ThongKeDuThieu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_ThongKeDuThieu(System.String namHoc, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_ThongKeDuThieu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.NghienCuuKH_ThongKeDuThieu(transactionManager , namHoc, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_ThongKeDuThieu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_ThongKeDuThieu( System.String namHoc, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_ThongKeDuThieu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.NghienCuuKH_ThongKeDuThieu(transactionManager, start, pageLength , namHoc, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetAllTaiKhoan
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetAllTaiKhoan' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetAllTaiKhoan(System.String maDonVi, System.String maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAllTaiKhoan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetAllTaiKhoan(transactionManager , maDonVi, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetAllTaiKhoan' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetAllTaiKhoan( System.String maDonVi, System.String maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAllTaiKhoan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetAllTaiKhoan(transactionManager, start, pageLength , maDonVi, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetHeSoQuyDoiTietChuanCtim
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHeSoQuyDoiTietChuanCtim' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHeSoQuyDoiTietChuanCtim(System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan, System.String maBacDaoTao, System.Int32 maLoaiHocPhan)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHeSoQuyDoiTietChuanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetHeSoQuyDoiTietChuanCtim(transactionManager , maQuanLy, namHoc, hocKy, maMonHoc, siSo, tietBatDau, ngayDay, maPhongHoc, maLopHocPhan, maBacDaoTao, maLoaiHocPhan);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHeSoQuyDoiTietChuanCtim' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHeSoQuyDoiTietChuanCtim( System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan, System.String maBacDaoTao, System.Int32 maLoaiHocPhan, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHeSoQuyDoiTietChuanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetHeSoQuyDoiTietChuanCtim(transactionManager, start, pageLength , maQuanLy, namHoc, hocKy, maMonHoc, siSo, tietBatDau, ngayDay, maPhongHoc, maLopHocPhan, maBacDaoTao, maLoaiHocPhan);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_DongBoDuLieuHRM
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DongBoDuLieuHRM' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DongBoDuLieuHRM()
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DongBoDuLieuHRM");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.DongBoDuLieuHRM(transactionManager );
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DongBoDuLieuHRM' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DongBoDuLieuHRM( int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DongBoDuLieuHRM");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.DongBoDuLieuHRM(transactionManager, start, pageLength );
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_KiemTraGiangVienImport
		/// <summary>
		///	This method wrap the 'cust_GiangVien_KiemTraGiangVienImport' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="checkHocHam"> A <c>System.String</c> instance.</param>
			/// <param name="checkHocVi"> A <c>System.String</c> instance.</param>
			/// <param name="checkLoaiGv"> A <c>System.String</c> instance.</param>
			/// <param name="checkTinhTrang"> A <c>System.String</c> instance.</param>
			/// <param name="checkDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader KiemTraGiangVienImport(System.String xmlData, ref System.String checkHocHam, ref System.String checkHocVi, ref System.String checkLoaiGv, ref System.String checkTinhTrang, ref System.String checkDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KiemTraGiangVienImport");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.KiemTraGiangVienImport(transactionManager , xmlData, ref checkHocHam, ref checkHocVi, ref checkLoaiGv, ref checkTinhTrang, ref checkDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_KiemTraGiangVienImport' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="checkHocHam"> A <c>System.String</c> instance.</param>
			/// <param name="checkHocVi"> A <c>System.String</c> instance.</param>
			/// <param name="checkLoaiGv"> A <c>System.String</c> instance.</param>
			/// <param name="checkTinhTrang"> A <c>System.String</c> instance.</param>
			/// <param name="checkDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader KiemTraGiangVienImport( System.String xmlData, ref System.String checkHocHam, ref System.String checkHocVi, ref System.String checkLoaiGv, ref System.String checkTinhTrang, ref System.String checkDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KiemTraGiangVienImport");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.KiemTraGiangVienImport(transactionManager, start, pageLength , xmlData, ref checkHocHam, ref checkHocVi, ref checkLoaiGv, ref checkTinhTrang, ref checkDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetTienCanTren
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetTienCanTren' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetTienCanTren(System.String namHoc, System.String hocKy, System.String maLoaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetTienCanTren");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetTienCanTren(transactionManager , namHoc, hocKy, maLoaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetTienCanTren' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetTienCanTren( System.String namHoc, System.String hocKy, System.String maLoaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetTienCanTren");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetTienCanTren(transactionManager, start, pageLength , namHoc, hocKy, maLoaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetThongKeCanBoNhanVienByNgay
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongKeCanBoNhanVienByNgay' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongKeCanBoNhanVienByNgay(System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongKeCanBoNhanVienByNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetThongKeCanBoNhanVienByNgay(transactionManager , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongKeCanBoNhanVienByNgay' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongKeCanBoNhanVienByNgay( System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongKeCanBoNhanVienByNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetThongKeCanBoNhanVienByNgay(transactionManager, start, pageLength , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetMaDonViMaTinhTrang
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetMaDonViMaTinhTrang' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetMaDonViMaTinhTrang(System.String maDonVi, System.Int32 maTinhTrang)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetMaDonViMaTinhTrang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetMaDonViMaTinhTrang(transactionManager , maDonVi, maTinhTrang);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetMaDonViMaTinhTrang' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetMaDonViMaTinhTrang( System.String maDonVi, System.Int32 maTinhTrang, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetMaDonViMaTinhTrang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetMaDonViMaTinhTrang(transactionManager, start, pageLength , maDonVi, maTinhTrang);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HoatDongNgoaiGiangDay_GetByNamHocHocKy(System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_GetByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_GetByNamHocHocKy(transactionManager , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HoatDongNgoaiGiangDay_GetByNamHocHocKy( System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_GetByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_GetByNamHocHocKy(transactionManager, start, pageLength , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="tietNghiaVu"> A <c>System.Double</c> instance.</param>
			/// <param name="tietNghiaVuKhac"> A <c>System.Double</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act(System.String maQuanLy, System.String namHoc, System.String hocKy, ref System.Double tietNghiaVu, ref System.Double tietNghiaVuKhac)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act(transactionManager , maQuanLy, namHoc, hocKy, ref tietNghiaVu, ref tietNghiaVuKhac);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="tietNghiaVu"> A <c>System.Double</c> instance.</param>
			/// <param name="tietNghiaVuKhac"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act( System.String maQuanLy, System.String namHoc, System.String hocKy, ref System.Double tietNghiaVu, ref System.Double tietNghiaVuKhac, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.GetSoTietNghiaVuByMaQuanLyNamHocHocKy_Act(transactionManager, start, pageLength , maQuanLy, namHoc, hocKy, ref tietNghiaVu, ref tietNghiaVuKhac);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHoc
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HoatDongNgoaiGiangDay_GetByNamHoc(System.String namHoc)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_GetByNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_GetByNamHoc(transactionManager , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HoatDongNgoaiGiangDay_GetByNamHoc( System.String namHoc, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_GetByNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_GetByNamHoc(transactionManager, start, pageLength , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_ThongKeHopDongTheoThoiGian
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeHopDongTheoThoiGian' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeHopDongTheoThoiGian(System.String maDonVi, System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeHopDongTheoThoiGian");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.ThongKeHopDongTheoThoiGian(transactionManager , maDonVi, ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeHopDongTheoThoiGian' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeHopDongTheoThoiGian( System.String maDonVi, System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeHopDongTheoThoiGian");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.ThongKeHopDongTheoThoiGian(transactionManager, start, pageLength , maDonVi, ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_GetBangThanhToan
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_GetBangThanhToan' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_GetBangThanhToan(System.String namHoc, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_GetBangThanhToan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.NghienCuuKH_GetBangThanhToan(transactionManager , namHoc, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_GetBangThanhToan' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_GetBangThanhToan( System.String namHoc, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_GetBangThanhToan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.NghienCuuKH_GetBangThanhToan(transactionManager, start, pageLength , namHoc, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_Update
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_Update' stored procedure. 
		/// </summary>
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maNckh"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="tenNckh"> A <c>System.String</c> instance.</param>
		/// <param name="soLuongThanhVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="maVaiTro"> A <c>System.Int32</c> instance.</param>
		/// <param name="duKien"> A <c>System.Boolean</c> instance.</param>
			/// <param name="reval"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_Update(System.Int32 id, System.String maQuanLy, System.Int32 maNckh, System.String namHoc, System.String tenNckh, System.Int32 soLuongThanhVien, System.Int32 maVaiTro, System.Boolean duKien, ref System.String reval)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_Update");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.NghienCuuKH_Update(transactionManager , id, maQuanLy, maNckh, namHoc, tenNckh, soLuongThanhVien, maVaiTro, duKien, ref reval);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_Update' stored procedure. 
		/// </summary>
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maNckh"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="tenNckh"> A <c>System.String</c> instance.</param>
		/// <param name="soLuongThanhVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="maVaiTro"> A <c>System.Int32</c> instance.</param>
		/// <param name="duKien"> A <c>System.Boolean</c> instance.</param>
			/// <param name="reval"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_Update( System.Int32 id, System.String maQuanLy, System.Int32 maNckh, System.String namHoc, System.String tenNckh, System.Int32 soLuongThanhVien, System.Int32 maVaiTro, System.Boolean duKien, ref System.String reval, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_Update");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.NghienCuuKH_Update(transactionManager, start, pageLength , id, maQuanLy, maNckh, namHoc, tenNckh, soLuongThanhVien, maVaiTro, duKien, ref reval);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetByNhomQuyen
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetByNhomQuyen' stored procedure. 
		/// </summary>
		/// <param name="nhomQuyen"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetByNhomQuyen(System.String nhomQuyen)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByNhomQuyen");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetByNhomQuyen(transactionManager , nhomQuyen);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetByNhomQuyen' stored procedure. 
		/// </summary>
		/// <param name="nhomQuyen"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetByNhomQuyen( System.String nhomQuyen, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByNhomQuyen");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetByNhomQuyen(transactionManager, start, pageLength , nhomQuyen);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_TrichXuatThongTinTheoChuyenMonTrinhDo
		/// <summary>
		///	This method wrap the 'cust_GiangVien_TrichXuatThongTinTheoChuyenMonTrinhDo' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="listHocHam"> A <c>System.String</c> instance.</param>
		/// <param name="listHocVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TrichXuatThongTinTheoChuyenMonTrinhDo(System.DateTime ngay, System.String listHocHam, System.String listHocVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TrichXuatThongTinTheoChuyenMonTrinhDo");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.TrichXuatThongTinTheoChuyenMonTrinhDo(transactionManager , ngay, listHocHam, listHocVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_TrichXuatThongTinTheoChuyenMonTrinhDo' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="listHocHam"> A <c>System.String</c> instance.</param>
		/// <param name="listHocVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TrichXuatThongTinTheoChuyenMonTrinhDo( System.DateTime ngay, System.String listHocHam, System.String listHocVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TrichXuatThongTinTheoChuyenMonTrinhDo");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.TrichXuatThongTinTheoChuyenMonTrinhDo(transactionManager, start, pageLength , ngay, listHocHam, listHocVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_LopHocPhan_GetByNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader LopHocPhan_GetByNamHocHocKy(System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LopHocPhan_GetByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.LopHocPhan_GetByNamHocHocKy(transactionManager , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_LopHocPhan_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader LopHocPhan_GetByNamHocHocKy( System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LopHocPhan_GetByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.LopHocPhan_GetByNamHocHocKy(transactionManager, start, pageLength , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKyMaDonVi
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DinhMucKhauTru_GetByNamHocHocKyMaDonVi(System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DinhMucKhauTru_GetByNamHocHocKyMaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.DinhMucKhauTru_GetByNamHocHocKyMaDonVi(transactionManager , namHoc, hocKy, maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKyMaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DinhMucKhauTru_GetByNamHocHocKyMaDonVi( System.String namHoc, System.String hocKy, System.String maDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DinhMucKhauTru_GetByNamHocHocKyMaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.DinhMucKhauTru_GetByNamHocHocKyMaDonVi(transactionManager, start, pageLength , namHoc, hocKy, maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_Luu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_Luu(System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.NghienCuuKH_Luu(transactionManager , xmlData, namHoc, hocKy, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_Luu( System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.NghienCuuKH_Luu(transactionManager, start, pageLength , xmlData, namHoc, hocKy, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_ThongKeGioGiangBuh
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeGioGiangBuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioGiangBuh(System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioGiangBuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.ThongKeGioGiangBuh(transactionManager , namHoc, donVi, loaiGiangVien, lanChotHk01, lanChotHk02);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeGioGiangBuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioGiangBuh( System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioGiangBuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.ThongKeGioGiangBuh(transactionManager, start, pageLength , namHoc, donVi, loaiGiangVien, lanChotHk01, lanChotHk02);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetHeSoQuyDoiTietChuan
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHeSoQuyDoiTietChuan' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHeSoQuyDoiTietChuan(System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHeSoQuyDoiTietChuan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetHeSoQuyDoiTietChuan(transactionManager , maQuanLy, namHoc, hocKy, maMonHoc, siSo, tietBatDau, ngayDay, maPhongHoc, maLopHocPhan);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHeSoQuyDoiTietChuan' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHeSoQuyDoiTietChuan( System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHeSoQuyDoiTietChuan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetHeSoQuyDoiTietChuan(transactionManager, start, pageLength , maQuanLy, namHoc, hocKy, maMonHoc, siSo, tietBatDau, ngayDay, maPhongHoc, maLopHocPhan);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetByMaGiangVienMocTangLuong
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetByMaGiangVienMocTangLuong' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByMaGiangVienMocTangLuong(System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaGiangVienMocTangLuong");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetByMaGiangVienMocTangLuong(transactionManager , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetByMaGiangVienMocTangLuong' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByMaGiangVienMocTangLuong( System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaGiangVienMocTangLuong");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetByMaGiangVienMocTangLuong(transactionManager, start, pageLength , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="tinhTrang"> A <c>System.String</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang(System.String maDonVi, System.String loaiGiangVien, System.String tinhTrang, System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang(transactionManager , maDonVi, loaiGiangVien, tinhTrang, ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="tinhTrang"> A <c>System.String</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang( System.String maDonVi, System.String loaiGiangVien, System.String tinhTrang, System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetThongTinChiTietByMaDonViLoaiGiangVienTinhTrang(transactionManager, start, pageLength , maDonVi, loaiGiangVien, tinhTrang, ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_UpdateGiangVienHRM_Temp
		/// <summary>
		///	This method wrap the 'cust_GiangVien_UpdateGiangVienHRM_Temp' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdateGiangVienHRM_Temp()
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("UpdateGiangVienHRM_Temp");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.UpdateGiangVienHRM_Temp(transactionManager );
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_UpdateGiangVienHRM_Temp' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdateGiangVienHRM_Temp( int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("UpdateGiangVienHRM_Temp");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.UpdateGiangVienHRM_Temp(transactionManager, start, pageLength );
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetByMaDonViLoaiGiangVien
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetByMaDonViLoaiGiangVien' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="tinhTrang"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByMaDonViLoaiGiangVien(System.String maDonVi, System.String loaiGiangVien, System.String tinhTrang)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaDonViLoaiGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetByMaDonViLoaiGiangVien(transactionManager , maDonVi, loaiGiangVien, tinhTrang);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetByMaDonViLoaiGiangVien' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="tinhTrang"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByMaDonViLoaiGiangVien( System.String maDonVi, System.String loaiGiangVien, System.String tinhTrang, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaDonViLoaiGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetByMaDonViLoaiGiangVien(transactionManager, start, pageLength , maDonVi, loaiGiangVien, tinhTrang);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DinhMucKhauTru_GetByNamHocHocKy(System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DinhMucKhauTru_GetByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.DinhMucKhauTru_GetByNamHocHocKy(transactionManager , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DinhMucKhauTru_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DinhMucKhauTru_GetByNamHocHocKy( System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DinhMucKhauTru_GetByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.DinhMucKhauTru_GetByNamHocHocKy(transactionManager, start, pageLength , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_UpdatePassWord
		/// <summary>
		///	This method wrap the 'cust_GiangVien_UpdatePassWord' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="matKhau"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdatePassWord(System.Int32 maGiangVien, System.String matKhau)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("UpdatePassWord");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.UpdatePassWord(transactionManager , maGiangVien, matKhau);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_UpdatePassWord' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="matKhau"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void UpdatePassWord( System.Int32 maGiangVien, System.String matKhau, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("UpdatePassWord");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.UpdatePassWord(transactionManager, start, pageLength , maGiangVien, matKhau);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_HoatDongNgoaiGiangDay_Luu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HoatDongNgoaiGiangDay_Luu(System.String xmlData, System.String maDonVi, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_Luu(transactionManager , xmlData, maDonVi, namHoc, hocKy, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HoatDongNgoaiGiangDay_Luu( System.String xmlData, System.String maDonVi, System.String namHoc, System.String hocKy, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_Luu(transactionManager, start, pageLength , xmlData, maDonVi, namHoc, hocKy, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_KiemTraTrungTenCmnd
		/// <summary>
		///	This method wrap the 'cust_GiangVien_KiemTraTrungTenCmnd' stored procedure. 
		/// </summary>
		/// <param name="hoTen"> A <c>System.String</c> instance.</param>
		/// <param name="cmnd"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void KiemTraTrungTenCmnd(System.String hoTen, System.String cmnd, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KiemTraTrungTenCmnd");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.KiemTraTrungTenCmnd(transactionManager , hoTen, cmnd, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_KiemTraTrungTenCmnd' stored procedure. 
		/// </summary>
		/// <param name="hoTen"> A <c>System.String</c> instance.</param>
		/// <param name="cmnd"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void KiemTraTrungTenCmnd( System.String hoTen, System.String cmnd, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KiemTraTrungTenCmnd");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.KiemTraTrungTenCmnd(transactionManager, start, pageLength , hoTen, cmnd, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetByMaDonVi
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetByMaDonVi' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetByMaDonVi(System.String maDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetByMaDonVi(transactionManager , maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetByMaDonVi' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetByMaDonVi( System.String maDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetByMaDonVi(transactionManager, start, pageLength , maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetMaDonViMaHocHamMaHocVi
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetMaDonViMaHocHamMaHocVi' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetMaDonViMaHocHamMaHocVi(System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetMaDonViMaHocHamMaHocVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetMaDonViMaHocHamMaHocVi(transactionManager , maDonVi, maHocHam, maHocVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetMaDonViMaHocHamMaHocVi' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetMaDonViMaHocHamMaHocVi( System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetMaDonViMaHocHamMaHocVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetMaDonViMaHocHamMaHocVi(transactionManager, start, pageLength , maDonVi, maHocHam, maHocVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetHeSoQuyDoiTietChuanChung
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHeSoQuyDoiTietChuanChung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="maLopSinhVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="thuTrongTuan"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="daoTaoTinChi"> A <c>System.Boolean</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHeSoQuyDoiTietChuanChung(System.String namHoc, System.String hocKy, System.String maBacDaoTao, System.String maLopHocPhan, System.String maMonHoc, System.Int32 siSo, System.String maLopSinhVien, System.String maLoaiHocPhan, System.DateTime ngayDay, System.Int32 tietBatDau, System.String thuTrongTuan, System.Int32 maHocHam, System.Int32 maHocVi, System.String maPhongHoc, System.String maKhoaBoMon, System.Boolean daoTaoTinChi, System.Int32 maLoaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHeSoQuyDoiTietChuanChung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetHeSoQuyDoiTietChuanChung(transactionManager , namHoc, hocKy, maBacDaoTao, maLopHocPhan, maMonHoc, siSo, maLopSinhVien, maLoaiHocPhan, ngayDay, tietBatDau, thuTrongTuan, maHocHam, maHocVi, maPhongHoc, maKhoaBoMon, daoTaoTinChi, maLoaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHeSoQuyDoiTietChuanChung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="maLopSinhVien"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="thuTrongTuan"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="daoTaoTinChi"> A <c>System.Boolean</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHeSoQuyDoiTietChuanChung( System.String namHoc, System.String hocKy, System.String maBacDaoTao, System.String maLopHocPhan, System.String maMonHoc, System.Int32 siSo, System.String maLopSinhVien, System.String maLoaiHocPhan, System.DateTime ngayDay, System.Int32 tietBatDau, System.String thuTrongTuan, System.Int32 maHocHam, System.Int32 maHocVi, System.String maPhongHoc, System.String maKhoaBoMon, System.Boolean daoTaoTinChi, System.Int32 maLoaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHeSoQuyDoiTietChuanChung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetHeSoQuyDoiTietChuanChung(transactionManager, start, pageLength , namHoc, hocKy, maBacDaoTao, maLopHocPhan, maMonHoc, siSo, maLopSinhVien, maLoaiHocPhan, ngayDay, tietBatDau, thuTrongTuan, maHocHam, maHocVi, maPhongHoc, maKhoaBoMon, daoTaoTinChi, maLoaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetChucVuByMaGiangVienNgay
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetChucVuByMaGiangVienNgay' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
			/// <param name="tenChucVu"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetChucVuByMaGiangVienNgay(System.Int32 maGiangVien, System.DateTime ngay, ref System.String tenChucVu)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetChucVuByMaGiangVienNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.GetChucVuByMaGiangVienNgay(transactionManager , maGiangVien, ngay, ref tenChucVu);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetChucVuByMaGiangVienNgay' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
			/// <param name="tenChucVu"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetChucVuByMaGiangVienNgay( System.Int32 maGiangVien, System.DateTime ngay, ref System.String tenChucVu, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetChucVuByMaGiangVienNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.GetChucVuByMaGiangVienNgay(transactionManager, start, pageLength , maGiangVien, ngay, ref tenChucVu);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_ResetPassword
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ResetPassword' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ResetPassword(System.String maQuanLy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ResetPassword");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.ResetPassword(transactionManager , maQuanLy);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ResetPassword' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ResetPassword( System.String maQuanLy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ResetPassword");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.ResetPassword(transactionManager, start, pageLength , maQuanLy);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetDanhSachGiangVienCoHuuByNgay
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetDanhSachGiangVienCoHuuByNgay' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetDanhSachGiangVienCoHuuByNgay(System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDanhSachGiangVienCoHuuByNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetDanhSachGiangVienCoHuuByNgay(transactionManager , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetDanhSachGiangVienCoHuuByNgay' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetDanhSachGiangVienCoHuuByNgay( System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDanhSachGiangVienCoHuuByNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetDanhSachGiangVienCoHuuByNgay(transactionManager, start, pageLength , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_ChuyenMon_Luu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ChuyenMon_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChuyenMon_Luu(System.String xmlData, System.String maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChuyenMon_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.ChuyenMon_Luu(transactionManager , xmlData, maGiangVien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ChuyenMon_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChuyenMon_Luu( System.String xmlData, System.String maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChuyenMon_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.ChuyenMon_Luu(transactionManager, start, pageLength , xmlData, maGiangVien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_ThongKeHoSoGiangVien
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeHoSoGiangVien' stored procedure. 
		/// </summary>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeHoSoGiangVien(System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeHoSoGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.ThongKeHoSoGiangVien(transactionManager , khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeHoSoGiangVien' stored procedure. 
		/// </summary>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeHoSoGiangVien( System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeHoSoGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.ThongKeHoSoGiangVien(transactionManager, start, pageLength , khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_LuuTheoKhoa
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_LuuTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_LuuTheoKhoa(System.String xmlData, System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_LuuTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.NghienCuuKH_LuuTheoKhoa(transactionManager , xmlData, namHoc, hocKy, maDonVi, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_LuuTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_LuuTheoKhoa( System.String xmlData, System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_LuuTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.NghienCuuKH_LuuTheoKhoa(transactionManager, start, pageLength , xmlData, namHoc, hocKy, maDonVi, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_GetLichSuNghienCuuKhoaHoc
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_GetLichSuNghienCuuKhoaHoc' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_GetLichSuNghienCuuKhoaHoc(System.Int32 maGiangVien, System.DateTime tuNgay, System.DateTime denNgay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_GetLichSuNghienCuuKhoaHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.NghienCuuKH_GetLichSuNghienCuuKhoaHoc(transactionManager , maGiangVien, tuNgay, denNgay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_GetLichSuNghienCuuKhoaHoc' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="tuNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="denNgay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_GetLichSuNghienCuuKhoaHoc( System.Int32 maGiangVien, System.DateTime tuNgay, System.DateTime denNgay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_GetLichSuNghienCuuKhoaHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.NghienCuuKH_GetLichSuNghienCuuKhoaHoc(transactionManager, start, pageLength , maGiangVien, tuNgay, denNgay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoa"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa(System.String namHoc, System.String hocKy, System.String maKhoa)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa(transactionManager , namHoc, hocKy, maKhoa);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoa"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa( System.String namHoc, System.String hocKy, System.String maKhoa, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_GetByNamHocHocKyKhoa(transactionManager, start, pageLength , namHoc, hocKy, maKhoa);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay(System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay(transactionManager , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay( System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetThongKeSoLuongGiangVienCoHuuTheoKhoaBoMonByNgay(transactionManager, start, pageLength , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_ChucVu_Luu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ChucVu_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChucVu_Luu(System.String xmlData, System.Int32 maGiangVien, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChucVu_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.ChucVu_Luu(transactionManager , xmlData, maGiangVien, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ChucVu_Luu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChucVu_Luu( System.String xmlData, System.Int32 maGiangVien, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChucVu_Luu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.ChucVu_Luu(transactionManager, start, pageLength , xmlData, maGiangVien, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_DinhMucKhauTru_LuuTheoKhoa
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DinhMucKhauTru_LuuTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DinhMucKhauTru_LuuTheoKhoa(System.String xmlData, System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reval)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DinhMucKhauTru_LuuTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.DinhMucKhauTru_LuuTheoKhoa(transactionManager , xmlData, namHoc, hocKy, maDonVi, ref reval);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DinhMucKhauTru_LuuTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DinhMucKhauTru_LuuTheoKhoa( System.String xmlData, System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reval, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DinhMucKhauTru_LuuTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.DinhMucKhauTru_LuuTheoKhoa(transactionManager, start, pageLength , xmlData, namHoc, hocKy, maDonVi, ref reval);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHoc
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHoc' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Double</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoTietNghiaVuByMaQuanLyNamHoc(System.String maQuanLy, System.String namHoc, ref System.Double ketQua)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNghiaVuByMaQuanLyNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.GetSoTietNghiaVuByMaQuanLyNamHoc(transactionManager , maQuanLy, namHoc, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHoc' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoTietNghiaVuByMaQuanLyNamHoc( System.String maQuanLy, System.String namHoc, ref System.Double ketQua, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNghiaVuByMaQuanLyNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.GetSoTietNghiaVuByMaQuanLyNamHoc(transactionManager, start, pageLength , maQuanLy, namHoc, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GioDinhMucCuaGiangVien
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GioDinhMucCuaGiangVien' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GioDinhMucCuaGiangVien(System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GioDinhMucCuaGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GioDinhMucCuaGiangVien(transactionManager , namHoc, hocKy, maDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GioDinhMucCuaGiangVien' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GioDinhMucCuaGiangVien( System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GioDinhMucCuaGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GioDinhMucCuaGiangVien(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Double</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoTietNghiaVuByMaQuanLyNamHocHocKy(System.String maQuanLy, System.String namHoc, System.String hocKy, ref System.Double ketQua)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNghiaVuByMaQuanLyNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.GetSoTietNghiaVuByMaQuanLyNamHocHocKy(transactionManager , maQuanLy, namHoc, hocKy, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetSoTietNghiaVuByMaQuanLyNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoTietNghiaVuByMaQuanLyNamHocHocKy( System.String maQuanLy, System.String namHoc, System.String hocKy, ref System.Double ketQua, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNghiaVuByMaQuanLyNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.GetSoTietNghiaVuByMaQuanLyNamHocHocKy(transactionManager, start, pageLength , maQuanLy, namHoc, hocKy, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_GetByNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_GetByNamHocHocKy(System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_GetByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.NghienCuuKH_GetByNamHocHocKy(transactionManager , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_GetByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_GetByNamHocHocKy( System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_GetByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.NghienCuuKH_GetByNamHocHocKy(transactionManager, start, pageLength , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay(System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay(transactionManager , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay( System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetThongKeSoLuongGiangVienTheoKhoaBoMonByNgay(transactionManager, start, pageLength , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetHoTen
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHoTen' stored procedure. 
		/// </summary>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHoTen()
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHoTen");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetHoTen(transactionManager );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHoTen' stored procedure. 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHoTen( int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHoTen");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetHoTen(transactionManager, start, pageLength );
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_Import
		/// <summary>
		///	This method wrap the 'cust_GiangVien_Import' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Import(System.String xmlData, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Import");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.Import(transactionManager , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_Import' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Import( System.String xmlData, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Import");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.Import(transactionManager, start, pageLength , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_Import
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_Import' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_Import(System.String xmlData, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_Import");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.NghienCuuKH_Import(transactionManager , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_Import' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_Import( System.String xmlData, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_Import");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.NghienCuuKH_Import(transactionManager, start, pageLength , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_HopDongMoiGiangDay
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HopDongMoiGiangDay' stored procedure. 
		/// </summary>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HopDongMoiGiangDay(System.String maBacDaoTao, System.String khoaDonVi, System.String maGiangVien, System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HopDongMoiGiangDay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.HopDongMoiGiangDay(transactionManager , maBacDaoTao, khoaDonVi, maGiangVien, namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HopDongMoiGiangDay' stored procedure. 
		/// </summary>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HopDongMoiGiangDay( System.String maBacDaoTao, System.String khoaDonVi, System.String maGiangVien, System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HopDongMoiGiangDay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.HopDongMoiGiangDay(transactionManager, start, pageLength , maBacDaoTao, khoaDonVi, maGiangVien, namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetThongTinByNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongTinByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="hoTen"> A <c>System.String</c> instance.</param>
			/// <param name="tenDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="tenHocVi"> A <c>System.String</c> instance.</param>
			/// <param name="tenHocHam"> A <c>System.String</c> instance.</param>
			/// <param name="maSoThue"> A <c>System.String</c> instance.</param>
			/// <param name="soTaiKhoan"> A <c>System.String</c> instance.</param>
			/// <param name="chiNhanhNganHang"> A <c>System.String</c> instance.</param>
			/// <param name="chucVu"> A <c>System.String</c> instance.</param>
			/// <param name="giangVienTrongTruong"> A <c>System.Boolean</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetThongTinByNamHocHocKy(System.Int32 maGiangVien, System.String namHoc, System.String hocKy, ref System.String hoTen, ref System.String tenDonVi, ref System.String tenHocVi, ref System.String tenHocHam, ref System.String maSoThue, ref System.String soTaiKhoan, ref System.String chiNhanhNganHang, ref System.String chucVu, ref System.Boolean giangVienTrongTruong)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongTinByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.GetThongTinByNamHocHocKy(transactionManager , maGiangVien, namHoc, hocKy, ref hoTen, ref tenDonVi, ref tenHocVi, ref tenHocHam, ref maSoThue, ref soTaiKhoan, ref chiNhanhNganHang, ref chucVu, ref giangVienTrongTruong);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongTinByNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="hoTen"> A <c>System.String</c> instance.</param>
			/// <param name="tenDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="tenHocVi"> A <c>System.String</c> instance.</param>
			/// <param name="tenHocHam"> A <c>System.String</c> instance.</param>
			/// <param name="maSoThue"> A <c>System.String</c> instance.</param>
			/// <param name="soTaiKhoan"> A <c>System.String</c> instance.</param>
			/// <param name="chiNhanhNganHang"> A <c>System.String</c> instance.</param>
			/// <param name="chucVu"> A <c>System.String</c> instance.</param>
			/// <param name="giangVienTrongTruong"> A <c>System.Boolean</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetThongTinByNamHocHocKy( System.Int32 maGiangVien, System.String namHoc, System.String hocKy, ref System.String hoTen, ref System.String tenDonVi, ref System.String tenHocVi, ref System.String tenHocHam, ref System.String maSoThue, ref System.String soTaiKhoan, ref System.String chiNhanhNganHang, ref System.String chucVu, ref System.Boolean giangVienTrongTruong, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongTinByNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.GetThongTinByNamHocHocKy(transactionManager, start, pageLength , maGiangVien, namHoc, hocKy, ref hoTen, ref tenDonVi, ref tenHocVi, ref tenHocHam, ref maSoThue, ref soTaiKhoan, ref chiNhanhNganHang, ref chucVu, ref giangVienTrongTruong);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetMaDonViMaHocHamMaHocViMaTinhTrang
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetMaDonViMaHocHamMaHocViMaTinhTrang' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetMaDonViMaHocHamMaHocViMaTinhTrang(System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi, System.String maTinhTrang)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetMaDonViMaHocHamMaHocViMaTinhTrang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetMaDonViMaHocHamMaHocViMaTinhTrang(transactionManager , maDonVi, maHocHam, maHocVi, maTinhTrang);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetMaDonViMaHocHamMaHocViMaTinhTrang' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="maTinhTrang"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="TList{GiangVien}"/> instance.</returns>
		public virtual  TList<GiangVien> GetMaDonViMaHocHamMaHocViMaTinhTrang( System.String maDonVi, System.Int32 maHocHam, System.Int32 maHocVi, System.String maTinhTrang, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetMaDonViMaHocHamMaHocViMaTinhTrang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			TList<GiangVien> result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetMaDonViMaHocHamMaHocViMaTinhTrang(transactionManager, start, pageLength , maDonVi, maHocHam, maHocVi, maTinhTrang);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_TruongKhoaXemThuLaoTrenWeb_Cdgtvt
		/// <summary>
		///	This method wrap the 'cust_GiangVien_TruongKhoaXemThuLaoTrenWeb_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maCanBoGiangDay"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TruongKhoaXemThuLaoTrenWeb_Cdgtvt(System.String namHoc, System.String maCanBoGiangDay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TruongKhoaXemThuLaoTrenWeb_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.TruongKhoaXemThuLaoTrenWeb_Cdgtvt(transactionManager , namHoc, maCanBoGiangDay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_TruongKhoaXemThuLaoTrenWeb_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maCanBoGiangDay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TruongKhoaXemThuLaoTrenWeb_Cdgtvt( System.String namHoc, System.String maCanBoGiangDay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TruongKhoaXemThuLaoTrenWeb_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.TruongKhoaXemThuLaoTrenWeb_Cdgtvt(transactionManager, start, pageLength , namHoc, maCanBoGiangDay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_LuuTinNhan
		/// <summary>
		///	This method wrap the 'cust_GiangVien_LuuTinNhan' stored procedure. 
		/// </summary>
		/// <param name="tieuDe"> A <c>System.String</c> instance.</param>
		/// <param name="nguoiNhanTin"> A <c>System.String</c> instance.</param>
		/// <param name="noiDung"> A <c>System.String</c> instance.</param>
		/// <param name="nguoiTao"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuTinNhan(System.String tieuDe, System.String nguoiNhanTin, System.String noiDung, System.String nguoiTao, ref System.Int32 reval)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuTinNhan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.LuuTinNhan(transactionManager , tieuDe, nguoiNhanTin, noiDung, nguoiTao, ref reval);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_LuuTinNhan' stored procedure. 
		/// </summary>
		/// <param name="tieuDe"> A <c>System.String</c> instance.</param>
		/// <param name="nguoiNhanTin"> A <c>System.String</c> instance.</param>
		/// <param name="noiDung"> A <c>System.String</c> instance.</param>
		/// <param name="nguoiTao"> A <c>System.String</c> instance.</param>
			/// <param name="reval"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuTinNhan( System.String tieuDe, System.String nguoiNhanTin, System.String noiDung, System.String nguoiTao, ref System.Int32 reval, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuTinNhan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.LuuTinNhan(transactionManager, start, pageLength , tieuDe, nguoiNhanTin, noiDung, nguoiTao, ref reval);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_Insert
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_Insert' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maNckh"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="tenNckh"> A <c>System.String</c> instance.</param>
		/// <param name="soLuongThanhVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="maVaiTro"> A <c>System.Int32</c> instance.</param>
		/// <param name="duKien"> A <c>System.Boolean</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_Insert(System.String maQuanLy, System.Int32 maNckh, System.String namHoc, System.String tenNckh, System.Int32 soLuongThanhVien, System.Int32 maVaiTro, System.Boolean duKien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_Insert");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.NghienCuuKH_Insert(transactionManager , maQuanLy, maNckh, namHoc, tenNckh, soLuongThanhVien, maVaiTro, duKien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_Insert' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maNckh"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="tenNckh"> A <c>System.String</c> instance.</param>
		/// <param name="soLuongThanhVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="maVaiTro"> A <c>System.Int32</c> instance.</param>
		/// <param name="duKien"> A <c>System.Boolean</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_Insert( System.String maQuanLy, System.Int32 maNckh, System.String namHoc, System.String tenNckh, System.Int32 soLuongThanhVien, System.Int32 maVaiTro, System.Boolean duKien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_Insert");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.NghienCuuKH_Insert(transactionManager, start, pageLength , maQuanLy, maNckh, namHoc, tenNckh, soLuongThanhVien, maVaiTro, duKien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetDonVi
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetDonVi' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
			/// <param name="tenDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetDonVi(System.String maQuanLy, ref System.String tenDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.GetDonVi(transactionManager , maQuanLy, ref tenDonVi);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetDonVi' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
			/// <param name="tenDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetDonVi( System.String maQuanLy, ref System.String tenDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.GetDonVi(transactionManager, start, pageLength , maQuanLy, ref tenDonVi);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetThongKeByMaDonViMaLoaiNhanVien
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongKeByMaDonViMaLoaiNhanVien' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiNhanVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongKeByMaDonViMaLoaiNhanVien(System.String maDonVi, System.String maLoaiNhanVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongKeByMaDonViMaLoaiNhanVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetThongKeByMaDonViMaLoaiNhanVien(transactionManager , maDonVi, maLoaiNhanVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetThongKeByMaDonViMaLoaiNhanVien' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiNhanVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongKeByMaDonViMaLoaiNhanVien( System.String maDonVi, System.String maLoaiNhanVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongKeByMaDonViMaLoaiNhanVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetThongKeByMaDonViMaLoaiNhanVien(transactionManager, start, pageLength , maDonVi, maLoaiNhanVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_DeleteThongTinGiangVien
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DeleteThongTinGiangVien' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DeleteThongTinGiangVien(System.Int32 maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeleteThongTinGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.DeleteThongTinGiangVien(transactionManager , maGiangVien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_DeleteThongTinGiangVien' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void DeleteThongTinGiangVien( System.Int32 maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeleteThongTinGiangVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.DeleteThongTinGiangVien(transactionManager, start, pageLength , maGiangVien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_ThongKeCanBoNhanVien
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeCanBoNhanVien' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeCanBoNhanVien(System.String namHoc)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeCanBoNhanVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.ThongKeCanBoNhanVien(transactionManager , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeCanBoNhanVien' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeCanBoNhanVien( System.String namHoc, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeCanBoNhanVien");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.ThongKeCanBoNhanVien(transactionManager, start, pageLength , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_ThongKeSoLuongGiangVienTheoKhoaBoMon
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeSoLuongGiangVienTheoKhoaBoMon' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeSoLuongGiangVienTheoKhoaBoMon(System.String namHoc)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeSoLuongGiangVienTheoKhoaBoMon");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.ThongKeSoLuongGiangVienTheoKhoaBoMon(transactionManager , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeSoLuongGiangVienTheoKhoaBoMon' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeSoLuongGiangVienTheoKhoaBoMon( System.String namHoc, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeSoLuongGiangVienTheoKhoaBoMon");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.ThongKeSoLuongGiangVienTheoKhoaBoMon(transactionManager, start, pageLength , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_XemThuLaoTrenWeb_Cdgtvt
		/// <summary>
		///	This method wrap the 'cust_GiangVien_XemThuLaoTrenWeb_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maCanBoGiangDay"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader XemThuLaoTrenWeb_Cdgtvt(System.String namHoc, System.String maCanBoGiangDay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("XemThuLaoTrenWeb_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.XemThuLaoTrenWeb_Cdgtvt(transactionManager , namHoc, maCanBoGiangDay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_XemThuLaoTrenWeb_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maCanBoGiangDay"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader XemThuLaoTrenWeb_Cdgtvt( System.String namHoc, System.String maCanBoGiangDay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("XemThuLaoTrenWeb_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.XemThuLaoTrenWeb_Cdgtvt(transactionManager, start, pageLength , namHoc, maCanBoGiangDay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_CapNhatThongTin
		/// <summary>
		///	This method wrap the 'cust_GiangVien_CapNhatThongTin' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void CapNhatThongTin(System.String xmlData, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CapNhatThongTin");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.CapNhatThongTin(transactionManager , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_CapNhatThongTin' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void CapNhatThongTin( System.String xmlData, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("CapNhatThongTin");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.CapNhatThongTin(transactionManager, start, pageLength , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_HoatDongNgoaiGiangDay_LayDuLieu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_LayDuLieu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoa"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HoatDongNgoaiGiangDay_LayDuLieu(System.String namHoc, System.String hocKy, System.String maKhoa)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_LayDuLieu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_LayDuLieu(transactionManager , namHoc, hocKy, maKhoa);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_LayDuLieu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoa"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HoatDongNgoaiGiangDay_LayDuLieu( System.String namHoc, System.String hocKy, System.String maKhoa, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_LayDuLieu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_LayDuLieu(transactionManager, start, pageLength , namHoc, hocKy, maKhoa);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GiamTruDinhMuc_GetByNamHoc
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GiamTruDinhMuc_GetByNamHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GiamTruDinhMuc_GetByNamHoc(System.String namHoc)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GiamTruDinhMuc_GetByNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GiamTruDinhMuc_GetByNamHoc(transactionManager , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GiamTruDinhMuc_GetByNamHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GiamTruDinhMuc_GetByNamHoc( System.String namHoc, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GiamTruDinhMuc_GetByNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GiamTruDinhMuc_GetByNamHoc(transactionManager, start, pageLength , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_HopDongMoiGiangDayNhomMonThucTapCuoiKhoa
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HopDongMoiGiangDayNhomMonThucTapCuoiKhoa' stored procedure. 
		/// </summary>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HopDongMoiGiangDayNhomMonThucTapCuoiKhoa(System.String maBacDaoTao, System.String khoaDonVi, System.String maGiangVien, System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HopDongMoiGiangDayNhomMonThucTapCuoiKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.HopDongMoiGiangDayNhomMonThucTapCuoiKhoa(transactionManager , maBacDaoTao, khoaDonVi, maGiangVien, namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HopDongMoiGiangDayNhomMonThucTapCuoiKhoa' stored procedure. 
		/// </summary>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader HopDongMoiGiangDayNhomMonThucTapCuoiKhoa( System.String maBacDaoTao, System.String khoaDonVi, System.String maGiangVien, System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HopDongMoiGiangDayNhomMonThucTapCuoiKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.HopDongMoiGiangDayNhomMonThucTapCuoiKhoa(transactionManager, start, pageLength , maBacDaoTao, khoaDonVi, maGiangVien, namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_GetByGiangVienNamHoc
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_GetByGiangVienNamHoc' stored procedure. 
		/// </summary>
		/// <param name="maQuanLyGv"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_GetByGiangVienNamHoc(System.String maQuanLyGv, System.String namHoc)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_GetByGiangVienNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.NghienCuuKH_GetByGiangVienNamHoc(transactionManager , maQuanLyGv, namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_GetByGiangVienNamHoc' stored procedure. 
		/// </summary>
		/// <param name="maQuanLyGv"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NghienCuuKH_GetByGiangVienNamHoc( System.String maQuanLyGv, System.String namHoc, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_GetByGiangVienNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.NghienCuuKH_GetByGiangVienNamHoc(transactionManager, start, pageLength , maQuanLyGv, namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_LuuNckhVhu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_LuuNckhVhu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_LuuNckhVhu(System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_LuuNckhVhu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.NghienCuuKH_LuuNckhVhu(transactionManager , xmlData, namHoc, hocKy, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_LuuNckhVhu' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_LuuNckhVhu( System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_LuuNckhVhu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.NghienCuuKH_LuuNckhVhu(transactionManager, start, pageLength , xmlData, namHoc, hocKy, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_ThongKeGioGiangBuh_Bk
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeGioGiangBuh_Bk' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioGiangBuh_Bk(System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioGiangBuh_Bk");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.ThongKeGioGiangBuh_Bk(transactionManager , namHoc, donVi, loaiGiangVien, lanChotHk01, lanChotHk02);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_ThongKeGioGiangBuh_Bk' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioGiangBuh_Bk( System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioGiangBuh_Bk");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.ThongKeGioGiangBuh_Bk(transactionManager, start, pageLength , namHoc, donVi, loaiGiangVien, lanChotHk01, lanChotHk02);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_LuuWeb
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_LuuWeb' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_LuuWeb(System.String xmlData, System.String namHoc, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_LuuWeb");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.NghienCuuKH_LuuWeb(transactionManager , xmlData, namHoc, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_LuuWeb' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_LuuWeb( System.String xmlData, System.String namHoc, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_LuuWeb");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.NghienCuuKH_LuuWeb(transactionManager, start, pageLength , xmlData, namHoc, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_NghienCuuKH_LuuTheoHocKy
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_LuuTheoHocKy' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_LuuTheoHocKy(System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_LuuTheoHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.NghienCuuKH_LuuTheoHocKy(transactionManager , xmlData, namHoc, hocKy, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_NghienCuuKH_LuuTheoHocKy' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void NghienCuuKH_LuuTheoHocKy( System.String xmlData, System.String namHoc, System.String hocKy, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NghienCuuKH_LuuTheoHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.NghienCuuKH_LuuTheoHocKy(transactionManager, start, pageLength , xmlData, namHoc, hocKy, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_GetHeSoQuyDoiTietChuanLaw
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHeSoQuyDoiTietChuanLaw' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="daoTaoTinChi"> A <c>System.Boolean</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHeSoQuyDoiTietChuanLaw(System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan, System.String maLoaiHocPhan, System.String maBacDaoTao, System.String maKhoaBoMon, System.Int32 maHocHam, System.Int32 maHocVi, System.Boolean daoTaoTinChi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHeSoQuyDoiTietChuanLaw");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.GetHeSoQuyDoiTietChuanLaw(transactionManager , maQuanLy, namHoc, hocKy, maMonHoc, siSo, tietBatDau, ngayDay, maPhongHoc, maLopHocPhan, maLoaiHocPhan, maBacDaoTao, maKhoaBoMon, maHocHam, maHocVi, daoTaoTinChi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetHeSoQuyDoiTietChuanLaw' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maMonHoc"> A <c>System.String</c> instance.</param>
		/// <param name="siSo"> A <c>System.Int32</c> instance.</param>
		/// <param name="tietBatDau"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayDay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="maPhongHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLopHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="maHocHam"> A <c>System.Int32</c> instance.</param>
		/// <param name="maHocVi"> A <c>System.Int32</c> instance.</param>
		/// <param name="daoTaoTinChi"> A <c>System.Boolean</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetHeSoQuyDoiTietChuanLaw( System.String maQuanLy, System.String namHoc, System.String hocKy, System.String maMonHoc, System.Int32 siSo, System.Int32 tietBatDau, System.DateTime ngayDay, System.String maPhongHoc, System.String maLopHocPhan, System.String maLoaiHocPhan, System.String maBacDaoTao, System.String maKhoaBoMon, System.Int32 maHocHam, System.Int32 maHocVi, System.Boolean daoTaoTinChi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetHeSoQuyDoiTietChuanLaw");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.GetHeSoQuyDoiTietChuanLaw(transactionManager, start, pageLength , maQuanLy, namHoc, hocKy, maMonHoc, siSo, tietBatDau, ngayDay, maPhongHoc, maLopHocPhan, maLoaiHocPhan, maBacDaoTao, maKhoaBoMon, maHocHam, maHocVi, daoTaoTinChi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_GetSoTietNoGioNghiaVu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetSoTietNoGioNghiaVu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
			/// <param name="tietNoGiangDay"> A <c>System.Double</c> instance.</param>
			/// <param name="tietNoKhac"> A <c>System.Double</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoTietNoGioNghiaVu(System.String namHoc, System.String hocKy, System.Int32 maGiangVien, ref System.Double tietNoGiangDay, ref System.Double tietNoKhac)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNoGioNghiaVu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.GetSoTietNoGioNghiaVu(transactionManager , namHoc, hocKy, maGiangVien, ref tietNoGiangDay, ref tietNoKhac);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_GetSoTietNoGioNghiaVu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
			/// <param name="tietNoGiangDay"> A <c>System.Double</c> instance.</param>
			/// <param name="tietNoKhac"> A <c>System.Double</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoTietNoGioNghiaVu( System.String namHoc, System.String hocKy, System.Int32 maGiangVien, ref System.Double tietNoGiangDay, ref System.Double tietNoKhac, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNoGioNghiaVu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.GetSoTietNoGioNghiaVu(transactionManager, start, pageLength , namHoc, hocKy, maGiangVien, ref tietNoGiangDay, ref tietNoKhac);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_GiangVien_TrinhDoChuyenMonNghiepVu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_TrinhDoChuyenMonNghiepVu' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TrinhDoChuyenMonNghiepVu(System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TrinhDoChuyenMonNghiepVu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.GiangVienProvider.TrinhDoChuyenMonNghiepVu(transactionManager , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_TrinhDoChuyenMonNghiepVu' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TrinhDoChuyenMonNghiepVu( System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TrinhDoChuyenMonNghiepVu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.GiangVienProvider.TrinhDoChuyenMonNghiepVu(transactionManager, start, pageLength , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_GiangVien_HoatDongNgoaiGiangDay_KiemTraDuLieu
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_KiemTraDuLieu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HoatDongNgoaiGiangDay_KiemTraDuLieu(System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_KiemTraDuLieu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_KiemTraDuLieu(transactionManager , namHoc, hocKy, maDonVi, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_GiangVien_HoatDongNgoaiGiangDay_KiemTraDuLieu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HoatDongNgoaiGiangDay_KiemTraDuLieu( System.String namHoc, System.String hocKy, System.String maDonVi, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HoatDongNgoaiGiangDay_KiemTraDuLieu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.GiangVienProvider.HoatDongNgoaiGiangDay_KiemTraDuLieu(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		#endregion
		
		#region DeepLoad
		#region Deep Load By Entity Keys
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;GiangVien&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_maQuanLy"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">GiangVien Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;GiangVien&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<GiangVien> DeepLoadByMaQuanLy(System.String _maQuanLy, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByMaQuanLy");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<GiangVien> list = GetByMaQuanLy(_maQuanLy);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="GiangVien"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_maGiangVien"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">GiangVien Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="GiangVien"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual GiangVien DeepLoadByMaGiangVien(System.Int32 _maGiangVien, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByMaGiangVien");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			GiangVien entity = GetByMaGiangVien(_maGiangVien);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		#endregion 

		#region DeepLoad By Entity
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <param name="entity">GiangVien Object</param>
		/// <remarks>
		/// <seealso cref="DeepLoad(GiangVien)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(GiangVien entity)
		{
			DeepLoad(entity, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(GiangVien)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entity">GiangVien Object</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(GiangVien entity, bool deep)
		{
			DeepLoad(entity, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
			
		/// <summary>
		/// public virtualDeep Loads the <see cref="IEntity"/> object with criteria based of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
		/// </remarks>
		/// <param name="entity">The <see cref="GiangVien"/> object to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
		/// If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">GiangVien Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(GiangVien entity, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.GiangVienProvider.DeepLoad(transactionManager, entity, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;
		}
		#endregion
		
		#region DeepLoad By Entity Collection
		/// <summary>
		/// Deep Loads the <see cref="TList{GiangVien}" /> object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(GiangVien)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{GiangVien}" /> Object to deep loads.</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<GiangVien> entityCollection)
		{
			DeepLoad(entityCollection, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Loads the <see cref="TList{GiangVien}" /> object.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(GiangVien)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{GiangVien}" /> Object to deep loads.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<GiangVien> entityCollection, bool deep)
		{
			DeepLoad(entityCollection, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}	

		/// <summary>
		/// Deep Loads the entire <see cref="TList{GiangVien}" /> object with criteria based of the child 
		/// property collections only N Levels Deep based on the DeepLoadType.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
		/// </remarks>
		/// <param name="entityCollection">The <see cref="TList{GiangVien}" /> instance to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType"><see cref="DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
		///		Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
		///	</param>
		/// <param name="childTypes"><see cref="GiangVien"/> Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public override void DeepLoad(TList<GiangVien> entityCollection, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{	
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.GiangVienProvider.DeepLoad(transactionManager, entityCollection, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;		
		}
		#endregion

		#endregion
		
		#region DeepSave
		
		#region DeepSave By Entity
		/// <summary>
		/// public virtualDeep Saves the <see cref="GiangVien"/> object with all of the child
		/// property collections N Levels Deep.
		/// </summary>
		/// <param name="entity">GiangVien Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(GiangVien entity)
		{
			return DeepSave(entity, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Saves the entire object graph of the GiangVien object with criteria based of the child 
		/// Type property array and DeepSaveType.
		/// </summary>
		/// <param name="entity">GiangVien Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes"><c>GiangVien</c> property Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(GiangVien entity, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entity.IsValid)
			{
				throw new EntityNotValidException(entity, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				
				result = dataProvider.GiangVienProvider.DeepSave(transactionManager, entity, deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;		
		}
		#endregion
		
		#region DeepSave By Entity Collection
		/// <summary>
		/// Deep Save the entire <see cref="TList{GiangVien}" /> object with all of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection">TList{GiangVien} Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual bool DeepSave(TList<GiangVien> entityCollection)
		{
			return DeepSave(entityCollection, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Save the entire object graph of the <see cref="TList{GiangVien}" /> object with criteria based of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection"><see cref="TList{GiangVien}" /> Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes">GiangVien Property Collection Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(TList<GiangVien> entityCollection, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{	
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.GiangVienProvider.DeepSave(transactionManager, entityCollection,  deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;
		}
		#endregion

		#endregion 

		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace





