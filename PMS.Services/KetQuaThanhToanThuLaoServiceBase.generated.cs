
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file KetQuaThanhToanThuLao.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using PMS.Entities;
using PMS.Entities.Validation;
//using Entities = PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace PMS.Services
{		
	
	///<summary>
	/// An object representation of the 'KetQuaThanhToanThuLao' table.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the KetQuaThanhToanThuLao.cs file instead.
	/// All custom implementations should be done in the <see cref="KetQuaThanhToanThuLao"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public partial class KetQuaThanhToanThuLaoServiceBase : ServiceBase<KetQuaThanhToanThuLao, KetQuaThanhToanThuLaoKey>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="KetQuaThanhToanThuLao"/> instance .
		///</summary>
		public KetQuaThanhToanThuLaoServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="KetQuaThanhToanThuLao"/> instance.
		///</summary>
		///<param name="_maGiangVien"></param>
		///<param name="_namHoc"></param>
		///<param name="_hocKy"></param>
		///<param name="_maHocHam"></param>
		///<param name="_maHocVi"></param>
		///<param name="_maLoaiGiangVien"></param>
		///<param name="_maDonVi"></param>
		///<param name="_loai"></param>
		///<param name="_phanLoai"></param>
		///<param name="_maMonHoc"></param>
		///<param name="_tenMonHoc"></param>
		///<param name="_loaiHocPhan"></param>
		///<param name="_nhom"></param>
		///<param name="_maLop"></param>
		///<param name="_lopClc"></param>
		///<param name="_siSo"></param>
		///<param name="_tietThucDay"></param>
		///<param name="_tietChuNhat"></param>
		///<param name="_heSoHocKy"></param>
		///<param name="_heSoLopDong"></param>
		///<param name="_tietQuyDoi"></param>
		///<param name="_donGia"></param>
		///<param name="_thanhTien"></param>
		///<param name="_lanChot"></param>
		///<param name="_ngayCapNhat"></param>
		///<param name="_maHinhThucDaoTao"></param>
		///<param name="_donGiaTrongChuan"></param>
		///<param name="_donGiaNgoaiChuan"></param>
		///<param name="_tenCoSo"></param>
		///<param name="_heSoQuyDoiThucHanhSangLyThuyet"></param>
		///<param name="_heSoCoSo"></param>
		///<param name="_soGioThucGiangTrenLop"></param>
		///<param name="_soGioChuanTinhThem"></param>
		///<param name="_heSoChucDanhChuyenMon"></param>
		///<param name="_heSoClcCntn"></param>
		///<param name="_heSoThinhGiangMonChuyenNganh"></param>
		///<param name="_maNhomMonHoc"></param>
		///<param name="_loaiLop"></param>
		///<param name="_maBacDaoTao"></param>
		///<param name="_malopHocPhan"></param>
		///<param name="_maKhoaHoc"></param>
		///<param name="_heSoTroCap"></param>
		///<param name="_heSoNgoaiGio"></param>
		///<param name="_heSoLuong"></param>
		///<param name="_heSoMonMoi"></param>
		///<param name="_heSoNienCheTinChi"></param>
		///<param name="_heSoNgonNgu"></param>
		///<param name="_heSoBacDaoTao"></param>
		///<param name="_ngayChiTra"></param>
		///<param name="_xacNhanChiTra"></param>
		///<param name="_ghiChu"></param>
		///<param name="_nguoiCapNhat"></param>
		///<param name="_heSoCongViec"></param>
		///<param name="_ngonNguGiangDay"></param>
		///<param name="_maCoSo"></param>
		///<param name="_mucThanhToan"></param>
		///<param name="_dotChiTra"></param>
		///<param name="_heSoKhoiNganh"></param>
		///<param name="_maCauHinhChotGio"></param>
		///<param name="_maKhoaCuaMonHoc"></param>
		///<param name="_heSoThamNien"></param>
		///<param name="_maLoaiHinhDaoTao"></param>
		public static KetQuaThanhToanThuLao CreateKetQuaThanhToanThuLao(System.Int32? _maGiangVien, System.String _namHoc, System.String _hocKy, System.Int32? _maHocHam, System.Int32? _maHocVi, System.Int32? _maLoaiGiangVien, System.String _maDonVi, System.String _loai, System.String _phanLoai, System.String _maMonHoc, System.String _tenMonHoc, System.String _loaiHocPhan, System.String _nhom, System.String _maLop, System.Boolean? _lopClc, System.Int32? _siSo, System.Decimal? _tietThucDay, System.Decimal? _tietChuNhat, System.Decimal? _heSoHocKy, System.Decimal? _heSoLopDong, System.Decimal? _tietQuyDoi, System.Decimal? _donGia, System.Decimal? _thanhTien, System.Int32? _lanChot, System.DateTime? _ngayCapNhat, System.String _maHinhThucDaoTao, System.Decimal? _donGiaTrongChuan, System.Decimal? _donGiaNgoaiChuan, System.String _tenCoSo, System.Decimal? _heSoQuyDoiThucHanhSangLyThuyet, System.Decimal? _heSoCoSo, System.Decimal? _soGioThucGiangTrenLop, System.Decimal? _soGioChuanTinhThem, System.Decimal? _heSoChucDanhChuyenMon, System.Decimal? _heSoClcCntn, System.Decimal? _heSoThinhGiangMonChuyenNganh, System.String _maNhomMonHoc, System.String _loaiLop, System.String _maBacDaoTao, System.String _malopHocPhan, System.String _maKhoaHoc, System.Decimal? _heSoTroCap, System.Decimal? _heSoNgoaiGio, System.Decimal? _heSoLuong, System.Decimal? _heSoMonMoi, System.Decimal? _heSoNienCheTinChi, System.Decimal? _heSoNgonNgu, System.Decimal? _heSoBacDaoTao, System.String _ngayChiTra, System.Boolean? _xacNhanChiTra, System.String _ghiChu, System.String _nguoiCapNhat, System.Decimal? _heSoCongViec, System.String _ngonNguGiangDay, System.String _maCoSo, System.Decimal? _mucThanhToan, System.String _dotChiTra, System.Decimal? _heSoKhoiNganh, System.Int32? _maCauHinhChotGio, System.String _maKhoaCuaMonHoc, System.Decimal? _heSoThamNien, System.String _maLoaiHinhDaoTao)
		{
			KetQuaThanhToanThuLao newEntityKetQuaThanhToanThuLao = new KetQuaThanhToanThuLao();
			newEntityKetQuaThanhToanThuLao.MaGiangVien  = _maGiangVien;
			newEntityKetQuaThanhToanThuLao.NamHoc  = _namHoc;
			newEntityKetQuaThanhToanThuLao.HocKy  = _hocKy;
			newEntityKetQuaThanhToanThuLao.MaHocHam  = _maHocHam;
			newEntityKetQuaThanhToanThuLao.MaHocVi  = _maHocVi;
			newEntityKetQuaThanhToanThuLao.MaLoaiGiangVien  = _maLoaiGiangVien;
			newEntityKetQuaThanhToanThuLao.MaDonVi  = _maDonVi;
			newEntityKetQuaThanhToanThuLao.Loai  = _loai;
			newEntityKetQuaThanhToanThuLao.PhanLoai  = _phanLoai;
			newEntityKetQuaThanhToanThuLao.MaMonHoc  = _maMonHoc;
			newEntityKetQuaThanhToanThuLao.TenMonHoc  = _tenMonHoc;
			newEntityKetQuaThanhToanThuLao.LoaiHocPhan  = _loaiHocPhan;
			newEntityKetQuaThanhToanThuLao.Nhom  = _nhom;
			newEntityKetQuaThanhToanThuLao.MaLop  = _maLop;
			newEntityKetQuaThanhToanThuLao.LopClc  = _lopClc;
			newEntityKetQuaThanhToanThuLao.SiSo  = _siSo;
			newEntityKetQuaThanhToanThuLao.TietThucDay  = _tietThucDay;
			newEntityKetQuaThanhToanThuLao.TietChuNhat  = _tietChuNhat;
			newEntityKetQuaThanhToanThuLao.HeSoHocKy  = _heSoHocKy;
			newEntityKetQuaThanhToanThuLao.HeSoLopDong  = _heSoLopDong;
			newEntityKetQuaThanhToanThuLao.TietQuyDoi  = _tietQuyDoi;
			newEntityKetQuaThanhToanThuLao.DonGia  = _donGia;
			newEntityKetQuaThanhToanThuLao.ThanhTien  = _thanhTien;
			newEntityKetQuaThanhToanThuLao.LanChot  = _lanChot;
			newEntityKetQuaThanhToanThuLao.NgayCapNhat  = _ngayCapNhat;
			newEntityKetQuaThanhToanThuLao.MaHinhThucDaoTao  = _maHinhThucDaoTao;
			newEntityKetQuaThanhToanThuLao.DonGiaTrongChuan  = _donGiaTrongChuan;
			newEntityKetQuaThanhToanThuLao.DonGiaNgoaiChuan  = _donGiaNgoaiChuan;
			newEntityKetQuaThanhToanThuLao.TenCoSo  = _tenCoSo;
			newEntityKetQuaThanhToanThuLao.HeSoQuyDoiThucHanhSangLyThuyet  = _heSoQuyDoiThucHanhSangLyThuyet;
			newEntityKetQuaThanhToanThuLao.HeSoCoSo  = _heSoCoSo;
			newEntityKetQuaThanhToanThuLao.SoGioThucGiangTrenLop  = _soGioThucGiangTrenLop;
			newEntityKetQuaThanhToanThuLao.SoGioChuanTinhThem  = _soGioChuanTinhThem;
			newEntityKetQuaThanhToanThuLao.HeSoChucDanhChuyenMon  = _heSoChucDanhChuyenMon;
			newEntityKetQuaThanhToanThuLao.HeSoClcCntn  = _heSoClcCntn;
			newEntityKetQuaThanhToanThuLao.HeSoThinhGiangMonChuyenNganh  = _heSoThinhGiangMonChuyenNganh;
			newEntityKetQuaThanhToanThuLao.MaNhomMonHoc  = _maNhomMonHoc;
			newEntityKetQuaThanhToanThuLao.LoaiLop  = _loaiLop;
			newEntityKetQuaThanhToanThuLao.MaBacDaoTao  = _maBacDaoTao;
			newEntityKetQuaThanhToanThuLao.MalopHocPhan  = _malopHocPhan;
			newEntityKetQuaThanhToanThuLao.MaKhoaHoc  = _maKhoaHoc;
			newEntityKetQuaThanhToanThuLao.HeSoTroCap  = _heSoTroCap;
			newEntityKetQuaThanhToanThuLao.HeSoNgoaiGio  = _heSoNgoaiGio;
			newEntityKetQuaThanhToanThuLao.HeSoLuong  = _heSoLuong;
			newEntityKetQuaThanhToanThuLao.HeSoMonMoi  = _heSoMonMoi;
			newEntityKetQuaThanhToanThuLao.HeSoNienCheTinChi  = _heSoNienCheTinChi;
			newEntityKetQuaThanhToanThuLao.HeSoNgonNgu  = _heSoNgonNgu;
			newEntityKetQuaThanhToanThuLao.HeSoBacDaoTao  = _heSoBacDaoTao;
			newEntityKetQuaThanhToanThuLao.NgayChiTra  = _ngayChiTra;
			newEntityKetQuaThanhToanThuLao.XacNhanChiTra  = _xacNhanChiTra;
			newEntityKetQuaThanhToanThuLao.GhiChu  = _ghiChu;
			newEntityKetQuaThanhToanThuLao.NguoiCapNhat  = _nguoiCapNhat;
			newEntityKetQuaThanhToanThuLao.HeSoCongViec  = _heSoCongViec;
			newEntityKetQuaThanhToanThuLao.NgonNguGiangDay  = _ngonNguGiangDay;
			newEntityKetQuaThanhToanThuLao.MaCoSo  = _maCoSo;
			newEntityKetQuaThanhToanThuLao.MucThanhToan  = _mucThanhToan;
			newEntityKetQuaThanhToanThuLao.DotChiTra  = _dotChiTra;
			newEntityKetQuaThanhToanThuLao.HeSoKhoiNganh  = _heSoKhoiNganh;
			newEntityKetQuaThanhToanThuLao.MaCauHinhChotGio  = _maCauHinhChotGio;
			newEntityKetQuaThanhToanThuLao.MaKhoaCuaMonHoc  = _maKhoaCuaMonHoc;
			newEntityKetQuaThanhToanThuLao.HeSoThamNien  = _heSoThamNien;
			newEntityKetQuaThanhToanThuLao.MaLoaiHinhDaoTao  = _maLoaiHinhDaoTao;
			return newEntityKetQuaThanhToanThuLao;
		}
		#endregion Constructors

		#region Fields
		private static SecurityContext<KetQuaThanhToanThuLao> securityContext = new SecurityContext<KetQuaThanhToanThuLao>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		#endregion 
		
		#region SecurityContext
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<KetQuaThanhToanThuLao> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		#endregion 
		
		#region Data Access Methods
		
		#region GetByForeignKey Methods
		#endregion GetByForeignKey Methods
		
		#region GetByIndexes
		/// <summary>
		/// 	Gets a row from the DataSource based on its primary key.
		/// </summary>
		/// <param name="key">The unique identifier of the row to retrieve.</param>
		/// <returns>Returns an instance of the Entity class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public override KetQuaThanhToanThuLao Get(KetQuaThanhToanThuLaoKey key)
		{
			return GetById(key.Id);
		}

		/// <summary>
		///  method that Gets rows in a <see cref="TList{KetQuaThanhToanThuLao}" /> from the datasource based on the primary key PK_KetQuaThanhToanThuLao index.
		/// </summary>
		/// <param name="_id"></param>
		/// <returns>Returns an instance of the <see cref="KetQuaThanhToanThuLao"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual KetQuaThanhToanThuLao GetById(System.Int32 _id)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetById");
			#endregion Security check
			
			#region Initialisation
			KetQuaThanhToanThuLao entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.KetQuaThanhToanThuLaoProvider.GetById(transactionManager, _id)   as KetQuaThanhToanThuLao;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{KetQuaThanhToanThuLao}" /> from the datasource based on the primary key PK_KetQuaThanhToanThuLao index.
		/// </summary>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="KetQuaThanhToanThuLao"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual KetQuaThanhToanThuLao GetById(System.Int32 _id, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetById");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			KetQuaThanhToanThuLao entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.KetQuaThanhToanThuLaoProvider.GetById(transactionManager, _id, start, pageLength, out totalCount)   as KetQuaThanhToanThuLao;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	
		#endregion GetByIndexes
	
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="KetQuaThanhToanThuLao" /> entities.
		/// </summary>
		/// <returns></returns>
		public override TList<KetQuaThanhToanThuLao> GetAll() 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			TList<KetQuaThanhToanThuLao> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.KetQuaThanhToanThuLaoProvider.GetAll(transactionManager);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}

		/// <summary>
		/// Get a set portion of a complete list of <see cref="KetQuaThanhToanThuLao" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{KetQuaThanhToanThuLao}"/> </returns>
		public virtual TList<KetQuaThanhToanThuLao> GetAll(int start, int pageLength, out int totalCount) 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<KetQuaThanhToanThuLao> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.KetQuaThanhToanThuLaoProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{KetQuaThanhToanThuLao}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>KetQuaThanhToanThuLao</c> objects.</returns>
		public virtual TList<KetQuaThanhToanThuLao> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, int.MaxValue, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{KetQuaThanhToanThuLao}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>KetQuaThanhToanThuLao</c> objects.</returns>
		public virtual TList<KetQuaThanhToanThuLao> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{KetQuaThanhToanThuLao}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>KetQuaThanhToanThuLao</c> objects.</returns>
		public override TList<KetQuaThanhToanThuLao> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<KetQuaThanhToanThuLao> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.KetQuaThanhToanThuLaoProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, int.MaxValue, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
				
		#region Find
		
		#region Parsed Find Methods
		
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual TList<KetQuaThanhToanThuLao> Find(string whereClause)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TList<KetQuaThanhToanThuLao> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.KetQuaThanhToanThuLaoProvider.Find(transactionManager, whereClause);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}	
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{KetQuaThanhToanThuLao} of <c>KetQuaThanhToanThuLao</c> objects.</returns>
		public override TList<KetQuaThanhToanThuLao> Find(string whereClause, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<KetQuaThanhToanThuLao> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.KetQuaThanhToanThuLaoProvider.Find(transactionManager, whereClause, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods

		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>KetQuaThanhToanThuLao</c> objects.</returns>
		public virtual TList<KetQuaThanhToanThuLao> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, (string) null);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <returns>Returns a typed collection of <c>KetQuaThanhToanThuLao</c> objects.</returns>
        public virtual TList<KetQuaThanhToanThuLao> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns)
        {
            return Find(parameters, sortColumns.ToString());
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>KetQuaThanhToanThuLao</c> objects.</returns>
		public virtual TList<KetQuaThanhToanThuLao> Find(IFilterParameterCollection parameters, string orderBy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			TList<KetQuaThanhToanThuLao> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.KetQuaThanhToanThuLaoProvider.Find(transactionManager, parameters, orderBy);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;		
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="count">out. The number of rows that match this query.</param>
        /// <returns>Returns a typed collection of <c>KetQuaThanhToanThuLao</c> objects.</returns>
        public virtual TList<KetQuaThanhToanThuLao> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns, int start, int pageLength, out int count)
        {
            return Find(parameters, sortColumns.ToString(), start, pageLength, out count);
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>KetQuaThanhToanThuLao</c> objects.</returns>
		public virtual TList<KetQuaThanhToanThuLao> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			count = -1;
			TransactionManager transactionManager = null; 
			TList<KetQuaThanhToanThuLao> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.KetQuaThanhToanThuLaoProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion
		
		#region Insert

		#region Insert Entity
		/// <summary>
		/// public virtual method that Inserts a KetQuaThanhToanThuLao object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">KetQuaThanhToanThuLao object to Insert.</param>
		/// <remarks>After Inserting into the datasource, the KetQuaThanhToanThuLao object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with an already open transaction.
        /// <code>
		/// KetQuaThanhToanThuLao entity = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Insert Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Insert(entity.ChildObjectSource);
		///		KetQuaThanhToanThuLaoService.Insert(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public override bool Insert(KetQuaThanhToanThuLao entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Insert", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.KetQuaThanhToanThuLaoProvider.Insert(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Insert Entity
		
		#region Insert Collection
		/// <summary>
		/// public virtual method that Inserts rows in <see cref="TList{KetQuaThanhToanThuLao}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>KetQuaThanhToanThuLao</c> objects in a <see cref="TList{KetQuaThanhToanThuLao}" /> object to Insert.</param>
		/// <remarks>
		///		This function will only Insert entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Inserting the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Inserting into the datasource, the <c>KetQuaThanhToanThuLao</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Insert.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with a collection of KetQuaThanhToanThuLao.
        /// <code><![CDATA[
		/// TList<KetQuaThanhToanThuLao> list = new TList<KetQuaThanhToanThuLao>();
		/// KetQuaThanhToanThuLao entity = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "foo";
		/// KetQuaThanhToanThuLao entity2 = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	KetQuaThanhToanThuLaoService.Insert(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public virtual TList<KetQuaThanhToanThuLao> Insert(TList<KetQuaThanhToanThuLao> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Insert", DomainUtil.GetErrorsFromList<KetQuaThanhToanThuLao>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.KetQuaThanhToanThuLaoProvider.Insert(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Insert Collection

		#endregion Insert 
		
		#region Update

		#region Update Entity
		/// <summary>
		/// public virtual method that Updates a KetQuaThanhToanThuLao object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">KetQuaThanhToanThuLao object to Update.</param>
		/// <remarks>After Updateing into the datasource, the KetQuaThanhToanThuLao object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with an already open transaction.
        /// <code>
		///	KetQuaThanhToanThuLao entity = KetQuaThanhToanThuLaoService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Update Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Update(entity.ChildObjectSource);
		///		KetQuaThanhToanThuLaoService.Update(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool Update(KetQuaThanhToanThuLao entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Update", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.KetQuaThanhToanThuLaoProvider.Update(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Update Entity
		
		#region Update Collection
		/// <summary>
		/// public virtual method that Updates rows in <see cref="TList{KetQuaThanhToanThuLao}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>KetQuaThanhToanThuLao</c> objects in a <see cref="TList{KetQuaThanhToanThuLao}" /> object to Update.</param>
		/// <remarks>
		///		This function will only Update entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Updateing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Updateing into the datasource, the <c>KetQuaThanhToanThuLao</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Update.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with a collection of KetQuaThanhToanThuLao.
        /// <code><![CDATA[
		/// TList<KetQuaThanhToanThuLao> list = new TList<KetQuaThanhToanThuLao>();
		/// KetQuaThanhToanThuLao entity = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "foo";
		/// KetQuaThanhToanThuLao entity2 = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	KetQuaThanhToanThuLaoService.Update(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<KetQuaThanhToanThuLao> Update(TList<KetQuaThanhToanThuLao> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Update", DomainUtil.GetErrorsFromList<KetQuaThanhToanThuLao>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.KetQuaThanhToanThuLaoProvider.Update(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Update Collection

		#endregion Update 
		
		#region Save

		#region Save Entity
		/// <summary>
		/// public virtual method that Saves a KetQuaThanhToanThuLao object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">KetQuaThanhToanThuLao object to Save.</param>
		/// <remarks>After Saveing into the datasource, the KetQuaThanhToanThuLao object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with an already open transaction.
        /// <code>
		///	KetQuaThanhToanThuLao entity = KetQuaThanhToanThuLaoService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Save Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Save(entity.ChildObjectSource);
		///		KetQuaThanhToanThuLaoService.Save(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override KetQuaThanhToanThuLao Save(KetQuaThanhToanThuLao entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Save", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.KetQuaThanhToanThuLaoProvider.Save(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		#endregion Save Entity
		
		#region Save Collection
		/// <summary>
		/// public virtual method that Saves rows in <see cref="TList{KetQuaThanhToanThuLao}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>KetQuaThanhToanThuLao</c> objects in a <see cref="TList{KetQuaThanhToanThuLao}" /> object to Save.</param>
		/// <remarks>
		///		This function will only Save entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Saveing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Saveing into the datasource, the <c>KetQuaThanhToanThuLao</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Save.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with a collection of KetQuaThanhToanThuLao.
        /// <code><![CDATA[
		/// TList<KetQuaThanhToanThuLao> list = new TList<KetQuaThanhToanThuLao>();
		/// KetQuaThanhToanThuLao entity = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "foo";
		/// KetQuaThanhToanThuLao entity2 = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	KetQuaThanhToanThuLaoService.Save(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<KetQuaThanhToanThuLao> Save(TList<KetQuaThanhToanThuLao> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Save", DomainUtil.GetErrorsFromList<KetQuaThanhToanThuLao>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.KetQuaThanhToanThuLaoProvider.Save(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Save Collection

		#endregion Save 
		
		#region Delete

		#region Delete Entity
		/// <summary>
		/// public virtual method that Deletes a KetQuaThanhToanThuLao object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">KetQuaThanhToanThuLao object to Delete.</param>
		/// <remarks>After Deleteing into the datasource, the KetQuaThanhToanThuLao object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with an already open transaction.
        /// <code>
		///	KetQuaThanhToanThuLao entity = KetQuaThanhToanThuLaoService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Delete Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Delete(entity.ChildObjectSource);
		///		KetQuaThanhToanThuLaoService.Delete(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public override bool Delete(KetQuaThanhToanThuLao entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Delete", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.KetQuaThanhToanThuLaoProvider.Delete(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Delete Entity
		
		#region Delete Collection
		/// <summary>
		/// public virtual method that Deletes rows in <see cref="TList{KetQuaThanhToanThuLao}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>KetQuaThanhToanThuLao</c> objects in a <see cref="TList{KetQuaThanhToanThuLao}" /> object to Delete.</param>
		/// <remarks>
		///		This function will only Delete entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Deleteing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Deleteing into the datasource, the <c>KetQuaThanhToanThuLao</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Delete.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with a collection of KetQuaThanhToanThuLao.
        /// <code><![CDATA[
		/// TList<KetQuaThanhToanThuLao> list = new TList<KetQuaThanhToanThuLao>();
		/// KetQuaThanhToanThuLao entity = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "foo";
		/// KetQuaThanhToanThuLao entity2 = new KetQuaThanhToanThuLao();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	KetQuaThanhToanThuLaoService.Delete(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual TList<KetQuaThanhToanThuLao> Delete(TList<KetQuaThanhToanThuLao> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Delete", DomainUtil.GetErrorsFromList<KetQuaThanhToanThuLao>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.KetQuaThanhToanThuLaoProvider.Delete(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Delete Collection

		#endregion Delete 

		#region   Delete
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="key">The unique identifier of the row to delete.</param>
		/// <returns>Returns true if operation suceeded.</returns>
		public bool Delete(KetQuaThanhToanThuLaoKey key)
		{
			return Delete(key.Id );
		}
		
		/// <summary>
		/// 	Deletes a row from the DataSource based on the PK'S System.Int32 _id
		/// </summary>
		/// <param name="_id">KetQuaThanhToanThuLao pk id.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual bool Delete(System.Int32 _id)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check

			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.KetQuaThanhToanThuLaoProvider.Delete(transactionManager, _id);
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
			
		}
		#endregion 
		
		#region  GetBy m:m Aggregate Relationships
		#endregion	N2N Relationships

		#region Custom Methods
		
		#region cust_KetQuaThanhToanThuLao_BangKeGioGiangTheoNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeGioGiangTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeGioGiangTheoNam(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeGioGiangTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeGioGiangTheoNam(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeGioGiangTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeGioGiangTheoNam( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeGioGiangTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeGioGiangTheoNam(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_HuyChotThuLao
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_HuyChotThuLao' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HuyChotThuLao(System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HuyChotThuLao");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.HuyChotThuLao(transactionManager , namHoc, hocKy, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_HuyChotThuLao' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HuyChotThuLao( System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HuyChotThuLao");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.HuyChotThuLao(transactionManager, start, pageLength , namHoc, hocKy, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_web
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_web' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThuLaoTheoNam_web(System.String namHoc, System.String maQuanLyGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoTheoNam_web");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoTheoNam_web(transactionManager , namHoc, maQuanLyGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_web' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThuLaoTheoNam_web( System.String namHoc, System.String maQuanLyGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoTheoNam_web");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoTheoNam_web(transactionManager, start, pageLength , namHoc, maQuanLyGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopKetQuaThanhToan(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopKetQuaThanhToan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopKetQuaThanhToan(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopKetQuaThanhToan( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopKetQuaThanhToan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopKetQuaThanhToan(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_LuuChiTra
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuChiTra' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuChiTra(System.String xmlData, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuChiTra(transactionManager , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuChiTra' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuChiTra( System.String xmlData, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuChiTra(transactionManager, start, pageLength , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangTongHopGioGiangCacKhoaTheoNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangCacKhoaTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangTongHopGioGiangCacKhoaTheoNam(System.String namHoc, System.String donVi, System.String loaiGiangVien, System.String loaiHinhDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangTongHopGioGiangCacKhoaTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangTongHopGioGiangCacKhoaTheoNam(transactionManager , namHoc, donVi, loaiGiangVien, loaiHinhDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangCacKhoaTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangTongHopGioGiangCacKhoaTheoNam( System.String namHoc, System.String donVi, System.String loaiGiangVien, System.String loaiHinhDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangTongHopGioGiangCacKhoaTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangTongHopGioGiangCacKhoaTheoNam(transactionManager, start, pageLength , namHoc, donVi, loaiGiangVien, loaiHinhDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ChotThanhToanKhoaDonVi
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChotThanhToanKhoaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChotThanhToanKhoaDonVi(System.String namHoc, System.String hocKy, System.String khoaDonVi, System.Int32 lanChot, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChotThanhToanKhoaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.ChotThanhToanKhoaDonVi(transactionManager , namHoc, hocKy, khoaDonVi, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChotThanhToanKhoaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChotThanhToanKhoaDonVi( System.String namHoc, System.String hocKy, System.String khoaDonVi, System.Int32 lanChot, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChotThanhToanKhoaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.ChotThanhToanKhoaDonVi(transactionManager, start, pageLength , namHoc, hocKy, khoaDonVi, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_Reportweb
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_Reportweb' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetThuLaoTheoNam_Reportweb(System.String namHoc, System.String maQuanLyGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoTheoNam_Reportweb");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoTheoNam_Reportweb(transactionManager , namHoc, maQuanLyGiangVien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoTheoNam_Reportweb' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetThuLaoTheoNam_Reportweb( System.String namHoc, System.String maQuanLyGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoTheoNam_Reportweb");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoTheoNam_Reportweb(transactionManager, start, pageLength , namHoc, maQuanLyGiangVien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoLanChot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoLanChot(System.String namHoc, System.String hocKy, ref System.Int32 ketQua)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.GetSoLanChot(transactionManager , namHoc, hocKy, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoLanChot( System.String namHoc, System.String hocKy, ref System.Int32 ketQua, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.GetSoLanChot(transactionManager, start, pageLength , namHoc, hocKy, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_LuuThueTncn
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuThueTncn' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="loaiThue"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuThueTncn(System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String loaiThue, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuThueTncn");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuThueTncn(transactionManager , xmlData, namHoc, hocKy, lanChot, loaiThue, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuThueTncn' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="loaiThue"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuThueTncn( System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String loaiThue, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuThueTncn");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuThueTncn(transactionManager, start, pageLength , xmlData, namHoc, hocKy, lanChot, loaiThue, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHocHocKyLanChot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHocHocKyLanChot' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByMaGiangVienNamHocHocKyLanChot(System.Int32 maGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaGiangVienNamHocHocKyLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetByMaGiangVienNamHocHocKyLanChot(transactionManager , maGiangVien, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHocHocKyLanChot' stored procedure. 
		/// </summary>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByMaGiangVienNamHocHocKyLanChot( System.Int32 maGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaGiangVienNamHocHocKyLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetByMaGiangVienNamHocHocKyLanChot(transactionManager, start, pageLength , maGiangVien, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung_Bk
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung_Bk' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetDataVuotGioBoSung_Bk(System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDataVuotGioBoSung_Bk");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetDataVuotGioBoSung_Bk(transactionManager , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung_Bk' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetDataVuotGioBoSung_Bk( System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDataVuotGioBoSung_Bk");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetDataVuotGioBoSung_Bk(transactionManager, start, pageLength , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ChotThanhToan2
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChotThanhToan2' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChotThanhToan2(System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChotThanhToan2");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.ChotThanhToan2(transactionManager , namHoc, hocKy, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChotThanhToan2' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChotThanhToan2( System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChotThanhToan2");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.ChotThanhToan2(transactionManager, start, pageLength , namHoc, hocKy, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoDot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanTheoDot(System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanTheoDot(transactionManager , namHoc, hocKy, donVi, dotThanhToan, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanTheoDot( System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanTheoDot(transactionManager, start, pageLength , namHoc, hocKy, donVi, dotThanhToan, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangLyThuyetGiangVienThinhGiangCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetBangNamVuotGioBoSung
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetBangNamVuotGioBoSung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetBangNamVuotGioBoSung(System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBangNamVuotGioBoSung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetBangNamVuotGioBoSung(transactionManager , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetBangNamVuotGioBoSung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetBangNamVuotGioBoSung( System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBangNamVuotGioBoSung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetBangNamVuotGioBoSung(transactionManager, start, pageLength , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GiangVienXemTrenWeb_Uel
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GiangVienXemTrenWeb_Uel' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GiangVienXemTrenWeb_Uel(System.String namHoc, System.String hocKy, System.String maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GiangVienXemTrenWeb_Uel");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.GiangVienXemTrenWeb_Uel(transactionManager , namHoc, hocKy, maGiangVien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GiangVienXemTrenWeb_Uel' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GiangVienXemTrenWeb_Uel( System.String namHoc, System.String hocKy, System.String maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GiangVienXemTrenWeb_Uel");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.GiangVienXemTrenWeb_Uel(transactionManager, start, pageLength , namHoc, hocKy, maGiangVien);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_LuuGiangVienDaChiTra
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuGiangVienDaChiTra' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuGiangVienDaChiTra(System.String xmlData, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuGiangVienDaChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuGiangVienDaChiTra(transactionManager , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuGiangVienDaChiTra' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuGiangVienDaChiTra( System.String xmlData, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuGiangVienDaChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuGiangVienDaChiTra(transactionManager, start, pageLength , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetNhiemVuNghienCuuKhoaHoc
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetNhiemVuNghienCuuKhoaHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetNhiemVuNghienCuuKhoaHoc(System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNhiemVuNghienCuuKhoaHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetNhiemVuNghienCuuKhoaHoc(transactionManager , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetNhiemVuNghienCuuKhoaHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetNhiemVuNghienCuuKhoaHoc( System.String namHoc, System.String hocKy, System.Int32 maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNhiemVuNghienCuuKhoaHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetNhiemVuNghienCuuKhoaHoc(transactionManager, start, pageLength , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetDataVuotGioBoSung(System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDataVuotGioBoSung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetDataVuotGioBoSung(transactionManager , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetDataVuotGioBoSung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetDataVuotGioBoSung( System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetDataVuotGioBoSung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetDataVuotGioBoSung(transactionManager, start, pageLength , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangThanhToanGioGiangCoHuuCaNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangThanhToanGioGiangCoHuuCaNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangThanhToanGioGiangCoHuuCaNam(System.String namHoc, System.String donVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangThanhToanGioGiangCoHuuCaNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangThanhToanGioGiangCoHuuCaNam(transactionManager , namHoc, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangThanhToanGioGiangCoHuuCaNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangThanhToanGioGiangCoHuuCaNam( System.String namHoc, System.String donVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangThanhToanGioGiangCoHuuCaNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangThanhToanGioGiangCoHuuCaNam(transactionManager, start, pageLength , namHoc, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetThongTinGiangVienTheoNamHocHocKy
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThongTinGiangVienTheoNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongTinGiangVienTheoNamHocHocKy(System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongTinGiangVienTheoNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThongTinGiangVienTheoNamHocHocKy(transactionManager , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThongTinGiangVienTheoNamHocHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThongTinGiangVienTheoNamHocHocKy( System.String namHoc, System.String hocKy, System.Int32 maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThongTinGiangVienTheoNamHocHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThongTinGiangVienTheoNamHocHocKy(transactionManager, start, pageLength , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThanhToanTienGiangClc
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanTienGiangClc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanTienGiangClc(System.String namHoc, System.String hocKy, System.String khoaBoMon, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanTienGiangClc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanTienGiangClc(transactionManager , namHoc, hocKy, khoaBoMon, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanTienGiangClc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanTienGiangClc( System.String namHoc, System.String hocKy, System.String khoaBoMon, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanTienGiangClc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanTienGiangClc(transactionManager, start, pageLength , namHoc, hocKy, khoaBoMon, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_DanhSachGiangVienDuocSuDungTroGiang
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_DanhSachGiangVienDuocSuDungTroGiang' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DanhSachGiangVienDuocSuDungTroGiang(System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DanhSachGiangVienDuocSuDungTroGiang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DanhSachGiangVienDuocSuDungTroGiang(transactionManager , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_DanhSachGiangVienDuocSuDungTroGiang' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DanhSachGiangVienDuocSuDungTroGiang( System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DanhSachGiangVienDuocSuDungTroGiang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DanhSachGiangVienDuocSuDungTroGiang(transactionManager, start, pageLength , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThanhToanThuLaoGiangDayTheoKhoa
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoGiangDayTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanThuLaoGiangDayTheoKhoa(System.String maDonVi, System.String maLoaiGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanThuLaoGiangDayTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanThuLaoGiangDayTheoKhoa(transactionManager , maDonVi, maLoaiGiangVien, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoGiangDayTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanThuLaoGiangDayTheoKhoa( System.String maDonVi, System.String maLoaiGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanThuLaoGiangDayTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanThuLaoGiangDayTheoKhoa(transactionManager, start, pageLength , maDonVi, maLoaiGiangVien, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoTietRaDe
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietRaDe' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietRaDe(System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietRaDe");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietRaDe(transactionManager , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietRaDe' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietRaDe( System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietRaDe");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietRaDe(transactionManager, start, pageLength , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetNoiDungGiamTruGioChuan
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetNoiDungGiamTruGioChuan' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetNoiDungGiamTruGioChuan(System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNoiDungGiamTruGioChuan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetNoiDungGiamTruGioChuan(transactionManager , xmlData, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetNoiDungGiamTruGioChuan' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetNoiDungGiamTruGioChuan( System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNoiDungGiamTruGioChuan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetNoiDungGiamTruGioChuan(transactionManager, start, pageLength , xmlData, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopTheoNamHocHocKyDonViLoaiGiangVienLanChot(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeChiTiet_Cdgtvt
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChiTiet_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeChiTiet_Cdgtvt(System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChiTiet_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChiTiet_Cdgtvt(transactionManager , namHoc, hocKy, maDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChiTiet_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeChiTiet_Cdgtvt( System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChiTiet_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChiTiet_Cdgtvt(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetNgayChiTra
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetNgayChiTra' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetNgayChiTra(System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNgayChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetNgayChiTra(transactionManager , namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetNgayChiTra' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetNgayChiTra( System.String namHoc, System.String hocKy, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNgayChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetNgayChiTra(transactionManager, start, pageLength , namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_LuuTietNoTon
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuTietNoTon' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuTietNoTon(System.String xmlData, System.String namHoc, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuTietNoTon");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuTietNoTon(transactionManager , xmlData, namHoc, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuTietNoTon' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuTietNoTon( System.String xmlData, System.String namHoc, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuTietNoTon");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuTietNoTon(transactionManager, start, pageLength , xmlData, namHoc, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoDot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioGiangTheoDot(System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioGiangTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGioGiangTheoDot(transactionManager , namHoc, hocKy, donVi, dotThanhToan, loaiGiangVien, loaiHinhDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioGiangTheoDot( System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioGiangTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGioGiangTheoDot(transactionManager, start, pageLength , namHoc, hocKy, donVi, dotThanhToan, loaiGiangVien, loaiHinhDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienLuongDayThemGio_Cdgtvt
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienLuongDayThemGio_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienLuongDayThemGio_Cdgtvt(System.String namHoc, System.String maDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienLuongDayThemGio_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienLuongDayThemGio_Cdgtvt(transactionManager , namHoc, maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienLuongDayThemGio_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienLuongDayThemGio_Cdgtvt( System.String namHoc, System.String maDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienLuongDayThemGio_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienLuongDayThemGio_Cdgtvt(transactionManager, start, pageLength , namHoc, maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_NoGioChuanTheoHocKy
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_NoGioChuanTheoHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NoGioChuanTheoHocKy(System.String namHoc, System.String hocKy, System.String donVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NoGioChuanTheoHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.NoGioChuanTheoHocKy(transactionManager , namHoc, hocKy, donVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_NoGioChuanTheoHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader NoGioChuanTheoHocKy( System.String namHoc, System.String hocKy, System.String donVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("NoGioChuanTheoHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.NoGioChuanTheoHocKy(transactionManager, start, pageLength , namHoc, hocKy, donVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_KiemTraDaChiTra
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_KiemTraDaChiTra' stored procedure. 
		/// </summary>
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void KiemTraDaChiTra(System.Int32 id, ref System.String reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KiemTraDaChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.KiemTraDaChiTra(transactionManager , id, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_KiemTraDaChiTra' stored procedure. 
		/// </summary>
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void KiemTraDaChiTra( System.Int32 id, ref System.String reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KiemTraDaChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.KiemTraDaChiTra(transactionManager, start, pageLength , id, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_SoSanhHaiLanChot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_SoSanhHaiLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChota"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotb"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader SoSanhHaiLanChot(System.String namHoc, System.String hocKy, System.Int32 lanChota, System.Int32 lanChotb)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("SoSanhHaiLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.SoSanhHaiLanChot(transactionManager , namHoc, hocKy, lanChota, lanChotb);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_SoSanhHaiLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChota"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotb"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader SoSanhHaiLanChot( System.String namHoc, System.String hocKy, System.Int32 lanChota, System.Int32 lanChotb, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("SoSanhHaiLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.SoSanhHaiLanChot(transactionManager, start, pageLength , namHoc, hocKy, lanChota, lanChotb);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetCBKGHDDHCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetCBKGHDDHCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangLyThuyetCBKGHDDHCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangLyThuyetCBKGHDDHCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangLyThuyetCBKGHDDHCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetCBKGHDDHCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangLyThuyetCBKGHDDHCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangLyThuyetCBKGHDDHCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangLyThuyetCBKGHDDHCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToanTapSu
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToanTapSu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopKetQuaThanhToanTapSu(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopKetQuaThanhToanTapSu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopKetQuaThanhToanTapSu(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToanTapSu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopKetQuaThanhToanTapSu( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopKetQuaThanhToanTapSu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopKetQuaThanhToanTapSu(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhGiangVienThinhGiangCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangThucHanhGiangVienThinhGiangCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangThucHanhGiangVienThinhGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangThucHanhGiangVienThinhGiangCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangThucHanhGiangVienThinhGiangCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangThucHanhGiangVienThinhGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangThucHanhGiangVienThinhGiangCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_XacNhanChiTra
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_XacNhanChiTra' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void XacNhanChiTra(System.String xmlData, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("XacNhanChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.XacNhanChiTra(transactionManager , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_XacNhanChiTra' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void XacNhanChiTra( System.String xmlData, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("XacNhanChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.XacNhanChiTra(transactionManager, start, pageLength , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.String heDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.String heDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopGioCoiThiChamBaiRaDeTheoHocKy(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoTietChuyeNoTon
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietChuyeNoTon' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietChuyeNoTon(System.String namHoc)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietChuyeNoTon");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietChuyeNoTon(transactionManager , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietChuyeNoTon' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietChuyeNoTon( System.String namHoc, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietChuyeNoTon");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietChuyeNoTon(transactionManager, start, pageLength , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhCBKGHDDHCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhCBKGHDDHCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangThucHanhCBKGHDDHCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangThucHanhCBKGHDDHCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangThucHanhCBKGHDDHCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhCBKGHDDHCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangThucHanhCBKGHDDHCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangThucHanhCBKGHDDHCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangThucHanhCBKGHDDHCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThanhToanThuLaoThinhGiang
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoThinhGiang' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanThuLaoThinhGiang(System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanThuLaoThinhGiang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanThuLaoThinhGiang(transactionManager , namHoc, hocKy, lanChot, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoThinhGiang' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanThuLaoThinhGiang( System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanThuLaoThinhGiang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanThuLaoThinhGiang(transactionManager, start, pageLength , namHoc, hocKy, lanChot, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnCBKGHDDHCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnCBKGHDDHCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangTttnCBKGHDDHCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangTttnCBKGHDDHCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangTttnCBKGHDDHCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnCBKGHDDHCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangTttnCBKGHDDHCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangTttnCBKGHDDHCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangTttnCBKGHDDHCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThuLaoTrenWebIuh
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThuLaoTrenWebIuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="professorId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThuLaoTrenWebIuh(System.String namHoc, System.String professorId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThuLaoTrenWebIuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThuLaoTrenWebIuh(transactionManager , namHoc, professorId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThuLaoTrenWebIuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="professorId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThuLaoTrenWebIuh( System.String namHoc, System.String professorId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThuLaoTrenWebIuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThuLaoTrenWebIuh(transactionManager, start, pageLength , namHoc, professorId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_DuToanKinhPhiGiangDayVhu
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_DuToanKinhPhiGiangDayVhu' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DuToanKinhPhiGiangDayVhu(System.String maDonVi, System.String maLoaiGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DuToanKinhPhiGiangDayVhu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DuToanKinhPhiGiangDayVhu(transactionManager , maDonVi, maLoaiGiangVien, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_DuToanKinhPhiGiangDayVhu' stored procedure. 
		/// </summary>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DuToanKinhPhiGiangDayVhu( System.String maDonVi, System.String maLoaiGiangVien, System.String namHoc, System.String hocKy, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DuToanKinhPhiGiangDayVhu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DuToanKinhPhiGiangDayVhu(transactionManager, start, pageLength , maDonVi, maLoaiGiangVien, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetLuoiVuotGioBoSung(System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetLuoiVuotGioBoSung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetLuoiVuotGioBoSung(transactionManager , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetLuoiVuotGioBoSung( System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetLuoiVuotGioBoSung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetLuoiVuotGioBoSung(transactionManager, start, pageLength , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_KiemTraTinhTrangKeToanChiTra
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_KiemTraTinhTrangKeToanChiTra' stored procedure. 
		/// </summary>
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void KiemTraTinhTrangKeToanChiTra(System.Int32 id, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KiemTraTinhTrangKeToanChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.KiemTraTinhTrangKeToanChiTra(transactionManager , id, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_KiemTraTinhTrangKeToanChiTra' stored procedure. 
		/// </summary>
		/// <param name="id"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void KiemTraTinhTrangKeToanChiTra( System.Int32 id, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KiemTraTinhTrangKeToanChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.KiemTraTinhTrangKeToanChiTra(transactionManager, start, pageLength , id, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhHopDongDaiHanCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhHopDongDaiHanCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangThucHanhHopDongDaiHanCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangThucHanhHopDongDaiHanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangThucHanhHopDongDaiHanCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangThucHanhHopDongDaiHanCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangThucHanhHopDongDaiHanCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangThucHanhHopDongDaiHanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangThucHanhHopDongDaiHanCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot(System.String namHoc, System.String hocKy, System.String bacDaoTao, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot(transactionManager , namHoc, hocKy, bacDaoTao, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot( System.String namHoc, System.String hocKy, System.String bacDaoTao, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTheoNamHocHocKyBacDaoTaoDonViLoaiGiangVienLanChot(transactionManager, start, pageLength , namHoc, hocKy, bacDaoTao, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTongHop_Cdgtvt
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHop_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHop_Cdgtvt(System.String namHoc, System.String hocKy, System.String maDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHop_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHop_Cdgtvt(transactionManager , namHoc, hocKy, maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHop_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHop_Cdgtvt( System.String namHoc, System.String hocKy, System.String maDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHop_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHop_Cdgtvt(transactionManager, start, pageLength , namHoc, hocKy, maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanCaNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanCaNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanCaNam(System.String namHoc, System.String donVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanCaNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanCaNam(transactionManager , namHoc, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanCaNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanCaNam( System.String namHoc, System.String donVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanCaNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanCaNam(transactionManager, start, pageLength , namHoc, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoKhoa_Cdgtvt
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoKhoa_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopTheoKhoa_Cdgtvt(System.String namHoc, System.String maDonVi, System.Int32 maLoaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopTheoKhoa_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopTheoKhoa_Cdgtvt(transactionManager , namHoc, maDonVi, maLoaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopTheoKhoa_Cdgtvt' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopTheoKhoa_Cdgtvt( System.String namHoc, System.String maDonVi, System.Int32 maLoaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopTheoKhoa_Cdgtvt");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopTheoKhoa_Cdgtvt(transactionManager, start, pageLength , namHoc, maDonVi, maLoaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanTienRaDeCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTienRaDeCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanTienRaDeCtim(System.String namHoc, System.String hocKy, System.String khoaHoc, System.String bacDaoTao, System.String khoaBoMon, System.Int32 maLoaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanTienRaDeCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanTienRaDeCtim(transactionManager , namHoc, hocKy, khoaHoc, bacDaoTao, khoaBoMon, maLoaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTienRaDeCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaBoMon"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanTienRaDeCtim( System.String namHoc, System.String hocKy, System.String khoaHoc, System.String bacDaoTao, System.String khoaBoMon, System.Int32 maLoaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanTienRaDeCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanTienRaDeCtim(transactionManager, start, pageLength , namHoc, hocKy, khoaHoc, bacDaoTao, khoaBoMon, maLoaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetCongTacKhac
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetCongTacKhac' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetCongTacKhac(System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetCongTacKhac");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetCongTacKhac(transactionManager , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetCongTacKhac' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetCongTacKhac( System.String namHoc, System.String hocKy, System.Int32 maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetCongTacKhac");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetCongTacKhac(transactionManager, start, pageLength , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeChiTienThuLaoGiangDay
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChiTienThuLaoGiangDay' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeChiTienThuLaoGiangDay(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChiTienThuLaoGiangDay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChiTienThuLaoGiangDay(transactionManager , namHoc, hocKy, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChiTienThuLaoGiangDay' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeChiTienThuLaoGiangDay( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChiTienThuLaoGiangDay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChiTienThuLaoGiangDay(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoTietNhapDiem
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietNhapDiem' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietNhapDiem(System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNhapDiem");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietNhapDiem(transactionManager , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietNhapDiem' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietNhapDiem( System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietNhapDiem");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietNhapDiem(transactionManager, start, pageLength , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ChotThanhToan
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChotThanhToan' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChotThanhToan(System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChotThanhToan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.ChotThanhToan(transactionManager , namHoc, hocKy, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChotThanhToan' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChotThanhToan( System.String namHoc, System.String hocKy, System.Int32 lanChot, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChotThanhToan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.ChotThanhToan(transactionManager, start, pageLength , namHoc, hocKy, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_ReportWeb
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_ReportWeb' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThuLaoTamUng_ReportWeb(System.String namHoc, System.String hocKy, System.String maQuanLyGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoTamUng_ReportWeb");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoTamUng_ReportWeb(transactionManager , namHoc, hocKy, maQuanLyGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_ReportWeb' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThuLaoTamUng_ReportWeb( System.String namHoc, System.String hocKy, System.String maQuanLyGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoTamUng_ReportWeb");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoTamUng_ReportWeb(transactionManager, start, pageLength , namHoc, hocKy, maQuanLyGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang_Bk
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang_Bk' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeThanhToanTienGiang_Bk(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeThanhToanTienGiang_Bk");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeThanhToanTienGiang_Bk(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang_Bk' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeThanhToanTienGiang_Bk( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeThanhToanTienGiang_Bk");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeThanhToanTienGiang_Bk(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="giangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc(System.String namHoc, System.String giangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc(transactionManager , namHoc, giangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="giangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc( System.String namHoc, System.String giangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanThuLaoVuotGioGiangVienCoHuuTheoNamHoc(transactionManager, start, pageLength , namHoc, giangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThanhToanTamUngDot1
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanTamUngDot1' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanTamUngDot1(System.String namHoc)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanTamUngDot1");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanTamUngDot1(transactionManager , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanTamUngDot1' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanTamUngDot1( System.String namHoc, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanTamUngDot1");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanTamUngDot1(transactionManager, start, pageLength , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ChiTietGioGiangIuh
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChiTietGioGiangIuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ChiTietGioGiangIuh(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChiTietGioGiangIuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ChiTietGioGiangIuh(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChiTietGioGiangIuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ChiTietGioGiangIuh( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChiTietGioGiangIuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ChiTietGioGiangIuh(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCHopDongDaiHanCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCHopDongDaiHanCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangGDTCHopDongDaiHanCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangGDTCHopDongDaiHanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangGDTCHopDongDaiHanCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCHopDongDaiHanCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangGDTCHopDongDaiHanCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangGDTCHopDongDaiHanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangGDTCHopDongDaiHanCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung_Bk
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung_Bk' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetLuoiVuotGioBoSung_Bk(System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetLuoiVuotGioBoSung_Bk");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetLuoiVuotGioBoSung_Bk(transactionManager , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetLuoiVuotGioBoSung_Bk' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetLuoiVuotGioBoSung_Bk( System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetLuoiVuotGioBoSung_Bk");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetLuoiVuotGioBoSung_Bk(transactionManager, start, pageLength , namHoc, lanChotHk01, lanChotHk02, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_InBangKeGioGiangTheoNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_InBangKeGioGiangTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader InBangKeGioGiangTheoNam(System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("InBangKeGioGiangTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.InBangKeGioGiangTheoNam(transactionManager , namHoc, hocKy, lanChot, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_InBangKeGioGiangTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader InBangKeGioGiangTheoNam( System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("InBangKeGioGiangTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.InBangKeGioGiangTheoNam(transactionManager, start, pageLength , namHoc, hocKy, lanChot, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoTietDoDiem
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietDoDiem' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietDoDiem(System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietDoDiem");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietDoDiem(transactionManager , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietDoDiem' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietDoDiem( System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietDoDiem");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietDoDiem(transactionManager, start, pageLength , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeLopHocPhanKhongRaiLich
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeLopHocPhanKhongRaiLich' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeLopHocPhanKhongRaiLich(System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeLopHocPhanKhongRaiLich");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeLopHocPhanKhongRaiLich(transactionManager , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeLopHocPhanKhongRaiLich' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeLopHocPhanKhongRaiLich( System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeLopHocPhanKhongRaiLich");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeLopHocPhanKhongRaiLich(transactionManager, start, pageLength , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoTietToChucThi
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietToChucThi' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietToChucThi(System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietToChucThi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietToChucThi(transactionManager , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietToChucThi' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietToChucThi( System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietToChucThi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietToChucThi(transactionManager, start, pageLength , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangTheoDot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiThongKe"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeChiTietGioGiangTheoDot(System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao, System.Int32 loaiThongKe)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChiTietGioGiangTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChiTietGioGiangTheoDot(transactionManager , namHoc, hocKy, donVi, dotThanhToan, loaiGiangVien, loaiHinhDaoTao, loaiThongKe);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiThongKe"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeChiTietGioGiangTheoDot( System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao, System.Int32 loaiThongKe, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChiTietGioGiangTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChiTietGioGiangTheoDot(transactionManager, start, pageLength , namHoc, hocKy, donVi, dotThanhToan, loaiGiangVien, loaiHinhDaoTao, loaiThongKe);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThuLaoTrenWeb_Dlu
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThuLaoTrenWeb_Dlu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.Int32</c> instance.</param>
		/// <param name="professorId"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThuLaoTrenWeb_Dlu(System.String namHoc, System.String hocKy, System.Int32 dotThanhToan, System.String professorId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThuLaoTrenWeb_Dlu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThuLaoTrenWeb_Dlu(transactionManager , namHoc, hocKy, dotThanhToan, professorId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThuLaoTrenWeb_Dlu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.Int32</c> instance.</param>
		/// <param name="professorId"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThuLaoTrenWeb_Dlu( System.String namHoc, System.String hocKy, System.Int32 dotThanhToan, System.String professorId, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThuLaoTrenWeb_Dlu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThuLaoTrenWeb_Dlu(transactionManager, start, pageLength , namHoc, hocKy, dotThanhToan, professorId);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_HuyChotThuLaoTheoDot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_HuyChotThuLaoTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HuyChotThuLaoTheoDot(System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.Int32 lanChot, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HuyChotThuLaoTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.HuyChotThuLaoTheoDot(transactionManager , namHoc, hocKy, maCauHinhChotGio, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_HuyChotThuLaoTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HuyChotThuLaoTheoDot( System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.Int32 lanChot, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HuyChotThuLaoTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.HuyChotThuLaoTheoDot(transactionManager, start, pageLength , namHoc, hocKy, maCauHinhChotGio, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThanhToanThuLaoDot2
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoDot2' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanThuLaoDot2(System.String namHoc)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanThuLaoDot2");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanThuLaoDot2(transactionManager , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanThuLaoDot2' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanThuLaoDot2( System.String namHoc, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanThuLaoDot2");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanThuLaoDot2(transactionManager, start, pageLength , namHoc);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_HuyChotThuLaoKhoaDonVi
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_HuyChotThuLaoKhoaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HuyChotThuLaoKhoaDonVi(System.String namHoc, System.String hocKy, System.String khoaDonVi, System.Int32 lanChot, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HuyChotThuLaoKhoaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.HuyChotThuLaoKhoaDonVi(transactionManager , namHoc, hocKy, khoaDonVi, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_HuyChotThuLaoKhoaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void HuyChotThuLaoKhoaDonVi( System.String namHoc, System.String hocKy, System.String khoaDonVi, System.Int32 lanChot, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("HuyChotThuLaoKhoaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.HuyChotThuLaoKhoaDonVi(transactionManager, start, pageLength , namHoc, hocKy, khoaDonVi, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThanhToanGioVuotDinhMucVhu
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanGioVuotDinhMucVhu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanGioVuotDinhMucVhu(System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanGioVuotDinhMucVhu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanGioVuotDinhMucVhu(transactionManager , namHoc, lanChotHk01, lanChotHk02);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanGioVuotDinhMucVhu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanGioVuotDinhMucVhu( System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanGioVuotDinhMucVhu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanGioVuotDinhMucVhu(transactionManager, start, pageLength , namHoc, lanChotHk01, lanChotHk02);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_Import
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_Import' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Import(System.String xmlData, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Import");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.Import(transactionManager , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_Import' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void Import( System.String xmlData, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Import");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.Import(transactionManager, start, pageLength , xmlData, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThanhToanPhuCapGdtc
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanPhuCapGdtc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanPhuCapGdtc(System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanPhuCapGdtc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanPhuCapGdtc(transactionManager , namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThanhToanPhuCapGdtc' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThanhToanPhuCapGdtc( System.String namHoc, System.String hocKy, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThanhToanPhuCapGdtc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThanhToanPhuCapGdtc(transactionManager, start, pageLength , namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangTongHopGioGiangToanTruongTheoNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangToanTruongTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangTongHopGioGiangToanTruongTheoNam(System.String namHoc, System.String loaiGiangVien, System.String loaiHinhDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangTongHopGioGiangToanTruongTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangTongHopGioGiangToanTruongTheoNam(transactionManager , namHoc, loaiGiangVien, loaiHinhDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangToanTruongTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangTongHopGioGiangToanTruongTheoNam( System.String namHoc, System.String loaiGiangVien, System.String loaiHinhDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangTongHopGioGiangToanTruongTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangTongHopGioGiangToanTruongTheoNam(transactionManager, start, pageLength , namHoc, loaiGiangVien, loaiHinhDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCCBKGHDDHCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCCBKGHDDHCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangGDTCCBKGHDDHCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangGDTCCBKGHDDHCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangGDTCCBKGHDDHCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCCBKGHDDHCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangGDTCCBKGHDDHCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangGDTCCBKGHDDHCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangGDTCCBKGHDDHCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHoc
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHoc' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="loaiKhoiLuong"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk03"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByMaGiangVienNamHoc(System.String maQuanLy, System.String namHoc, System.String loaiKhoiLuong, System.String lanChotHk01, System.String lanChotHk02, System.String lanChotHk03)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaGiangVienNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetByMaGiangVienNamHoc(transactionManager , maQuanLy, namHoc, loaiKhoiLuong, lanChotHk01, lanChotHk02, lanChotHk03);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetByMaGiangVienNamHoc' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="loaiKhoiLuong"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk03"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByMaGiangVienNamHoc( System.String maQuanLy, System.String namHoc, System.String loaiKhoiLuong, System.String lanChotHk01, System.String lanChotHk02, System.String lanChotHk03, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByMaGiangVienNamHoc");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetByMaGiangVienNamHoc(transactionManager, start, pageLength , maQuanLy, namHoc, loaiKhoiLuong, lanChotHk01, lanChotHk02, lanChotHk03);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoTietCoiThi
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietCoiThi' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietCoiThi(System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietCoiThi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietCoiThi(transactionManager , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietCoiThi' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietCoiThi( System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietCoiThi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietCoiThi(transactionManager, start, pageLength , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetHopDongDaiHanCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetHopDongDaiHanCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangLyThuyetHopDongDaiHanCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangLyThuyetHopDongDaiHanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangLyThuyetHopDongDaiHanCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangLyThuyetHopDongDaiHanCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangLyThuyetHopDongDaiHanCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangLyThuyetHopDongDaiHanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangLyThuyetHopDongDaiHanCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_KeToanXacNhanThanhToan
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_KeToanXacNhanThanhToan' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="dotChiTra"> A <c>System.String</c> instance.</param>
		/// <param name="ngayChiTra"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void KeToanXacNhanThanhToan(System.String xmlData, System.String dotChiTra, System.String ngayChiTra, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KeToanXacNhanThanhToan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.KeToanXacNhanThanhToan(transactionManager , xmlData, dotChiTra, ngayChiTra, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_KeToanXacNhanThanhToan' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="dotChiTra"> A <c>System.String</c> instance.</param>
		/// <param name="ngayChiTra"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void KeToanXacNhanThanhToan( System.String xmlData, System.String dotChiTra, System.String ngayChiTra, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KeToanXacNhanThanhToan");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.KeToanXacNhanThanhToan(transactionManager, start, pageLength , xmlData, dotChiTra, ngayChiTra, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_Web
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_Web' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThuLaoTamUng_Web(System.String namHoc, System.String hocKy, System.String maQuanLyGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoTamUng_Web");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoTamUng_Web(transactionManager , namHoc, hocKy, maQuanLyGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoTamUng_Web' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maQuanLyGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThuLaoTamUng_Web( System.String namHoc, System.String hocKy, System.String maQuanLyGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoTamUng_Web");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoTamUng_Web(transactionManager, start, pageLength , namHoc, hocKy, maQuanLyGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTongHop_Act
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHop_Act' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHop_Act(System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHop_Act");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHop_Act(transactionManager , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHop_Act' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHop_Act( System.String namHoc, System.String hocKy, System.Int32 maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHop_Act");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHop_Act(transactionManager, start, pageLength , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_KetQuaGiangDayTheoNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_KetQuaGiangDayTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk03"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader KetQuaGiangDayTheoNam(System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.Int32 lanChotHk03, System.String khoaDonVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KetQuaGiangDayTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.KetQuaGiangDayTheoNam(transactionManager , namHoc, lanChotHk01, lanChotHk02, lanChotHk03, khoaDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_KetQuaGiangDayTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk03"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader KetQuaGiangDayTheoNam( System.String namHoc, System.Int32 lanChotHk01, System.Int32 lanChotHk02, System.Int32 lanChotHk03, System.String khoaDonVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("KetQuaGiangDayTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.KetQuaGiangDayTheoNam(transactionManager, start, pageLength , namHoc, lanChotHk01, lanChotHk02, lanChotHk03, khoaDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCGiangVienThinhGiangCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangGDTCGiangVienThinhGiangCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangGDTCGiangVienThinhGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangGDTCGiangVienThinhGiangCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangGDTCGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangGDTCGiangVienThinhGiangCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangGDTCGiangVienThinhGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangGDTCGiangVienThinhGiangCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeSoLuongGiangVienTheoHe
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeSoLuongGiangVienTheoHe' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeSoLuongGiangVienTheoHe(System.DateTime ngay)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeSoLuongGiangVienTheoHe");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeSoLuongGiangVienTheoHe(transactionManager , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeSoLuongGiangVienTheoHe' stored procedure. 
		/// </summary>
		/// <param name="ngay"> A <c>System.DateTime</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeSoLuongGiangVienTheoHe( System.DateTime ngay, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeSoLuongGiangVienTheoHe");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeSoLuongGiangVienTheoHe(transactionManager, start, pageLength , ngay);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoTietChamBai
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietChamBai' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietChamBai(System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietChamBai");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietChamBai(transactionManager , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoTietChamBai' stored procedure. 
		/// </summary>
		/// <param name="maQuanLy"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaToChuc"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanThi"> A <c>System.Int32</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetSoTietChamBai( System.String maQuanLy, System.String maKhoaToChuc, System.String namHoc, System.String hocKy, System.Int32 lanThi, System.String heDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoTietChamBai");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetSoTietChamBai(transactionManager, start, pageLength , maQuanLy, maKhoaToChuc, namHoc, hocKy, lanThi, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao(System.String namHoc, System.String hocKy, System.String bacDaoTao, System.String donVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao(transactionManager , namHoc, hocKy, bacDaoTao, donVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao( System.String namHoc, System.String hocKy, System.String bacDaoTao, System.String donVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetThuLaoThinhGiangNamHocHocKyDonViBacDaoTao(transactionManager, start, pageLength , namHoc, hocKy, bacDaoTao, donVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetKhoiLuongChiTietHbu
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetKhoiLuongChiTietHbu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="listMaGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetKhoiLuongChiTietHbu(System.String namHoc, System.String hocKy, System.String listMaGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetKhoiLuongChiTietHbu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetKhoiLuongChiTietHbu(transactionManager , namHoc, hocKy, listMaGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetKhoiLuongChiTietHbu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="listMaGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetKhoiLuongChiTietHbu( System.String namHoc, System.String hocKy, System.String listMaGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetKhoiLuongChiTietHbu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetKhoiLuongChiTietHbu(transactionManager, start, pageLength , namHoc, hocKy, listMaGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangTongHopGioGiangTheoKhoa
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangTongHopGioGiangTheoKhoa(System.String namHoc, System.String hocKy, System.String donVi, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangTongHopGioGiangTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangTongHopGioGiangTheoKhoa(transactionManager , namHoc, hocKy, donVi, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangTongHopGioGiangTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangTongHopGioGiangTheoKhoa( System.String namHoc, System.String hocKy, System.String donVi, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangTongHopGioGiangTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangTongHopGioGiangTheoKhoa(transactionManager, start, pageLength , namHoc, hocKy, donVi, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetNhiemVuGiangDay
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetNhiemVuGiangDay' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetNhiemVuGiangDay(System.String namHoc, System.String hocKy, System.Int32 maGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNhiemVuGiangDay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetNhiemVuGiangDay(transactionManager , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetNhiemVuGiangDay' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maGiangVien"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetNhiemVuGiangDay( System.String namHoc, System.String hocKy, System.Int32 maGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetNhiemVuGiangDay");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetNhiemVuGiangDay(transactionManager, start, pageLength , namHoc, hocKy, maGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopThanhToanThuLaoCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopThanhToanThuLaoCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopThanhToanThuLaoCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopThanhToanThuLaoCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopThanhToanThuLaoCtim(transactionManager , namHoc, hocKy, maDonVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopThanhToanThuLaoCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopThanhToanThuLaoCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopThanhToanThuLaoCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopThanhToanThuLaoCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeKhoiLuongGiangDayTheoBoMon
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeKhoiLuongGiangDayTheoBoMon' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="boMon"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeKhoiLuongGiangDayTheoBoMon(System.String namHoc, System.String hocKy, System.String boMon, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeKhoiLuongGiangDayTheoBoMon");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeKhoiLuongGiangDayTheoBoMon(transactionManager , namHoc, hocKy, boMon, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeKhoiLuongGiangDayTheoBoMon' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="boMon"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeKhoiLuongGiangDayTheoBoMon( System.String namHoc, System.String hocKy, System.String boMon, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeKhoiLuongGiangDayTheoBoMon");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeKhoiLuongGiangDayTheoBoMon(transactionManager, start, pageLength , namHoc, hocKy, boMon, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.String maLoaiGiangVien, System.String loaiHocPhan, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, maLoaiGiangVien, loaiHocPhan, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maLoaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHocPhan"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.String maLoaiGiangVien, System.String loaiHocPhan, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, maLoaiGiangVien, loaiHocPhan, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTheoNamHocHocKyDonViLoaiGiangVienLanChot(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoLanChotTheoKhoa
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoLanChotTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoLanChotTheoKhoa(System.String namHoc, System.String hocKy, System.String khoaDonVi, ref System.Int32 ketQua)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoLanChotTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.GetSoLanChotTheoKhoa(transactionManager , namHoc, hocKy, khoaDonVi, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoLanChotTheoKhoa' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoLanChotTheoKhoa( System.String namHoc, System.String hocKy, System.String khoaDonVi, ref System.Int32 ketQua, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoLanChotTheoKhoa");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.GetSoLanChotTheoKhoa(transactionManager, start, pageLength , namHoc, hocKy, khoaDonVi, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangKeKetQuaGiangDayTheoNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeKetQuaGiangDayTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="listHocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeKetQuaGiangDayTheoNam(System.String namHoc, System.String listHocKy, System.String khoaDonVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeKetQuaGiangDayTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeKetQuaGiangDayTheoNam(transactionManager , namHoc, listHocKy, khoaDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeKetQuaGiangDayTheoNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="listHocKy"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeKetQuaGiangDayTheoNam( System.String namHoc, System.String listHocKy, System.String khoaDonVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeKetQuaGiangDayTheoNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeKetQuaGiangDayTheoNam(transactionManager, start, pageLength , namHoc, listHocKy, khoaDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="dotChiTra"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeThanhToanTienGiang(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, System.String dotChiTra)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeThanhToanTienGiang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeThanhToanTienGiang(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot, dotChiTra);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeThanhToanTienGiang' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="dotChiTra"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeThanhToanTienGiang( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, System.String dotChiTra, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeThanhToanTienGiang");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeThanhToanTienGiang(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot, dotChiTra);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetSoLanChotTheoDot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoLanChotTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoLanChotTheoDot(System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.String bacDaoTao, System.String loaiHinhDaoTao, ref System.Int32 ketQua)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoLanChotTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.GetSoLanChotTheoDot(transactionManager , namHoc, hocKy, maCauHinhChotGio, bacDaoTao, loaiHinhDaoTao, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetSoLanChotTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
			/// <param name="ketQua"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void GetSoLanChotTheoDot( System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.String bacDaoTao, System.String loaiHinhDaoTao, ref System.Int32 ketQua, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetSoLanChotTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.GetSoLanChotTheoDot(transactionManager, start, pageLength , namHoc, hocKy, maCauHinhChotGio, bacDaoTao, loaiHinhDaoTao, ref ketQua);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanDot4
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanDot4' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanDot4(System.String namHoc, System.String donVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanDot4");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanDot4(transactionManager , namHoc, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanDot4' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanDot4( System.String namHoc, System.String donVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanDot4");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanDot4(transactionManager, start, pageLength , namHoc, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoNamLaw
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoNamLaw' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanTheoNamLaw(System.String namHoc, System.String lanChotHk01, System.String lanChotHk02, System.String bacDaoTao, System.String loaiHinhDaoTao, System.String khoaDonVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanTheoNamLaw");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanTheoNamLaw(transactionManager , namHoc, lanChotHk01, lanChotHk02, bacDaoTao, loaiHinhDaoTao, khoaDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeThanhToanTheoNamLaw' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeThanhToanTheoNamLaw( System.String namHoc, System.String lanChotHk01, System.String lanChotHk02, System.String bacDaoTao, System.String loaiHinhDaoTao, System.String khoaDonVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeThanhToanTheoNamLaw");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeThanhToanTheoNamLaw(transactionManager, start, pageLength , namHoc, lanChotHk01, lanChotHk02, bacDaoTao, loaiHinhDaoTao, khoaDonVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeGioNghiaVuCaNam
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGioNghiaVuCaNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioNghiaVuCaNam(System.String namHoc, System.String donVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioNghiaVuCaNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGioNghiaVuCaNam(transactionManager , namHoc, donVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGioNghiaVuCaNam' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioNghiaVuCaNam( System.String namHoc, System.String donVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioNghiaVuCaNam");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGioNghiaVuCaNam(transactionManager, start, pageLength , namHoc, donVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_DanhSachChiTienCanBoCoHuuVuotGio
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_DanhSachChiTienCanBoCoHuuVuotGio' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DanhSachChiTienCanBoCoHuuVuotGio(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DanhSachChiTienCanBoCoHuuVuotGio");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DanhSachChiTienCanBoCoHuuVuotGio(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_DanhSachChiTienCanBoCoHuuVuotGio' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DanhSachChiTienCanBoCoHuuVuotGio( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DanhSachChiTienCanBoCoHuuVuotGio");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DanhSachChiTienCanBoCoHuuVuotGio(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienThinhGiangCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangTttnGiangVienThinhGiangCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangTttnGiangVienThinhGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangTttnGiangVienThinhGiangCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienThinhGiangCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangTttnGiangVienThinhGiangCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangTttnGiangVienThinhGiangCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangTttnGiangVienThinhGiangCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_TongHopGioGiangIuh
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopGioGiangIuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopGioGiangIuh(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopGioGiangIuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopGioGiangIuh(transactionManager , namHoc, hocKy, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopGioGiangIuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopGioGiangIuh( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopGioGiangIuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopGioGiangIuh(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ChotThanhToanTheoDot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChotThanhToanTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChotThanhToanTheoDot(System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.String bacDaoTao, System.String loaiHinhDaoTao, System.Int32 lanChot, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChotThanhToanTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.ChotThanhToanTheoDot(transactionManager , namHoc, hocKy, maCauHinhChotGio, bacDaoTao, loaiHinhDaoTao, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ChotThanhToanTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maCauHinhChotGio"> A <c>System.Int32</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ChotThanhToanTheoDot( System.String namHoc, System.String hocKy, System.Int32 maCauHinhChotGio, System.String bacDaoTao, System.String loaiHinhDaoTao, System.Int32 lanChot, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ChotThanhToanTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.ChotThanhToanTheoDot(transactionManager, start, pageLength , namHoc, hocKy, maCauHinhChotGio, bacDaoTao, loaiHinhDaoTao, lanChot, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_DsThanhToanThuLaoBoSung
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_DsThanhToanThuLaoBoSung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DsThanhToanThuLaoBoSung(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DsThanhToanThuLaoBoSung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DsThanhToanThuLaoBoSung(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_DsThanhToanThuLaoBoSung' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader DsThanhToanThuLaoBoSung( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DsThanhToanThuLaoBoSung");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DsThanhToanThuLaoBoSung(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoLop_Act
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoLop_Act' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioGiangTheoLop_Act(System.String namHoc, System.String hocKy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioGiangTheoLop_Act");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGioGiangTheoLop_Act(transactionManager , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGioGiangTheoLop_Act' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioGiangTheoLop_Act( System.String namHoc, System.String hocKy, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioGiangTheoLop_Act");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGioGiangTheoLop_Act(transactionManager, start, pageLength , namHoc, hocKy);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim(System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim(transactionManager , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="maBacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="maKhoaHoc"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim( System.String namHoc, System.String hocKy, System.String maDonVi, System.String maBacDaoTao, System.String maKhoaHoc, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTienGiangTttnGiangVienHopDongDaiHanCtim(transactionManager, start, pageLength , namHoc, hocKy, maDonVi, maBacDaoTao, maKhoaHoc, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_LuuNgayChiTra
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuNgayChiTra' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayChiTra"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuNgayChiTra(System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String ngayChiTra, ref System.Int32 reVal)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuNgayChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuNgayChiTra(transactionManager , namHoc, hocKy, lanChot, ngayChiTra, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_LuuNgayChiTra' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="ngayChiTra"> A <c>System.String</c> instance.</param>
			/// <param name="reVal"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void LuuNgayChiTra( System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String ngayChiTra, ref System.Int32 reVal, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("LuuNgayChiTra");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.LuuNgayChiTra(transactionManager, start, pageLength , namHoc, hocKy, lanChot, ngayChiTra, ref reVal);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangBuh
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangBuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeChiTietGioGiangBuh(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChiTietGioGiangBuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChiTietGioGiangBuh(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChiTietGioGiangBuh' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeChiTietGioGiangBuh( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChiTietGioGiangBuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChiTietGioGiangBuh(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopGioGiangTheoDot
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopGioGiangTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopGioGiangTheoDot(System.String namHoc, System.String hocKy, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopGioGiangTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopGioGiangTheoDot(transactionManager , namHoc, hocKy, dotThanhToan, loaiGiangVien, loaiHinhDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopGioGiangTheoDot' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopGioGiangTheoDot( System.String namHoc, System.String hocKy, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopGioGiangTheoDot");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopGioGiangTheoDot(transactionManager, start, pageLength , namHoc, hocKy, dotThanhToan, loaiGiangVien, loaiHinhDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeGioCoiThiChamBaiRaDeTheoHocKy
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGioCoiThiChamBaiRaDeTheoHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioCoiThiChamBaiRaDeTheoHocKy(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.String heDaoTao)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioCoiThiChamBaiRaDeTheoHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGioCoiThiChamBaiRaDeTheoHocKy(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGioCoiThiChamBaiRaDeTheoHocKy' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="heDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGioCoiThiChamBaiRaDeTheoHocKy( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.String heDaoTao, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGioCoiThiChamBaiRaDeTheoHocKy");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGioCoiThiChamBaiRaDeTheoHocKy(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, heDaoTao);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_TongHopThanhToanThuLaoVuotGioGiangVienCoHuu
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopThanhToanThuLaoVuotGioGiangVienCoHuu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopThanhToanThuLaoVuotGioGiangVienCoHuu(System.String namHoc, System.String bacDaoTao, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopThanhToanThuLaoVuotGioGiangVienCoHuu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopThanhToanThuLaoVuotGioGiangVienCoHuu(transactionManager , namHoc, bacDaoTao, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopThanhToanThuLaoVuotGioGiangVienCoHuu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="bacDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopThanhToanThuLaoVuotGioGiangVienCoHuu( System.String namHoc, System.String bacDaoTao, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopThanhToanThuLaoVuotGioGiangVienCoHuu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopThanhToanThuLaoVuotGioGiangVienCoHuu(transactionManager, start, pageLength , namHoc, bacDaoTao, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_BangKeVuotGioGiangBuh
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeVuotGioGiangBuh' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeVuotGioGiangBuh(System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeVuotGioGiangBuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeVuotGioGiangBuh(transactionManager , xmlData, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_BangKeVuotGioGiangBuh' stored procedure. 
		/// </summary>
		/// <param name="xmlData"> A <c>System.String</c> instance.</param>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader BangKeVuotGioGiangBuh( System.String xmlData, System.String namHoc, System.String hocKy, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("BangKeVuotGioGiangBuh");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.BangKeVuotGioGiangBuh(transactionManager, start, pageLength , xmlData, namHoc, hocKy, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeGiangVienThieuTiet
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGiangVienThieuTiet' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGiangVienThieuTiet(System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGiangVienThieuTiet");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGiangVienThieuTiet(transactionManager , namHoc, donVi, loaiGiangVien, lanChotHk01, lanChotHk02);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeGiangVienThieuTiet' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChotHk01"> A <c>System.Int32</c> instance.</param>
		/// <param name="lanChotHk02"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeGiangVienThieuTiet( System.String namHoc, System.String donVi, System.String loaiGiangVien, System.Int32 lanChotHk01, System.Int32 lanChotHk02, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeGiangVienThieuTiet");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeGiangVienThieuTiet(transactionManager, start, pageLength , namHoc, donVi, loaiGiangVien, lanChotHk01, lanChotHk02);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeTongHopVhu
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopVhu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopVhu(System.String namHoc, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopVhu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopVhu(transactionManager , namHoc, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeTongHopVhu' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader ThongKeTongHopVhu( System.String namHoc, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeTongHopVhu");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeTongHopVhu(transactionManager, start, pageLength , namHoc, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_ThongKeChung_DLU
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChung_DLU' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiThongKe"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ThongKeChung_DLU(System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao, System.Int32 loaiThongKe)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChung_DLU");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChung_DLU(transactionManager , namHoc, hocKy, donVi, dotThanhToan, loaiGiangVien, loaiHinhDaoTao, loaiThongKe);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_ThongKeChung_DLU' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="dotThanhToan"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="loaiHinhDaoTao"> A <c>System.String</c> instance.</param>
		/// <param name="loaiThongKe"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		public virtual  void ThongKeChung_DLU( System.String namHoc, System.String hocKy, System.String donVi, System.String dotThanhToan, System.String loaiGiangVien, System.String loaiHinhDaoTao, System.Int32 loaiThongKe, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("ThongKeChung_DLU");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
                
				dataProvider.KetQuaThanhToanThuLaoProvider.ThongKeChung_DLU(transactionManager, start, pageLength , namHoc, hocKy, donVi, dotThanhToan, loaiGiangVien, loaiHinhDaoTao, loaiThongKe);
	        
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return ;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetByNamHocHocKyLanChotKhoaDonVi
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetByNamHocHocKyLanChotKhoaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByNamHocHocKyLanChotKhoaDonVi(System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByNamHocHocKyLanChotKhoaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetByNamHocHocKyLanChotKhoaDonVi(transactionManager , namHoc, hocKy, lanChot, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetByNamHocHocKyLanChotKhoaDonVi' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="khoaDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetByNamHocHocKyLanChotKhoaDonVi( System.String namHoc, System.String hocKy, System.Int32 lanChot, System.String khoaDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByNamHocHocKyLanChotKhoaDonVi");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetByNamHocHocKyLanChotKhoaDonVi(transactionManager, start, pageLength , namHoc, hocKy, lanChot, khoaDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_GetGiangVienTamUng
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetGiangVienTamUng' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetGiangVienTamUng(System.String namHoc, System.String maDonVi)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetGiangVienTamUng");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetGiangVienTamUng(transactionManager , namHoc, maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_GetGiangVienTamUng' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="maDonVi"> A <c>System.String</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader GetGiangVienTamUng( System.String namHoc, System.String maDonVi, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetGiangVienTamUng");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.GetGiangVienTamUng(transactionManager, start, pageLength , namHoc, maDonVi);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		
		#region cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan_HBU
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan_HBU' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopKetQuaThanhToan_HBU(System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopKetQuaThanhToan_HBU");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopKetQuaThanhToan_HBU(transactionManager , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;		
		}
	
		/// <summary>
		///	This method wrap the 'cust_KetQuaThanhToanThuLao_TongHopKetQuaThanhToan_HBU' stored procedure. 
		/// </summary>
		/// <param name="namHoc"> A <c>System.String</c> instance.</param>
		/// <param name="hocKy"> A <c>System.String</c> instance.</param>
		/// <param name="donVi"> A <c>System.String</c> instance.</param>
		/// <param name="loaiGiangVien"> A <c>System.String</c> instance.</param>
		/// <param name="lanChot"> A <c>System.Int32</c> instance.</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <remark>This method is generate from a stored procedure.</remark>
		/// <returns>A <see cref="IDataReader"/> instance.</returns>
		public virtual  IDataReader TongHopKetQuaThanhToan_HBU( System.String namHoc, System.String hocKy, System.String donVi, System.String loaiGiangVien, System.Int32 lanChot, int start, int pageLength)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("TongHopKetQuaThanhToan_HBU");
			#endregion Security check
		
			#region Initialisation
			bool isBorrowedTransaction = false;
			IDataReader result = null; 
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
				
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
                
				result = dataProvider.KetQuaThanhToanThuLaoProvider.TongHopKetQuaThanhToan_HBU(transactionManager, start, pageLength , namHoc, hocKy, donVi, loaiGiangVien, lanChot);
	        
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
		}
		#endregion 
		#endregion
		
		#region DeepLoad
		#region Deep Load By Entity Keys
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="KetQuaThanhToanThuLao"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_id"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">KetQuaThanhToanThuLao Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="KetQuaThanhToanThuLao"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual KetQuaThanhToanThuLao DeepLoadById(System.Int32 _id, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadById");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			KetQuaThanhToanThuLao entity = GetById(_id);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		#endregion 

		#region DeepLoad By Entity
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <param name="entity">KetQuaThanhToanThuLao Object</param>
		/// <remarks>
		/// <seealso cref="DeepLoad(KetQuaThanhToanThuLao)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(KetQuaThanhToanThuLao entity)
		{
			DeepLoad(entity, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(KetQuaThanhToanThuLao)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entity">KetQuaThanhToanThuLao Object</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(KetQuaThanhToanThuLao entity, bool deep)
		{
			DeepLoad(entity, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
			
		/// <summary>
		/// public virtualDeep Loads the <see cref="IEntity"/> object with criteria based of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
		/// </remarks>
		/// <param name="entity">The <see cref="KetQuaThanhToanThuLao"/> object to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
		/// If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">KetQuaThanhToanThuLao Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(KetQuaThanhToanThuLao entity, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.KetQuaThanhToanThuLaoProvider.DeepLoad(transactionManager, entity, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;
		}
		#endregion
		
		#region DeepLoad By Entity Collection
		/// <summary>
		/// Deep Loads the <see cref="TList{KetQuaThanhToanThuLao}" /> object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(KetQuaThanhToanThuLao)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{KetQuaThanhToanThuLao}" /> Object to deep loads.</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<KetQuaThanhToanThuLao> entityCollection)
		{
			DeepLoad(entityCollection, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Loads the <see cref="TList{KetQuaThanhToanThuLao}" /> object.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(KetQuaThanhToanThuLao)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{KetQuaThanhToanThuLao}" /> Object to deep loads.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<KetQuaThanhToanThuLao> entityCollection, bool deep)
		{
			DeepLoad(entityCollection, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}	

		/// <summary>
		/// Deep Loads the entire <see cref="TList{KetQuaThanhToanThuLao}" /> object with criteria based of the child 
		/// property collections only N Levels Deep based on the DeepLoadType.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
		/// </remarks>
		/// <param name="entityCollection">The <see cref="TList{KetQuaThanhToanThuLao}" /> instance to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType"><see cref="DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
		///		Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
		///	</param>
		/// <param name="childTypes"><see cref="KetQuaThanhToanThuLao"/> Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public override void DeepLoad(TList<KetQuaThanhToanThuLao> entityCollection, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{	
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.KetQuaThanhToanThuLaoProvider.DeepLoad(transactionManager, entityCollection, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;		
		}
		#endregion

		#endregion
		
		#region DeepSave
		
		#region DeepSave By Entity
		/// <summary>
		/// public virtualDeep Saves the <see cref="KetQuaThanhToanThuLao"/> object with all of the child
		/// property collections N Levels Deep.
		/// </summary>
		/// <param name="entity">KetQuaThanhToanThuLao Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(KetQuaThanhToanThuLao entity)
		{
			return DeepSave(entity, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Saves the entire object graph of the KetQuaThanhToanThuLao object with criteria based of the child 
		/// Type property array and DeepSaveType.
		/// </summary>
		/// <param name="entity">KetQuaThanhToanThuLao Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes"><c>KetQuaThanhToanThuLao</c> property Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(KetQuaThanhToanThuLao entity, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entity.IsValid)
			{
				throw new EntityNotValidException(entity, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				
				result = dataProvider.KetQuaThanhToanThuLaoProvider.DeepSave(transactionManager, entity, deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;		
		}
		#endregion
		
		#region DeepSave By Entity Collection
		/// <summary>
		/// Deep Save the entire <see cref="TList{KetQuaThanhToanThuLao}" /> object with all of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection">TList{KetQuaThanhToanThuLao} Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual bool DeepSave(TList<KetQuaThanhToanThuLao> entityCollection)
		{
			return DeepSave(entityCollection, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Save the entire object graph of the <see cref="TList{KetQuaThanhToanThuLao}" /> object with criteria based of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection"><see cref="TList{KetQuaThanhToanThuLao}" /> Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes">KetQuaThanhToanThuLao Property Collection Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(TList<KetQuaThanhToanThuLao> entityCollection, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{	
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.KetQuaThanhToanThuLaoProvider.DeepSave(transactionManager, entityCollection,  deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;
		}
		#endregion

		#endregion 

		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace





