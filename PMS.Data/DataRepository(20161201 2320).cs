#region Using directives

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Configuration.Provider;
using System.Web.Configuration;
using System.Web;
using PMS.Entities;
using PMS.Data;
using PMS.Data.Bases;

#endregion

namespace PMS.Data
{
	/// <summary>
	/// This class represents the Data source repository and gives access to all the underlying providers.
	/// </summary>
	[CLSCompliant(true)]
	public sealed class DataRepository 
	{
		private static volatile NetTiersProvider _provider = null;
        private static volatile NetTiersProviderCollection _providers = null;
		private static volatile NetTiersServiceSection _section = null;
		private static volatile Configuration _config = null;
        
        private static object SyncRoot = new object();
				
		private DataRepository()
		{
		}
		
		#region Public LoadProvider
		/// <summary>
        /// Enables the DataRepository to programatically create and 
        /// pass in a <c>NetTiersProvider</c> during runtime.
        /// </summary>
        /// <param name="provider">An instatiated NetTiersProvider.</param>
        public static void LoadProvider(NetTiersProvider provider)
        {
			LoadProvider(provider, false);
        }
		
		/// <summary>
        /// Enables the DataRepository to programatically create and 
        /// pass in a <c>NetTiersProvider</c> during runtime.
        /// </summary>
        /// <param name="provider">An instatiated NetTiersProvider.</param>
        /// <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
		public static void LoadProvider(NetTiersProvider provider, bool setAsDefault)
        {
            if (provider == null)
                throw new ArgumentNullException("provider");

            if (_providers == null)
			{
				lock(SyncRoot)
				{
            		if (_providers == null)
						_providers = new NetTiersProviderCollection();
				}
			}
			
            if (_providers[provider.Name] == null)
            {
                lock (_providers.SyncRoot)
                {
                    _providers.Add(provider);
                }
            }

            if (_provider == null || setAsDefault)
            {
                lock (SyncRoot)
                {
                    if(_provider == null || setAsDefault)
                         _provider = provider;
                }
            }
        }
		#endregion 
		
		///<summary>
		/// Configuration based provider loading, will load the providers on first call.
		///</summary>
		private static void LoadProviders()
        {
            // Avoid claiming lock if providers are already loaded
            if (_provider == null)
            {
                lock (SyncRoot)
                {
                    // Do this again to make sure _provider is still null
                    if (_provider == null)
                    {
                        // Load registered providers and point _provider to the default provider
                        _providers = new NetTiersProviderCollection();

                        ProvidersHelper.InstantiateProviders(NetTiersSection.Providers, _providers, typeof(NetTiersProvider));
						_provider = _providers[NetTiersSection.DefaultProvider];

                        if (_provider == null)
                        {
                            throw new ProviderException("Unable to load default NetTiersProvider");
                        }
                    }
                }
            }
        }

		/// <summary>
        /// Gets the provider.
        /// </summary>
        /// <value>The provider.</value>
        public static NetTiersProvider Provider
        {
            get { LoadProviders(); return _provider; }
        }

		/// <summary>
        /// Gets the provider collection.
        /// </summary>
        /// <value>The providers.</value>
        public static NetTiersProviderCollection Providers
        {
            get { LoadProviders(); return _providers; }
        }
		
		/// <summary>
		/// Creates a new <see cref="TransactionManager"/> instance from the current datasource.
		/// </summary>
		/// <returns></returns>
		public TransactionManager CreateTransaction()
		{
			return _provider.CreateTransaction();
		}

		#region Configuration

		/// <summary>
		/// Gets a reference to the configured NetTiersServiceSection object.
		/// </summary>
		public static NetTiersServiceSection NetTiersSection
		{
			get
			{
				// Try to get a reference to the default <netTiersService> section
				_section = WebConfigurationManager.GetSection("netTiersService") as NetTiersServiceSection;

				if ( _section == null )
				{
					// otherwise look for section based on the assembly name
					_section = WebConfigurationManager.GetSection("PMS.Data") as NetTiersServiceSection;
				}

				#region Design-Time Support

				if ( _section == null )
				{
					// lastly, try to find the specific NetTiersServiceSection for this assembly
					foreach ( ConfigurationSection temp in Configuration.Sections )
					{
						if ( temp is NetTiersServiceSection )
						{
							_section = temp as NetTiersServiceSection;
							break;
						}
					}
				}

				#endregion Design-Time Support
				
				if ( _section == null )
				{
					throw new ProviderException("Unable to load NetTiersServiceSection");
				}

				return _section;
			}
		}

		#region Design-Time Support

		/// <summary>
		/// Gets a reference to the application configuration object.
		/// </summary>
		public static Configuration Configuration
		{
			get
			{
				if ( _config == null )
				{
					// load specific config file
					if ( HttpContext.Current != null )
					{
						_config = WebConfigurationManager.OpenWebConfiguration("~");
					}
					else
					{
						String configFile = AppDomain.CurrentDomain.SetupInformation.ConfigurationFile.Replace(".config", "").Replace(".temp", "");

						// check for design mode
						if ( configFile.ToLower().Contains("devenv.exe") )
						{
							_config = GetDesignTimeConfig();
						}
						else
						{
							_config = ConfigurationManager.OpenExeConfiguration(configFile);
						}
					}
				}

				return _config;
			}
		}

		private static Configuration GetDesignTimeConfig()
		{
			ExeConfigurationFileMap configMap = null;
			Configuration config = null;
			String path = null;

			// Get an instance of the currently running Visual Studio IDE.
			EnvDTE80.DTE2 dte = (EnvDTE80.DTE2) System.Runtime.InteropServices.Marshal.GetActiveObject("VisualStudio.DTE.12.0");
			
			if ( dte != null )
			{
				dte.SuppressUI = true;

				EnvDTE.ProjectItem item = dte.Solution.FindProjectItem("web.config");
				if ( item != null )
				{
					if (!item.ContainingProject.FullName.ToLower().StartsWith("http:"))
               {
                  System.IO.FileInfo info = new System.IO.FileInfo(item.ContainingProject.FullName);
                  path = String.Format("{0}\\{1}", info.Directory.FullName, item.Name);
                  configMap = new ExeConfigurationFileMap();
                  configMap.ExeConfigFilename = path;
               }
               else
               {
                  configMap = new ExeConfigurationFileMap();
                  configMap.ExeConfigFilename = item.get_FileNames(0);
               }}

				/*
				Array projects = (Array) dte2.ActiveSolutionProjects;
				EnvDTE.Project project = (EnvDTE.Project) projects.GetValue(0);
				System.IO.FileInfo info;

				foreach ( EnvDTE.ProjectItem item in project.ProjectItems )
				{
					if ( String.Compare(item.Name, "web.config", true) == 0 )
					{
						info = new System.IO.FileInfo(project.FullName);
						path = String.Format("{0}\\{1}", info.Directory.FullName, item.Name);
						configMap = new ExeConfigurationFileMap();
						configMap.ExeConfigFilename = path;
						break;
					}
				}
				*/
			}

			config = ConfigurationManager.OpenMappedExeConfiguration(configMap, ConfigurationUserLevel.None);
			return config;
		}

		#endregion Design-Time Support

		#endregion Configuration

		#region Connections

		/// <summary>
		/// Gets a reference to the ConnectionStringSettings collection.
		/// </summary>
		public static ConnectionStringSettingsCollection ConnectionStrings
		{
			get
			{
					// use default ConnectionStrings if _section has already been discovered
					if ( _config == null && _section != null )
					{
						return WebConfigurationManager.ConnectionStrings;
					}
					
					return Configuration.ConnectionStrings.ConnectionStrings;
			}
		}

		// dictionary of connection providers
		private static Dictionary<String, ConnectionProvider> _connections;

		/// <summary>
		/// Gets the dictionary of connection providers.
		/// </summary>
		public static Dictionary<String, ConnectionProvider> Connections
		{
			get
			{
				if ( _connections == null )
				{
					lock (SyncRoot)
                	{
						if (_connections == null)
						{
							_connections = new Dictionary<String, ConnectionProvider>();
		
							// add a connection provider for each configured connection string
							foreach ( ConnectionStringSettings conn in ConnectionStrings )
							{
								_connections.Add(conn.Name, new ConnectionProvider(conn.Name, conn.ConnectionString));
							}
						}
					}
				}

				return _connections;
			}
		}

		/// <summary>
		/// Adds the specified connection string to the map of connection strings.
		/// </summary>
		/// <param name="connectionStringName">The connection string name.</param>
		/// <param name="connectionString">The provider specific connection information.</param>
		public static void AddConnection(String connectionStringName, String connectionString)
		{
			lock (SyncRoot)
            {
				Connections.Remove(connectionStringName);
				ConnectionProvider connection = new ConnectionProvider(connectionStringName, connectionString);
				Connections.Add(connectionStringName, connection);
			}
		}

		/// <summary>
		/// Provides ability to switch connection string at runtime.
		/// </summary>
		public sealed class ConnectionProvider
		{
			private NetTiersProvider _provider;
			private NetTiersProviderCollection _providers;
			private String _connectionStringName;
			private String _connectionString;


			/// <summary>
			/// Initializes a new instance of the ConnectionProvider class.
			/// </summary>
			/// <param name="connectionStringName">The connection string name.</param>
			/// <param name="connectionString">The provider specific connection information.</param>
			public ConnectionProvider(String connectionStringName, String connectionString)
			{
				_connectionString = connectionString;
				_connectionStringName = connectionStringName;
			}

			/// <summary>
			/// Gets the provider.
			/// </summary>
			public NetTiersProvider Provider
			{
				get { LoadProviders(); return _provider; }
			}

			/// <summary>
			/// Gets the provider collection.
			/// </summary>
			public NetTiersProviderCollection Providers
			{
				get { LoadProviders(); return _providers; }
			}

			/// <summary>
			/// Instantiates the configured providers based on the supplied connection string.
			/// </summary>
			private void LoadProviders()
			{
				DataRepository.LoadProviders();

				// Avoid claiming lock if providers are already loaded
				if ( _providers == null )
				{
					lock ( SyncRoot )
					{
						// Do this again to make sure _provider is still null
						if ( _providers == null )
						{
							// apply connection information to each provider
							for ( int i = 0; i < NetTiersSection.Providers.Count; i++ )
							{
								NetTiersSection.Providers[i].Parameters["connectionStringName"] = _connectionStringName;
								// remove previous connection string, if any
								NetTiersSection.Providers[i].Parameters.Remove("connectionString");

								if ( !String.IsNullOrEmpty(_connectionString) )
								{
									NetTiersSection.Providers[i].Parameters["connectionString"] = _connectionString;
								}
							}

							// Load registered providers and point _provider to the default provider
							_providers = new NetTiersProviderCollection();

							ProvidersHelper.InstantiateProviders(NetTiersSection.Providers, _providers, typeof(NetTiersProvider));
							_provider = _providers[NetTiersSection.DefaultProvider];
						}
					}
				}
			}
		}

		#endregion Connections

		#region Static properties
		
		#region BangPhuTroiGioDayGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="BangPhuTroiGioDayGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static BangPhuTroiGioDayGiangVienProviderBase BangPhuTroiGioDayGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.BangPhuTroiGioDayGiangVienProvider;
			}
		}
		
		#endregion
		
		#region DanhMucGioGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DanhMucGioGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DanhMucGioGiangProviderBase DanhMucGioGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DanhMucGioGiangProvider;
			}
		}
		
		#endregion
		
		#region TcbKetQuaQuyDoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TcbKetQuaQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TcbKetQuaQuyDoiProviderBase TcbKetQuaQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TcbKetQuaQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region MucDoHoanThanhNckhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MucDoHoanThanhNckh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MucDoHoanThanhNckhProviderBase MucDoHoanThanhNckhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MucDoHoanThanhNckhProvider;
			}
		}
		
		#endregion
		
		#region MonKhongTinhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonKhongTinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonKhongTinhProviderBase MonKhongTinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonKhongTinhProvider;
			}
		}
		
		#endregion
		
		#region QuyDinhTienCanTrenProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="QuyDinhTienCanTren"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static QuyDinhTienCanTrenProviderBase QuyDinhTienCanTrenProvider
		{
			get 
			{
				LoadProviders();
				return _provider.QuyDinhTienCanTrenProvider;
			}
		}
		
		#endregion
		
		#region NamHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NamHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NamHocProviderBase NamHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NamHocProvider;
			}
		}
		
		#endregion
		
		#region NgonNguGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NgonNguGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NgonNguGiangDayProviderBase NgonNguGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NgonNguGiangDayProvider;
			}
		}
		
		#endregion
		
		#region MonHocKhongTinhKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonHocKhongTinhKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonHocKhongTinhKhoiLuongProviderBase MonHocKhongTinhKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonHocKhongTinhKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region NghienCuuKhoaHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NghienCuuKhoaHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NghienCuuKhoaHocProviderBase NghienCuuKhoaHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NghienCuuKhoaHocProvider;
			}
		}
		
		#endregion
		
		#region PhanLoaiGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PhanLoaiGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PhanLoaiGiangVienProviderBase PhanLoaiGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PhanLoaiGiangVienProvider;
			}
		}
		
		#endregion
		
		#region NhomChucNangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NhomChucNang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NhomChucNangProviderBase NhomChucNangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NhomChucNangProvider;
			}
		}
		
		#endregion
		
		#region MonHocCoNganHangDeThiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonHocCoNganHangDeThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonHocCoNganHangDeThiProviderBase MonHocCoNganHangDeThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonHocCoNganHangDeThiProvider;
			}
		}
		
		#endregion
		
		#region NhomKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NhomKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NhomKhoiLuongProviderBase NhomKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NhomKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region MonThucTapTotNghiepProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonThucTapTotNghiep"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonThucTapTotNghiepProviderBase MonThucTapTotNghiepProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonThucTapTotNghiepProvider;
			}
		}
		
		#endregion
		
		#region NhomHoatDongNgoaiGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NhomHoatDongNgoaiGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NhomHoatDongNgoaiGiangDayProviderBase NhomHoatDongNgoaiGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NhomHoatDongNgoaiGiangDayProvider;
			}
		}
		
		#endregion
		
		#region NamHocHienThiThuLaoLenWebProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NamHocHienThiThuLaoLenWeb"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NamHocHienThiThuLaoLenWebProviderBase NamHocHienThiThuLaoLenWebProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NamHocHienThiThuLaoLenWebProvider;
			}
		}
		
		#endregion
		
		#region MonXepLichChuNhatKhongTinhHeSoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonXepLichChuNhatKhongTinhHeSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonXepLichChuNhatKhongTinhHeSoProviderBase MonXepLichChuNhatKhongTinhHeSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonXepLichChuNhatKhongTinhHeSoProvider;
			}
		}
		
		#endregion
		
		#region PhuCapHanhChinhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PhuCapHanhChinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PhuCapHanhChinhProviderBase PhuCapHanhChinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PhuCapHanhChinhProvider;
			}
		}
		
		#endregion
		
		#region PhanCongDoAnTotNghiepProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PhanCongDoAnTotNghiep"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PhanCongDoAnTotNghiepProviderBase PhanCongDoAnTotNghiepProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PhanCongDoAnTotNghiepProvider;
			}
		}
		
		#endregion
		
		#region NoiDungDanhGiaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NoiDungDanhGia"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NoiDungDanhGiaProviderBase NoiDungDanhGiaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NoiDungDanhGiaProvider;
			}
		}
		
		#endregion
		
		#region NhomQuyenProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NhomQuyen"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NhomQuyenProviderBase NhomQuyenProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NhomQuyenProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoRaDeThiVhuexProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoRaDeThiVhuex"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoRaDeThiVhuexProviderBase ThuLaoRaDeThiVhuexProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoRaDeThiVhuexProvider;
			}
		}
		
		#endregion
		
		#region TrinhDoChinhTriProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrinhDoChinhTri"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrinhDoChinhTriProviderBase TrinhDoChinhTriProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrinhDoChinhTriProvider;
			}
		}
		
		#endregion
		
		#region NhomMonHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NhomMonHocProviderBase NhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region PscUserConfigApplicationProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PscUserConfigApplication"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PscUserConfigApplicationProviderBase PscUserConfigApplicationProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PscUserConfigApplicationProvider;
			}
		}
		
		#endregion
		
		#region TrinhDoNgoaiNguProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrinhDoNgoaiNgu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrinhDoNgoaiNguProviderBase TrinhDoNgoaiNguProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrinhDoNgoaiNguProvider;
			}
		}
		
		#endregion
		
		#region PscDotThanhToanCoiThiChamThiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PscDotThanhToanCoiThiChamThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PscDotThanhToanCoiThiChamThiProviderBase PscDotThanhToanCoiThiChamThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PscDotThanhToanCoiThiChamThiProvider;
			}
		}
		
		#endregion
		
		#region MonHocTinhHeSoKhoiNganhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonHocTinhHeSoKhoiNganh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonHocTinhHeSoKhoiNganhProviderBase MonHocTinhHeSoKhoiNganhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonHocTinhHeSoKhoiNganhProvider;
			}
		}
		
		#endregion
		
		#region QuocTichProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="QuocTich"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static QuocTichProviderBase QuocTichProvider
		{
			get 
			{
				LoadProviders();
				return _provider.QuocTichProvider;
			}
		}
		
		#endregion
		
		#region PscExBarCodesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PscExBarCodes"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PscExBarCodesProviderBase PscExBarCodesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PscExBarCodesProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoCoiThiVhuexProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoCoiThiVhuex"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoCoiThiVhuexProviderBase ThuLaoCoiThiVhuexProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoCoiThiVhuexProvider;
			}
		}
		
		#endregion
		
		#region PhanBienLuanAnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PhanBienLuanAn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PhanBienLuanAnProviderBase PhanBienLuanAnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PhanBienLuanAnProvider;
			}
		}
		
		#endregion
		
		#region PhanNhomMonHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PhanNhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PhanNhomMonHocProviderBase PhanNhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PhanNhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region MonTieuLuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonTieuLuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonTieuLuanProviderBase MonTieuLuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonTieuLuanProvider;
			}
		}
		
		#endregion
		
		#region NoiDungCongViecQuanLyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NoiDungCongViecQuanLy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NoiDungCongViecQuanLyProviderBase NoiDungCongViecQuanLyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NoiDungCongViecQuanLyProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongGiangDayChiTietProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongGiangDayChiTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongGiangDayChiTietProviderBase KhoiLuongGiangDayChiTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongGiangDayChiTietProvider;
			}
		}
		
		#endregion
		
		#region LoaiKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LoaiKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LoaiKhoiLuongProviderBase LoaiKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LoaiKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region MonTinhTheoQuyCheMoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonTinhTheoQuyCheMoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonTinhTheoQuyCheMoiProviderBase MonTinhTheoQuyCheMoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonTinhTheoQuyCheMoiProvider;
			}
		}
		
		#endregion
		
		#region MonGiangMoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonGiangMoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonGiangMoiProviderBase MonGiangMoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonGiangMoiProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongHuongDanThucTapProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongHuongDanThucTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongHuongDanThucTapProviderBase KhoiLuongHuongDanThucTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongHuongDanThucTapProvider;
			}
		}
		
		#endregion
		
		#region LoaiNghienCuuKhoaHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LoaiNghienCuuKhoaHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LoaiNghienCuuKhoaHocProviderBase LoaiNghienCuuKhoaHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LoaiNghienCuuKhoaHocProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongQuyDoiCaoDangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongQuyDoiCaoDang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongQuyDoiCaoDangProviderBase KhoiLuongQuyDoiCaoDangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongQuyDoiCaoDangProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongTamUngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongTamUng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongTamUngProviderBase KhoiLuongTamUngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongTamUngProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongGiangDayTungTuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongGiangDayTungTuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongGiangDayTungTuanProviderBase KhoiLuongGiangDayTungTuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongGiangDayTungTuanProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongQuyDoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongQuyDoiProviderBase KhoiLuongQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region LopHocPhanChuyenNganhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LopHocPhanChuyenNganh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LopHocPhanChuyenNganhProviderBase LopHocPhanChuyenNganhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LopHocPhanChuyenNganhProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongGiangDayDoAnTotNghiepProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongGiangDayDoAnTotNghiep"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongGiangDayDoAnTotNghiepProviderBase KhoiLuongGiangDayDoAnTotNghiepProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongGiangDayDoAnTotNghiepProvider;
			}
		}
		
		#endregion
		
		#region ThangHeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThangHe"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThangHeProviderBase ThangHeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThangHeProvider;
			}
		}
		
		#endregion
		
		#region KyTinhLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KyTinhLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KyTinhLuongProviderBase KyTinhLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KyTinhLuongProvider;
			}
		}
		
		#endregion
		
		#region KetQuaDanhGiaVuotGioProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KetQuaDanhGiaVuotGio"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KetQuaDanhGiaVuotGioProviderBase KetQuaDanhGiaVuotGioProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KetQuaDanhGiaVuotGioProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongDoAnTotNghiepChiTietProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongDoAnTotNghiepChiTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongDoAnTotNghiepChiTietProviderBase KhoiLuongDoAnTotNghiepChiTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongDoAnTotNghiepChiTietProvider;
			}
		}
		
		#endregion
		
		#region MonPhanCongNhieuGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MonPhanCongNhieuGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MonPhanCongNhieuGiangVienProviderBase MonPhanCongNhieuGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MonPhanCongNhieuGiangVienProvider;
			}
		}
		
		#endregion
		
		#region KetQuaTinhTheoTuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KetQuaTinhTheoTuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KetQuaTinhTheoTuanProviderBase KetQuaTinhTheoTuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KetQuaTinhTheoTuanProvider;
			}
		}
		
		#endregion
		
		#region LopHocPhanBacDaoTaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LopHocPhanBacDaoTao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LopHocPhanBacDaoTaoProviderBase LopHocPhanBacDaoTaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LopHocPhanBacDaoTaoProvider;
			}
		}
		
		#endregion
		
		#region KyThiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KyThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KyThiProviderBase KyThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KyThiProvider;
			}
		}
		
		#endregion
		
		#region LyDoTamNghiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LyDoTamNghi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LyDoTamNghiProviderBase LyDoTamNghiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LyDoTamNghiProvider;
			}
		}
		
		#endregion
		
		#region LopHocPhanKhongTinhGioGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LopHocPhanKhongTinhGioGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LopHocPhanKhongTinhGioGiangProviderBase LopHocPhanKhongTinhGioGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LopHocPhanKhongTinhGioGiangProvider;
			}
		}
		
		#endregion
		
		#region LopChatLuongCaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LopChatLuongCao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LopChatLuongCaoProviderBase LopChatLuongCaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LopChatLuongCaoProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongGiangDayCaoDangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongGiangDayCaoDang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongGiangDayCaoDangProviderBase KhoiLuongGiangDayCaoDangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongGiangDayCaoDangProvider;
			}
		}
		
		#endregion
		
		#region PhanLoaiHocPhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PhanLoaiHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PhanLoaiHocPhanProviderBase PhanLoaiHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PhanLoaiHocPhanProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongGiangDayDoAnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongGiangDayDoAn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongGiangDayDoAnProviderBase KhoiLuongGiangDayDoAnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongGiangDayDoAnProvider;
			}
		}
		
		#endregion
		
		#region LopHocPhanGiangBangTiengNuocNgoaiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LopHocPhanGiangBangTiengNuocNgoai"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LopHocPhanGiangBangTiengNuocNgoaiProviderBase LopHocPhanGiangBangTiengNuocNgoaiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LopHocPhanGiangBangTiengNuocNgoaiProvider;
			}
		}
		
		#endregion
		
		#region LoaiLopProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LoaiLop"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LoaiLopProviderBase LoaiLopProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LoaiLopProvider;
			}
		}
		
		#endregion
		
		#region ReportManagermentsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ReportManagerments"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ReportManagermentsProviderBase ReportManagermentsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ReportManagermentsProvider;
			}
		}
		
		#endregion
		
		#region LopHocPhanGhepThoiKhoaBieuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LopHocPhanGhepThoiKhoaBieu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LopHocPhanGhepThoiKhoaBieuProviderBase LopHocPhanGhepThoiKhoaBieuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LopHocPhanGhepThoiKhoaBieuProvider;
			}
		}
		
		#endregion
		
		#region LopHocPhanClcAufCjlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LopHocPhanClcAufCjl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LopHocPhanClcAufCjlProviderBase LopHocPhanClcAufCjlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LopHocPhanClcAufCjlProvider;
			}
		}
		
		#endregion
		
		#region QuyUocDatTenLopHocPhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="QuyUocDatTenLopHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static QuyUocDatTenLopHocPhanProviderBase QuyUocDatTenLopHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.QuyUocDatTenLopHocPhanProvider;
			}
		}
		
		#endregion
		
		#region LoaiNhanVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LoaiNhanVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LoaiNhanVienProviderBase LoaiNhanVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LoaiNhanVienProvider;
			}
		}
		
		#endregion
		
		#region LoaiGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="LoaiGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static LoaiGiangVienProviderBase LoaiGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.LoaiGiangVienProvider;
			}
		}
		
		#endregion
		
		#region PhanQuyenControlTrenFormProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PhanQuyenControlTrenForm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PhanQuyenControlTrenFormProviderBase PhanQuyenControlTrenFormProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PhanQuyenControlTrenFormProvider;
			}
		}
		
		#endregion
		
		#region QuyDoiGioChuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="QuyDoiGioChuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static QuyDoiGioChuanProviderBase QuyDoiGioChuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.QuyDoiGioChuanProvider;
			}
		}
		
		#endregion
		
		#region UteKhoiLuongGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="UteKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static UteKhoiLuongGiangDayProviderBase UteKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.UteKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region SoTietCoiThiTieuChuanCuaGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SoTietCoiThiTieuChuanCuaGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SoTietCoiThiTieuChuanCuaGiangVienProviderBase SoTietCoiThiTieuChuanCuaGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SoTietCoiThiTieuChuanCuaGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoCoiThiChamBaiImportProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoCoiThiChamBaiImport"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoCoiThiChamBaiImportProviderBase ThuLaoCoiThiChamBaiImportProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoCoiThiChamBaiImportProvider;
			}
		}
		
		#endregion
		
		#region TrinhDoQuanLyNhaNuocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrinhDoQuanLyNhaNuoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrinhDoQuanLyNhaNuocProviderBase TrinhDoQuanLyNhaNuocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrinhDoQuanLyNhaNuocProvider;
			}
		}
		
		#endregion
		
		#region QuyDoiKhoiLuongTamUngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="QuyDoiKhoiLuongTamUng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static QuyDoiKhoiLuongTamUngProviderBase QuyDoiKhoiLuongTamUngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.QuyDoiKhoiLuongTamUngProvider;
			}
		}
		
		#endregion
		
		#region TinhTrangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TinhTrang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TinhTrangProviderBase TinhTrangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TinhTrangProvider;
			}
		}
		
		#endregion
		
		#region TrinhDoSuPhamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrinhDoSuPham"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrinhDoSuPhamProviderBase TrinhDoSuPhamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrinhDoSuPhamProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoCoiThiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoCoiThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoCoiThiProviderBase ThuLaoCoiThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoCoiThiProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoCoiThiVhuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoCoiThiVhu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoCoiThiVhuProviderBase ThuLaoCoiThiVhuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoCoiThiVhuProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoImportProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoImport"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoImportProviderBase ThuLaoImportProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoImportProvider;
			}
		}
		
		#endregion
		
		#region ThuMoiGiangHopDongThinhGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuMoiGiangHopDongThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuMoiGiangHopDongThinhGiangProviderBase ThuMoiGiangHopDongThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuMoiGiangHopDongThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region TrinhDoTinHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrinhDoTinHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrinhDoTinHocProviderBase TrinhDoTinHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrinhDoTinHocProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoRaDeVhuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoRaDeVhu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoRaDeVhuProviderBase ThuLaoRaDeVhuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoRaDeVhuProvider;
			}
		}
		
		#endregion
		
		#region DonViTinhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DonViTinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DonViTinhProviderBase DonViTinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DonViTinhProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoChamThiVhuexProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoChamThiVhuex"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoChamThiVhuexProviderBase ThuLaoChamThiVhuexProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoChamThiVhuexProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoHuongDanCuoiKhoaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoHuongDanCuoiKhoa"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoHuongDanCuoiKhoaProviderBase ThuLaoHuongDanCuoiKhoaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoHuongDanCuoiKhoaProvider;
			}
		}
		
		#endregion
		
		#region KetQuaTinhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KetQuaTinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KetQuaTinhProviderBase KetQuaTinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KetQuaTinhProvider;
			}
		}
		
		#endregion
		
		#region TienCongTacPhiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TienCongTacPhi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TienCongTacPhiProviderBase TienCongTacPhiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TienCongTacPhiProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoGiangDayDaiHocLopClcProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoGiangDayDaiHocLopClc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoGiangDayDaiHocLopClcProviderBase ThuLaoGiangDayDaiHocLopClcProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoGiangDayDaiHocLopClcProvider;
			}
		}
		
		#endregion
		
		#region VaiTroProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VaiTro"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VaiTroProviderBase VaiTroProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VaiTroProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongGiangDayProviderBase KhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongKhacProviderBase KhoiLuongKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongKhacProvider;
			}
		}
		
		#endregion
		
		#region HeSoThuLaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoThuLaoProviderBase HeSoThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoThuLaoProvider;
			}
		}
		
		#endregion
		
		#region HeSoTroCapTheoKhoaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoTroCapTheoKhoa"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoTroCapTheoKhoaProviderBase HeSoTroCapTheoKhoaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoTroCapTheoKhoaProvider;
			}
		}
		
		#endregion
		
		#region TinhTrangTheoNamHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TinhTrangTheoNamHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TinhTrangTheoNamHocProviderBase TinhTrangTheoNamHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TinhTrangTheoNamHocProvider;
			}
		}
		
		#endregion
		
		#region UteKhoiLuongQuyDoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="UteKhoiLuongQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static UteKhoiLuongQuyDoiProviderBase UteKhoiLuongQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.UteKhoiLuongQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region KhoanChiKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoanChiKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoanChiKhacProviderBase KhoanChiKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoanChiKhacProvider;
			}
		}
		
		#endregion
		
		#region TietNghiaVuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TietNghiaVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TietNghiaVuProviderBase TietNghiaVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TietNghiaVuProvider;
			}
		}
		
		#endregion
		
		#region TongTienLuongTrongNamCuaGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TongTienLuongTrongNamCuaGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TongTienLuongTrongNamCuaGiangVienProviderBase TongTienLuongTrongNamCuaGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TongTienLuongTrongNamCuaGiangVienProvider;
			}
		}
		
		#endregion
		
		#region UteKhoiLuongKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="UteKhoiLuongKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static UteKhoiLuongKhacProviderBase UteKhoiLuongKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.UteKhoiLuongKhacProvider;
			}
		}
		
		#endregion
		
		#region KhoiLuongCacCongViecKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoiLuongCacCongViecKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoiLuongCacCongViecKhacProviderBase KhoiLuongCacCongViecKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoiLuongCacCongViecKhacProvider;
			}
		}
		
		#endregion
		
		#region KhoanQuyDoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KhoanQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KhoanQuyDoiProviderBase KhoanQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KhoanQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region TietNoKyTruocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TietNoKyTruoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TietNoKyTruocProviderBase TietNoKyTruocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TietNoKyTruocProvider;
			}
		}
		
		#endregion
		
		#region QuyDoiHoatDongNgoaiGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="QuyDoiHoatDongNgoaiGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static QuyDoiHoatDongNgoaiGiangDayProviderBase QuyDoiHoatDongNgoaiGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.QuyDoiHoatDongNgoaiGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoChamBaiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoChamBai"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoChamBaiProviderBase ThuLaoChamBaiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoChamBaiProvider;
			}
		}
		
		#endregion
		
		#region ThucGiangMonThucTeTuHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThucGiangMonThucTeTuHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThucGiangMonThucTeTuHocProviderBase ThucGiangMonThucTeTuHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThucGiangMonThucTeTuHocProvider;
			}
		}
		
		#endregion
		
		#region ThueThuNhapCaNhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThueThuNhapCaNhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThueThuNhapCaNhanProviderBase ThueThuNhapCaNhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThueThuNhapCaNhanProvider;
			}
		}
		
		#endregion
		
		#region ThongTinGiangDayGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThongTinGiangDayGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThongTinGiangDayGiangVienProviderBase ThongTinGiangDayGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThongTinGiangDayGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoChamBaiVhuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoChamBaiVhu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoChamBaiVhuProviderBase ThuLaoChamBaiVhuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoChamBaiVhuProvider;
			}
		}
		
		#endregion
		
		#region SdhPhanNhomMonHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhPhanNhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhPhanNhomMonHocProviderBase SdhPhanNhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhPhanNhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region SdhNhomMonHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhNhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhNhomMonHocProviderBase SdhNhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhNhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region SdhDonGiaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhDonGia"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhDonGiaProviderBase SdhDonGiaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhDonGiaProvider;
			}
		}
		
		#endregion
		
		#region SdhKetQuaThanhToanThuLaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhKetQuaThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhKetQuaThanhToanThuLaoProviderBase SdhKetQuaThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhKetQuaThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region SdhPhanLoaiHocPhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhPhanLoaiHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhPhanLoaiHocPhanProviderBase SdhPhanLoaiHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhPhanLoaiHocPhanProvider;
			}
		}
		
		#endregion
		
		#region SoTietNckhChuyenSangNamSauProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SoTietNckhChuyenSangNamSau"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SoTietNckhChuyenSangNamSauProviderBase SoTietNckhChuyenSangNamSauProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SoTietNckhChuyenSangNamSauProvider;
			}
		}
		
		#endregion
		
		#region SdhMonHocKhongTinhKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhMonHocKhongTinhKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhMonHocKhongTinhKhoiLuongProviderBase SdhMonHocKhongTinhKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhMonHocKhongTinhKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region SdhHeSoDiaDiemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhHeSoDiaDiem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhHeSoDiaDiemProviderBase SdhHeSoDiaDiemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhHeSoDiaDiemProvider;
			}
		}
		
		#endregion
		
		#region SdhChotKhoiLuongGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhChotKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhChotKhoiLuongGiangDayProviderBase SdhChotKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhChotKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoGiangDayThucHanhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoGiangDayThucHanh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoGiangDayThucHanhProviderBase ThuLaoGiangDayThucHanhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoGiangDayThucHanhProvider;
			}
		}
		
		#endregion
		
		#region ReportTemplateProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ReportTemplate"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ReportTemplateProviderBase ReportTemplateProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ReportTemplateProvider;
			}
		}
		
		#endregion
		
		#region SdhUteKhoiLuongGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhUteKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhUteKhoiLuongGiangDayProviderBase SdhUteKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhUteKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region SdhUteKhoiLuongQuyDoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhUteKhoiLuongQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhUteKhoiLuongQuyDoiProviderBase SdhUteKhoiLuongQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhUteKhoiLuongQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region QuyMoKhoaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="QuyMoKhoa"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static QuyMoKhoaProviderBase QuyMoKhoaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.QuyMoKhoaProvider;
			}
		}
		
		#endregion
		
		#region SdhMonPhanCongNhieuGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhMonPhanCongNhieuGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhMonPhanCongNhieuGiangVienProviderBase SdhMonPhanCongNhieuGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhMonPhanCongNhieuGiangVienProvider;
			}
		}
		
		#endregion
		
		#region SdhUteThanhToanThuLaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhUteThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhUteThanhToanThuLaoProviderBase SdhUteThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhUteThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region ThanhTraGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThanhTraGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThanhTraGiangDayProviderBase ThanhTraGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThanhTraGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ThoiGianGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThoiGianGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThoiGianGiangDayProviderBase ThoiGianGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThoiGianGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ThanhTraCoiThiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThanhTraCoiThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThanhTraCoiThiProviderBase ThanhTraCoiThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThanhTraCoiThiProvider;
			}
		}
		
		#endregion
		
		#region ThanhTraChamGiangTheoKhoaHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThanhTraChamGiangTheoKhoaHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThanhTraChamGiangTheoKhoaHocProviderBase ThanhTraChamGiangTheoKhoaHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThanhTraChamGiangTheoKhoaHocProvider;
			}
		}
		
		#endregion
		
		#region SdhHeSoLopDongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhHeSoLopDong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhHeSoLopDongProviderBase SdhHeSoLopDongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhHeSoLopDongProvider;
			}
		}
		
		#endregion
		
		#region TaiKhoanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TaiKhoan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TaiKhoanProviderBase TaiKhoanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TaiKhoanProvider;
			}
		}
		
		#endregion
		
		#region ThoiGianNghiTamThoiCuaGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThoiGianNghiTamThoiCuaGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThoiGianNghiTamThoiCuaGiangVienProviderBase ThoiGianNghiTamThoiCuaGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThoiGianNghiTamThoiCuaGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ThueThanhToanBoSungProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThueThanhToanBoSung"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThueThanhToanBoSungProviderBase ThueThanhToanBoSungProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThueThanhToanBoSungProvider;
			}
		}
		
		#endregion
		
		#region ThoiGianLamViecCuaNhanVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThoiGianLamViecCuaNhanVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThoiGianLamViecCuaNhanVienProviderBase ThoiGianLamViecCuaNhanVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThoiGianLamViecCuaNhanVienProvider;
			}
		}
		
		#endregion
		
		#region SiSoLopHocPhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SiSoLopHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SiSoLopHocPhanProviderBase SiSoLopHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SiSoLopHocPhanProvider;
			}
		}
		
		#endregion
		
		#region BangPhuTroiNamHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="BangPhuTroiNamHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static BangPhuTroiNamHocProviderBase BangPhuTroiNamHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.BangPhuTroiNamHocProvider;
			}
		}
		
		#endregion
		
		#region SdhLoaiKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SdhLoaiKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SdhLoaiKhoiLuongProviderBase SdhLoaiKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SdhLoaiKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region ThanhToanThinhGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThanhToanThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThanhToanThinhGiangProviderBase ThanhToanThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThanhToanThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region KetQuaCacKhoanChiKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KetQuaCacKhoanChiKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KetQuaCacKhoanChiKhacProviderBase KetQuaCacKhoanChiKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KetQuaCacKhoanChiKhacProvider;
			}
		}
		
		#endregion
		
		#region ThanhTraTheoThoiKhoaBieuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThanhTraTheoThoiKhoaBieu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThanhTraTheoThoiKhoaBieuProviderBase ThanhTraTheoThoiKhoaBieuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThanhTraTheoThoiKhoaBieuProvider;
			}
		}
		
		#endregion
		
		#region KcqUteKhoiLuongGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqUteKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqUteKhoiLuongGiangDayProviderBase KcqUteKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqUteKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ThamDinhLuanVanThacSyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThamDinhLuanVanThacSy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThamDinhLuanVanThacSyProviderBase ThamDinhLuanVanThacSyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThamDinhLuanVanThacSyProvider;
			}
		}
		
		#endregion
		
		#region GiangDaySauDaiHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangDaySauDaiHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangDaySauDaiHocProviderBase GiangDaySauDaiHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangDaySauDaiHocProvider;
			}
		}
		
		#endregion
		
		#region KcqUteKhoiLuongKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqUteKhoiLuongKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqUteKhoiLuongKhacProviderBase KcqUteKhoiLuongKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqUteKhoiLuongKhacProvider;
			}
		}
		
		#endregion
		
		#region KcqPhanCongDoAnTotNghiepProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqPhanCongDoAnTotNghiep"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqPhanCongDoAnTotNghiepProviderBase KcqPhanCongDoAnTotNghiepProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqPhanCongDoAnTotNghiepProvider;
			}
		}
		
		#endregion
		
		#region DuTruGioGiangKhiCoLopHocPhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DuTruGioGiangKhiCoLopHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DuTruGioGiangKhiCoLopHocPhanProviderBase DuTruGioGiangKhiCoLopHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DuTruGioGiangKhiCoLopHocPhanProvider;
			}
		}
		
		#endregion
		
		#region DanhMucHoatDongQuanLyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DanhMucHoatDongQuanLy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DanhMucHoatDongQuanLyProviderBase DanhMucHoatDongQuanLyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DanhMucHoatDongQuanLyProvider;
			}
		}
		
		#endregion
		
		#region KcqQuyDoiGioChuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqQuyDoiGioChuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqQuyDoiGioChuanProviderBase KcqQuyDoiGioChuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqQuyDoiGioChuanProvider;
			}
		}
		
		#endregion
		
		#region HocHamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HocHam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HocHamProviderBase HocHamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HocHamProvider;
			}
		}
		
		#endregion
		
		#region GiangVienChuyenMonProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienChuyenMon"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienChuyenMonProviderBase GiangVienChuyenMonProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienChuyenMonProvider;
			}
		}
		
		#endregion
		
		#region GiangVienChucVuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienChucVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienChucVuProviderBase GiangVienChucVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienChucVuProvider;
			}
		}
		
		#endregion
		
		#region GiangVienThanhToanQuaNganHangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienThanhToanQuaNganHang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienThanhToanQuaNganHangProviderBase GiangVienThanhToanQuaNganHangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienThanhToanQuaNganHangProvider;
			}
		}
		
		#endregion
		
		#region GiangVienMocTangLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienMocTangLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienMocTangLuongProviderBase GiangVienMocTangLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienMocTangLuongProvider;
			}
		}
		
		#endregion
		
		#region GiangDayChatLuongCaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangDayChatLuongCao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangDayChatLuongCaoProviderBase GiangDayChatLuongCaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangDayChatLuongCaoProvider;
			}
		}
		
		#endregion
		
		#region GiangVienKhongTinhGioGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienKhongTinhGioGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienKhongTinhGioGiangProviderBase GiangVienKhongTinhGioGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienKhongTinhGioGiangProvider;
			}
		}
		
		#endregion
		
		#region GhiChuThanhToanBoSungProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GhiChuThanhToanBoSung"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GhiChuThanhToanBoSungProviderBase GhiChuThanhToanBoSungProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GhiChuThanhToanBoSungProvider;
			}
		}
		
		#endregion
		
		#region GiangVienDinhMucKhauTruProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienDinhMucKhauTru"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienDinhMucKhauTruProviderBase GiangVienDinhMucKhauTruProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienDinhMucKhauTruProvider;
			}
		}
		
		#endregion
		
		#region GiangVienHoatDongNgoaiGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienHoatDongNgoaiGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienHoatDongNgoaiGiangDayProviderBase GiangVienHoatDongNgoaiGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienHoatDongNgoaiGiangDayProvider;
			}
		}
		
		#endregion
		
		#region GiamTruDinhMucProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiamTruDinhMuc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiamTruDinhMucProviderBase GiamTruDinhMucProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiamTruDinhMucProvider;
			}
		}
		
		#endregion
		
		#region GiangVienLopHocPhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienLopHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienLopHocPhanProviderBase GiangVienLopHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienLopHocPhanProvider;
			}
		}
		
		#endregion
		
		#region GiangVienThayDoiHocHamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienThayDoiHocHam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienThayDoiHocHamProviderBase GiangVienThayDoiHocHamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienThayDoiHocHamProvider;
			}
		}
		
		#endregion
		
		#region GiangVienChoDuyetHoSoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienChoDuyetHoSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienChoDuyetHoSoProviderBase GiangVienChoDuyetHoSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienChoDuyetHoSoProvider;
			}
		}
		
		#endregion
		
		#region GiangVienBiChanTienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienBiChanTien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienBiChanTienProviderBase GiangVienBiChanTienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienBiChanTienProvider;
			}
		}
		
		#endregion
		
		#region GiangVienTinhGioChuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienTinhGioChuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienTinhGioChuanProviderBase GiangVienTinhGioChuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienTinhGioChuanProvider;
			}
		}
		
		#endregion
		
		#region NgachCongChucProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NgachCongChuc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NgachCongChucProviderBase NgachCongChucProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NgachCongChucProvider;
			}
		}
		
		#endregion
		
		#region DinhMucGioChuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DinhMucGioChuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DinhMucGioChuanProviderBase DinhMucGioChuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DinhMucGioChuanProvider;
			}
		}
		
		#endregion
		
		#region GiangVienTamUngChiTietProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienTamUngChiTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienTamUngChiTietProviderBase GiangVienTamUngChiTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienTamUngChiTietProvider;
			}
		}
		
		#endregion
		
		#region HocViProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HocVi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HocViProviderBase HocViProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HocViProvider;
			}
		}
		
		#endregion
		
		#region GiangVienThayDoiLoaiGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienThayDoiLoaiGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienThayDoiLoaiGiangVienProviderBase GiangVienThayDoiLoaiGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienThayDoiLoaiGiangVienProvider;
			}
		}
		
		#endregion
		
		#region GiangVienGiamTruDinhMucProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienGiamTruDinhMuc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienGiamTruDinhMucProviderBase GiangVienGiamTruDinhMucProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienGiamTruDinhMucProvider;
			}
		}
		
		#endregion
		
		#region GiangVienCamKetKhongTruThueProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienCamKetKhongTruThue"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienCamKetKhongTruThueProviderBase GiangVienCamKetKhongTruThueProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienCamKetKhongTruThueProvider;
			}
		}
		
		#endregion
		
		#region GiangVienPhanHoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienPhanHoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienPhanHoiProviderBase GiangVienPhanHoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienPhanHoiProvider;
			}
		}
		
		#endregion
		
		#region DuTruGioGiangTruocLopHocPhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DuTruGioGiangTruocLopHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DuTruGioGiangTruocLopHocPhanProviderBase DuTruGioGiangTruocLopHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DuTruGioGiangTruocLopHocPhanProvider;
			}
		}
		
		#endregion
		
		#region GiangVienTinhLuongThinhGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienTinhLuongThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienTinhLuongThinhGiangProviderBase GiangVienTinhLuongThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienTinhLuongThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region DinhMucNghienCuuKhoaHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DinhMucNghienCuuKhoaHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DinhMucNghienCuuKhoaHocProviderBase DinhMucNghienCuuKhoaHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DinhMucNghienCuuKhoaHocProvider;
			}
		}
		
		#endregion
		
		#region GiangVienNghienCuuKhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienNghienCuuKh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienNghienCuuKhProviderBase GiangVienNghienCuuKhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienNghienCuuKhProvider;
			}
		}
		
		#endregion
		
		#region GiangVienHoSoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienHoSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienHoSoProviderBase GiangVienHoSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienHoSoProvider;
			}
		}
		
		#endregion
		
		#region GiangVienThayDoiChucVuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienThayDoiChucVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienThayDoiChucVuProviderBase GiangVienThayDoiChucVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienThayDoiChucVuProvider;
			}
		}
		
		#endregion
		
		#region GiangVienHoatDongQuanLyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienHoatDongQuanLy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienHoatDongQuanLyProviderBase GiangVienHoatDongQuanLyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienHoatDongQuanLyProvider;
			}
		}
		
		#endregion
		
		#region DinhMucHuongDanKhoaLuanThucTapProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DinhMucHuongDanKhoaLuanThucTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DinhMucHuongDanKhoaLuanThucTapProviderBase DinhMucHuongDanKhoaLuanThucTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DinhMucHuongDanKhoaLuanThucTapProvider;
			}
		}
		
		#endregion
		
		#region GiamTruGioChuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiamTruGioChuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiamTruGioChuanProviderBase GiamTruGioChuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiamTruGioChuanProvider;
			}
		}
		
		#endregion
		
		#region ChotCoVanHocTapProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ChotCoVanHocTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ChotCoVanHocTapProviderBase ChotCoVanHocTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ChotCoVanHocTapProvider;
			}
		}
		
		#endregion
		
		#region ChotKhoiLuongGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ChotKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ChotKhoiLuongGiangDayProviderBase ChotKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ChotKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ChucVuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ChucVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ChucVuProviderBase ChucVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ChucVuProvider;
			}
		}
		
		#endregion
		
		#region DonGiaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DonGia"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DonGiaProviderBase DonGiaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DonGiaProvider;
			}
		}
		
		#endregion
		
		#region CoVanHocTapProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoVanHocTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoVanHocTapProviderBase CoVanHocTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoVanHocTapProvider;
			}
		}
		
		#endregion
		
		#region ChiTietKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ChiTietKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ChiTietKhoiLuongProviderBase ChiTietKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ChiTietKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region CauHinhChungProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CauHinhChung"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CauHinhChungProviderBase CauHinhChungProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CauHinhChungProvider;
			}
		}
		
		#endregion
		
		#region DanhGiaCoVanHocTapProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DanhGiaCoVanHocTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DanhGiaCoVanHocTapProviderBase DanhGiaCoVanHocTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DanhGiaCoVanHocTapProvider;
			}
		}
		
		#endregion
		
		#region ChucNangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ChucNang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ChucNangProviderBase ChucNangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ChucNangProvider;
			}
		}
		
		#endregion
		
		#region NghienCuuKhoaHocTongHopProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="NghienCuuKhoaHocTongHop"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static NghienCuuKhoaHocTongHopProviderBase NghienCuuKhoaHocTongHopProvider
		{
			get 
			{
				LoadProviders();
				return _provider.NghienCuuKhoaHocTongHopProvider;
			}
		}
		
		#endregion
		
		#region CauHinhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CauHinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CauHinhProviderBase CauHinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CauHinhProvider;
			}
		}
		
		#endregion
		
		#region DonGiaChatLuongCaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DonGiaChatLuongCao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DonGiaChatLuongCaoProviderBase DonGiaChatLuongCaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DonGiaChatLuongCaoProvider;
			}
		}
		
		#endregion
		
		#region CauHinhChotGioProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CauHinhChotGio"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CauHinhChotGioProviderBase CauHinhChotGioProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CauHinhChotGioProvider;
			}
		}
		
		#endregion
		
		#region CauHinhGiangVienPhanHoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CauHinhGiangVienPhanHoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CauHinhGiangVienPhanHoiProviderBase CauHinhGiangVienPhanHoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CauHinhGiangVienPhanHoiProvider;
			}
		}
		
		#endregion
		
		#region BacLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="BacLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static BacLuongProviderBase BacLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.BacLuongProvider;
			}
		}
		
		#endregion
		
		#region DonGiaChamBaiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DonGiaChamBai"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DonGiaChamBaiProviderBase DonGiaChamBaiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DonGiaChamBaiProvider;
			}
		}
		
		#endregion
		
		#region DanhMucNghienCuuKhoaHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DanhMucNghienCuuKhoaHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DanhMucNghienCuuKhoaHocProviderBase DanhMucNghienCuuKhoaHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DanhMucNghienCuuKhoaHocProvider;
			}
		}
		
		#endregion
		
		#region DonGiaTcbProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DonGiaTcb"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DonGiaTcbProviderBase DonGiaTcbProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DonGiaTcbProvider;
			}
		}
		
		#endregion
		
		#region DotChiTraProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DotChiTra"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DotChiTraProviderBase DotChiTraProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DotChiTraProvider;
			}
		}
		
		#endregion
		
		#region DonGiaMotTietProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DonGiaMotTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DonGiaMotTietProviderBase DonGiaMotTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DonGiaMotTietProvider;
			}
		}
		
		#endregion
		
		#region GiangVienThayDoiHocViProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienThayDoiHocVi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienThayDoiHocViProviderBase GiangVienThayDoiHocViProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienThayDoiHocViProvider;
			}
		}
		
		#endregion
		
		#region DonGiaNgoaiQuyCheProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DonGiaNgoaiQuyChe"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DonGiaNgoaiQuyCheProviderBase DonGiaNgoaiQuyCheProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DonGiaNgoaiQuyCheProvider;
			}
		}
		
		#endregion
		
		#region DanhSachHopDongThinhGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DanhSachHopDongThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DanhSachHopDongThinhGiangProviderBase DanhSachHopDongThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DanhSachHopDongThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region GiangVienChuyenDoiGioGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienChuyenDoiGioGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienChuyenDoiGioGiangProviderBase GiangVienChuyenDoiGioGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienChuyenDoiGioGiangProvider;
			}
		}
		
		#endregion
		
		#region DanhMucViPhamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DanhMucViPham"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DanhMucViPhamProviderBase DanhMucViPhamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DanhMucViPhamProvider;
			}
		}
		
		#endregion
		
		#region GiangVienTamUngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienTamUng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienTamUngProviderBase GiangVienTamUngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienTamUngProvider;
			}
		}
		
		#endregion
		
		#region DonGiaCoiThiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DonGiaCoiThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DonGiaCoiThiProviderBase DonGiaCoiThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DonGiaCoiThiProvider;
			}
		}
		
		#endregion
		
		#region ChietTinhBoiDuongGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ChietTinhBoiDuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ChietTinhBoiDuongGiangDayProviderBase ChietTinhBoiDuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ChietTinhBoiDuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ChiTienThuLaoGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ChiTienThuLaoGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ChiTienThuLaoGiangDayProviderBase ChiTienThuLaoGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ChiTienThuLaoGiangDayProvider;
			}
		}
		
		#endregion
		
		#region CongThucProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CongThuc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CongThucProviderBase CongThucProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CongThucProvider;
			}
		}
		
		#endregion
		
		#region KcqUteThanhToanThuLaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqUteThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqUteThanhToanThuLaoProviderBase KcqUteThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqUteThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region DuTruGioGiangTruocThoiKhoaBieuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DuTruGioGiangTruocThoiKhoaBieu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DuTruGioGiangTruocThoiKhoaBieuProviderBase DuTruGioGiangTruocThoiKhoaBieuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DuTruGioGiangTruocThoiKhoaBieuProvider;
			}
		}
		
		#endregion
		
		#region DanhMucQuyMoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DanhMucQuyMo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DanhMucQuyMoProviderBase DanhMucQuyMoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DanhMucQuyMoProvider;
			}
		}
		
		#endregion
		
		#region KcqKhoiLuongGiangDayChiTietProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqKhoiLuongGiangDayChiTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqKhoiLuongGiangDayChiTietProviderBase KcqKhoiLuongGiangDayChiTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqKhoiLuongGiangDayChiTietProvider;
			}
		}
		
		#endregion
		
		#region HeSoChucDanhChuyenMonProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoChucDanhChuyenMon"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoChucDanhChuyenMonProviderBase HeSoChucDanhChuyenMonProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoChucDanhChuyenMonProvider;
			}
		}
		
		#endregion
		
		#region HeSoCongViecProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoCongViec"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoCongViecProviderBase HeSoCongViecProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoCongViecProvider;
			}
		}
		
		#endregion
		
		#region KcqKhoiLuongThucTapCuoiKhoaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqKhoiLuongThucTapCuoiKhoa"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqKhoiLuongThucTapCuoiKhoaProviderBase KcqKhoiLuongThucTapCuoiKhoaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqKhoiLuongThucTapCuoiKhoaProvider;
			}
		}
		
		#endregion
		
		#region KcqKhoiLuongDoAnTotNghiepChiTietProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqKhoiLuongDoAnTotNghiepChiTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqKhoiLuongDoAnTotNghiepChiTietProviderBase KcqKhoiLuongDoAnTotNghiepChiTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqKhoiLuongDoAnTotNghiepChiTietProvider;
			}
		}
		
		#endregion
		
		#region KcqKhoiLuongGiangDayDoAnTotNghiepProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqKhoiLuongGiangDayDoAnTotNghiep"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqKhoiLuongGiangDayDoAnTotNghiepProviderBase KcqKhoiLuongGiangDayDoAnTotNghiepProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqKhoiLuongGiangDayDoAnTotNghiepProvider;
			}
		}
		
		#endregion
		
		#region DinhMucGioChuanToiThieuTheoChucVuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="DinhMucGioChuanToiThieuTheoChucVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static DinhMucGioChuanToiThieuTheoChucVuProviderBase DinhMucGioChuanToiThieuTheoChucVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.DinhMucGioChuanToiThieuTheoChucVuProvider;
			}
		}
		
		#endregion
		
		#region KcqKhoanQuyDoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqKhoanQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqKhoanQuyDoiProviderBase KcqKhoanQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqKhoanQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region KcqHeSoCoSoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqHeSoCoSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqHeSoCoSoProviderBase KcqHeSoCoSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqHeSoCoSoProvider;
			}
		}
		
		#endregion
		
		#region KcqMonXepLichChuNhatKhongTinhHeSoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqMonXepLichChuNhatKhongTinhHeSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqMonXepLichChuNhatKhongTinhHeSoProviderBase KcqMonXepLichChuNhatKhongTinhHeSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqMonXepLichChuNhatKhongTinhHeSoProvider;
			}
		}
		
		#endregion
		
		#region KcqKhoiLuongKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqKhoiLuongKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqKhoiLuongKhacProviderBase KcqKhoiLuongKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqKhoiLuongKhacProvider;
			}
		}
		
		#endregion
		
		#region KcqHeSoDiaDiemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqHeSoDiaDiem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqHeSoDiaDiemProviderBase KcqHeSoDiaDiemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqHeSoDiaDiemProvider;
			}
		}
		
		#endregion
		
		#region KcqPhanBienLuanAnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqPhanBienLuanAn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqPhanBienLuanAnProviderBase KcqPhanBienLuanAnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqPhanBienLuanAnProvider;
			}
		}
		
		#endregion
		
		#region KcqDonGiaNgoaiQuyCheProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqDonGiaNgoaiQuyChe"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqDonGiaNgoaiQuyCheProviderBase KcqDonGiaNgoaiQuyCheProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqDonGiaNgoaiQuyCheProvider;
			}
		}
		
		#endregion
		
		#region KcqChotKhoiLuongGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqChotKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqChotKhoiLuongGiangDayProviderBase KcqChotKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqChotKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region KcqKhoiLuongGiangDayDoAnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqKhoiLuongGiangDayDoAn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqKhoiLuongGiangDayDoAnProviderBase KcqKhoiLuongGiangDayDoAnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqKhoiLuongGiangDayDoAnProvider;
			}
		}
		
		#endregion
		
		#region KcqKetQuaThanhToanThuLaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqKetQuaThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqKetQuaThanhToanThuLaoProviderBase KcqKetQuaThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqKetQuaThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region HeSoBacDaoTaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoBacDaoTao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoBacDaoTaoProviderBase HeSoBacDaoTaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoBacDaoTaoProvider;
			}
		}
		
		#endregion
		
		#region KcqUteKhoiLuongQuyDoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqUteKhoiLuongQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqUteKhoiLuongQuyDoiProviderBase KcqUteKhoiLuongQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqUteKhoiLuongQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region KcqMonPhanCongNhieuGiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqMonPhanCongNhieuGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqMonPhanCongNhieuGiangVienProviderBase KcqMonPhanCongNhieuGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqMonPhanCongNhieuGiangVienProvider;
			}
		}
		
		#endregion
		
		#region KcqMonTieuLuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqMonTieuLuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqMonTieuLuanProviderBase KcqMonTieuLuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqMonTieuLuanProvider;
			}
		}
		
		#endregion
		
		#region GiangVienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienProviderBase GiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienProvider;
			}
		}
		
		#endregion
		
		#region KcqPhuCapHanhChinhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqPhuCapHanhChinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqPhuCapHanhChinhProviderBase KcqPhuCapHanhChinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqPhuCapHanhChinhProvider;
			}
		}
		
		#endregion
		
		#region GiangVienGiangDayGdtcQpProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GiangVienGiangDayGdtcQp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GiangVienGiangDayGdtcQpProviderBase GiangVienGiangDayGdtcQpProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GiangVienGiangDayGdtcQpProvider;
			}
		}
		
		#endregion
		
		#region KcqHeSoHocKyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqHeSoHocKy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqHeSoHocKyProviderBase KcqHeSoHocKyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqHeSoHocKyProvider;
			}
		}
		
		#endregion
		
		#region KcqPhanNhomMonHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqPhanNhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqPhanNhomMonHocProviderBase KcqPhanNhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqPhanNhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region KetQuaThanhToanThuLaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KetQuaThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KetQuaThanhToanThuLaoProviderBase KetQuaThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KetQuaThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region KcqNhomMonHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqNhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqNhomMonHocProviderBase KcqNhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqNhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region KcqMonTinhTheoQuyCheMoiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqMonTinhTheoQuyCheMoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqMonTinhTheoQuyCheMoiProviderBase KcqMonTinhTheoQuyCheMoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqMonTinhTheoQuyCheMoiProvider;
			}
		}
		
		#endregion
		
		#region KcqCauHinhChotGioProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqCauHinhChotGio"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqCauHinhChotGioProviderBase KcqCauHinhChotGioProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqCauHinhChotGioProvider;
			}
		}
		
		#endregion
		
		#region KcqPhanLoaiHocPhanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqPhanLoaiHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqPhanLoaiHocPhanProviderBase KcqPhanLoaiHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqPhanLoaiHocPhanProvider;
			}
		}
		
		#endregion
		
		#region KcqMonThucTapTotNghiepProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqMonThucTapTotNghiep"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqMonThucTapTotNghiepProviderBase KcqMonThucTapTotNghiepProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqMonThucTapTotNghiepProvider;
			}
		}
		
		#endregion
		
		#region KcqMonHocKhongTinhKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqMonHocKhongTinhKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqMonHocKhongTinhKhoiLuongProviderBase KcqMonHocKhongTinhKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqMonHocKhongTinhKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region KcqHeSoQuyDoiTinChiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqHeSoQuyDoiTinChi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqHeSoQuyDoiTinChiProviderBase KcqHeSoQuyDoiTinChiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqHeSoQuyDoiTinChiProvider;
			}
		}
		
		#endregion
		
		#region KcqDonGiaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqDonGia"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqDonGiaProviderBase KcqDonGiaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqDonGiaProvider;
			}
		}
		
		#endregion
		
		#region KcqLoaiKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqLoaiKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqLoaiKhoiLuongProviderBase KcqLoaiKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqLoaiKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region HeSoNhomMonProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoNhomMon"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoNhomMonProviderBase HeSoNhomMonProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoNhomMonProvider;
			}
		}
		
		#endregion
		
		#region HoatDongNgoaiGiangDayClcProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HoatDongNgoaiGiangDayClc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HoatDongNgoaiGiangDayClcProviderBase HoatDongNgoaiGiangDayClcProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HoatDongNgoaiGiangDayClcProvider;
			}
		}
		
		#endregion
		
		#region HeThongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeThong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeThongProviderBase HeThongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeThongProvider;
			}
		}
		
		#endregion
		
		#region HeSoCoSoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoCoSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoCoSoProviderBase HeSoCoSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoCoSoProvider;
			}
		}
		
		#endregion
		
		#region HeSoNgayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoNgay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoNgayProviderBase HeSoNgayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoNgayProvider;
			}
		}
		
		#endregion
		
		#region HeSoKhoiLuongCongThemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoKhoiLuongCongThem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoKhoiLuongCongThemProviderBase HeSoKhoiLuongCongThemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoKhoiLuongCongThemProvider;
			}
		}
		
		#endregion
		
		#region HoatDongNgoaiGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HoatDongNgoaiGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HoatDongNgoaiGiangDayProviderBase HoatDongNgoaiGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HoatDongNgoaiGiangDayProvider;
			}
		}
		
		#endregion
		
		#region HeSoLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoLuongProviderBase HeSoLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoLuongProvider;
			}
		}
		
		#endregion
		
		#region HeSoCoVanHocTapProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoCoVanHocTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoCoVanHocTapProviderBase HeSoCoVanHocTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoCoVanHocTapProvider;
			}
		}
		
		#endregion
		
		#region HeSoHocKyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoHocKy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoHocKyProviderBase HeSoHocKyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoHocKyProvider;
			}
		}
		
		#endregion
		
		#region HeSoNgoaiGioProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoNgoaiGio"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoNgoaiGioProviderBase HeSoNgoaiGioProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoNgoaiGioProvider;
			}
		}
		
		#endregion
		
		#region HeSoNhomThucHanhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoNhomThucHanh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoNhomThucHanhProviderBase HeSoNhomThucHanhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoNhomThucHanhProvider;
			}
		}
		
		#endregion
		
		#region KcqNhomKhoiLuongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqNhomKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqNhomKhoiLuongProviderBase KcqNhomKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqNhomKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region HeSoChucDanhKhoiLuongKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoChucDanhKhoiLuongKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoChucDanhKhoiLuongKhacProviderBase HeSoChucDanhKhoiLuongKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoChucDanhKhoiLuongKhacProvider;
			}
		}
		
		#endregion
		
		#region HeSoChucDanhTietNghiaVuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoChucDanhTietNghiaVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoChucDanhTietNghiaVuProviderBase HeSoChucDanhTietNghiaVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoChucDanhTietNghiaVuProvider;
			}
		}
		
		#endregion
		
		#region HeSoKhoiNganhProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoKhoiNganh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoKhoiNganhProviderBase HeSoKhoiNganhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoKhoiNganhProvider;
			}
		}
		
		#endregion
		
		#region HeSoNgonNguProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoNgonNgu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoNgonNguProviderBase HeSoNgonNguProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoNgonNguProvider;
			}
		}
		
		#endregion
		
		#region HoSoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HoSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HoSoProviderBase HoSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HoSoProvider;
			}
		}
		
		#endregion
		
		#region HopDongThinhGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HopDongThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HopDongThinhGiangProviderBase HopDongThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HopDongThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region HeSoThamNienProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoThamNien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoThamNienProviderBase HeSoThamNienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoThamNienProvider;
			}
		}
		
		#endregion
		
		#region HeSoThoiGianGiangDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoThoiGianGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoThoiGianGiangDayProviderBase HeSoThoiGianGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoThoiGianGiangDayProvider;
			}
		}
		
		#endregion
		
		#region HuongDanKhoaLuanThucTapProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HuongDanKhoaLuanThucTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HuongDanKhoaLuanThucTapProviderBase HuongDanKhoaLuanThucTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HuongDanKhoaLuanThucTapProvider;
			}
		}
		
		#endregion
		
		#region HoatDongChuyenMonKhacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HoatDongChuyenMonKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HoatDongChuyenMonKhacProviderBase HoatDongChuyenMonKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HoatDongChuyenMonKhacProvider;
			}
		}
		
		#endregion
		
		#region HeSoLopDongProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoLopDong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoLopDongProviderBase HeSoLopDongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoLopDongProvider;
			}
		}
		
		#endregion
		
		#region HeSoQuyDoiGioChuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoQuyDoiGioChuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoQuyDoiGioChuanProviderBase HeSoQuyDoiGioChuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoQuyDoiGioChuanProvider;
			}
		}
		
		#endregion
		
		#region HistoryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="History"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HistoryProviderBase HistoryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HistoryProvider;
			}
		}
		
		#endregion
		
		#region KcqHopDongThinhGiangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="KcqHopDongThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static KcqHopDongThinhGiangProviderBase KcqHopDongThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.KcqHopDongThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region HeSoTinChiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoTinChi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoTinChiProviderBase HeSoTinChiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoTinChiProvider;
			}
		}
		
		#endregion
		
		#region HeSoThucTapProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoThucTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoThucTapProviderBase HeSoThucTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoThucTapProvider;
			}
		}
		
		#endregion
		
		#region XetDuyetDeCuongLuanVanCaoHocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="XetDuyetDeCuongLuanVanCaoHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static XetDuyetDeCuongLuanVanCaoHocProviderBase XetDuyetDeCuongLuanVanCaoHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.XetDuyetDeCuongLuanVanCaoHocProvider;
			}
		}
		
		#endregion
		
		#region HinhThucDaoTaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HinhThucDaoTao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HinhThucDaoTaoProviderBase HinhThucDaoTaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HinhThucDaoTaoProvider;
			}
		}
		
		#endregion
		
		#region HeSoThanhToanGioChuanVuotMucProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoThanhToanGioChuanVuotMuc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoThanhToanGioChuanVuotMucProviderBase HeSoThanhToanGioChuanVuotMucProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoThanhToanGioChuanVuotMucProvider;
			}
		}
		
		#endregion
		
		#region HeSoQuyDoiTinChiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoQuyDoiTinChi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoQuyDoiTinChiProviderBase HeSoQuyDoiTinChiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoQuyDoiTinChiProvider;
			}
		}
		
		#endregion
		
		#region ThuLaoThoaThuanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ThuLaoThoaThuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ThuLaoThoaThuanProviderBase ThuLaoThoaThuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ThuLaoThoaThuanProvider;
			}
		}
		
		#endregion
		
		#region UteThanhToanThuLaoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="UteThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static UteThanhToanThuLaoProviderBase UteThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.UteThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region HeSoQuyDoiGioTroiProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HeSoQuyDoiGioTroi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HeSoQuyDoiGioTroiProviderBase HeSoQuyDoiGioTroiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HeSoQuyDoiGioTroiProvider;
			}
		}
		
		#endregion
		
		
		#region VChiTietKhoiLuongProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VChiTietKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VChiTietKhoiLuongProviderBase VChiTietKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VChiTietKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region VChiTietKhoiLuongThucDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VChiTietKhoiLuongThucDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VChiTietKhoiLuongThucDayProviderBase VChiTietKhoiLuongThucDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VChiTietKhoiLuongThucDayProvider;
			}
		}
		
		#endregion
		
		#region VChiTietQuyDoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VChiTietQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VChiTietQuyDoiProviderBase VChiTietQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VChiTietQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region VGiangVienChucVuProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VGiangVienChucVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VGiangVienChucVuProviderBase VGiangVienChucVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VGiangVienChucVuProvider;
			}
		}
		
		#endregion
		
		#region VKhoiLuongThucDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VKhoiLuongThucDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VKhoiLuongThucDayProviderBase VKhoiLuongThucDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VKhoiLuongThucDayProvider;
			}
		}
		
		#endregion
		
		#region VLopHocPhanKhongPhanCongProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VLopHocPhanKhongPhanCong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VLopHocPhanKhongPhanCongProviderBase VLopHocPhanKhongPhanCongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VLopHocPhanKhongPhanCongProvider;
			}
		}
		
		#endregion
		
		#region VMonHocTinChiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VMonHocTinChi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VMonHocTinChiProviderBase VMonHocTinChiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VMonHocTinChiProvider;
			}
		}
		
		#endregion
		
		#region VThanhToanThuLaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VThanhToanThuLaoProviderBase VThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region VTongHopKhoiLuongProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VTongHopKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VTongHopKhoiLuongProviderBase VTongHopKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VTongHopKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region VTongHopQuyDoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VTongHopQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VTongHopQuyDoiProviderBase VTongHopQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VTongHopQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region VTongHopThuLaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VTongHopThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VTongHopThuLaoProviderBase VTongHopThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VTongHopThuLaoProvider;
			}
		}
		
		#endregion
		
		#region ViewBacDaoTaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewBacDaoTao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewBacDaoTaoProviderBase ViewBacDaoTaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewBacDaoTaoProvider;
			}
		}
		
		#endregion
		
		#region ViewBacDaoTaoLoaiHinhProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewBacDaoTaoLoaiHinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewBacDaoTaoLoaiHinhProviderBase ViewBacDaoTaoLoaiHinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewBacDaoTaoLoaiHinhProvider;
			}
		}
		
		#endregion
		
		#region ViewBangPhuTroiGioDayGiangVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewBangPhuTroiGioDayGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewBangPhuTroiGioDayGiangVienProviderBase ViewBangPhuTroiGioDayGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewBangPhuTroiGioDayGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ViewBuoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewBuoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewBuoiProviderBase ViewBuoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewBuoiProvider;
			}
		}
		
		#endregion
		
		#region ViewCauHinhProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewCauHinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewCauHinhProviderBase ViewCauHinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewCauHinhProvider;
			}
		}
		
		#endregion
		
		#region ViewChiTienCoVanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewChiTienCoVan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewChiTienCoVanProviderBase ViewChiTienCoVanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewChiTienCoVanProvider;
			}
		}
		
		#endregion
		
		#region ViewChiTietGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewChiTietGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewChiTietGiangDayProviderBase ViewChiTietGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewChiTietGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewChiTietHocPhanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewChiTietHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewChiTietHocPhanProviderBase ViewChiTietHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewChiTietHocPhanProvider;
			}
		}
		
		#endregion
		
		#region ViewChiTietKhoiLuongProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewChiTietKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewChiTietKhoiLuongProviderBase ViewChiTietKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewChiTietKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region ViewChiTietKhoiLuongGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewChiTietKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewChiTietKhoiLuongGiangDayProviderBase ViewChiTietKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewChiTietKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewChiTietKhoiLuongThucDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewChiTietKhoiLuongThucDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewChiTietKhoiLuongThucDayProviderBase ViewChiTietKhoiLuongThucDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewChiTietKhoiLuongThucDayProvider;
			}
		}
		
		#endregion
		
		#region ViewChiTietPhanCongGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewChiTietPhanCongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewChiTietPhanCongGiangDayProviderBase ViewChiTietPhanCongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewChiTietPhanCongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewChiTietQuyDoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewChiTietQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewChiTietQuyDoiProviderBase ViewChiTietQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewChiTietQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region ViewCoSoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewCoSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewCoSoProviderBase ViewCoSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewCoSoProvider;
			}
		}
		
		#endregion
		
		#region ViewCoVanHocTapProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewCoVanHocTap"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewCoVanHocTapProviderBase ViewCoVanHocTapProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewCoVanHocTapProvider;
			}
		}
		
		#endregion
		
		#region ViewDanhSachHopDongThinhGiangProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewDanhSachHopDongThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewDanhSachHopDongThinhGiangProviderBase ViewDanhSachHopDongThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewDanhSachHopDongThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region ViewDanhSachLopPhanCongGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewDanhSachLopPhanCongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewDanhSachLopPhanCongGiangDayProviderBase ViewDanhSachLopPhanCongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewDanhSachLopPhanCongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewDanTocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewDanToc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewDanTocProviderBase ViewDanTocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewDanTocProvider;
			}
		}
		
		#endregion
		
		#region ViewDoiTuongDonGiaProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewDoiTuongDonGia"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewDoiTuongDonGiaProviderBase ViewDoiTuongDonGiaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewDoiTuongDonGiaProvider;
			}
		}
		
		#endregion
		
		#region ViewDonGiaNgoaiQuyCheProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewDonGiaNgoaiQuyChe"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewDonGiaNgoaiQuyCheProviderBase ViewDonGiaNgoaiQuyCheProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewDonGiaNgoaiQuyCheProvider;
			}
		}
		
		#endregion
		
		#region ViewDonViProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewDonVi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewDonViProviderBase ViewDonViProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewDonViProvider;
			}
		}
		
		#endregion
		
		#region ViewGiamTruGioChuanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewGiamTruGioChuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewGiamTruGioChuanProviderBase ViewGiamTruGioChuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewGiamTruGioChuanProvider;
			}
		}
		
		#endregion
		
		#region ViewGiangVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewGiangVienProviderBase ViewGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ViewGiangVienKhoaProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewGiangVienKhoa"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewGiangVienKhoaProviderBase ViewGiangVienKhoaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewGiangVienKhoaProvider;
			}
		}
		
		#endregion
		
		#region ViewGiangVienLopHocPhanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewGiangVienLopHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewGiangVienLopHocPhanProviderBase ViewGiangVienLopHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewGiangVienLopHocPhanProvider;
			}
		}
		
		#endregion
		
		#region ViewGiangVienNckhProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewGiangVienNckh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewGiangVienNckhProviderBase ViewGiangVienNckhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewGiangVienNckhProvider;
			}
		}
		
		#endregion
		
		#region ViewGiangVienNghienCuuKhoaHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewGiangVienNghienCuuKhoaHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewGiangVienNghienCuuKhoaHocProviderBase ViewGiangVienNghienCuuKhoaHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewGiangVienNghienCuuKhoaHocProvider;
			}
		}
		
		#endregion
		
		#region ViewHeDaoTaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHeDaoTao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHeDaoTaoProviderBase ViewHeDaoTaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHeDaoTaoProvider;
			}
		}
		
		#endregion
		
		#region ViewHeSoLopDongHbuProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHeSoLopDongHbu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHeSoLopDongHbuProviderBase ViewHeSoLopDongHbuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHeSoLopDongHbuProvider;
			}
		}
		
		#endregion
		
		#region ViewHeSoLuongHocHamHocViProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHeSoLuongHocHamHocVi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHeSoLuongHocHamHocViProviderBase ViewHeSoLuongHocHamHocViProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHeSoLuongHocHamHocViProvider;
			}
		}
		
		#endregion
		
		#region ViewHesoThuLaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHesoThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHesoThuLaoProviderBase ViewHesoThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHesoThuLaoProvider;
			}
		}
		
		#endregion
		
		#region ViewHeSoTinChiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHeSoTinChi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHeSoTinChiProviderBase ViewHeSoTinChiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHeSoTinChiProvider;
			}
		}
		
		#endregion
		
		#region ViewHinhThucThiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHinhThucThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHinhThucThiProviderBase ViewHinhThucThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHinhThucThiProvider;
			}
		}
		
		#endregion
		
		#region ViewHinhThucViPhamProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHinhThucViPham"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHinhThucViPhamProviderBase ViewHinhThucViPhamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHinhThucViPhamProvider;
			}
		}
		
		#endregion
		
		#region ViewHocKyProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHocKy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHocKyProviderBase ViewHocKyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHocKyProvider;
			}
		}
		
		#endregion
		
		#region ViewHocPhanMonHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHocPhanMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHocPhanMonHocProviderBase ViewHocPhanMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHocPhanMonHocProvider;
			}
		}
		
		#endregion
		
		#region ViewHopDongThinhGiangProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewHopDongThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewHopDongThinhGiangProviderBase ViewHopDongThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewHopDongThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqDonGiaNgoaiQuyCheProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqDonGiaNgoaiQuyChe"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqDonGiaNgoaiQuyCheProviderBase ViewKcqDonGiaNgoaiQuyCheProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqDonGiaNgoaiQuyCheProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqHopDongThinhGiangProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqHopDongThinhGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqHopDongThinhGiangProviderBase ViewKcqHopDongThinhGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqHopDongThinhGiangProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqKetQuaThanhToanThuLaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqKetQuaThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqKetQuaThanhToanThuLaoProviderBase ViewKcqKetQuaThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqKetQuaThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqLietKeKhoiLuongGiangDayChiTiet2Provider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqLietKeKhoiLuongGiangDayChiTiet2"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqLietKeKhoiLuongGiangDayChiTiet2ProviderBase ViewKcqLietKeKhoiLuongGiangDayChiTiet2Provider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqLietKeKhoiLuongGiangDayChiTiet2Provider;
			}
		}
		
		#endregion
		
		#region ViewKcqMonThucTapTotNghiepProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqMonThucTapTotNghiep"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqMonThucTapTotNghiepProviderBase ViewKcqMonThucTapTotNghiepProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqMonThucTapTotNghiepProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqMonTinhTheoQuyCheMoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqMonTinhTheoQuyCheMoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqMonTinhTheoQuyCheMoiProviderBase ViewKcqMonTinhTheoQuyCheMoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqMonTinhTheoQuyCheMoiProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqMonXepLichChuNhatKhongTinhHeSoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqMonXepLichChuNhatKhongTinhHeSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqMonXepLichChuNhatKhongTinhHeSoProviderBase ViewKcqMonXepLichChuNhatKhongTinhHeSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqMonXepLichChuNhatKhongTinhHeSoProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqPhanNhomMonHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqPhanNhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqPhanNhomMonHocProviderBase ViewKcqPhanNhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqPhanNhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqPhanNhomMonHocActProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqPhanNhomMonHocAct"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqPhanNhomMonHocActProviderBase ViewKcqPhanNhomMonHocActProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqPhanNhomMonHocActProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqPhuCapHanhChinhProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqPhuCapHanhChinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqPhuCapHanhChinhProviderBase ViewKcqPhuCapHanhChinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqPhuCapHanhChinhProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqUteKhoiLuongGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqUteKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqUteKhoiLuongGiangDayProviderBase ViewKcqUteKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqUteKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewKcqUteKhoiLuongQuyDoi2Provider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKcqUteKhoiLuongQuyDoi2"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKcqUteKhoiLuongQuyDoi2ProviderBase ViewKcqUteKhoiLuongQuyDoi2Provider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKcqUteKhoiLuongQuyDoi2Provider;
			}
		}
		
		#endregion
		
		#region ViewKetQuaCacKhoanChiKhacProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKetQuaCacKhoanChiKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKetQuaCacKhoanChiKhacProviderBase ViewKetQuaCacKhoanChiKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKetQuaCacKhoanChiKhacProvider;
			}
		}
		
		#endregion
		
		#region ViewKetQuaThanhToanThuLaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKetQuaThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKetQuaThanhToanThuLaoProviderBase ViewKetQuaThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKetQuaThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region ViewKetQuaTinhProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKetQuaTinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKetQuaTinhProviderBase ViewKetQuaTinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKetQuaTinhProvider;
			}
		}
		
		#endregion
		
		#region ViewKhoaProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKhoa"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKhoaProviderBase ViewKhoaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKhoaProvider;
			}
		}
		
		#endregion
		
		#region ViewKhoaBoMonProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKhoaBoMon"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKhoaBoMonProviderBase ViewKhoaBoMonProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKhoaBoMonProvider;
			}
		}
		
		#endregion
		
		#region ViewKhoaHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKhoaHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKhoaHocProviderBase ViewKhoaHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKhoaHocProvider;
			}
		}
		
		#endregion
		
		#region ViewKhoaHocBacHeProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKhoaHocBacHe"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKhoaHocBacHeProviderBase ViewKhoaHocBacHeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKhoaHocBacHeProvider;
			}
		}
		
		#endregion
		
		#region ViewKhoiLuongGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKhoiLuongGiangDayProviderBase ViewKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewKhoiLuongGiangDayCanBoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKhoiLuongGiangDayCanBo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKhoiLuongGiangDayCanBoProviderBase ViewKhoiLuongGiangDayCanBoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKhoiLuongGiangDayCanBoProvider;
			}
		}
		
		#endregion
		
		#region ViewKhoiLuongThucDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKhoiLuongThucDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKhoiLuongThucDayProviderBase ViewKhoiLuongThucDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKhoiLuongThucDayProvider;
			}
		}
		
		#endregion
		
		#region ViewKhoiLuongCacCongViecKhacProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKhoiLuongCacCongViecKhac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKhoiLuongCacCongViecKhacProviderBase ViewKhoiLuongCacCongViecKhacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKhoiLuongCacCongViecKhacProvider;
			}
		}
		
		#endregion
		
		#region ViewKyThiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewKyThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewKyThiProviderBase ViewKyThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewKyThiProvider;
			}
		}
		
		#endregion
		
		#region ViewLietKeKhoiLuongGiangDayChiTietProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLietKeKhoiLuongGiangDayChiTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLietKeKhoiLuongGiangDayChiTietProviderBase ViewLietKeKhoiLuongGiangDayChiTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLietKeKhoiLuongGiangDayChiTietProvider;
			}
		}
		
		#endregion
		
		#region ViewLietKeKhoiLuongGiangDayChiTietUsshProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLietKeKhoiLuongGiangDayChiTietUssh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLietKeKhoiLuongGiangDayChiTietUsshProviderBase ViewLietKeKhoiLuongGiangDayChiTietUsshProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLietKeKhoiLuongGiangDayChiTietUsshProvider;
			}
		}
		
		#endregion
		
		#region ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtProviderBase ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtProvider;
			}
		}
		
		#endregion
		
		#region ViewLietKeKhoiLuongGiangDayChiTiet2Provider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLietKeKhoiLuongGiangDayChiTiet2"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLietKeKhoiLuongGiangDayChiTiet2ProviderBase ViewLietKeKhoiLuongGiangDayChiTiet2Provider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLietKeKhoiLuongGiangDayChiTiet2Provider;
			}
		}
		
		#endregion
		
		#region ViewLoaiHinhDaoTaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLoaiHinhDaoTao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLoaiHinhDaoTaoProviderBase ViewLoaiHinhDaoTaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLoaiHinhDaoTaoProvider;
			}
		}
		
		#endregion
		
		#region ViewLoaiHocPhanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLoaiHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLoaiHocPhanProviderBase ViewLoaiHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLoaiHocPhanProvider;
			}
		}
		
		#endregion
		
		#region ViewLopProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLop"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLopProviderBase ViewLopProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLopProvider;
			}
		}
		
		#endregion
		
		#region ViewLopChatLuongCaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLopChatLuongCao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLopChatLuongCaoProviderBase ViewLopChatLuongCaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLopChatLuongCaoProvider;
			}
		}
		
		#endregion
		
		#region ViewLopHocPhanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLopHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLopHocPhanProviderBase ViewLopHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLopHocPhanProvider;
			}
		}
		
		#endregion
		
		#region ViewLopHocPhanClcAufCjlProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLopHocPhanClcAufCjl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLopHocPhanClcAufCjlProviderBase ViewLopHocPhanClcAufCjlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLopHocPhanClcAufCjlProvider;
			}
		}
		
		#endregion
		
		#region ViewLopHocPhanChuyenNganhProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLopHocPhanChuyenNganh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLopHocPhanChuyenNganhProviderBase ViewLopHocPhanChuyenNganhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLopHocPhanChuyenNganhProvider;
			}
		}
		
		#endregion
		
		#region ViewLopHocPhanGiangBangTiengNuocNgoaiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLopHocPhanGiangBangTiengNuocNgoai"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLopHocPhanGiangBangTiengNuocNgoaiProviderBase ViewLopHocPhanGiangBangTiengNuocNgoaiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLopHocPhanGiangBangTiengNuocNgoaiProvider;
			}
		}
		
		#endregion
		
		#region ViewLopHocPhanGiangBangTiengNuocNgoaiBuhProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewLopHocPhanGiangBangTiengNuocNgoaiBuh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewLopHocPhanGiangBangTiengNuocNgoaiBuhProviderBase ViewLopHocPhanGiangBangTiengNuocNgoaiBuhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewLopHocPhanGiangBangTiengNuocNgoaiBuhProvider;
			}
		}
		
		#endregion
		
		#region ViewMonGiangMoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewMonGiangMoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewMonGiangMoiProviderBase ViewMonGiangMoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewMonGiangMoiProvider;
			}
		}
		
		#endregion
		
		#region ViewMonHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewMonHocProviderBase ViewMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewMonHocProvider;
			}
		}
		
		#endregion
		
		#region ViewMonHocKhoaProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewMonHocKhoa"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewMonHocKhoaProviderBase ViewMonHocKhoaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewMonHocKhoaProvider;
			}
		}
		
		#endregion
		
		#region ViewMonThucTapTotNghiepProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewMonThucTapTotNghiep"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewMonThucTapTotNghiepProviderBase ViewMonThucTapTotNghiepProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewMonThucTapTotNghiepProvider;
			}
		}
		
		#endregion
		
		#region ViewMonTinhTheoQuyCheMoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewMonTinhTheoQuyCheMoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewMonTinhTheoQuyCheMoiProviderBase ViewMonTinhTheoQuyCheMoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewMonTinhTheoQuyCheMoiProvider;
			}
		}
		
		#endregion
		
		#region ViewMonXepLichChuNhatKhongTinhHeSoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewMonXepLichChuNhatKhongTinhHeSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewMonXepLichChuNhatKhongTinhHeSoProviderBase ViewMonXepLichChuNhatKhongTinhHeSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewMonXepLichChuNhatKhongTinhHeSoProvider;
			}
		}
		
		#endregion
		
		#region ViewNamHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewNamHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewNamHocProviderBase ViewNamHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewNamHocProvider;
			}
		}
		
		#endregion
		
		#region ViewNgachLuongHrmProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewNgachLuongHrm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewNgachLuongHrmProviderBase ViewNgachLuongHrmProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewNgachLuongHrmProvider;
			}
		}
		
		#endregion
		
		#region ViewNgayTrongTuanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewNgayTrongTuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewNgayTrongTuanProviderBase ViewNgayTrongTuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewNgayTrongTuanProvider;
			}
		}
		
		#endregion
		
		#region ViewNhomMonHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewNhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewNhomMonHocProviderBase ViewNhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewNhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region ViewPhanCongChuyenMonProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewPhanCongChuyenMon"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewPhanCongChuyenMonProviderBase ViewPhanCongChuyenMonProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewPhanCongChuyenMonProvider;
			}
		}
		
		#endregion
		
		#region ViewPhanCongCoVanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewPhanCongCoVan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewPhanCongCoVanProviderBase ViewPhanCongCoVanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewPhanCongCoVanProvider;
			}
		}
		
		#endregion
		
		#region ViewPhanCongGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewPhanCongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewPhanCongGiangDayProviderBase ViewPhanCongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewPhanCongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewPhanLoaiGiangVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewPhanLoaiGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewPhanLoaiGiangVienProviderBase ViewPhanLoaiGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewPhanLoaiGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ViewPhanNhomMonHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewPhanNhomMonHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewPhanNhomMonHocProviderBase ViewPhanNhomMonHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewPhanNhomMonHocProvider;
			}
		}
		
		#endregion
		
		#region ViewPhanNhomMonHocActProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewPhanNhomMonHocAct"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewPhanNhomMonHocActProviderBase ViewPhanNhomMonHocActProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewPhanNhomMonHocActProvider;
			}
		}
		
		#endregion
		
		#region ViewPhuCapHanhChinhProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewPhuCapHanhChinh"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewPhuCapHanhChinhProviderBase ViewPhuCapHanhChinhProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewPhuCapHanhChinhProvider;
			}
		}
		
		#endregion
		
		#region ViewQuyDoiHoatDongNgoaiGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewQuyDoiHoatDongNgoaiGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewQuyDoiHoatDongNgoaiGiangDayProviderBase ViewQuyDoiHoatDongNgoaiGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewQuyDoiHoatDongNgoaiGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewQuyetDinhDoiHocHamHocViProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewQuyetDinhDoiHocHamHocVi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewQuyetDinhDoiHocHamHocViProviderBase ViewQuyetDinhDoiHocHamHocViProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewQuyetDinhDoiHocHamHocViProvider;
			}
		}
		
		#endregion
		
		#region ViewSdhLietKeKhoiLuongGiangDayChiTietProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewSdhLietKeKhoiLuongGiangDayChiTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewSdhLietKeKhoiLuongGiangDayChiTietProviderBase ViewSdhLietKeKhoiLuongGiangDayChiTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewSdhLietKeKhoiLuongGiangDayChiTietProvider;
			}
		}
		
		#endregion
		
		#region ViewSdhUteKhoiLuongQuyDoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewSdhUteKhoiLuongQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewSdhUteKhoiLuongQuyDoiProviderBase ViewSdhUteKhoiLuongQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewSdhUteKhoiLuongQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region ViewSinhVienHocPhanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewSinhVienHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewSinhVienHocPhanProviderBase ViewSinhVienHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewSinhVienHocPhanProvider;
			}
		}
		
		#endregion
		
		#region ViewSinhVienLopProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewSinhVienLop"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewSinhVienLopProviderBase ViewSinhVienLopProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewSinhVienLopProvider;
			}
		}
		
		#endregion
		
		#region ViewSinhVienLopHocPhanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewSinhVienLopHocPhan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewSinhVienLopHocPhanProviderBase ViewSinhVienLopHocPhanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewSinhVienLopHocPhanProvider;
			}
		}
		
		#endregion
		
		#region ViewSinhVienLopHocPhanSgProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewSinhVienLopHocPhanSg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewSinhVienLopHocPhanSgProviderBase ViewSinhVienLopHocPhanSgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewSinhVienLopHocPhanSgProvider;
			}
		}
		
		#endregion
		
		#region ViewSoTietCoiThiTieuChuanCuaGiangVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewSoTietCoiThiTieuChuanCuaGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewSoTietCoiThiTieuChuanCuaGiangVienProviderBase ViewSoTietCoiThiTieuChuanCuaGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewSoTietCoiThiTieuChuanCuaGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ViewThamDinhLuanVanThacSyProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThamDinhLuanVanThacSy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThamDinhLuanVanThacSyProviderBase ViewThamDinhLuanVanThacSyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThamDinhLuanVanThacSyProvider;
			}
		}
		
		#endregion
		
		#region ViewThanhToanGioDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThanhToanGioDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThanhToanGioDayProviderBase ViewThanhToanGioDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThanhToanGioDayProvider;
			}
		}
		
		#endregion
		
		#region ViewThanhToanThuLaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThanhToanThuLao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThanhToanThuLaoProviderBase ViewThanhToanThuLaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThanhToanThuLaoProvider;
			}
		}
		
		#endregion
		
		#region ViewThanhToanTienGiangProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThanhToanTienGiang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThanhToanTienGiangProviderBase ViewThanhToanTienGiangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThanhToanTienGiangProvider;
			}
		}
		
		#endregion
		
		#region ViewThanhTraChamGiangTheoKhoaHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThanhTraChamGiangTheoKhoaHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThanhTraChamGiangTheoKhoaHocProviderBase ViewThanhTraChamGiangTheoKhoaHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThanhTraChamGiangTheoKhoaHocProvider;
			}
		}
		
		#endregion
		
		#region ViewThanhTraCoiThiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThanhTraCoiThi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThanhTraCoiThiProviderBase ViewThanhTraCoiThiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThanhTraCoiThiProvider;
			}
		}
		
		#endregion
		
		#region ViewThanhTraGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThanhTraGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThanhTraGiangDayProviderBase ViewThanhTraGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThanhTraGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewThanhTraTheoThoiKhoaBieuProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThanhTraTheoThoiKhoaBieu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThanhTraTheoThoiKhoaBieuProviderBase ViewThanhTraTheoThoiKhoaBieuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThanhTraTheoThoiKhoaBieuProvider;
			}
		}
		
		#endregion
		
		#region ViewTheoDoiGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTheoDoiGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTheoDoiGiangDayProviderBase ViewTheoDoiGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTheoDoiGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewThoiGianLamViecCuaNhanVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThoiGianLamViecCuaNhanVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThoiGianLamViecCuaNhanVienProviderBase ViewThoiGianLamViecCuaNhanVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThoiGianLamViecCuaNhanVienProvider;
			}
		}
		
		#endregion
		
		#region ViewThoiGianNghiTamThoiCuaGiangVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThoiGianNghiTamThoiCuaGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThoiGianNghiTamThoiCuaGiangVienProviderBase ViewThoiGianNghiTamThoiCuaGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThoiGianNghiTamThoiCuaGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ViewThoiKhoaBieuProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThoiKhoaBieu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThoiKhoaBieuProviderBase ViewThoiKhoaBieuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThoiKhoaBieuProvider;
			}
		}
		
		#endregion
		
		#region ViewThongKeChucVuProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThongKeChucVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThongKeChucVuProviderBase ViewThongKeChucVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThongKeChucVuProvider;
			}
		}
		
		#endregion
		
		#region ViewThongKeHoSoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThongKeHoSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThongKeHoSoProviderBase ViewThongKeHoSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThongKeHoSoProvider;
			}
		}
		
		#endregion
		
		#region ViewThongKeHoSoChiTietProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThongKeHoSoChiTiet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThongKeHoSoChiTietProviderBase ViewThongKeHoSoChiTietProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThongKeHoSoChiTietProvider;
			}
		}
		
		#endregion
		
		#region ViewThongTinChiTietGiangVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThongTinChiTietGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThongTinChiTietGiangVienProviderBase ViewThongTinChiTietGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThongTinChiTietGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ViewThongTinChiTietGiangVienChoDuyetHoSoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThongTinChiTietGiangVienChoDuyetHoSo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThongTinChiTietGiangVienChoDuyetHoSoProviderBase ViewThongTinChiTietGiangVienChoDuyetHoSoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThongTinChiTietGiangVienChoDuyetHoSoProvider;
			}
		}
		
		#endregion
		
		#region ViewThongTinGiangVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThongTinGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThongTinGiangVienProviderBase ViewThongTinGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThongTinGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ViewThongTinLopHocPhanHeSoCongViecProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewThongTinLopHocPhanHeSoCongViec"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewThongTinLopHocPhanHeSoCongViecProviderBase ViewThongTinLopHocPhanHeSoCongViecProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewThongTinLopHocPhanHeSoCongViecProvider;
			}
		}
		
		#endregion
		
		#region ViewTietGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTietGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTietGiangDayProviderBase ViewTietGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTietGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewTietNghiaVuProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTietNghiaVu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTietNghiaVuProviderBase ViewTietNghiaVuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTietNghiaVuProvider;
			}
		}
		
		#endregion
		
		#region ViewTietNghiaVuTheoNamHocHocKyProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTietNghiaVuTheoNamHocHocKy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTietNghiaVuTheoNamHocHocKyProviderBase ViewTietNghiaVuTheoNamHocHocKyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTietNghiaVuTheoNamHocHocKyProvider;
			}
		}
		
		#endregion
		
		#region ViewTietNoKyTruocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTietNoKyTruoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTietNoKyTruocProviderBase ViewTietNoKyTruocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTietNoKyTruocProvider;
			}
		}
		
		#endregion
		
		#region ViewTinhKhoiLuongProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTinhKhoiLuong"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTinhKhoiLuongProviderBase ViewTinhKhoiLuongProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTinhKhoiLuongProvider;
			}
		}
		
		#endregion
		
		#region ViewTinhKhoiLuongTungTuanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTinhKhoiLuongTungTuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTinhKhoiLuongTungTuanProviderBase ViewTinhKhoiLuongTungTuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTinhKhoiLuongTungTuanProvider;
			}
		}
		
		#endregion
		
		#region ViewTongHopChiTienCoVanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTongHopChiTienCoVan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTongHopChiTienCoVanProviderBase ViewTongHopChiTienCoVanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTongHopChiTienCoVanProvider;
			}
		}
		
		#endregion
		
		#region ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyProviderBase ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyProvider;
			}
		}
		
		#endregion
		
		#region ViewTongHopQuyDoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTongHopQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTongHopQuyDoiProviderBase ViewTongHopQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTongHopQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region ViewTongHopGioDayGiangVienProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTongHopGioDayGiangVien"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTongHopGioDayGiangVienProviderBase ViewTongHopGioDayGiangVienProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTongHopGioDayGiangVienProvider;
			}
		}
		
		#endregion
		
		#region ViewTonGiaoProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewTonGiao"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewTonGiaoProviderBase ViewTonGiaoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewTonGiaoProvider;
			}
		}
		
		#endregion
		
		#region ViewUteKhoiLuongGiangDayProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewUteKhoiLuongGiangDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewUteKhoiLuongGiangDayProviderBase ViewUteKhoiLuongGiangDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewUteKhoiLuongGiangDayProvider;
			}
		}
		
		#endregion
		
		#region ViewUteKhoiLuongQuyDoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewUteKhoiLuongQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewUteKhoiLuongQuyDoiProviderBase ViewUteKhoiLuongQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewUteKhoiLuongQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region ViewUteKhoiLuongQuyDoi2Provider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewUteKhoiLuongQuyDoi2"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewUteKhoiLuongQuyDoi2ProviderBase ViewUteKhoiLuongQuyDoi2Provider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewUteKhoiLuongQuyDoi2Provider;
			}
		}
		
		#endregion
		
		#region ViewXetDuyetDeCuongLuanVanCaoHocProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewXetDuyetDeCuongLuanVanCaoHoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewXetDuyetDeCuongLuanVanCaoHocProviderBase ViewXetDuyetDeCuongLuanVanCaoHocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewXetDuyetDeCuongLuanVanCaoHocProvider;
			}
		}
		
		#endregion
		
		#region ViewXuLyQuyDoiProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewXuLyQuyDoi"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewXuLyQuyDoiProviderBase ViewXuLyQuyDoiProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewXuLyQuyDoiProvider;
			}
		}
		
		#endregion
		
		#region ViewXuLyQuyDoiTungTuanProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ViewXuLyQuyDoiTungTuan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ViewXuLyQuyDoiTungTuanProviderBase ViewXuLyQuyDoiTungTuanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ViewXuLyQuyDoiTungTuanProvider;
			}
		}
		
		#endregion
		
		#endregion
	}
	
	#region Query/Filters
		
	#region BangPhuTroiGioDayGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="BangPhuTroiGioDayGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class BangPhuTroiGioDayGiangVienFilters : BangPhuTroiGioDayGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienFilters class.
		/// </summary>
		public BangPhuTroiGioDayGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public BangPhuTroiGioDayGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public BangPhuTroiGioDayGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion BangPhuTroiGioDayGiangVienFilters
	
	#region BangPhuTroiGioDayGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="BangPhuTroiGioDayGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="BangPhuTroiGioDayGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class BangPhuTroiGioDayGiangVienQuery : BangPhuTroiGioDayGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienQuery class.
		/// </summary>
		public BangPhuTroiGioDayGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public BangPhuTroiGioDayGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiGioDayGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public BangPhuTroiGioDayGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion BangPhuTroiGioDayGiangVienQuery
		
	#region DanhMucGioGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DanhMucGioGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucGioGiangFilters : DanhMucGioGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucGioGiangFilters class.
		/// </summary>
		public DanhMucGioGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucGioGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucGioGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucGioGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucGioGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucGioGiangFilters
	
	#region DanhMucGioGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DanhMucGioGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DanhMucGioGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucGioGiangQuery : DanhMucGioGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucGioGiangQuery class.
		/// </summary>
		public DanhMucGioGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucGioGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucGioGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucGioGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucGioGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucGioGiangQuery
		
	#region TcbKetQuaQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TcbKetQuaQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TcbKetQuaQuyDoiFilters : TcbKetQuaQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TcbKetQuaQuyDoiFilters class.
		/// </summary>
		public TcbKetQuaQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TcbKetQuaQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TcbKetQuaQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TcbKetQuaQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TcbKetQuaQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TcbKetQuaQuyDoiFilters
	
	#region TcbKetQuaQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TcbKetQuaQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TcbKetQuaQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TcbKetQuaQuyDoiQuery : TcbKetQuaQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TcbKetQuaQuyDoiQuery class.
		/// </summary>
		public TcbKetQuaQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TcbKetQuaQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TcbKetQuaQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TcbKetQuaQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TcbKetQuaQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TcbKetQuaQuyDoiQuery
		
	#region MucDoHoanThanhNckhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MucDoHoanThanhNckh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MucDoHoanThanhNckhFilters : MucDoHoanThanhNckhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MucDoHoanThanhNckhFilters class.
		/// </summary>
		public MucDoHoanThanhNckhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MucDoHoanThanhNckhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MucDoHoanThanhNckhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MucDoHoanThanhNckhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MucDoHoanThanhNckhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MucDoHoanThanhNckhFilters
	
	#region MucDoHoanThanhNckhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MucDoHoanThanhNckhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MucDoHoanThanhNckh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MucDoHoanThanhNckhQuery : MucDoHoanThanhNckhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MucDoHoanThanhNckhQuery class.
		/// </summary>
		public MucDoHoanThanhNckhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MucDoHoanThanhNckhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MucDoHoanThanhNckhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MucDoHoanThanhNckhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MucDoHoanThanhNckhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MucDoHoanThanhNckhQuery
		
	#region MonKhongTinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonKhongTinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonKhongTinhFilters : MonKhongTinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonKhongTinhFilters class.
		/// </summary>
		public MonKhongTinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonKhongTinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonKhongTinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonKhongTinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonKhongTinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonKhongTinhFilters
	
	#region MonKhongTinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonKhongTinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonKhongTinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonKhongTinhQuery : MonKhongTinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonKhongTinhQuery class.
		/// </summary>
		public MonKhongTinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonKhongTinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonKhongTinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonKhongTinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonKhongTinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonKhongTinhQuery
		
	#region QuyDinhTienCanTrenFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="QuyDinhTienCanTren"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyDinhTienCanTrenFilters : QuyDinhTienCanTrenFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenFilters class.
		/// </summary>
		public QuyDinhTienCanTrenFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyDinhTienCanTrenFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyDinhTienCanTrenFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyDinhTienCanTrenFilters
	
	#region QuyDinhTienCanTrenQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="QuyDinhTienCanTrenParameterBuilder"/> class
	/// that is used exclusively with a <see cref="QuyDinhTienCanTren"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyDinhTienCanTrenQuery : QuyDinhTienCanTrenParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenQuery class.
		/// </summary>
		public QuyDinhTienCanTrenQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyDinhTienCanTrenQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyDinhTienCanTrenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyDinhTienCanTrenQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyDinhTienCanTrenQuery
		
	#region NamHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NamHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NamHocFilters : NamHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NamHocFilters class.
		/// </summary>
		public NamHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NamHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NamHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NamHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NamHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NamHocFilters
	
	#region NamHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NamHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NamHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NamHocQuery : NamHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NamHocQuery class.
		/// </summary>
		public NamHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NamHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NamHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NamHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NamHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NamHocQuery
		
	#region NgonNguGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NgonNguGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NgonNguGiangDayFilters : NgonNguGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NgonNguGiangDayFilters class.
		/// </summary>
		public NgonNguGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NgonNguGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NgonNguGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NgonNguGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NgonNguGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NgonNguGiangDayFilters
	
	#region NgonNguGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NgonNguGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NgonNguGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NgonNguGiangDayQuery : NgonNguGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NgonNguGiangDayQuery class.
		/// </summary>
		public NgonNguGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NgonNguGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NgonNguGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NgonNguGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NgonNguGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NgonNguGiangDayQuery
		
	#region MonHocKhongTinhKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonHocKhongTinhKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonHocKhongTinhKhoiLuongFilters : MonHocKhongTinhKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		public MonHocKhongTinhKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonHocKhongTinhKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonHocKhongTinhKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonHocKhongTinhKhoiLuongFilters
	
	#region MonHocKhongTinhKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonHocKhongTinhKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonHocKhongTinhKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonHocKhongTinhKhoiLuongQuery : MonHocKhongTinhKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		public MonHocKhongTinhKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonHocKhongTinhKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonHocKhongTinhKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonHocKhongTinhKhoiLuongQuery
		
	#region NghienCuuKhoaHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NghienCuuKhoaHocFilters : NghienCuuKhoaHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocFilters class.
		/// </summary>
		public NghienCuuKhoaHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NghienCuuKhoaHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NghienCuuKhoaHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NghienCuuKhoaHocFilters
	
	#region NghienCuuKhoaHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NghienCuuKhoaHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NghienCuuKhoaHocQuery : NghienCuuKhoaHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocQuery class.
		/// </summary>
		public NghienCuuKhoaHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NghienCuuKhoaHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NghienCuuKhoaHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NghienCuuKhoaHocQuery
		
	#region PhanLoaiGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PhanLoaiGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanLoaiGiangVienFilters : PhanLoaiGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanLoaiGiangVienFilters class.
		/// </summary>
		public PhanLoaiGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanLoaiGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanLoaiGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanLoaiGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanLoaiGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanLoaiGiangVienFilters
	
	#region PhanLoaiGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PhanLoaiGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PhanLoaiGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanLoaiGiangVienQuery : PhanLoaiGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanLoaiGiangVienQuery class.
		/// </summary>
		public PhanLoaiGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanLoaiGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanLoaiGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanLoaiGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanLoaiGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanLoaiGiangVienQuery
		
	#region NhomChucNangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NhomChucNang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomChucNangFilters : NhomChucNangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomChucNangFilters class.
		/// </summary>
		public NhomChucNangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomChucNangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomChucNangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomChucNangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomChucNangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomChucNangFilters
	
	#region NhomChucNangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NhomChucNangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NhomChucNang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomChucNangQuery : NhomChucNangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomChucNangQuery class.
		/// </summary>
		public NhomChucNangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomChucNangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomChucNangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomChucNangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomChucNangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomChucNangQuery
		
	#region MonHocCoNganHangDeThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonHocCoNganHangDeThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonHocCoNganHangDeThiFilters : MonHocCoNganHangDeThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonHocCoNganHangDeThiFilters class.
		/// </summary>
		public MonHocCoNganHangDeThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonHocCoNganHangDeThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonHocCoNganHangDeThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonHocCoNganHangDeThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonHocCoNganHangDeThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonHocCoNganHangDeThiFilters
	
	#region MonHocCoNganHangDeThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonHocCoNganHangDeThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonHocCoNganHangDeThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonHocCoNganHangDeThiQuery : MonHocCoNganHangDeThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonHocCoNganHangDeThiQuery class.
		/// </summary>
		public MonHocCoNganHangDeThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonHocCoNganHangDeThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonHocCoNganHangDeThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonHocCoNganHangDeThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonHocCoNganHangDeThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonHocCoNganHangDeThiQuery
		
	#region NhomKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NhomKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomKhoiLuongFilters : NhomKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomKhoiLuongFilters class.
		/// </summary>
		public NhomKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomKhoiLuongFilters
	
	#region NhomKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NhomKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NhomKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomKhoiLuongQuery : NhomKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomKhoiLuongQuery class.
		/// </summary>
		public NhomKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomKhoiLuongQuery
		
	#region MonThucTapTotNghiepFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonThucTapTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonThucTapTotNghiepFilters : MonThucTapTotNghiepFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonThucTapTotNghiepFilters class.
		/// </summary>
		public MonThucTapTotNghiepFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonThucTapTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonThucTapTotNghiepFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonThucTapTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonThucTapTotNghiepFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonThucTapTotNghiepFilters
	
	#region MonThucTapTotNghiepQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonThucTapTotNghiepParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonThucTapTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonThucTapTotNghiepQuery : MonThucTapTotNghiepParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonThucTapTotNghiepQuery class.
		/// </summary>
		public MonThucTapTotNghiepQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonThucTapTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonThucTapTotNghiepQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonThucTapTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonThucTapTotNghiepQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonThucTapTotNghiepQuery
		
	#region NhomHoatDongNgoaiGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NhomHoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomHoatDongNgoaiGiangDayFilters : NhomHoatDongNgoaiGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		public NhomHoatDongNgoaiGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomHoatDongNgoaiGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomHoatDongNgoaiGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomHoatDongNgoaiGiangDayFilters
	
	#region NhomHoatDongNgoaiGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NhomHoatDongNgoaiGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NhomHoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomHoatDongNgoaiGiangDayQuery : NhomHoatDongNgoaiGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		public NhomHoatDongNgoaiGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomHoatDongNgoaiGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomHoatDongNgoaiGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomHoatDongNgoaiGiangDayQuery
		
	#region NamHocHienThiThuLaoLenWebFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NamHocHienThiThuLaoLenWeb"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NamHocHienThiThuLaoLenWebFilters : NamHocHienThiThuLaoLenWebFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NamHocHienThiThuLaoLenWebFilters class.
		/// </summary>
		public NamHocHienThiThuLaoLenWebFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NamHocHienThiThuLaoLenWebFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NamHocHienThiThuLaoLenWebFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NamHocHienThiThuLaoLenWebFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NamHocHienThiThuLaoLenWebFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NamHocHienThiThuLaoLenWebFilters
	
	#region NamHocHienThiThuLaoLenWebQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NamHocHienThiThuLaoLenWebParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NamHocHienThiThuLaoLenWeb"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NamHocHienThiThuLaoLenWebQuery : NamHocHienThiThuLaoLenWebParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NamHocHienThiThuLaoLenWebQuery class.
		/// </summary>
		public NamHocHienThiThuLaoLenWebQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NamHocHienThiThuLaoLenWebQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NamHocHienThiThuLaoLenWebQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NamHocHienThiThuLaoLenWebQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NamHocHienThiThuLaoLenWebQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NamHocHienThiThuLaoLenWebQuery
		
	#region MonXepLichChuNhatKhongTinhHeSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonXepLichChuNhatKhongTinhHeSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonXepLichChuNhatKhongTinhHeSoFilters : MonXepLichChuNhatKhongTinhHeSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		public MonXepLichChuNhatKhongTinhHeSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonXepLichChuNhatKhongTinhHeSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonXepLichChuNhatKhongTinhHeSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonXepLichChuNhatKhongTinhHeSoFilters
	
	#region MonXepLichChuNhatKhongTinhHeSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonXepLichChuNhatKhongTinhHeSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonXepLichChuNhatKhongTinhHeSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonXepLichChuNhatKhongTinhHeSoQuery : MonXepLichChuNhatKhongTinhHeSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		public MonXepLichChuNhatKhongTinhHeSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonXepLichChuNhatKhongTinhHeSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonXepLichChuNhatKhongTinhHeSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonXepLichChuNhatKhongTinhHeSoQuery
		
	#region PhuCapHanhChinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PhuCapHanhChinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhuCapHanhChinhFilters : PhuCapHanhChinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhuCapHanhChinhFilters class.
		/// </summary>
		public PhuCapHanhChinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhuCapHanhChinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhuCapHanhChinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhuCapHanhChinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhuCapHanhChinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhuCapHanhChinhFilters
	
	#region PhuCapHanhChinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PhuCapHanhChinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PhuCapHanhChinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhuCapHanhChinhQuery : PhuCapHanhChinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhuCapHanhChinhQuery class.
		/// </summary>
		public PhuCapHanhChinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhuCapHanhChinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhuCapHanhChinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhuCapHanhChinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhuCapHanhChinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhuCapHanhChinhQuery
		
	#region PhanCongDoAnTotNghiepFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PhanCongDoAnTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanCongDoAnTotNghiepFilters : PhanCongDoAnTotNghiepFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanCongDoAnTotNghiepFilters class.
		/// </summary>
		public PhanCongDoAnTotNghiepFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanCongDoAnTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanCongDoAnTotNghiepFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanCongDoAnTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanCongDoAnTotNghiepFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanCongDoAnTotNghiepFilters
	
	#region PhanCongDoAnTotNghiepQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PhanCongDoAnTotNghiepParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PhanCongDoAnTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanCongDoAnTotNghiepQuery : PhanCongDoAnTotNghiepParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanCongDoAnTotNghiepQuery class.
		/// </summary>
		public PhanCongDoAnTotNghiepQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanCongDoAnTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanCongDoAnTotNghiepQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanCongDoAnTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanCongDoAnTotNghiepQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanCongDoAnTotNghiepQuery
		
	#region NoiDungDanhGiaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NoiDungDanhGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NoiDungDanhGiaFilters : NoiDungDanhGiaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NoiDungDanhGiaFilters class.
		/// </summary>
		public NoiDungDanhGiaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NoiDungDanhGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NoiDungDanhGiaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NoiDungDanhGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NoiDungDanhGiaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NoiDungDanhGiaFilters
	
	#region NoiDungDanhGiaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NoiDungDanhGiaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NoiDungDanhGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NoiDungDanhGiaQuery : NoiDungDanhGiaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NoiDungDanhGiaQuery class.
		/// </summary>
		public NoiDungDanhGiaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NoiDungDanhGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NoiDungDanhGiaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NoiDungDanhGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NoiDungDanhGiaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NoiDungDanhGiaQuery
		
	#region NhomQuyenFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NhomQuyen"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomQuyenFilters : NhomQuyenFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomQuyenFilters class.
		/// </summary>
		public NhomQuyenFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomQuyenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomQuyenFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomQuyenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomQuyenFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomQuyenFilters
	
	#region NhomQuyenQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NhomQuyenParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NhomQuyen"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomQuyenQuery : NhomQuyenParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomQuyenQuery class.
		/// </summary>
		public NhomQuyenQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomQuyenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomQuyenQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomQuyenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomQuyenQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomQuyenQuery
		
	#region ThuLaoRaDeThiVhuexFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoRaDeThiVhuex"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoRaDeThiVhuexFilters : ThuLaoRaDeThiVhuexFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeThiVhuexFilters class.
		/// </summary>
		public ThuLaoRaDeThiVhuexFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeThiVhuexFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoRaDeThiVhuexFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeThiVhuexFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoRaDeThiVhuexFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoRaDeThiVhuexFilters
	
	#region ThuLaoRaDeThiVhuexQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoRaDeThiVhuexParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoRaDeThiVhuex"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoRaDeThiVhuexQuery : ThuLaoRaDeThiVhuexParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeThiVhuexQuery class.
		/// </summary>
		public ThuLaoRaDeThiVhuexQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeThiVhuexQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoRaDeThiVhuexQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeThiVhuexQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoRaDeThiVhuexQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoRaDeThiVhuexQuery
		
	#region TrinhDoChinhTriFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrinhDoChinhTri"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoChinhTriFilters : TrinhDoChinhTriFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoChinhTriFilters class.
		/// </summary>
		public TrinhDoChinhTriFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoChinhTriFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoChinhTriFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoChinhTriFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoChinhTriFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoChinhTriFilters
	
	#region TrinhDoChinhTriQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrinhDoChinhTriParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrinhDoChinhTri"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoChinhTriQuery : TrinhDoChinhTriParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoChinhTriQuery class.
		/// </summary>
		public TrinhDoChinhTriQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoChinhTriQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoChinhTriQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoChinhTriQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoChinhTriQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoChinhTriQuery
		
	#region NhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomMonHocFilters : NhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomMonHocFilters class.
		/// </summary>
		public NhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomMonHocFilters
	
	#region NhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NhomMonHocQuery : NhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NhomMonHocQuery class.
		/// </summary>
		public NhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NhomMonHocQuery
		
	#region PscUserConfigApplicationFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PscUserConfigApplication"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PscUserConfigApplicationFilters : PscUserConfigApplicationFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PscUserConfigApplicationFilters class.
		/// </summary>
		public PscUserConfigApplicationFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PscUserConfigApplicationFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PscUserConfigApplicationFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PscUserConfigApplicationFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PscUserConfigApplicationFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PscUserConfigApplicationFilters
	
	#region PscUserConfigApplicationQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PscUserConfigApplicationParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PscUserConfigApplication"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PscUserConfigApplicationQuery : PscUserConfigApplicationParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PscUserConfigApplicationQuery class.
		/// </summary>
		public PscUserConfigApplicationQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PscUserConfigApplicationQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PscUserConfigApplicationQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PscUserConfigApplicationQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PscUserConfigApplicationQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PscUserConfigApplicationQuery
		
	#region TrinhDoNgoaiNguFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrinhDoNgoaiNgu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoNgoaiNguFilters : TrinhDoNgoaiNguFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoNgoaiNguFilters class.
		/// </summary>
		public TrinhDoNgoaiNguFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoNgoaiNguFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoNgoaiNguFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoNgoaiNguFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoNgoaiNguFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoNgoaiNguFilters
	
	#region TrinhDoNgoaiNguQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrinhDoNgoaiNguParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrinhDoNgoaiNgu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoNgoaiNguQuery : TrinhDoNgoaiNguParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoNgoaiNguQuery class.
		/// </summary>
		public TrinhDoNgoaiNguQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoNgoaiNguQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoNgoaiNguQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoNgoaiNguQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoNgoaiNguQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoNgoaiNguQuery
		
	#region PscDotThanhToanCoiThiChamThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PscDotThanhToanCoiThiChamThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PscDotThanhToanCoiThiChamThiFilters : PscDotThanhToanCoiThiChamThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PscDotThanhToanCoiThiChamThiFilters class.
		/// </summary>
		public PscDotThanhToanCoiThiChamThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PscDotThanhToanCoiThiChamThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PscDotThanhToanCoiThiChamThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PscDotThanhToanCoiThiChamThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PscDotThanhToanCoiThiChamThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PscDotThanhToanCoiThiChamThiFilters
	
	#region PscDotThanhToanCoiThiChamThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PscDotThanhToanCoiThiChamThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PscDotThanhToanCoiThiChamThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PscDotThanhToanCoiThiChamThiQuery : PscDotThanhToanCoiThiChamThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PscDotThanhToanCoiThiChamThiQuery class.
		/// </summary>
		public PscDotThanhToanCoiThiChamThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PscDotThanhToanCoiThiChamThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PscDotThanhToanCoiThiChamThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PscDotThanhToanCoiThiChamThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PscDotThanhToanCoiThiChamThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PscDotThanhToanCoiThiChamThiQuery
		
	#region MonHocTinhHeSoKhoiNganhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonHocTinhHeSoKhoiNganh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonHocTinhHeSoKhoiNganhFilters : MonHocTinhHeSoKhoiNganhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonHocTinhHeSoKhoiNganhFilters class.
		/// </summary>
		public MonHocTinhHeSoKhoiNganhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonHocTinhHeSoKhoiNganhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonHocTinhHeSoKhoiNganhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonHocTinhHeSoKhoiNganhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonHocTinhHeSoKhoiNganhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonHocTinhHeSoKhoiNganhFilters
	
	#region MonHocTinhHeSoKhoiNganhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonHocTinhHeSoKhoiNganhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonHocTinhHeSoKhoiNganh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonHocTinhHeSoKhoiNganhQuery : MonHocTinhHeSoKhoiNganhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonHocTinhHeSoKhoiNganhQuery class.
		/// </summary>
		public MonHocTinhHeSoKhoiNganhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonHocTinhHeSoKhoiNganhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonHocTinhHeSoKhoiNganhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonHocTinhHeSoKhoiNganhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonHocTinhHeSoKhoiNganhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonHocTinhHeSoKhoiNganhQuery
		
	#region QuocTichFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="QuocTich"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuocTichFilters : QuocTichFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuocTichFilters class.
		/// </summary>
		public QuocTichFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuocTichFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuocTichFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuocTichFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuocTichFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuocTichFilters
	
	#region QuocTichQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="QuocTichParameterBuilder"/> class
	/// that is used exclusively with a <see cref="QuocTich"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuocTichQuery : QuocTichParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuocTichQuery class.
		/// </summary>
		public QuocTichQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuocTichQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuocTichQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuocTichQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuocTichQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuocTichQuery
		
	#region PscExBarCodesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PscExBarCodes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PscExBarCodesFilters : PscExBarCodesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PscExBarCodesFilters class.
		/// </summary>
		public PscExBarCodesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PscExBarCodesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PscExBarCodesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PscExBarCodesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PscExBarCodesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PscExBarCodesFilters
	
	#region PscExBarCodesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PscExBarCodesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PscExBarCodes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PscExBarCodesQuery : PscExBarCodesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PscExBarCodesQuery class.
		/// </summary>
		public PscExBarCodesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PscExBarCodesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PscExBarCodesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PscExBarCodesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PscExBarCodesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PscExBarCodesQuery
		
	#region ThuLaoCoiThiVhuexFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoCoiThiVhuex"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoCoiThiVhuexFilters : ThuLaoCoiThiVhuexFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexFilters class.
		/// </summary>
		public ThuLaoCoiThiVhuexFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoCoiThiVhuexFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoCoiThiVhuexFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoCoiThiVhuexFilters
	
	#region ThuLaoCoiThiVhuexQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoCoiThiVhuexParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoCoiThiVhuex"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoCoiThiVhuexQuery : ThuLaoCoiThiVhuexParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexQuery class.
		/// </summary>
		public ThuLaoCoiThiVhuexQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoCoiThiVhuexQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuexQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoCoiThiVhuexQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoCoiThiVhuexQuery
		
	#region PhanBienLuanAnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PhanBienLuanAn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanBienLuanAnFilters : PhanBienLuanAnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanBienLuanAnFilters class.
		/// </summary>
		public PhanBienLuanAnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanBienLuanAnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanBienLuanAnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanBienLuanAnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanBienLuanAnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanBienLuanAnFilters
	
	#region PhanBienLuanAnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PhanBienLuanAnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PhanBienLuanAn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanBienLuanAnQuery : PhanBienLuanAnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanBienLuanAnQuery class.
		/// </summary>
		public PhanBienLuanAnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanBienLuanAnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanBienLuanAnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanBienLuanAnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanBienLuanAnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanBienLuanAnQuery
		
	#region PhanNhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanNhomMonHocFilters : PhanNhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanNhomMonHocFilters class.
		/// </summary>
		public PhanNhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanNhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanNhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanNhomMonHocFilters
	
	#region PhanNhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PhanNhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanNhomMonHocQuery : PhanNhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanNhomMonHocQuery class.
		/// </summary>
		public PhanNhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanNhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanNhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanNhomMonHocQuery
		
	#region MonTieuLuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonTieuLuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonTieuLuanFilters : MonTieuLuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonTieuLuanFilters class.
		/// </summary>
		public MonTieuLuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonTieuLuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonTieuLuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonTieuLuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonTieuLuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonTieuLuanFilters
	
	#region MonTieuLuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonTieuLuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonTieuLuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonTieuLuanQuery : MonTieuLuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonTieuLuanQuery class.
		/// </summary>
		public MonTieuLuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonTieuLuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonTieuLuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonTieuLuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonTieuLuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonTieuLuanQuery
		
	#region NoiDungCongViecQuanLyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NoiDungCongViecQuanLy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NoiDungCongViecQuanLyFilters : NoiDungCongViecQuanLyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NoiDungCongViecQuanLyFilters class.
		/// </summary>
		public NoiDungCongViecQuanLyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NoiDungCongViecQuanLyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NoiDungCongViecQuanLyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NoiDungCongViecQuanLyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NoiDungCongViecQuanLyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NoiDungCongViecQuanLyFilters
	
	#region NoiDungCongViecQuanLyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NoiDungCongViecQuanLyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NoiDungCongViecQuanLy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NoiDungCongViecQuanLyQuery : NoiDungCongViecQuanLyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NoiDungCongViecQuanLyQuery class.
		/// </summary>
		public NoiDungCongViecQuanLyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NoiDungCongViecQuanLyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NoiDungCongViecQuanLyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NoiDungCongViecQuanLyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NoiDungCongViecQuanLyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NoiDungCongViecQuanLyQuery
		
	#region KhoiLuongGiangDayChiTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayChiTietFilters : KhoiLuongGiangDayChiTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		public KhoiLuongGiangDayChiTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayChiTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayChiTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayChiTietFilters
	
	#region KhoiLuongGiangDayChiTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongGiangDayChiTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayChiTietQuery : KhoiLuongGiangDayChiTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		public KhoiLuongGiangDayChiTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayChiTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayChiTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayChiTietQuery
		
	#region LoaiKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LoaiKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiKhoiLuongFilters : LoaiKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiKhoiLuongFilters class.
		/// </summary>
		public LoaiKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiKhoiLuongFilters
	
	#region LoaiKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LoaiKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LoaiKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiKhoiLuongQuery : LoaiKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiKhoiLuongQuery class.
		/// </summary>
		public LoaiKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiKhoiLuongQuery
		
	#region MonTinhTheoQuyCheMoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonTinhTheoQuyCheMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonTinhTheoQuyCheMoiFilters : MonTinhTheoQuyCheMoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		public MonTinhTheoQuyCheMoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonTinhTheoQuyCheMoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonTinhTheoQuyCheMoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonTinhTheoQuyCheMoiFilters
	
	#region MonTinhTheoQuyCheMoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonTinhTheoQuyCheMoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonTinhTheoQuyCheMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonTinhTheoQuyCheMoiQuery : MonTinhTheoQuyCheMoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		public MonTinhTheoQuyCheMoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonTinhTheoQuyCheMoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonTinhTheoQuyCheMoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonTinhTheoQuyCheMoiQuery
		
	#region MonGiangMoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonGiangMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonGiangMoiFilters : MonGiangMoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonGiangMoiFilters class.
		/// </summary>
		public MonGiangMoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonGiangMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonGiangMoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonGiangMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonGiangMoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonGiangMoiFilters
	
	#region MonGiangMoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonGiangMoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonGiangMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonGiangMoiQuery : MonGiangMoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonGiangMoiQuery class.
		/// </summary>
		public MonGiangMoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonGiangMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonGiangMoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonGiangMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonGiangMoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonGiangMoiQuery
		
	#region KhoiLuongHuongDanThucTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongHuongDanThucTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongHuongDanThucTapFilters : KhoiLuongHuongDanThucTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongHuongDanThucTapFilters class.
		/// </summary>
		public KhoiLuongHuongDanThucTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongHuongDanThucTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongHuongDanThucTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongHuongDanThucTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongHuongDanThucTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongHuongDanThucTapFilters
	
	#region KhoiLuongHuongDanThucTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongHuongDanThucTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongHuongDanThucTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongHuongDanThucTapQuery : KhoiLuongHuongDanThucTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongHuongDanThucTapQuery class.
		/// </summary>
		public KhoiLuongHuongDanThucTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongHuongDanThucTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongHuongDanThucTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongHuongDanThucTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongHuongDanThucTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongHuongDanThucTapQuery
		
	#region LoaiNghienCuuKhoaHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LoaiNghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiNghienCuuKhoaHocFilters : LoaiNghienCuuKhoaHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiNghienCuuKhoaHocFilters class.
		/// </summary>
		public LoaiNghienCuuKhoaHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiNghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiNghienCuuKhoaHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiNghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiNghienCuuKhoaHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiNghienCuuKhoaHocFilters
	
	#region LoaiNghienCuuKhoaHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LoaiNghienCuuKhoaHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LoaiNghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiNghienCuuKhoaHocQuery : LoaiNghienCuuKhoaHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiNghienCuuKhoaHocQuery class.
		/// </summary>
		public LoaiNghienCuuKhoaHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiNghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiNghienCuuKhoaHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiNghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiNghienCuuKhoaHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiNghienCuuKhoaHocQuery
		
	#region KhoiLuongQuyDoiCaoDangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongQuyDoiCaoDang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongQuyDoiCaoDangFilters : KhoiLuongQuyDoiCaoDangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiCaoDangFilters class.
		/// </summary>
		public KhoiLuongQuyDoiCaoDangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiCaoDangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongQuyDoiCaoDangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiCaoDangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongQuyDoiCaoDangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongQuyDoiCaoDangFilters
	
	#region KhoiLuongQuyDoiCaoDangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongQuyDoiCaoDangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongQuyDoiCaoDang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongQuyDoiCaoDangQuery : KhoiLuongQuyDoiCaoDangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiCaoDangQuery class.
		/// </summary>
		public KhoiLuongQuyDoiCaoDangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiCaoDangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongQuyDoiCaoDangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiCaoDangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongQuyDoiCaoDangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongQuyDoiCaoDangQuery
		
	#region KhoiLuongTamUngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongTamUng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongTamUngFilters : KhoiLuongTamUngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngFilters class.
		/// </summary>
		public KhoiLuongTamUngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongTamUngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongTamUngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongTamUngFilters
	
	#region KhoiLuongTamUngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongTamUngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongTamUng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongTamUngQuery : KhoiLuongTamUngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngQuery class.
		/// </summary>
		public KhoiLuongTamUngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongTamUngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongTamUngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongTamUngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongTamUngQuery
		
	#region KhoiLuongGiangDayTungTuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayTungTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayTungTuanFilters : KhoiLuongGiangDayTungTuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayTungTuanFilters class.
		/// </summary>
		public KhoiLuongGiangDayTungTuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayTungTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayTungTuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayTungTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayTungTuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayTungTuanFilters
	
	#region KhoiLuongGiangDayTungTuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongGiangDayTungTuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayTungTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayTungTuanQuery : KhoiLuongGiangDayTungTuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayTungTuanQuery class.
		/// </summary>
		public KhoiLuongGiangDayTungTuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayTungTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayTungTuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayTungTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayTungTuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayTungTuanQuery
		
	#region KhoiLuongQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongQuyDoiFilters : KhoiLuongQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiFilters class.
		/// </summary>
		public KhoiLuongQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongQuyDoiFilters
	
	#region KhoiLuongQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongQuyDoiQuery : KhoiLuongQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiQuery class.
		/// </summary>
		public KhoiLuongQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongQuyDoiQuery
		
	#region LopHocPhanChuyenNganhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LopHocPhanChuyenNganh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanChuyenNganhFilters : LopHocPhanChuyenNganhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhFilters class.
		/// </summary>
		public LopHocPhanChuyenNganhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanChuyenNganhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanChuyenNganhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanChuyenNganhFilters
	
	#region LopHocPhanChuyenNganhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LopHocPhanChuyenNganhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LopHocPhanChuyenNganh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanChuyenNganhQuery : LopHocPhanChuyenNganhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhQuery class.
		/// </summary>
		public LopHocPhanChuyenNganhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanChuyenNganhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanChuyenNganhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanChuyenNganhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanChuyenNganhQuery
		
	#region KhoiLuongGiangDayDoAnTotNghiepFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayDoAnTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayDoAnTotNghiepFilters : KhoiLuongGiangDayDoAnTotNghiepFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnTotNghiepFilters class.
		/// </summary>
		public KhoiLuongGiangDayDoAnTotNghiepFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayDoAnTotNghiepFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayDoAnTotNghiepFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayDoAnTotNghiepFilters
	
	#region KhoiLuongGiangDayDoAnTotNghiepQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongGiangDayDoAnTotNghiepParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayDoAnTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayDoAnTotNghiepQuery : KhoiLuongGiangDayDoAnTotNghiepParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnTotNghiepQuery class.
		/// </summary>
		public KhoiLuongGiangDayDoAnTotNghiepQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayDoAnTotNghiepQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayDoAnTotNghiepQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayDoAnTotNghiepQuery
		
	#region ThangHeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThangHe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThangHeFilters : ThangHeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThangHeFilters class.
		/// </summary>
		public ThangHeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThangHeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThangHeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThangHeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThangHeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThangHeFilters
	
	#region ThangHeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThangHeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThangHe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThangHeQuery : ThangHeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThangHeQuery class.
		/// </summary>
		public ThangHeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThangHeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThangHeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThangHeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThangHeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThangHeQuery
		
	#region KyTinhLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KyTinhLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KyTinhLuongFilters : KyTinhLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KyTinhLuongFilters class.
		/// </summary>
		public KyTinhLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KyTinhLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KyTinhLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KyTinhLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KyTinhLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KyTinhLuongFilters
	
	#region KyTinhLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KyTinhLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KyTinhLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KyTinhLuongQuery : KyTinhLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KyTinhLuongQuery class.
		/// </summary>
		public KyTinhLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KyTinhLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KyTinhLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KyTinhLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KyTinhLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KyTinhLuongQuery
		
	#region KetQuaDanhGiaVuotGioFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KetQuaDanhGiaVuotGio"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaDanhGiaVuotGioFilters : KetQuaDanhGiaVuotGioFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaDanhGiaVuotGioFilters class.
		/// </summary>
		public KetQuaDanhGiaVuotGioFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaDanhGiaVuotGioFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaDanhGiaVuotGioFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaDanhGiaVuotGioFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaDanhGiaVuotGioFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaDanhGiaVuotGioFilters
	
	#region KetQuaDanhGiaVuotGioQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KetQuaDanhGiaVuotGioParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KetQuaDanhGiaVuotGio"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaDanhGiaVuotGioQuery : KetQuaDanhGiaVuotGioParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaDanhGiaVuotGioQuery class.
		/// </summary>
		public KetQuaDanhGiaVuotGioQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaDanhGiaVuotGioQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaDanhGiaVuotGioQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaDanhGiaVuotGioQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaDanhGiaVuotGioQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaDanhGiaVuotGioQuery
		
	#region KhoiLuongDoAnTotNghiepChiTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongDoAnTotNghiepChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongDoAnTotNghiepChiTietFilters : KhoiLuongDoAnTotNghiepChiTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongDoAnTotNghiepChiTietFilters class.
		/// </summary>
		public KhoiLuongDoAnTotNghiepChiTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongDoAnTotNghiepChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongDoAnTotNghiepChiTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongDoAnTotNghiepChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongDoAnTotNghiepChiTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongDoAnTotNghiepChiTietFilters
	
	#region KhoiLuongDoAnTotNghiepChiTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongDoAnTotNghiepChiTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongDoAnTotNghiepChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongDoAnTotNghiepChiTietQuery : KhoiLuongDoAnTotNghiepChiTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongDoAnTotNghiepChiTietQuery class.
		/// </summary>
		public KhoiLuongDoAnTotNghiepChiTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongDoAnTotNghiepChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongDoAnTotNghiepChiTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongDoAnTotNghiepChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongDoAnTotNghiepChiTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongDoAnTotNghiepChiTietQuery
		
	#region MonPhanCongNhieuGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MonPhanCongNhieuGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonPhanCongNhieuGiangVienFilters : MonPhanCongNhieuGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		public MonPhanCongNhieuGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonPhanCongNhieuGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonPhanCongNhieuGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonPhanCongNhieuGiangVienFilters
	
	#region MonPhanCongNhieuGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MonPhanCongNhieuGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MonPhanCongNhieuGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MonPhanCongNhieuGiangVienQuery : MonPhanCongNhieuGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		public MonPhanCongNhieuGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MonPhanCongNhieuGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MonPhanCongNhieuGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MonPhanCongNhieuGiangVienQuery
		
	#region KetQuaTinhTheoTuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KetQuaTinhTheoTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaTinhTheoTuanFilters : KetQuaTinhTheoTuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanFilters class.
		/// </summary>
		public KetQuaTinhTheoTuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaTinhTheoTuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaTinhTheoTuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaTinhTheoTuanFilters
	
	#region KetQuaTinhTheoTuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KetQuaTinhTheoTuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KetQuaTinhTheoTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaTinhTheoTuanQuery : KetQuaTinhTheoTuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanQuery class.
		/// </summary>
		public KetQuaTinhTheoTuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaTinhTheoTuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhTheoTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaTinhTheoTuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaTinhTheoTuanQuery
		
	#region LopHocPhanBacDaoTaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LopHocPhanBacDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanBacDaoTaoFilters : LopHocPhanBacDaoTaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanBacDaoTaoFilters class.
		/// </summary>
		public LopHocPhanBacDaoTaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanBacDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanBacDaoTaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanBacDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanBacDaoTaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanBacDaoTaoFilters
	
	#region LopHocPhanBacDaoTaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LopHocPhanBacDaoTaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LopHocPhanBacDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanBacDaoTaoQuery : LopHocPhanBacDaoTaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanBacDaoTaoQuery class.
		/// </summary>
		public LopHocPhanBacDaoTaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanBacDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanBacDaoTaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanBacDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanBacDaoTaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanBacDaoTaoQuery
		
	#region KyThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KyThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KyThiFilters : KyThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KyThiFilters class.
		/// </summary>
		public KyThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KyThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KyThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KyThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KyThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KyThiFilters
	
	#region KyThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KyThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KyThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KyThiQuery : KyThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KyThiQuery class.
		/// </summary>
		public KyThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KyThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KyThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KyThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KyThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KyThiQuery
		
	#region LyDoTamNghiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LyDoTamNghi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LyDoTamNghiFilters : LyDoTamNghiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LyDoTamNghiFilters class.
		/// </summary>
		public LyDoTamNghiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LyDoTamNghiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LyDoTamNghiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LyDoTamNghiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LyDoTamNghiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LyDoTamNghiFilters
	
	#region LyDoTamNghiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LyDoTamNghiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LyDoTamNghi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LyDoTamNghiQuery : LyDoTamNghiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LyDoTamNghiQuery class.
		/// </summary>
		public LyDoTamNghiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LyDoTamNghiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LyDoTamNghiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LyDoTamNghiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LyDoTamNghiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LyDoTamNghiQuery
		
	#region LopHocPhanKhongTinhGioGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LopHocPhanKhongTinhGioGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanKhongTinhGioGiangFilters : LopHocPhanKhongTinhGioGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanKhongTinhGioGiangFilters class.
		/// </summary>
		public LopHocPhanKhongTinhGioGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanKhongTinhGioGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanKhongTinhGioGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanKhongTinhGioGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanKhongTinhGioGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanKhongTinhGioGiangFilters
	
	#region LopHocPhanKhongTinhGioGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LopHocPhanKhongTinhGioGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LopHocPhanKhongTinhGioGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanKhongTinhGioGiangQuery : LopHocPhanKhongTinhGioGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanKhongTinhGioGiangQuery class.
		/// </summary>
		public LopHocPhanKhongTinhGioGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanKhongTinhGioGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanKhongTinhGioGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanKhongTinhGioGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanKhongTinhGioGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanKhongTinhGioGiangQuery
		
	#region LopChatLuongCaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LopChatLuongCao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopChatLuongCaoFilters : LopChatLuongCaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopChatLuongCaoFilters class.
		/// </summary>
		public LopChatLuongCaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopChatLuongCaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopChatLuongCaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopChatLuongCaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopChatLuongCaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopChatLuongCaoFilters
	
	#region LopChatLuongCaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LopChatLuongCaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LopChatLuongCao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopChatLuongCaoQuery : LopChatLuongCaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopChatLuongCaoQuery class.
		/// </summary>
		public LopChatLuongCaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopChatLuongCaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopChatLuongCaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopChatLuongCaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopChatLuongCaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopChatLuongCaoQuery
		
	#region KhoiLuongGiangDayCaoDangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayCaoDang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayCaoDangFilters : KhoiLuongGiangDayCaoDangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangFilters class.
		/// </summary>
		public KhoiLuongGiangDayCaoDangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayCaoDangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayCaoDangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayCaoDangFilters
	
	#region KhoiLuongGiangDayCaoDangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongGiangDayCaoDangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayCaoDang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayCaoDangQuery : KhoiLuongGiangDayCaoDangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangQuery class.
		/// </summary>
		public KhoiLuongGiangDayCaoDangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayCaoDangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayCaoDangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayCaoDangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayCaoDangQuery
		
	#region PhanLoaiHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PhanLoaiHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanLoaiHocPhanFilters : PhanLoaiHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanLoaiHocPhanFilters class.
		/// </summary>
		public PhanLoaiHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanLoaiHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanLoaiHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanLoaiHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanLoaiHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanLoaiHocPhanFilters
	
	#region PhanLoaiHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PhanLoaiHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PhanLoaiHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanLoaiHocPhanQuery : PhanLoaiHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanLoaiHocPhanQuery class.
		/// </summary>
		public PhanLoaiHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanLoaiHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanLoaiHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanLoaiHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanLoaiHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanLoaiHocPhanQuery
		
	#region KhoiLuongGiangDayDoAnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayDoAn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayDoAnFilters : KhoiLuongGiangDayDoAnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnFilters class.
		/// </summary>
		public KhoiLuongGiangDayDoAnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayDoAnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayDoAnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayDoAnFilters
	
	#region KhoiLuongGiangDayDoAnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongGiangDayDoAnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDayDoAn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayDoAnQuery : KhoiLuongGiangDayDoAnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnQuery class.
		/// </summary>
		public KhoiLuongGiangDayDoAnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayDoAnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayDoAnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayDoAnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayDoAnQuery
		
	#region LopHocPhanGiangBangTiengNuocNgoaiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LopHocPhanGiangBangTiengNuocNgoai"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanGiangBangTiengNuocNgoaiFilters : LopHocPhanGiangBangTiengNuocNgoaiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGiangBangTiengNuocNgoaiFilters class.
		/// </summary>
		public LopHocPhanGiangBangTiengNuocNgoaiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGiangBangTiengNuocNgoaiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanGiangBangTiengNuocNgoaiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGiangBangTiengNuocNgoaiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanGiangBangTiengNuocNgoaiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanGiangBangTiengNuocNgoaiFilters
	
	#region LopHocPhanGiangBangTiengNuocNgoaiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LopHocPhanGiangBangTiengNuocNgoaiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LopHocPhanGiangBangTiengNuocNgoai"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanGiangBangTiengNuocNgoaiQuery : LopHocPhanGiangBangTiengNuocNgoaiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGiangBangTiengNuocNgoaiQuery class.
		/// </summary>
		public LopHocPhanGiangBangTiengNuocNgoaiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGiangBangTiengNuocNgoaiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanGiangBangTiengNuocNgoaiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGiangBangTiengNuocNgoaiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanGiangBangTiengNuocNgoaiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanGiangBangTiengNuocNgoaiQuery
		
	#region LoaiLopFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LoaiLop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiLopFilters : LoaiLopFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiLopFilters class.
		/// </summary>
		public LoaiLopFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiLopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiLopFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiLopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiLopFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiLopFilters
	
	#region LoaiLopQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LoaiLopParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LoaiLop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiLopQuery : LoaiLopParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiLopQuery class.
		/// </summary>
		public LoaiLopQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiLopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiLopQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiLopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiLopQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiLopQuery
		
	#region ReportManagermentsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ReportManagerments"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ReportManagermentsFilters : ReportManagermentsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ReportManagermentsFilters class.
		/// </summary>
		public ReportManagermentsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ReportManagermentsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ReportManagermentsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ReportManagermentsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ReportManagermentsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ReportManagermentsFilters
	
	#region ReportManagermentsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ReportManagermentsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ReportManagerments"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ReportManagermentsQuery : ReportManagermentsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ReportManagermentsQuery class.
		/// </summary>
		public ReportManagermentsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ReportManagermentsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ReportManagermentsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ReportManagermentsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ReportManagermentsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ReportManagermentsQuery
		
	#region LopHocPhanGhepThoiKhoaBieuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LopHocPhanGhepThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanGhepThoiKhoaBieuFilters : LopHocPhanGhepThoiKhoaBieuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGhepThoiKhoaBieuFilters class.
		/// </summary>
		public LopHocPhanGhepThoiKhoaBieuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGhepThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanGhepThoiKhoaBieuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGhepThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanGhepThoiKhoaBieuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanGhepThoiKhoaBieuFilters
	
	#region LopHocPhanGhepThoiKhoaBieuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LopHocPhanGhepThoiKhoaBieuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LopHocPhanGhepThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanGhepThoiKhoaBieuQuery : LopHocPhanGhepThoiKhoaBieuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGhepThoiKhoaBieuQuery class.
		/// </summary>
		public LopHocPhanGhepThoiKhoaBieuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGhepThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanGhepThoiKhoaBieuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanGhepThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanGhepThoiKhoaBieuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanGhepThoiKhoaBieuQuery
		
	#region LopHocPhanClcAufCjlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LopHocPhanClcAufCjl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanClcAufCjlFilters : LopHocPhanClcAufCjlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanClcAufCjlFilters class.
		/// </summary>
		public LopHocPhanClcAufCjlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanClcAufCjlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanClcAufCjlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanClcAufCjlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanClcAufCjlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanClcAufCjlFilters
	
	#region LopHocPhanClcAufCjlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LopHocPhanClcAufCjlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LopHocPhanClcAufCjl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LopHocPhanClcAufCjlQuery : LopHocPhanClcAufCjlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LopHocPhanClcAufCjlQuery class.
		/// </summary>
		public LopHocPhanClcAufCjlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanClcAufCjlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LopHocPhanClcAufCjlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LopHocPhanClcAufCjlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LopHocPhanClcAufCjlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LopHocPhanClcAufCjlQuery
		
	#region QuyUocDatTenLopHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="QuyUocDatTenLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyUocDatTenLopHocPhanFilters : QuyUocDatTenLopHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyUocDatTenLopHocPhanFilters class.
		/// </summary>
		public QuyUocDatTenLopHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyUocDatTenLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyUocDatTenLopHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyUocDatTenLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyUocDatTenLopHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyUocDatTenLopHocPhanFilters
	
	#region QuyUocDatTenLopHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="QuyUocDatTenLopHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="QuyUocDatTenLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyUocDatTenLopHocPhanQuery : QuyUocDatTenLopHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyUocDatTenLopHocPhanQuery class.
		/// </summary>
		public QuyUocDatTenLopHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyUocDatTenLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyUocDatTenLopHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyUocDatTenLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyUocDatTenLopHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyUocDatTenLopHocPhanQuery
		
	#region LoaiNhanVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LoaiNhanVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiNhanVienFilters : LoaiNhanVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiNhanVienFilters class.
		/// </summary>
		public LoaiNhanVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiNhanVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiNhanVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiNhanVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiNhanVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiNhanVienFilters
	
	#region LoaiNhanVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LoaiNhanVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LoaiNhanVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiNhanVienQuery : LoaiNhanVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiNhanVienQuery class.
		/// </summary>
		public LoaiNhanVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiNhanVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiNhanVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiNhanVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiNhanVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiNhanVienQuery
		
	#region LoaiGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="LoaiGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiGiangVienFilters : LoaiGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiGiangVienFilters class.
		/// </summary>
		public LoaiGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiGiangVienFilters
	
	#region LoaiGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="LoaiGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="LoaiGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class LoaiGiangVienQuery : LoaiGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the LoaiGiangVienQuery class.
		/// </summary>
		public LoaiGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the LoaiGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public LoaiGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the LoaiGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public LoaiGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion LoaiGiangVienQuery
		
	#region PhanQuyenControlTrenFormFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PhanQuyenControlTrenForm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanQuyenControlTrenFormFilters : PhanQuyenControlTrenFormFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanQuyenControlTrenFormFilters class.
		/// </summary>
		public PhanQuyenControlTrenFormFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanQuyenControlTrenFormFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanQuyenControlTrenFormFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanQuyenControlTrenFormFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanQuyenControlTrenFormFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanQuyenControlTrenFormFilters
	
	#region PhanQuyenControlTrenFormQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PhanQuyenControlTrenFormParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PhanQuyenControlTrenForm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PhanQuyenControlTrenFormQuery : PhanQuyenControlTrenFormParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PhanQuyenControlTrenFormQuery class.
		/// </summary>
		public PhanQuyenControlTrenFormQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PhanQuyenControlTrenFormQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PhanQuyenControlTrenFormQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PhanQuyenControlTrenFormQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PhanQuyenControlTrenFormQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PhanQuyenControlTrenFormQuery
		
	#region QuyDoiGioChuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="QuyDoiGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyDoiGioChuanFilters : QuyDoiGioChuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanFilters class.
		/// </summary>
		public QuyDoiGioChuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyDoiGioChuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyDoiGioChuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyDoiGioChuanFilters
	
	#region QuyDoiGioChuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="QuyDoiGioChuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="QuyDoiGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyDoiGioChuanQuery : QuyDoiGioChuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanQuery class.
		/// </summary>
		public QuyDoiGioChuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyDoiGioChuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyDoiGioChuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyDoiGioChuanQuery
		
	#region UteKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="UteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UteKhoiLuongGiangDayFilters : UteKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongGiangDayFilters class.
		/// </summary>
		public UteKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UteKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UteKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UteKhoiLuongGiangDayFilters
	
	#region UteKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="UteKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="UteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UteKhoiLuongGiangDayQuery : UteKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongGiangDayQuery class.
		/// </summary>
		public UteKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UteKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UteKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UteKhoiLuongGiangDayQuery
		
	#region SoTietCoiThiTieuChuanCuaGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SoTietCoiThiTieuChuanCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SoTietCoiThiTieuChuanCuaGiangVienFilters : SoTietCoiThiTieuChuanCuaGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SoTietCoiThiTieuChuanCuaGiangVienFilters class.
		/// </summary>
		public SoTietCoiThiTieuChuanCuaGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SoTietCoiThiTieuChuanCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SoTietCoiThiTieuChuanCuaGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SoTietCoiThiTieuChuanCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SoTietCoiThiTieuChuanCuaGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SoTietCoiThiTieuChuanCuaGiangVienFilters
	
	#region SoTietCoiThiTieuChuanCuaGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SoTietCoiThiTieuChuanCuaGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SoTietCoiThiTieuChuanCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SoTietCoiThiTieuChuanCuaGiangVienQuery : SoTietCoiThiTieuChuanCuaGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SoTietCoiThiTieuChuanCuaGiangVienQuery class.
		/// </summary>
		public SoTietCoiThiTieuChuanCuaGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SoTietCoiThiTieuChuanCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SoTietCoiThiTieuChuanCuaGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SoTietCoiThiTieuChuanCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SoTietCoiThiTieuChuanCuaGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SoTietCoiThiTieuChuanCuaGiangVienQuery
		
	#region ThuLaoCoiThiChamBaiImportFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoCoiThiChamBaiImport"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoCoiThiChamBaiImportFilters : ThuLaoCoiThiChamBaiImportFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportFilters class.
		/// </summary>
		public ThuLaoCoiThiChamBaiImportFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoCoiThiChamBaiImportFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoCoiThiChamBaiImportFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoCoiThiChamBaiImportFilters
	
	#region ThuLaoCoiThiChamBaiImportQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoCoiThiChamBaiImportParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoCoiThiChamBaiImport"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoCoiThiChamBaiImportQuery : ThuLaoCoiThiChamBaiImportParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportQuery class.
		/// </summary>
		public ThuLaoCoiThiChamBaiImportQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoCoiThiChamBaiImportQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiChamBaiImportQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoCoiThiChamBaiImportQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoCoiThiChamBaiImportQuery
		
	#region TrinhDoQuanLyNhaNuocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrinhDoQuanLyNhaNuoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoQuanLyNhaNuocFilters : TrinhDoQuanLyNhaNuocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoQuanLyNhaNuocFilters class.
		/// </summary>
		public TrinhDoQuanLyNhaNuocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoQuanLyNhaNuocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoQuanLyNhaNuocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoQuanLyNhaNuocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoQuanLyNhaNuocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoQuanLyNhaNuocFilters
	
	#region TrinhDoQuanLyNhaNuocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrinhDoQuanLyNhaNuocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrinhDoQuanLyNhaNuoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoQuanLyNhaNuocQuery : TrinhDoQuanLyNhaNuocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoQuanLyNhaNuocQuery class.
		/// </summary>
		public TrinhDoQuanLyNhaNuocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoQuanLyNhaNuocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoQuanLyNhaNuocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoQuanLyNhaNuocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoQuanLyNhaNuocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoQuanLyNhaNuocQuery
		
	#region QuyDoiKhoiLuongTamUngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="QuyDoiKhoiLuongTamUng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyDoiKhoiLuongTamUngFilters : QuyDoiKhoiLuongTamUngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyDoiKhoiLuongTamUngFilters class.
		/// </summary>
		public QuyDoiKhoiLuongTamUngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiKhoiLuongTamUngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyDoiKhoiLuongTamUngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiKhoiLuongTamUngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyDoiKhoiLuongTamUngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyDoiKhoiLuongTamUngFilters
	
	#region QuyDoiKhoiLuongTamUngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="QuyDoiKhoiLuongTamUngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="QuyDoiKhoiLuongTamUng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyDoiKhoiLuongTamUngQuery : QuyDoiKhoiLuongTamUngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyDoiKhoiLuongTamUngQuery class.
		/// </summary>
		public QuyDoiKhoiLuongTamUngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiKhoiLuongTamUngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyDoiKhoiLuongTamUngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiKhoiLuongTamUngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyDoiKhoiLuongTamUngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyDoiKhoiLuongTamUngQuery
		
	#region TinhTrangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TinhTrang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TinhTrangFilters : TinhTrangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TinhTrangFilters class.
		/// </summary>
		public TinhTrangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TinhTrangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TinhTrangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TinhTrangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TinhTrangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TinhTrangFilters
	
	#region TinhTrangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TinhTrangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TinhTrang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TinhTrangQuery : TinhTrangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TinhTrangQuery class.
		/// </summary>
		public TinhTrangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TinhTrangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TinhTrangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TinhTrangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TinhTrangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TinhTrangQuery
		
	#region TrinhDoSuPhamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrinhDoSuPham"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoSuPhamFilters : TrinhDoSuPhamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoSuPhamFilters class.
		/// </summary>
		public TrinhDoSuPhamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoSuPhamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoSuPhamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoSuPhamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoSuPhamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoSuPhamFilters
	
	#region TrinhDoSuPhamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrinhDoSuPhamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrinhDoSuPham"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoSuPhamQuery : TrinhDoSuPhamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoSuPhamQuery class.
		/// </summary>
		public TrinhDoSuPhamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoSuPhamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoSuPhamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoSuPhamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoSuPhamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoSuPhamQuery
		
	#region ThuLaoCoiThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoCoiThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoCoiThiFilters : ThuLaoCoiThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiFilters class.
		/// </summary>
		public ThuLaoCoiThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoCoiThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoCoiThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoCoiThiFilters
	
	#region ThuLaoCoiThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoCoiThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoCoiThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoCoiThiQuery : ThuLaoCoiThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiQuery class.
		/// </summary>
		public ThuLaoCoiThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoCoiThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoCoiThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoCoiThiQuery
		
	#region ThuLaoCoiThiVhuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoCoiThiVhu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoCoiThiVhuFilters : ThuLaoCoiThiVhuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuFilters class.
		/// </summary>
		public ThuLaoCoiThiVhuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoCoiThiVhuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoCoiThiVhuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoCoiThiVhuFilters
	
	#region ThuLaoCoiThiVhuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoCoiThiVhuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoCoiThiVhu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoCoiThiVhuQuery : ThuLaoCoiThiVhuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuQuery class.
		/// </summary>
		public ThuLaoCoiThiVhuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoCoiThiVhuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoCoiThiVhuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoCoiThiVhuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoCoiThiVhuQuery
		
	#region ThuLaoImportFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoImport"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoImportFilters : ThuLaoImportFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoImportFilters class.
		/// </summary>
		public ThuLaoImportFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoImportFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoImportFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoImportFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoImportFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoImportFilters
	
	#region ThuLaoImportQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoImportParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoImport"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoImportQuery : ThuLaoImportParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoImportQuery class.
		/// </summary>
		public ThuLaoImportQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoImportQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoImportQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoImportQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoImportQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoImportQuery
		
	#region ThuMoiGiangHopDongThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuMoiGiangHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuMoiGiangHopDongThinhGiangFilters : ThuMoiGiangHopDongThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuMoiGiangHopDongThinhGiangFilters class.
		/// </summary>
		public ThuMoiGiangHopDongThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuMoiGiangHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuMoiGiangHopDongThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuMoiGiangHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuMoiGiangHopDongThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuMoiGiangHopDongThinhGiangFilters
	
	#region ThuMoiGiangHopDongThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuMoiGiangHopDongThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuMoiGiangHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuMoiGiangHopDongThinhGiangQuery : ThuMoiGiangHopDongThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuMoiGiangHopDongThinhGiangQuery class.
		/// </summary>
		public ThuMoiGiangHopDongThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuMoiGiangHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuMoiGiangHopDongThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuMoiGiangHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuMoiGiangHopDongThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuMoiGiangHopDongThinhGiangQuery
		
	#region TrinhDoTinHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrinhDoTinHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoTinHocFilters : TrinhDoTinHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoTinHocFilters class.
		/// </summary>
		public TrinhDoTinHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoTinHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoTinHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoTinHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoTinHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoTinHocFilters
	
	#region TrinhDoTinHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrinhDoTinHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrinhDoTinHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrinhDoTinHocQuery : TrinhDoTinHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrinhDoTinHocQuery class.
		/// </summary>
		public TrinhDoTinHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoTinHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrinhDoTinHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrinhDoTinHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrinhDoTinHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrinhDoTinHocQuery
		
	#region ThuLaoRaDeVhuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoRaDeVhu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoRaDeVhuFilters : ThuLaoRaDeVhuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuFilters class.
		/// </summary>
		public ThuLaoRaDeVhuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoRaDeVhuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoRaDeVhuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoRaDeVhuFilters
	
	#region ThuLaoRaDeVhuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoRaDeVhuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoRaDeVhu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoRaDeVhuQuery : ThuLaoRaDeVhuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuQuery class.
		/// </summary>
		public ThuLaoRaDeVhuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoRaDeVhuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoRaDeVhuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoRaDeVhuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoRaDeVhuQuery
		
	#region DonViTinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DonViTinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonViTinhFilters : DonViTinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonViTinhFilters class.
		/// </summary>
		public DonViTinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonViTinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonViTinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonViTinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonViTinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonViTinhFilters
	
	#region DonViTinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DonViTinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DonViTinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonViTinhQuery : DonViTinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonViTinhQuery class.
		/// </summary>
		public DonViTinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonViTinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonViTinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonViTinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonViTinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonViTinhQuery
		
	#region ThuLaoChamThiVhuexFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoChamThiVhuex"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoChamThiVhuexFilters : ThuLaoChamThiVhuexFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamThiVhuexFilters class.
		/// </summary>
		public ThuLaoChamThiVhuexFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamThiVhuexFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoChamThiVhuexFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamThiVhuexFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoChamThiVhuexFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoChamThiVhuexFilters
	
	#region ThuLaoChamThiVhuexQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoChamThiVhuexParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoChamThiVhuex"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoChamThiVhuexQuery : ThuLaoChamThiVhuexParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamThiVhuexQuery class.
		/// </summary>
		public ThuLaoChamThiVhuexQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamThiVhuexQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoChamThiVhuexQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamThiVhuexQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoChamThiVhuexQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoChamThiVhuexQuery
		
	#region ThuLaoHuongDanCuoiKhoaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoHuongDanCuoiKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoHuongDanCuoiKhoaFilters : ThuLaoHuongDanCuoiKhoaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoHuongDanCuoiKhoaFilters class.
		/// </summary>
		public ThuLaoHuongDanCuoiKhoaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoHuongDanCuoiKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoHuongDanCuoiKhoaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoHuongDanCuoiKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoHuongDanCuoiKhoaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoHuongDanCuoiKhoaFilters
	
	#region ThuLaoHuongDanCuoiKhoaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoHuongDanCuoiKhoaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoHuongDanCuoiKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoHuongDanCuoiKhoaQuery : ThuLaoHuongDanCuoiKhoaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoHuongDanCuoiKhoaQuery class.
		/// </summary>
		public ThuLaoHuongDanCuoiKhoaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoHuongDanCuoiKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoHuongDanCuoiKhoaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoHuongDanCuoiKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoHuongDanCuoiKhoaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoHuongDanCuoiKhoaQuery
		
	#region KetQuaTinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KetQuaTinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaTinhFilters : KetQuaTinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhFilters class.
		/// </summary>
		public KetQuaTinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaTinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaTinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaTinhFilters
	
	#region KetQuaTinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KetQuaTinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KetQuaTinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaTinhQuery : KetQuaTinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhQuery class.
		/// </summary>
		public KetQuaTinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaTinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaTinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaTinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaTinhQuery
		
	#region TienCongTacPhiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TienCongTacPhi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TienCongTacPhiFilters : TienCongTacPhiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TienCongTacPhiFilters class.
		/// </summary>
		public TienCongTacPhiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TienCongTacPhiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TienCongTacPhiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TienCongTacPhiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TienCongTacPhiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TienCongTacPhiFilters
	
	#region TienCongTacPhiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TienCongTacPhiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TienCongTacPhi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TienCongTacPhiQuery : TienCongTacPhiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TienCongTacPhiQuery class.
		/// </summary>
		public TienCongTacPhiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TienCongTacPhiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TienCongTacPhiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TienCongTacPhiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TienCongTacPhiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TienCongTacPhiQuery
		
	#region ThuLaoGiangDayDaiHocLopClcFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoGiangDayDaiHocLopClc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoGiangDayDaiHocLopClcFilters : ThuLaoGiangDayDaiHocLopClcFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayDaiHocLopClcFilters class.
		/// </summary>
		public ThuLaoGiangDayDaiHocLopClcFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayDaiHocLopClcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoGiangDayDaiHocLopClcFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayDaiHocLopClcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoGiangDayDaiHocLopClcFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoGiangDayDaiHocLopClcFilters
	
	#region ThuLaoGiangDayDaiHocLopClcQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoGiangDayDaiHocLopClcParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoGiangDayDaiHocLopClc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoGiangDayDaiHocLopClcQuery : ThuLaoGiangDayDaiHocLopClcParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayDaiHocLopClcQuery class.
		/// </summary>
		public ThuLaoGiangDayDaiHocLopClcQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayDaiHocLopClcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoGiangDayDaiHocLopClcQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayDaiHocLopClcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoGiangDayDaiHocLopClcQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoGiangDayDaiHocLopClcQuery
		
	#region VaiTroFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VaiTro"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VaiTroFilters : VaiTroFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VaiTroFilters class.
		/// </summary>
		public VaiTroFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VaiTroFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VaiTroFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VaiTroFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VaiTroFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VaiTroFilters
	
	#region VaiTroQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VaiTroParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VaiTro"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VaiTroQuery : VaiTroParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VaiTroQuery class.
		/// </summary>
		public VaiTroQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VaiTroQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VaiTroQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VaiTroQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VaiTroQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VaiTroQuery
		
	#region KhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayFilters : KhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayFilters class.
		/// </summary>
		public KhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayFilters
	
	#region KhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongGiangDayQuery : KhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayQuery class.
		/// </summary>
		public KhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongGiangDayQuery
		
	#region KhoiLuongKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongKhacFilters : KhoiLuongKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacFilters class.
		/// </summary>
		public KhoiLuongKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongKhacFilters
	
	#region KhoiLuongKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongKhacQuery : KhoiLuongKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacQuery class.
		/// </summary>
		public KhoiLuongKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongKhacQuery
		
	#region HeSoThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThuLaoFilters : HeSoThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThuLaoFilters class.
		/// </summary>
		public HeSoThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThuLaoFilters
	
	#region HeSoThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThuLaoQuery : HeSoThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThuLaoQuery class.
		/// </summary>
		public HeSoThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThuLaoQuery
		
	#region HeSoTroCapTheoKhoaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoTroCapTheoKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoTroCapTheoKhoaFilters : HeSoTroCapTheoKhoaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoTroCapTheoKhoaFilters class.
		/// </summary>
		public HeSoTroCapTheoKhoaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoTroCapTheoKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoTroCapTheoKhoaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoTroCapTheoKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoTroCapTheoKhoaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoTroCapTheoKhoaFilters
	
	#region HeSoTroCapTheoKhoaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoTroCapTheoKhoaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoTroCapTheoKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoTroCapTheoKhoaQuery : HeSoTroCapTheoKhoaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoTroCapTheoKhoaQuery class.
		/// </summary>
		public HeSoTroCapTheoKhoaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoTroCapTheoKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoTroCapTheoKhoaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoTroCapTheoKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoTroCapTheoKhoaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoTroCapTheoKhoaQuery
		
	#region TinhTrangTheoNamHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TinhTrangTheoNamHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TinhTrangTheoNamHocFilters : TinhTrangTheoNamHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TinhTrangTheoNamHocFilters class.
		/// </summary>
		public TinhTrangTheoNamHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TinhTrangTheoNamHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TinhTrangTheoNamHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TinhTrangTheoNamHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TinhTrangTheoNamHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TinhTrangTheoNamHocFilters
	
	#region TinhTrangTheoNamHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TinhTrangTheoNamHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TinhTrangTheoNamHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TinhTrangTheoNamHocQuery : TinhTrangTheoNamHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TinhTrangTheoNamHocQuery class.
		/// </summary>
		public TinhTrangTheoNamHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TinhTrangTheoNamHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TinhTrangTheoNamHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TinhTrangTheoNamHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TinhTrangTheoNamHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TinhTrangTheoNamHocQuery
		
	#region UteKhoiLuongQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="UteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UteKhoiLuongQuyDoiFilters : UteKhoiLuongQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiFilters class.
		/// </summary>
		public UteKhoiLuongQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UteKhoiLuongQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UteKhoiLuongQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UteKhoiLuongQuyDoiFilters
	
	#region UteKhoiLuongQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="UteKhoiLuongQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="UteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UteKhoiLuongQuyDoiQuery : UteKhoiLuongQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiQuery class.
		/// </summary>
		public UteKhoiLuongQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UteKhoiLuongQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UteKhoiLuongQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UteKhoiLuongQuyDoiQuery
		
	#region KhoanChiKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoanChiKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoanChiKhacFilters : KhoanChiKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoanChiKhacFilters class.
		/// </summary>
		public KhoanChiKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoanChiKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoanChiKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoanChiKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoanChiKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoanChiKhacFilters
	
	#region KhoanChiKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoanChiKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoanChiKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoanChiKhacQuery : KhoanChiKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoanChiKhacQuery class.
		/// </summary>
		public KhoanChiKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoanChiKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoanChiKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoanChiKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoanChiKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoanChiKhacQuery
		
	#region TietNghiaVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TietNghiaVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TietNghiaVuFilters : TietNghiaVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TietNghiaVuFilters class.
		/// </summary>
		public TietNghiaVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TietNghiaVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TietNghiaVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TietNghiaVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TietNghiaVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TietNghiaVuFilters
	
	#region TietNghiaVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TietNghiaVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TietNghiaVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TietNghiaVuQuery : TietNghiaVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TietNghiaVuQuery class.
		/// </summary>
		public TietNghiaVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TietNghiaVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TietNghiaVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TietNghiaVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TietNghiaVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TietNghiaVuQuery
		
	#region TongTienLuongTrongNamCuaGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TongTienLuongTrongNamCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TongTienLuongTrongNamCuaGiangVienFilters : TongTienLuongTrongNamCuaGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TongTienLuongTrongNamCuaGiangVienFilters class.
		/// </summary>
		public TongTienLuongTrongNamCuaGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TongTienLuongTrongNamCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TongTienLuongTrongNamCuaGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TongTienLuongTrongNamCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TongTienLuongTrongNamCuaGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TongTienLuongTrongNamCuaGiangVienFilters
	
	#region TongTienLuongTrongNamCuaGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TongTienLuongTrongNamCuaGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TongTienLuongTrongNamCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TongTienLuongTrongNamCuaGiangVienQuery : TongTienLuongTrongNamCuaGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TongTienLuongTrongNamCuaGiangVienQuery class.
		/// </summary>
		public TongTienLuongTrongNamCuaGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TongTienLuongTrongNamCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TongTienLuongTrongNamCuaGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TongTienLuongTrongNamCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TongTienLuongTrongNamCuaGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TongTienLuongTrongNamCuaGiangVienQuery
		
	#region UteKhoiLuongKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="UteKhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UteKhoiLuongKhacFilters : UteKhoiLuongKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongKhacFilters class.
		/// </summary>
		public UteKhoiLuongKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UteKhoiLuongKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UteKhoiLuongKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UteKhoiLuongKhacFilters
	
	#region UteKhoiLuongKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="UteKhoiLuongKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="UteKhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UteKhoiLuongKhacQuery : UteKhoiLuongKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongKhacQuery class.
		/// </summary>
		public UteKhoiLuongKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UteKhoiLuongKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UteKhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UteKhoiLuongKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UteKhoiLuongKhacQuery
		
	#region KhoiLuongCacCongViecKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoiLuongCacCongViecKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongCacCongViecKhacFilters : KhoiLuongCacCongViecKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongCacCongViecKhacFilters class.
		/// </summary>
		public KhoiLuongCacCongViecKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongCacCongViecKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongCacCongViecKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongCacCongViecKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongCacCongViecKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongCacCongViecKhacFilters
	
	#region KhoiLuongCacCongViecKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoiLuongCacCongViecKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoiLuongCacCongViecKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoiLuongCacCongViecKhacQuery : KhoiLuongCacCongViecKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoiLuongCacCongViecKhacQuery class.
		/// </summary>
		public KhoiLuongCacCongViecKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongCacCongViecKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoiLuongCacCongViecKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoiLuongCacCongViecKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoiLuongCacCongViecKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoiLuongCacCongViecKhacQuery
		
	#region KhoanQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KhoanQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoanQuyDoiFilters : KhoanQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoanQuyDoiFilters class.
		/// </summary>
		public KhoanQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoanQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoanQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoanQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoanQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoanQuyDoiFilters
	
	#region KhoanQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KhoanQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KhoanQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KhoanQuyDoiQuery : KhoanQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KhoanQuyDoiQuery class.
		/// </summary>
		public KhoanQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KhoanQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KhoanQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KhoanQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KhoanQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KhoanQuyDoiQuery
		
	#region TietNoKyTruocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TietNoKyTruoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TietNoKyTruocFilters : TietNoKyTruocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TietNoKyTruocFilters class.
		/// </summary>
		public TietNoKyTruocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TietNoKyTruocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TietNoKyTruocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TietNoKyTruocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TietNoKyTruocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TietNoKyTruocFilters
	
	#region TietNoKyTruocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TietNoKyTruocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TietNoKyTruoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TietNoKyTruocQuery : TietNoKyTruocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TietNoKyTruocQuery class.
		/// </summary>
		public TietNoKyTruocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TietNoKyTruocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TietNoKyTruocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TietNoKyTruocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TietNoKyTruocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TietNoKyTruocQuery
		
	#region QuyDoiHoatDongNgoaiGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="QuyDoiHoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyDoiHoatDongNgoaiGiangDayFilters : QuyDoiHoatDongNgoaiGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyDoiHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		public QuyDoiHoatDongNgoaiGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyDoiHoatDongNgoaiGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyDoiHoatDongNgoaiGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyDoiHoatDongNgoaiGiangDayFilters
	
	#region QuyDoiHoatDongNgoaiGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="QuyDoiHoatDongNgoaiGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="QuyDoiHoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyDoiHoatDongNgoaiGiangDayQuery : QuyDoiHoatDongNgoaiGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyDoiHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		public QuyDoiHoatDongNgoaiGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyDoiHoatDongNgoaiGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyDoiHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyDoiHoatDongNgoaiGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyDoiHoatDongNgoaiGiangDayQuery
		
	#region ThuLaoChamBaiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoChamBai"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoChamBaiFilters : ThuLaoChamBaiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiFilters class.
		/// </summary>
		public ThuLaoChamBaiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoChamBaiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoChamBaiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoChamBaiFilters
	
	#region ThuLaoChamBaiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoChamBaiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoChamBai"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoChamBaiQuery : ThuLaoChamBaiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiQuery class.
		/// </summary>
		public ThuLaoChamBaiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoChamBaiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoChamBaiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoChamBaiQuery
		
	#region ThucGiangMonThucTeTuHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThucGiangMonThucTeTuHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThucGiangMonThucTeTuHocFilters : ThucGiangMonThucTeTuHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThucGiangMonThucTeTuHocFilters class.
		/// </summary>
		public ThucGiangMonThucTeTuHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThucGiangMonThucTeTuHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThucGiangMonThucTeTuHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThucGiangMonThucTeTuHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThucGiangMonThucTeTuHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThucGiangMonThucTeTuHocFilters
	
	#region ThucGiangMonThucTeTuHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThucGiangMonThucTeTuHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThucGiangMonThucTeTuHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThucGiangMonThucTeTuHocQuery : ThucGiangMonThucTeTuHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThucGiangMonThucTeTuHocQuery class.
		/// </summary>
		public ThucGiangMonThucTeTuHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThucGiangMonThucTeTuHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThucGiangMonThucTeTuHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThucGiangMonThucTeTuHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThucGiangMonThucTeTuHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThucGiangMonThucTeTuHocQuery
		
	#region ThueThuNhapCaNhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThueThuNhapCaNhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThueThuNhapCaNhanFilters : ThueThuNhapCaNhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThueThuNhapCaNhanFilters class.
		/// </summary>
		public ThueThuNhapCaNhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThueThuNhapCaNhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThueThuNhapCaNhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThueThuNhapCaNhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThueThuNhapCaNhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThueThuNhapCaNhanFilters
	
	#region ThueThuNhapCaNhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThueThuNhapCaNhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThueThuNhapCaNhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThueThuNhapCaNhanQuery : ThueThuNhapCaNhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThueThuNhapCaNhanQuery class.
		/// </summary>
		public ThueThuNhapCaNhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThueThuNhapCaNhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThueThuNhapCaNhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThueThuNhapCaNhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThueThuNhapCaNhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThueThuNhapCaNhanQuery
		
	#region ThongTinGiangDayGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThongTinGiangDayGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThongTinGiangDayGiangVienFilters : ThongTinGiangDayGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThongTinGiangDayGiangVienFilters class.
		/// </summary>
		public ThongTinGiangDayGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThongTinGiangDayGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThongTinGiangDayGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThongTinGiangDayGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThongTinGiangDayGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThongTinGiangDayGiangVienFilters
	
	#region ThongTinGiangDayGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThongTinGiangDayGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThongTinGiangDayGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThongTinGiangDayGiangVienQuery : ThongTinGiangDayGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThongTinGiangDayGiangVienQuery class.
		/// </summary>
		public ThongTinGiangDayGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThongTinGiangDayGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThongTinGiangDayGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThongTinGiangDayGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThongTinGiangDayGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThongTinGiangDayGiangVienQuery
		
	#region ThuLaoChamBaiVhuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoChamBaiVhu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoChamBaiVhuFilters : ThuLaoChamBaiVhuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiVhuFilters class.
		/// </summary>
		public ThuLaoChamBaiVhuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiVhuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoChamBaiVhuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiVhuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoChamBaiVhuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoChamBaiVhuFilters
	
	#region ThuLaoChamBaiVhuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoChamBaiVhuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoChamBaiVhu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoChamBaiVhuQuery : ThuLaoChamBaiVhuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiVhuQuery class.
		/// </summary>
		public ThuLaoChamBaiVhuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiVhuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoChamBaiVhuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoChamBaiVhuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoChamBaiVhuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoChamBaiVhuQuery
		
	#region SdhPhanNhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhPhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhPhanNhomMonHocFilters : SdhPhanNhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhPhanNhomMonHocFilters class.
		/// </summary>
		public SdhPhanNhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhPhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhPhanNhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhPhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhPhanNhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhPhanNhomMonHocFilters
	
	#region SdhPhanNhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhPhanNhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhPhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhPhanNhomMonHocQuery : SdhPhanNhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhPhanNhomMonHocQuery class.
		/// </summary>
		public SdhPhanNhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhPhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhPhanNhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhPhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhPhanNhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhPhanNhomMonHocQuery
		
	#region SdhNhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhNhomMonHocFilters : SdhNhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhNhomMonHocFilters class.
		/// </summary>
		public SdhNhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhNhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhNhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhNhomMonHocFilters
	
	#region SdhNhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhNhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhNhomMonHocQuery : SdhNhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhNhomMonHocQuery class.
		/// </summary>
		public SdhNhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhNhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhNhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhNhomMonHocQuery
		
	#region SdhDonGiaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhDonGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhDonGiaFilters : SdhDonGiaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhDonGiaFilters class.
		/// </summary>
		public SdhDonGiaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhDonGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhDonGiaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhDonGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhDonGiaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhDonGiaFilters
	
	#region SdhDonGiaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhDonGiaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhDonGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhDonGiaQuery : SdhDonGiaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhDonGiaQuery class.
		/// </summary>
		public SdhDonGiaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhDonGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhDonGiaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhDonGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhDonGiaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhDonGiaQuery
		
	#region SdhKetQuaThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhKetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhKetQuaThanhToanThuLaoFilters : SdhKetQuaThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		public SdhKetQuaThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhKetQuaThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhKetQuaThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhKetQuaThanhToanThuLaoFilters
	
	#region SdhKetQuaThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhKetQuaThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhKetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhKetQuaThanhToanThuLaoQuery : SdhKetQuaThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		public SdhKetQuaThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhKetQuaThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhKetQuaThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhKetQuaThanhToanThuLaoQuery
		
	#region SdhPhanLoaiHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhPhanLoaiHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhPhanLoaiHocPhanFilters : SdhPhanLoaiHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhPhanLoaiHocPhanFilters class.
		/// </summary>
		public SdhPhanLoaiHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhPhanLoaiHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhPhanLoaiHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhPhanLoaiHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhPhanLoaiHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhPhanLoaiHocPhanFilters
	
	#region SdhPhanLoaiHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhPhanLoaiHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhPhanLoaiHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhPhanLoaiHocPhanQuery : SdhPhanLoaiHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhPhanLoaiHocPhanQuery class.
		/// </summary>
		public SdhPhanLoaiHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhPhanLoaiHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhPhanLoaiHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhPhanLoaiHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhPhanLoaiHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhPhanLoaiHocPhanQuery
		
	#region SoTietNckhChuyenSangNamSauFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SoTietNckhChuyenSangNamSau"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SoTietNckhChuyenSangNamSauFilters : SoTietNckhChuyenSangNamSauFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SoTietNckhChuyenSangNamSauFilters class.
		/// </summary>
		public SoTietNckhChuyenSangNamSauFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SoTietNckhChuyenSangNamSauFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SoTietNckhChuyenSangNamSauFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SoTietNckhChuyenSangNamSauFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SoTietNckhChuyenSangNamSauFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SoTietNckhChuyenSangNamSauFilters
	
	#region SoTietNckhChuyenSangNamSauQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SoTietNckhChuyenSangNamSauParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SoTietNckhChuyenSangNamSau"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SoTietNckhChuyenSangNamSauQuery : SoTietNckhChuyenSangNamSauParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SoTietNckhChuyenSangNamSauQuery class.
		/// </summary>
		public SoTietNckhChuyenSangNamSauQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SoTietNckhChuyenSangNamSauQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SoTietNckhChuyenSangNamSauQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SoTietNckhChuyenSangNamSauQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SoTietNckhChuyenSangNamSauQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SoTietNckhChuyenSangNamSauQuery
		
	#region SdhMonHocKhongTinhKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhMonHocKhongTinhKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhMonHocKhongTinhKhoiLuongFilters : SdhMonHocKhongTinhKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhMonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		public SdhMonHocKhongTinhKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhMonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhMonHocKhongTinhKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhMonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhMonHocKhongTinhKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhMonHocKhongTinhKhoiLuongFilters
	
	#region SdhMonHocKhongTinhKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhMonHocKhongTinhKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhMonHocKhongTinhKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhMonHocKhongTinhKhoiLuongQuery : SdhMonHocKhongTinhKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhMonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		public SdhMonHocKhongTinhKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhMonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhMonHocKhongTinhKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhMonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhMonHocKhongTinhKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhMonHocKhongTinhKhoiLuongQuery
		
	#region SdhHeSoDiaDiemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhHeSoDiaDiem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhHeSoDiaDiemFilters : SdhHeSoDiaDiemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhHeSoDiaDiemFilters class.
		/// </summary>
		public SdhHeSoDiaDiemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhHeSoDiaDiemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhHeSoDiaDiemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhHeSoDiaDiemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhHeSoDiaDiemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhHeSoDiaDiemFilters
	
	#region SdhHeSoDiaDiemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhHeSoDiaDiemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhHeSoDiaDiem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhHeSoDiaDiemQuery : SdhHeSoDiaDiemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhHeSoDiaDiemQuery class.
		/// </summary>
		public SdhHeSoDiaDiemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhHeSoDiaDiemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhHeSoDiaDiemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhHeSoDiaDiemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhHeSoDiaDiemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhHeSoDiaDiemQuery
		
	#region SdhChotKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhChotKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhChotKhoiLuongGiangDayFilters : SdhChotKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhChotKhoiLuongGiangDayFilters class.
		/// </summary>
		public SdhChotKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhChotKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhChotKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhChotKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhChotKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhChotKhoiLuongGiangDayFilters
	
	#region SdhChotKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhChotKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhChotKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhChotKhoiLuongGiangDayQuery : SdhChotKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhChotKhoiLuongGiangDayQuery class.
		/// </summary>
		public SdhChotKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhChotKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhChotKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhChotKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhChotKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhChotKhoiLuongGiangDayQuery
		
	#region ThuLaoGiangDayThucHanhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoGiangDayThucHanh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoGiangDayThucHanhFilters : ThuLaoGiangDayThucHanhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayThucHanhFilters class.
		/// </summary>
		public ThuLaoGiangDayThucHanhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayThucHanhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoGiangDayThucHanhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayThucHanhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoGiangDayThucHanhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoGiangDayThucHanhFilters
	
	#region ThuLaoGiangDayThucHanhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoGiangDayThucHanhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoGiangDayThucHanh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoGiangDayThucHanhQuery : ThuLaoGiangDayThucHanhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayThucHanhQuery class.
		/// </summary>
		public ThuLaoGiangDayThucHanhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayThucHanhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoGiangDayThucHanhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoGiangDayThucHanhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoGiangDayThucHanhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoGiangDayThucHanhQuery
		
	#region ReportTemplateFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ReportTemplate"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ReportTemplateFilters : ReportTemplateFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ReportTemplateFilters class.
		/// </summary>
		public ReportTemplateFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ReportTemplateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ReportTemplateFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ReportTemplateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ReportTemplateFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ReportTemplateFilters
	
	#region ReportTemplateQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ReportTemplateParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ReportTemplate"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ReportTemplateQuery : ReportTemplateParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ReportTemplateQuery class.
		/// </summary>
		public ReportTemplateQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ReportTemplateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ReportTemplateQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ReportTemplateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ReportTemplateQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ReportTemplateQuery
		
	#region SdhUteKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhUteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhUteKhoiLuongGiangDayFilters : SdhUteKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongGiangDayFilters class.
		/// </summary>
		public SdhUteKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhUteKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhUteKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhUteKhoiLuongGiangDayFilters
	
	#region SdhUteKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhUteKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhUteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhUteKhoiLuongGiangDayQuery : SdhUteKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongGiangDayQuery class.
		/// </summary>
		public SdhUteKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhUteKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhUteKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhUteKhoiLuongGiangDayQuery
		
	#region SdhUteKhoiLuongQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhUteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhUteKhoiLuongQuyDoiFilters : SdhUteKhoiLuongQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		public SdhUteKhoiLuongQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhUteKhoiLuongQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhUteKhoiLuongQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhUteKhoiLuongQuyDoiFilters
	
	#region SdhUteKhoiLuongQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhUteKhoiLuongQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhUteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhUteKhoiLuongQuyDoiQuery : SdhUteKhoiLuongQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		public SdhUteKhoiLuongQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhUteKhoiLuongQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhUteKhoiLuongQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhUteKhoiLuongQuyDoiQuery
		
	#region QuyMoKhoaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="QuyMoKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyMoKhoaFilters : QuyMoKhoaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyMoKhoaFilters class.
		/// </summary>
		public QuyMoKhoaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyMoKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyMoKhoaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyMoKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyMoKhoaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyMoKhoaFilters
	
	#region QuyMoKhoaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="QuyMoKhoaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="QuyMoKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class QuyMoKhoaQuery : QuyMoKhoaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the QuyMoKhoaQuery class.
		/// </summary>
		public QuyMoKhoaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the QuyMoKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public QuyMoKhoaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the QuyMoKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public QuyMoKhoaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion QuyMoKhoaQuery
		
	#region SdhMonPhanCongNhieuGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhMonPhanCongNhieuGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhMonPhanCongNhieuGiangVienFilters : SdhMonPhanCongNhieuGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhMonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		public SdhMonPhanCongNhieuGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhMonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhMonPhanCongNhieuGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhMonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhMonPhanCongNhieuGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhMonPhanCongNhieuGiangVienFilters
	
	#region SdhMonPhanCongNhieuGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhMonPhanCongNhieuGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhMonPhanCongNhieuGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhMonPhanCongNhieuGiangVienQuery : SdhMonPhanCongNhieuGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhMonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		public SdhMonPhanCongNhieuGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhMonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhMonPhanCongNhieuGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhMonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhMonPhanCongNhieuGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhMonPhanCongNhieuGiangVienQuery
		
	#region SdhUteThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhUteThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhUteThanhToanThuLaoFilters : SdhUteThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhUteThanhToanThuLaoFilters class.
		/// </summary>
		public SdhUteThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhUteThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhUteThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhUteThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhUteThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhUteThanhToanThuLaoFilters
	
	#region SdhUteThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhUteThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhUteThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhUteThanhToanThuLaoQuery : SdhUteThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhUteThanhToanThuLaoQuery class.
		/// </summary>
		public SdhUteThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhUteThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhUteThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhUteThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhUteThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhUteThanhToanThuLaoQuery
		
	#region ThanhTraGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThanhTraGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhTraGiangDayFilters : ThanhTraGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayFilters class.
		/// </summary>
		public ThanhTraGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhTraGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhTraGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhTraGiangDayFilters
	
	#region ThanhTraGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThanhTraGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThanhTraGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhTraGiangDayQuery : ThanhTraGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayQuery class.
		/// </summary>
		public ThanhTraGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhTraGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhTraGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhTraGiangDayQuery
		
	#region ThoiGianGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThoiGianGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThoiGianGiangDayFilters : ThoiGianGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThoiGianGiangDayFilters class.
		/// </summary>
		public ThoiGianGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThoiGianGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThoiGianGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThoiGianGiangDayFilters
	
	#region ThoiGianGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThoiGianGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThoiGianGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThoiGianGiangDayQuery : ThoiGianGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThoiGianGiangDayQuery class.
		/// </summary>
		public ThoiGianGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThoiGianGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThoiGianGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThoiGianGiangDayQuery
		
	#region ThanhTraCoiThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThanhTraCoiThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhTraCoiThiFilters : ThanhTraCoiThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiFilters class.
		/// </summary>
		public ThanhTraCoiThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhTraCoiThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhTraCoiThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhTraCoiThiFilters
	
	#region ThanhTraCoiThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThanhTraCoiThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThanhTraCoiThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhTraCoiThiQuery : ThanhTraCoiThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiQuery class.
		/// </summary>
		public ThanhTraCoiThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhTraCoiThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraCoiThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhTraCoiThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhTraCoiThiQuery
		
	#region ThanhTraChamGiangTheoKhoaHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThanhTraChamGiangTheoKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhTraChamGiangTheoKhoaHocFilters : ThanhTraChamGiangTheoKhoaHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhTraChamGiangTheoKhoaHocFilters class.
		/// </summary>
		public ThanhTraChamGiangTheoKhoaHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraChamGiangTheoKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhTraChamGiangTheoKhoaHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraChamGiangTheoKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhTraChamGiangTheoKhoaHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhTraChamGiangTheoKhoaHocFilters
	
	#region ThanhTraChamGiangTheoKhoaHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThanhTraChamGiangTheoKhoaHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThanhTraChamGiangTheoKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhTraChamGiangTheoKhoaHocQuery : ThanhTraChamGiangTheoKhoaHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhTraChamGiangTheoKhoaHocQuery class.
		/// </summary>
		public ThanhTraChamGiangTheoKhoaHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraChamGiangTheoKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhTraChamGiangTheoKhoaHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraChamGiangTheoKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhTraChamGiangTheoKhoaHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhTraChamGiangTheoKhoaHocQuery
		
	#region SdhHeSoLopDongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhHeSoLopDong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhHeSoLopDongFilters : SdhHeSoLopDongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhHeSoLopDongFilters class.
		/// </summary>
		public SdhHeSoLopDongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhHeSoLopDongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhHeSoLopDongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhHeSoLopDongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhHeSoLopDongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhHeSoLopDongFilters
	
	#region SdhHeSoLopDongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhHeSoLopDongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhHeSoLopDong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhHeSoLopDongQuery : SdhHeSoLopDongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhHeSoLopDongQuery class.
		/// </summary>
		public SdhHeSoLopDongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhHeSoLopDongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhHeSoLopDongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhHeSoLopDongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhHeSoLopDongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhHeSoLopDongQuery
		
	#region TaiKhoanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TaiKhoan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TaiKhoanFilters : TaiKhoanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TaiKhoanFilters class.
		/// </summary>
		public TaiKhoanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TaiKhoanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TaiKhoanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TaiKhoanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TaiKhoanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TaiKhoanFilters
	
	#region TaiKhoanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TaiKhoanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TaiKhoan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TaiKhoanQuery : TaiKhoanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TaiKhoanQuery class.
		/// </summary>
		public TaiKhoanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TaiKhoanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TaiKhoanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TaiKhoanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TaiKhoanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TaiKhoanQuery
		
	#region ThoiGianNghiTamThoiCuaGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThoiGianNghiTamThoiCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThoiGianNghiTamThoiCuaGiangVienFilters : ThoiGianNghiTamThoiCuaGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThoiGianNghiTamThoiCuaGiangVienFilters class.
		/// </summary>
		public ThoiGianNghiTamThoiCuaGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianNghiTamThoiCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThoiGianNghiTamThoiCuaGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianNghiTamThoiCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThoiGianNghiTamThoiCuaGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThoiGianNghiTamThoiCuaGiangVienFilters
	
	#region ThoiGianNghiTamThoiCuaGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThoiGianNghiTamThoiCuaGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThoiGianNghiTamThoiCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThoiGianNghiTamThoiCuaGiangVienQuery : ThoiGianNghiTamThoiCuaGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThoiGianNghiTamThoiCuaGiangVienQuery class.
		/// </summary>
		public ThoiGianNghiTamThoiCuaGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianNghiTamThoiCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThoiGianNghiTamThoiCuaGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianNghiTamThoiCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThoiGianNghiTamThoiCuaGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThoiGianNghiTamThoiCuaGiangVienQuery
		
	#region ThueThanhToanBoSungFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThueThanhToanBoSung"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThueThanhToanBoSungFilters : ThueThanhToanBoSungFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThueThanhToanBoSungFilters class.
		/// </summary>
		public ThueThanhToanBoSungFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThueThanhToanBoSungFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThueThanhToanBoSungFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThueThanhToanBoSungFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThueThanhToanBoSungFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThueThanhToanBoSungFilters
	
	#region ThueThanhToanBoSungQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThueThanhToanBoSungParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThueThanhToanBoSung"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThueThanhToanBoSungQuery : ThueThanhToanBoSungParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThueThanhToanBoSungQuery class.
		/// </summary>
		public ThueThanhToanBoSungQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThueThanhToanBoSungQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThueThanhToanBoSungQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThueThanhToanBoSungQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThueThanhToanBoSungQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThueThanhToanBoSungQuery
		
	#region ThoiGianLamViecCuaNhanVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThoiGianLamViecCuaNhanVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThoiGianLamViecCuaNhanVienFilters : ThoiGianLamViecCuaNhanVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThoiGianLamViecCuaNhanVienFilters class.
		/// </summary>
		public ThoiGianLamViecCuaNhanVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianLamViecCuaNhanVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThoiGianLamViecCuaNhanVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianLamViecCuaNhanVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThoiGianLamViecCuaNhanVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThoiGianLamViecCuaNhanVienFilters
	
	#region ThoiGianLamViecCuaNhanVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThoiGianLamViecCuaNhanVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThoiGianLamViecCuaNhanVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThoiGianLamViecCuaNhanVienQuery : ThoiGianLamViecCuaNhanVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThoiGianLamViecCuaNhanVienQuery class.
		/// </summary>
		public ThoiGianLamViecCuaNhanVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianLamViecCuaNhanVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThoiGianLamViecCuaNhanVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThoiGianLamViecCuaNhanVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThoiGianLamViecCuaNhanVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThoiGianLamViecCuaNhanVienQuery
		
	#region SiSoLopHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SiSoLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SiSoLopHocPhanFilters : SiSoLopHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SiSoLopHocPhanFilters class.
		/// </summary>
		public SiSoLopHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SiSoLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SiSoLopHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SiSoLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SiSoLopHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SiSoLopHocPhanFilters
	
	#region SiSoLopHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SiSoLopHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SiSoLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SiSoLopHocPhanQuery : SiSoLopHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SiSoLopHocPhanQuery class.
		/// </summary>
		public SiSoLopHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SiSoLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SiSoLopHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SiSoLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SiSoLopHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SiSoLopHocPhanQuery
		
	#region BangPhuTroiNamHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="BangPhuTroiNamHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class BangPhuTroiNamHocFilters : BangPhuTroiNamHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiNamHocFilters class.
		/// </summary>
		public BangPhuTroiNamHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiNamHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public BangPhuTroiNamHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiNamHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public BangPhuTroiNamHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion BangPhuTroiNamHocFilters
	
	#region BangPhuTroiNamHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="BangPhuTroiNamHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="BangPhuTroiNamHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class BangPhuTroiNamHocQuery : BangPhuTroiNamHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiNamHocQuery class.
		/// </summary>
		public BangPhuTroiNamHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiNamHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public BangPhuTroiNamHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the BangPhuTroiNamHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public BangPhuTroiNamHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion BangPhuTroiNamHocQuery
		
	#region SdhLoaiKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SdhLoaiKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhLoaiKhoiLuongFilters : SdhLoaiKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhLoaiKhoiLuongFilters class.
		/// </summary>
		public SdhLoaiKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhLoaiKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhLoaiKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhLoaiKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhLoaiKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhLoaiKhoiLuongFilters
	
	#region SdhLoaiKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SdhLoaiKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SdhLoaiKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SdhLoaiKhoiLuongQuery : SdhLoaiKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SdhLoaiKhoiLuongQuery class.
		/// </summary>
		public SdhLoaiKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SdhLoaiKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SdhLoaiKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SdhLoaiKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SdhLoaiKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SdhLoaiKhoiLuongQuery
		
	#region ThanhToanThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThanhToanThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhToanThinhGiangFilters : ThanhToanThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangFilters class.
		/// </summary>
		public ThanhToanThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhToanThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhToanThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhToanThinhGiangFilters
	
	#region ThanhToanThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThanhToanThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThanhToanThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhToanThinhGiangQuery : ThanhToanThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangQuery class.
		/// </summary>
		public ThanhToanThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhToanThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhToanThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhToanThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhToanThinhGiangQuery
		
	#region KetQuaCacKhoanChiKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KetQuaCacKhoanChiKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaCacKhoanChiKhacFilters : KetQuaCacKhoanChiKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaCacKhoanChiKhacFilters class.
		/// </summary>
		public KetQuaCacKhoanChiKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaCacKhoanChiKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaCacKhoanChiKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaCacKhoanChiKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaCacKhoanChiKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaCacKhoanChiKhacFilters
	
	#region KetQuaCacKhoanChiKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KetQuaCacKhoanChiKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KetQuaCacKhoanChiKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaCacKhoanChiKhacQuery : KetQuaCacKhoanChiKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaCacKhoanChiKhacQuery class.
		/// </summary>
		public KetQuaCacKhoanChiKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaCacKhoanChiKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaCacKhoanChiKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaCacKhoanChiKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaCacKhoanChiKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaCacKhoanChiKhacQuery
		
	#region ThanhTraTheoThoiKhoaBieuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThanhTraTheoThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhTraTheoThoiKhoaBieuFilters : ThanhTraTheoThoiKhoaBieuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhTraTheoThoiKhoaBieuFilters class.
		/// </summary>
		public ThanhTraTheoThoiKhoaBieuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraTheoThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhTraTheoThoiKhoaBieuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraTheoThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhTraTheoThoiKhoaBieuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhTraTheoThoiKhoaBieuFilters
	
	#region ThanhTraTheoThoiKhoaBieuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThanhTraTheoThoiKhoaBieuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThanhTraTheoThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThanhTraTheoThoiKhoaBieuQuery : ThanhTraTheoThoiKhoaBieuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThanhTraTheoThoiKhoaBieuQuery class.
		/// </summary>
		public ThanhTraTheoThoiKhoaBieuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraTheoThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThanhTraTheoThoiKhoaBieuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThanhTraTheoThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThanhTraTheoThoiKhoaBieuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThanhTraTheoThoiKhoaBieuQuery
		
	#region KcqUteKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqUteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqUteKhoiLuongGiangDayFilters : KcqUteKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongGiangDayFilters class.
		/// </summary>
		public KcqUteKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqUteKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqUteKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqUteKhoiLuongGiangDayFilters
	
	#region KcqUteKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqUteKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqUteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqUteKhoiLuongGiangDayQuery : KcqUteKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongGiangDayQuery class.
		/// </summary>
		public KcqUteKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqUteKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqUteKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqUteKhoiLuongGiangDayQuery
		
	#region ThamDinhLuanVanThacSyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThamDinhLuanVanThacSy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThamDinhLuanVanThacSyFilters : ThamDinhLuanVanThacSyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThamDinhLuanVanThacSyFilters class.
		/// </summary>
		public ThamDinhLuanVanThacSyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThamDinhLuanVanThacSyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThamDinhLuanVanThacSyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThamDinhLuanVanThacSyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThamDinhLuanVanThacSyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThamDinhLuanVanThacSyFilters
	
	#region ThamDinhLuanVanThacSyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThamDinhLuanVanThacSyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThamDinhLuanVanThacSy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThamDinhLuanVanThacSyQuery : ThamDinhLuanVanThacSyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThamDinhLuanVanThacSyQuery class.
		/// </summary>
		public ThamDinhLuanVanThacSyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThamDinhLuanVanThacSyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThamDinhLuanVanThacSyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThamDinhLuanVanThacSyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThamDinhLuanVanThacSyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThamDinhLuanVanThacSyQuery
		
	#region GiangDaySauDaiHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangDaySauDaiHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangDaySauDaiHocFilters : GiangDaySauDaiHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangDaySauDaiHocFilters class.
		/// </summary>
		public GiangDaySauDaiHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangDaySauDaiHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangDaySauDaiHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangDaySauDaiHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangDaySauDaiHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangDaySauDaiHocFilters
	
	#region GiangDaySauDaiHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangDaySauDaiHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangDaySauDaiHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangDaySauDaiHocQuery : GiangDaySauDaiHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangDaySauDaiHocQuery class.
		/// </summary>
		public GiangDaySauDaiHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangDaySauDaiHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangDaySauDaiHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangDaySauDaiHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangDaySauDaiHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangDaySauDaiHocQuery
		
	#region KcqUteKhoiLuongKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqUteKhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqUteKhoiLuongKhacFilters : KcqUteKhoiLuongKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongKhacFilters class.
		/// </summary>
		public KcqUteKhoiLuongKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqUteKhoiLuongKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqUteKhoiLuongKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqUteKhoiLuongKhacFilters
	
	#region KcqUteKhoiLuongKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqUteKhoiLuongKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqUteKhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqUteKhoiLuongKhacQuery : KcqUteKhoiLuongKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongKhacQuery class.
		/// </summary>
		public KcqUteKhoiLuongKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqUteKhoiLuongKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqUteKhoiLuongKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqUteKhoiLuongKhacQuery
		
	#region KcqPhanCongDoAnTotNghiepFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqPhanCongDoAnTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhanCongDoAnTotNghiepFilters : KcqPhanCongDoAnTotNghiepFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhanCongDoAnTotNghiepFilters class.
		/// </summary>
		public KcqPhanCongDoAnTotNghiepFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanCongDoAnTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhanCongDoAnTotNghiepFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanCongDoAnTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhanCongDoAnTotNghiepFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhanCongDoAnTotNghiepFilters
	
	#region KcqPhanCongDoAnTotNghiepQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqPhanCongDoAnTotNghiepParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqPhanCongDoAnTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhanCongDoAnTotNghiepQuery : KcqPhanCongDoAnTotNghiepParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhanCongDoAnTotNghiepQuery class.
		/// </summary>
		public KcqPhanCongDoAnTotNghiepQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanCongDoAnTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhanCongDoAnTotNghiepQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanCongDoAnTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhanCongDoAnTotNghiepQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhanCongDoAnTotNghiepQuery
		
	#region DuTruGioGiangKhiCoLopHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DuTruGioGiangKhiCoLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DuTruGioGiangKhiCoLopHocPhanFilters : DuTruGioGiangKhiCoLopHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangKhiCoLopHocPhanFilters class.
		/// </summary>
		public DuTruGioGiangKhiCoLopHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangKhiCoLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DuTruGioGiangKhiCoLopHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangKhiCoLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DuTruGioGiangKhiCoLopHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DuTruGioGiangKhiCoLopHocPhanFilters
	
	#region DuTruGioGiangKhiCoLopHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DuTruGioGiangKhiCoLopHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DuTruGioGiangKhiCoLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DuTruGioGiangKhiCoLopHocPhanQuery : DuTruGioGiangKhiCoLopHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangKhiCoLopHocPhanQuery class.
		/// </summary>
		public DuTruGioGiangKhiCoLopHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangKhiCoLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DuTruGioGiangKhiCoLopHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangKhiCoLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DuTruGioGiangKhiCoLopHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DuTruGioGiangKhiCoLopHocPhanQuery
		
	#region DanhMucHoatDongQuanLyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DanhMucHoatDongQuanLy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucHoatDongQuanLyFilters : DanhMucHoatDongQuanLyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucHoatDongQuanLyFilters class.
		/// </summary>
		public DanhMucHoatDongQuanLyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucHoatDongQuanLyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucHoatDongQuanLyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucHoatDongQuanLyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucHoatDongQuanLyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucHoatDongQuanLyFilters
	
	#region DanhMucHoatDongQuanLyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DanhMucHoatDongQuanLyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DanhMucHoatDongQuanLy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucHoatDongQuanLyQuery : DanhMucHoatDongQuanLyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucHoatDongQuanLyQuery class.
		/// </summary>
		public DanhMucHoatDongQuanLyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucHoatDongQuanLyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucHoatDongQuanLyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucHoatDongQuanLyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucHoatDongQuanLyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucHoatDongQuanLyQuery
		
	#region KcqQuyDoiGioChuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqQuyDoiGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqQuyDoiGioChuanFilters : KcqQuyDoiGioChuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqQuyDoiGioChuanFilters class.
		/// </summary>
		public KcqQuyDoiGioChuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqQuyDoiGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqQuyDoiGioChuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqQuyDoiGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqQuyDoiGioChuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqQuyDoiGioChuanFilters
	
	#region KcqQuyDoiGioChuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqQuyDoiGioChuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqQuyDoiGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqQuyDoiGioChuanQuery : KcqQuyDoiGioChuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqQuyDoiGioChuanQuery class.
		/// </summary>
		public KcqQuyDoiGioChuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqQuyDoiGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqQuyDoiGioChuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqQuyDoiGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqQuyDoiGioChuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqQuyDoiGioChuanQuery
		
	#region HocHamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HocHam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HocHamFilters : HocHamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HocHamFilters class.
		/// </summary>
		public HocHamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HocHamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HocHamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HocHamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HocHamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HocHamFilters
	
	#region HocHamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HocHamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HocHam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HocHamQuery : HocHamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HocHamQuery class.
		/// </summary>
		public HocHamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HocHamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HocHamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HocHamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HocHamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HocHamQuery
		
	#region GiangVienChuyenMonFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienChuyenMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienChuyenMonFilters : GiangVienChuyenMonFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenMonFilters class.
		/// </summary>
		public GiangVienChuyenMonFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienChuyenMonFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienChuyenMonFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienChuyenMonFilters
	
	#region GiangVienChuyenMonQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienChuyenMonParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienChuyenMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienChuyenMonQuery : GiangVienChuyenMonParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenMonQuery class.
		/// </summary>
		public GiangVienChuyenMonQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienChuyenMonQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienChuyenMonQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienChuyenMonQuery
		
	#region GiangVienChucVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienChucVuFilters : GiangVienChucVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienChucVuFilters class.
		/// </summary>
		public GiangVienChucVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienChucVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienChucVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienChucVuFilters
	
	#region GiangVienChucVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienChucVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienChucVuQuery : GiangVienChucVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienChucVuQuery class.
		/// </summary>
		public GiangVienChucVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienChucVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienChucVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienChucVuQuery
		
	#region GiangVienThanhToanQuaNganHangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienThanhToanQuaNganHang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThanhToanQuaNganHangFilters : GiangVienThanhToanQuaNganHangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThanhToanQuaNganHangFilters class.
		/// </summary>
		public GiangVienThanhToanQuaNganHangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThanhToanQuaNganHangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThanhToanQuaNganHangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThanhToanQuaNganHangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThanhToanQuaNganHangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThanhToanQuaNganHangFilters
	
	#region GiangVienThanhToanQuaNganHangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienThanhToanQuaNganHangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienThanhToanQuaNganHang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThanhToanQuaNganHangQuery : GiangVienThanhToanQuaNganHangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThanhToanQuaNganHangQuery class.
		/// </summary>
		public GiangVienThanhToanQuaNganHangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThanhToanQuaNganHangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThanhToanQuaNganHangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThanhToanQuaNganHangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThanhToanQuaNganHangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThanhToanQuaNganHangQuery
		
	#region GiangVienMocTangLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienMocTangLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienMocTangLuongFilters : GiangVienMocTangLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienMocTangLuongFilters class.
		/// </summary>
		public GiangVienMocTangLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienMocTangLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienMocTangLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienMocTangLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienMocTangLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienMocTangLuongFilters
	
	#region GiangVienMocTangLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienMocTangLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienMocTangLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienMocTangLuongQuery : GiangVienMocTangLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienMocTangLuongQuery class.
		/// </summary>
		public GiangVienMocTangLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienMocTangLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienMocTangLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienMocTangLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienMocTangLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienMocTangLuongQuery
		
	#region GiangDayChatLuongCaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangDayChatLuongCao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangDayChatLuongCaoFilters : GiangDayChatLuongCaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangDayChatLuongCaoFilters class.
		/// </summary>
		public GiangDayChatLuongCaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangDayChatLuongCaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangDayChatLuongCaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangDayChatLuongCaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangDayChatLuongCaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangDayChatLuongCaoFilters
	
	#region GiangDayChatLuongCaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangDayChatLuongCaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangDayChatLuongCao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangDayChatLuongCaoQuery : GiangDayChatLuongCaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangDayChatLuongCaoQuery class.
		/// </summary>
		public GiangDayChatLuongCaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangDayChatLuongCaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangDayChatLuongCaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangDayChatLuongCaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangDayChatLuongCaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangDayChatLuongCaoQuery
		
	#region GiangVienKhongTinhGioGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienKhongTinhGioGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienKhongTinhGioGiangFilters : GiangVienKhongTinhGioGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienKhongTinhGioGiangFilters class.
		/// </summary>
		public GiangVienKhongTinhGioGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienKhongTinhGioGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienKhongTinhGioGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienKhongTinhGioGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienKhongTinhGioGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienKhongTinhGioGiangFilters
	
	#region GiangVienKhongTinhGioGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienKhongTinhGioGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienKhongTinhGioGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienKhongTinhGioGiangQuery : GiangVienKhongTinhGioGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienKhongTinhGioGiangQuery class.
		/// </summary>
		public GiangVienKhongTinhGioGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienKhongTinhGioGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienKhongTinhGioGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienKhongTinhGioGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienKhongTinhGioGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienKhongTinhGioGiangQuery
		
	#region GhiChuThanhToanBoSungFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GhiChuThanhToanBoSung"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GhiChuThanhToanBoSungFilters : GhiChuThanhToanBoSungFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GhiChuThanhToanBoSungFilters class.
		/// </summary>
		public GhiChuThanhToanBoSungFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GhiChuThanhToanBoSungFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GhiChuThanhToanBoSungFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GhiChuThanhToanBoSungFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GhiChuThanhToanBoSungFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GhiChuThanhToanBoSungFilters
	
	#region GhiChuThanhToanBoSungQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GhiChuThanhToanBoSungParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GhiChuThanhToanBoSung"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GhiChuThanhToanBoSungQuery : GhiChuThanhToanBoSungParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GhiChuThanhToanBoSungQuery class.
		/// </summary>
		public GhiChuThanhToanBoSungQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GhiChuThanhToanBoSungQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GhiChuThanhToanBoSungQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GhiChuThanhToanBoSungQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GhiChuThanhToanBoSungQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GhiChuThanhToanBoSungQuery
		
	#region GiangVienDinhMucKhauTruFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienDinhMucKhauTru"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienDinhMucKhauTruFilters : GiangVienDinhMucKhauTruFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienDinhMucKhauTruFilters class.
		/// </summary>
		public GiangVienDinhMucKhauTruFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienDinhMucKhauTruFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienDinhMucKhauTruFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienDinhMucKhauTruFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienDinhMucKhauTruFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienDinhMucKhauTruFilters
	
	#region GiangVienDinhMucKhauTruQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienDinhMucKhauTruParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienDinhMucKhauTru"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienDinhMucKhauTruQuery : GiangVienDinhMucKhauTruParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienDinhMucKhauTruQuery class.
		/// </summary>
		public GiangVienDinhMucKhauTruQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienDinhMucKhauTruQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienDinhMucKhauTruQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienDinhMucKhauTruQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienDinhMucKhauTruQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienDinhMucKhauTruQuery
		
	#region GiangVienHoatDongNgoaiGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienHoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienHoatDongNgoaiGiangDayFilters : GiangVienHoatDongNgoaiGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		public GiangVienHoatDongNgoaiGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienHoatDongNgoaiGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienHoatDongNgoaiGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienHoatDongNgoaiGiangDayFilters
	
	#region GiangVienHoatDongNgoaiGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienHoatDongNgoaiGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienHoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienHoatDongNgoaiGiangDayQuery : GiangVienHoatDongNgoaiGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		public GiangVienHoatDongNgoaiGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienHoatDongNgoaiGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienHoatDongNgoaiGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienHoatDongNgoaiGiangDayQuery
		
	#region GiamTruDinhMucFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiamTruDinhMuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiamTruDinhMucFilters : GiamTruDinhMucFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiamTruDinhMucFilters class.
		/// </summary>
		public GiamTruDinhMucFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiamTruDinhMucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiamTruDinhMucFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiamTruDinhMucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiamTruDinhMucFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiamTruDinhMucFilters
	
	#region GiamTruDinhMucQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiamTruDinhMucParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiamTruDinhMuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiamTruDinhMucQuery : GiamTruDinhMucParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiamTruDinhMucQuery class.
		/// </summary>
		public GiamTruDinhMucQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiamTruDinhMucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiamTruDinhMucQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiamTruDinhMucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiamTruDinhMucQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiamTruDinhMucQuery
		
	#region GiangVienLopHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienLopHocPhanFilters : GiangVienLopHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienLopHocPhanFilters class.
		/// </summary>
		public GiangVienLopHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienLopHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienLopHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienLopHocPhanFilters
	
	#region GiangVienLopHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienLopHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienLopHocPhanQuery : GiangVienLopHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienLopHocPhanQuery class.
		/// </summary>
		public GiangVienLopHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienLopHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienLopHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienLopHocPhanQuery
		
	#region GiangVienThayDoiHocHamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienThayDoiHocHam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThayDoiHocHamFilters : GiangVienThayDoiHocHamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocHamFilters class.
		/// </summary>
		public GiangVienThayDoiHocHamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocHamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThayDoiHocHamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocHamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThayDoiHocHamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThayDoiHocHamFilters
	
	#region GiangVienThayDoiHocHamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienThayDoiHocHamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienThayDoiHocHam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThayDoiHocHamQuery : GiangVienThayDoiHocHamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocHamQuery class.
		/// </summary>
		public GiangVienThayDoiHocHamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocHamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThayDoiHocHamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocHamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThayDoiHocHamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThayDoiHocHamQuery
		
	#region GiangVienChoDuyetHoSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienChoDuyetHoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienChoDuyetHoSoFilters : GiangVienChoDuyetHoSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienChoDuyetHoSoFilters class.
		/// </summary>
		public GiangVienChoDuyetHoSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChoDuyetHoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienChoDuyetHoSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChoDuyetHoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienChoDuyetHoSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienChoDuyetHoSoFilters
	
	#region GiangVienChoDuyetHoSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienChoDuyetHoSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienChoDuyetHoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienChoDuyetHoSoQuery : GiangVienChoDuyetHoSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienChoDuyetHoSoQuery class.
		/// </summary>
		public GiangVienChoDuyetHoSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChoDuyetHoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienChoDuyetHoSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChoDuyetHoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienChoDuyetHoSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienChoDuyetHoSoQuery
		
	#region GiangVienBiChanTienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienBiChanTien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienBiChanTienFilters : GiangVienBiChanTienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienBiChanTienFilters class.
		/// </summary>
		public GiangVienBiChanTienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienBiChanTienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienBiChanTienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienBiChanTienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienBiChanTienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienBiChanTienFilters
	
	#region GiangVienBiChanTienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienBiChanTienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienBiChanTien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienBiChanTienQuery : GiangVienBiChanTienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienBiChanTienQuery class.
		/// </summary>
		public GiangVienBiChanTienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienBiChanTienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienBiChanTienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienBiChanTienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienBiChanTienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienBiChanTienQuery
		
	#region GiangVienTinhGioChuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienTinhGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienTinhGioChuanFilters : GiangVienTinhGioChuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhGioChuanFilters class.
		/// </summary>
		public GiangVienTinhGioChuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienTinhGioChuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienTinhGioChuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienTinhGioChuanFilters
	
	#region GiangVienTinhGioChuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienTinhGioChuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienTinhGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienTinhGioChuanQuery : GiangVienTinhGioChuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhGioChuanQuery class.
		/// </summary>
		public GiangVienTinhGioChuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienTinhGioChuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienTinhGioChuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienTinhGioChuanQuery
		
	#region NgachCongChucFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NgachCongChuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NgachCongChucFilters : NgachCongChucFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NgachCongChucFilters class.
		/// </summary>
		public NgachCongChucFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NgachCongChucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NgachCongChucFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NgachCongChucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NgachCongChucFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NgachCongChucFilters
	
	#region NgachCongChucQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NgachCongChucParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NgachCongChuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NgachCongChucQuery : NgachCongChucParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NgachCongChucQuery class.
		/// </summary>
		public NgachCongChucQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NgachCongChucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NgachCongChucQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NgachCongChucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NgachCongChucQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NgachCongChucQuery
		
	#region DinhMucGioChuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DinhMucGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DinhMucGioChuanFilters : DinhMucGioChuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanFilters class.
		/// </summary>
		public DinhMucGioChuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DinhMucGioChuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DinhMucGioChuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DinhMucGioChuanFilters
	
	#region DinhMucGioChuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DinhMucGioChuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DinhMucGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DinhMucGioChuanQuery : DinhMucGioChuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanQuery class.
		/// </summary>
		public DinhMucGioChuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DinhMucGioChuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DinhMucGioChuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DinhMucGioChuanQuery
		
	#region GiangVienTamUngChiTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienTamUngChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienTamUngChiTietFilters : GiangVienTamUngChiTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngChiTietFilters class.
		/// </summary>
		public GiangVienTamUngChiTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienTamUngChiTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienTamUngChiTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienTamUngChiTietFilters
	
	#region GiangVienTamUngChiTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienTamUngChiTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienTamUngChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienTamUngChiTietQuery : GiangVienTamUngChiTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngChiTietQuery class.
		/// </summary>
		public GiangVienTamUngChiTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienTamUngChiTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienTamUngChiTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienTamUngChiTietQuery
		
	#region HocViFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HocVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HocViFilters : HocViFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HocViFilters class.
		/// </summary>
		public HocViFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HocViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HocViFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HocViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HocViFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HocViFilters
	
	#region HocViQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HocViParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HocVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HocViQuery : HocViParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HocViQuery class.
		/// </summary>
		public HocViQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HocViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HocViQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HocViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HocViQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HocViQuery
		
	#region GiangVienThayDoiLoaiGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienThayDoiLoaiGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThayDoiLoaiGiangVienFilters : GiangVienThayDoiLoaiGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiLoaiGiangVienFilters class.
		/// </summary>
		public GiangVienThayDoiLoaiGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiLoaiGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThayDoiLoaiGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiLoaiGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThayDoiLoaiGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThayDoiLoaiGiangVienFilters
	
	#region GiangVienThayDoiLoaiGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienThayDoiLoaiGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienThayDoiLoaiGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThayDoiLoaiGiangVienQuery : GiangVienThayDoiLoaiGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiLoaiGiangVienQuery class.
		/// </summary>
		public GiangVienThayDoiLoaiGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiLoaiGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThayDoiLoaiGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiLoaiGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThayDoiLoaiGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThayDoiLoaiGiangVienQuery
		
	#region GiangVienGiamTruDinhMucFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienGiamTruDinhMuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienGiamTruDinhMucFilters : GiangVienGiamTruDinhMucFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienGiamTruDinhMucFilters class.
		/// </summary>
		public GiangVienGiamTruDinhMucFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienGiamTruDinhMucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienGiamTruDinhMucFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienGiamTruDinhMucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienGiamTruDinhMucFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienGiamTruDinhMucFilters
	
	#region GiangVienGiamTruDinhMucQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienGiamTruDinhMucParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienGiamTruDinhMuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienGiamTruDinhMucQuery : GiangVienGiamTruDinhMucParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienGiamTruDinhMucQuery class.
		/// </summary>
		public GiangVienGiamTruDinhMucQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienGiamTruDinhMucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienGiamTruDinhMucQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienGiamTruDinhMucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienGiamTruDinhMucQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienGiamTruDinhMucQuery
		
	#region GiangVienCamKetKhongTruThueFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienCamKetKhongTruThue"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienCamKetKhongTruThueFilters : GiangVienCamKetKhongTruThueFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienCamKetKhongTruThueFilters class.
		/// </summary>
		public GiangVienCamKetKhongTruThueFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienCamKetKhongTruThueFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienCamKetKhongTruThueFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienCamKetKhongTruThueFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienCamKetKhongTruThueFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienCamKetKhongTruThueFilters
	
	#region GiangVienCamKetKhongTruThueQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienCamKetKhongTruThueParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienCamKetKhongTruThue"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienCamKetKhongTruThueQuery : GiangVienCamKetKhongTruThueParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienCamKetKhongTruThueQuery class.
		/// </summary>
		public GiangVienCamKetKhongTruThueQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienCamKetKhongTruThueQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienCamKetKhongTruThueQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienCamKetKhongTruThueQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienCamKetKhongTruThueQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienCamKetKhongTruThueQuery
		
	#region GiangVienPhanHoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienPhanHoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienPhanHoiFilters : GiangVienPhanHoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienPhanHoiFilters class.
		/// </summary>
		public GiangVienPhanHoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienPhanHoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienPhanHoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienPhanHoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienPhanHoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienPhanHoiFilters
	
	#region GiangVienPhanHoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienPhanHoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienPhanHoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienPhanHoiQuery : GiangVienPhanHoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienPhanHoiQuery class.
		/// </summary>
		public GiangVienPhanHoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienPhanHoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienPhanHoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienPhanHoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienPhanHoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienPhanHoiQuery
		
	#region DuTruGioGiangTruocLopHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DuTruGioGiangTruocLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DuTruGioGiangTruocLopHocPhanFilters : DuTruGioGiangTruocLopHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanFilters class.
		/// </summary>
		public DuTruGioGiangTruocLopHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DuTruGioGiangTruocLopHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DuTruGioGiangTruocLopHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DuTruGioGiangTruocLopHocPhanFilters
	
	#region DuTruGioGiangTruocLopHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DuTruGioGiangTruocLopHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DuTruGioGiangTruocLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DuTruGioGiangTruocLopHocPhanQuery : DuTruGioGiangTruocLopHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanQuery class.
		/// </summary>
		public DuTruGioGiangTruocLopHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DuTruGioGiangTruocLopHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DuTruGioGiangTruocLopHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DuTruGioGiangTruocLopHocPhanQuery
		
	#region GiangVienTinhLuongThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienTinhLuongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienTinhLuongThinhGiangFilters : GiangVienTinhLuongThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhLuongThinhGiangFilters class.
		/// </summary>
		public GiangVienTinhLuongThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhLuongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienTinhLuongThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhLuongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienTinhLuongThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienTinhLuongThinhGiangFilters
	
	#region GiangVienTinhLuongThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienTinhLuongThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienTinhLuongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienTinhLuongThinhGiangQuery : GiangVienTinhLuongThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhLuongThinhGiangQuery class.
		/// </summary>
		public GiangVienTinhLuongThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhLuongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienTinhLuongThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTinhLuongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienTinhLuongThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienTinhLuongThinhGiangQuery
		
	#region DinhMucNghienCuuKhoaHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DinhMucNghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DinhMucNghienCuuKhoaHocFilters : DinhMucNghienCuuKhoaHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DinhMucNghienCuuKhoaHocFilters class.
		/// </summary>
		public DinhMucNghienCuuKhoaHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DinhMucNghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DinhMucNghienCuuKhoaHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DinhMucNghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DinhMucNghienCuuKhoaHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DinhMucNghienCuuKhoaHocFilters
	
	#region DinhMucNghienCuuKhoaHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DinhMucNghienCuuKhoaHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DinhMucNghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DinhMucNghienCuuKhoaHocQuery : DinhMucNghienCuuKhoaHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DinhMucNghienCuuKhoaHocQuery class.
		/// </summary>
		public DinhMucNghienCuuKhoaHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DinhMucNghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DinhMucNghienCuuKhoaHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DinhMucNghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DinhMucNghienCuuKhoaHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DinhMucNghienCuuKhoaHocQuery
		
	#region GiangVienNghienCuuKhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienNghienCuuKh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienNghienCuuKhFilters : GiangVienNghienCuuKhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienNghienCuuKhFilters class.
		/// </summary>
		public GiangVienNghienCuuKhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienNghienCuuKhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienNghienCuuKhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienNghienCuuKhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienNghienCuuKhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienNghienCuuKhFilters
	
	#region GiangVienNghienCuuKhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienNghienCuuKhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienNghienCuuKh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienNghienCuuKhQuery : GiangVienNghienCuuKhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienNghienCuuKhQuery class.
		/// </summary>
		public GiangVienNghienCuuKhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienNghienCuuKhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienNghienCuuKhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienNghienCuuKhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienNghienCuuKhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienNghienCuuKhQuery
		
	#region GiangVienHoSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienHoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienHoSoFilters : GiangVienHoSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienHoSoFilters class.
		/// </summary>
		public GiangVienHoSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienHoSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienHoSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienHoSoFilters
	
	#region GiangVienHoSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienHoSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienHoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienHoSoQuery : GiangVienHoSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienHoSoQuery class.
		/// </summary>
		public GiangVienHoSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienHoSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienHoSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienHoSoQuery
		
	#region GiangVienThayDoiChucVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienThayDoiChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThayDoiChucVuFilters : GiangVienThayDoiChucVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiChucVuFilters class.
		/// </summary>
		public GiangVienThayDoiChucVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThayDoiChucVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThayDoiChucVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThayDoiChucVuFilters
	
	#region GiangVienThayDoiChucVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienThayDoiChucVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienThayDoiChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThayDoiChucVuQuery : GiangVienThayDoiChucVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiChucVuQuery class.
		/// </summary>
		public GiangVienThayDoiChucVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThayDoiChucVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThayDoiChucVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThayDoiChucVuQuery
		
	#region GiangVienHoatDongQuanLyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienHoatDongQuanLy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienHoatDongQuanLyFilters : GiangVienHoatDongQuanLyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongQuanLyFilters class.
		/// </summary>
		public GiangVienHoatDongQuanLyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongQuanLyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienHoatDongQuanLyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongQuanLyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienHoatDongQuanLyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienHoatDongQuanLyFilters
	
	#region GiangVienHoatDongQuanLyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienHoatDongQuanLyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienHoatDongQuanLy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienHoatDongQuanLyQuery : GiangVienHoatDongQuanLyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongQuanLyQuery class.
		/// </summary>
		public GiangVienHoatDongQuanLyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongQuanLyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienHoatDongQuanLyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienHoatDongQuanLyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienHoatDongQuanLyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienHoatDongQuanLyQuery
		
	#region DinhMucHuongDanKhoaLuanThucTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DinhMucHuongDanKhoaLuanThucTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DinhMucHuongDanKhoaLuanThucTapFilters : DinhMucHuongDanKhoaLuanThucTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DinhMucHuongDanKhoaLuanThucTapFilters class.
		/// </summary>
		public DinhMucHuongDanKhoaLuanThucTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DinhMucHuongDanKhoaLuanThucTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DinhMucHuongDanKhoaLuanThucTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DinhMucHuongDanKhoaLuanThucTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DinhMucHuongDanKhoaLuanThucTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DinhMucHuongDanKhoaLuanThucTapFilters
	
	#region DinhMucHuongDanKhoaLuanThucTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DinhMucHuongDanKhoaLuanThucTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DinhMucHuongDanKhoaLuanThucTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DinhMucHuongDanKhoaLuanThucTapQuery : DinhMucHuongDanKhoaLuanThucTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DinhMucHuongDanKhoaLuanThucTapQuery class.
		/// </summary>
		public DinhMucHuongDanKhoaLuanThucTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DinhMucHuongDanKhoaLuanThucTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DinhMucHuongDanKhoaLuanThucTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DinhMucHuongDanKhoaLuanThucTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DinhMucHuongDanKhoaLuanThucTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DinhMucHuongDanKhoaLuanThucTapQuery
		
	#region GiamTruGioChuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiamTruGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiamTruGioChuanFilters : GiamTruGioChuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiamTruGioChuanFilters class.
		/// </summary>
		public GiamTruGioChuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiamTruGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiamTruGioChuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiamTruGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiamTruGioChuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiamTruGioChuanFilters
	
	#region GiamTruGioChuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiamTruGioChuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiamTruGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiamTruGioChuanQuery : GiamTruGioChuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiamTruGioChuanQuery class.
		/// </summary>
		public GiamTruGioChuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiamTruGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiamTruGioChuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiamTruGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiamTruGioChuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiamTruGioChuanQuery
		
	#region ChotCoVanHocTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ChotCoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChotCoVanHocTapFilters : ChotCoVanHocTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChotCoVanHocTapFilters class.
		/// </summary>
		public ChotCoVanHocTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChotCoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChotCoVanHocTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChotCoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChotCoVanHocTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChotCoVanHocTapFilters
	
	#region ChotCoVanHocTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ChotCoVanHocTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ChotCoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChotCoVanHocTapQuery : ChotCoVanHocTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChotCoVanHocTapQuery class.
		/// </summary>
		public ChotCoVanHocTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChotCoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChotCoVanHocTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChotCoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChotCoVanHocTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChotCoVanHocTapQuery
		
	#region ChotKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ChotKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChotKhoiLuongGiangDayFilters : ChotKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChotKhoiLuongGiangDayFilters class.
		/// </summary>
		public ChotKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChotKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChotKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChotKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChotKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChotKhoiLuongGiangDayFilters
	
	#region ChotKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ChotKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ChotKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChotKhoiLuongGiangDayQuery : ChotKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChotKhoiLuongGiangDayQuery class.
		/// </summary>
		public ChotKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChotKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChotKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChotKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChotKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChotKhoiLuongGiangDayQuery
		
	#region ChucVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChucVuFilters : ChucVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChucVuFilters class.
		/// </summary>
		public ChucVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChucVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChucVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChucVuFilters
	
	#region ChucVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ChucVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChucVuQuery : ChucVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChucVuQuery class.
		/// </summary>
		public ChucVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChucVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChucVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChucVuQuery
		
	#region DonGiaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DonGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaFilters : DonGiaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaFilters class.
		/// </summary>
		public DonGiaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaFilters
	
	#region DonGiaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DonGiaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DonGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaQuery : DonGiaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaQuery class.
		/// </summary>
		public DonGiaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaQuery
		
	#region CoVanHocTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoVanHocTapFilters : CoVanHocTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoVanHocTapFilters class.
		/// </summary>
		public CoVanHocTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoVanHocTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoVanHocTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoVanHocTapFilters
	
	#region CoVanHocTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoVanHocTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoVanHocTapQuery : CoVanHocTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoVanHocTapQuery class.
		/// </summary>
		public CoVanHocTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoVanHocTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoVanHocTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoVanHocTapQuery
		
	#region ChiTietKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ChiTietKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChiTietKhoiLuongFilters : ChiTietKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChiTietKhoiLuongFilters class.
		/// </summary>
		public ChiTietKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChiTietKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChiTietKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChiTietKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChiTietKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChiTietKhoiLuongFilters
	
	#region ChiTietKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ChiTietKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ChiTietKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChiTietKhoiLuongQuery : ChiTietKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChiTietKhoiLuongQuery class.
		/// </summary>
		public ChiTietKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChiTietKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChiTietKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChiTietKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChiTietKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChiTietKhoiLuongQuery
		
	#region CauHinhChungFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CauHinhChung"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CauHinhChungFilters : CauHinhChungFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CauHinhChungFilters class.
		/// </summary>
		public CauHinhChungFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CauHinhChungFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CauHinhChungFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CauHinhChungFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CauHinhChungFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CauHinhChungFilters
	
	#region CauHinhChungQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CauHinhChungParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CauHinhChung"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CauHinhChungQuery : CauHinhChungParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CauHinhChungQuery class.
		/// </summary>
		public CauHinhChungQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CauHinhChungQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CauHinhChungQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CauHinhChungQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CauHinhChungQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CauHinhChungQuery
		
	#region DanhGiaCoVanHocTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DanhGiaCoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhGiaCoVanHocTapFilters : DanhGiaCoVanHocTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhGiaCoVanHocTapFilters class.
		/// </summary>
		public DanhGiaCoVanHocTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhGiaCoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhGiaCoVanHocTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhGiaCoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhGiaCoVanHocTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhGiaCoVanHocTapFilters
	
	#region DanhGiaCoVanHocTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DanhGiaCoVanHocTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DanhGiaCoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhGiaCoVanHocTapQuery : DanhGiaCoVanHocTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhGiaCoVanHocTapQuery class.
		/// </summary>
		public DanhGiaCoVanHocTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhGiaCoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhGiaCoVanHocTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhGiaCoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhGiaCoVanHocTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhGiaCoVanHocTapQuery
		
	#region ChucNangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ChucNang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChucNangFilters : ChucNangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChucNangFilters class.
		/// </summary>
		public ChucNangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChucNangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChucNangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChucNangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChucNangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChucNangFilters
	
	#region ChucNangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ChucNangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ChucNang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChucNangQuery : ChucNangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChucNangQuery class.
		/// </summary>
		public ChucNangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChucNangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChucNangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChucNangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChucNangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChucNangQuery
		
	#region NghienCuuKhoaHocTongHopFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="NghienCuuKhoaHocTongHop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NghienCuuKhoaHocTongHopFilters : NghienCuuKhoaHocTongHopFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocTongHopFilters class.
		/// </summary>
		public NghienCuuKhoaHocTongHopFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocTongHopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NghienCuuKhoaHocTongHopFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocTongHopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NghienCuuKhoaHocTongHopFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NghienCuuKhoaHocTongHopFilters
	
	#region NghienCuuKhoaHocTongHopQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="NghienCuuKhoaHocTongHopParameterBuilder"/> class
	/// that is used exclusively with a <see cref="NghienCuuKhoaHocTongHop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class NghienCuuKhoaHocTongHopQuery : NghienCuuKhoaHocTongHopParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocTongHopQuery class.
		/// </summary>
		public NghienCuuKhoaHocTongHopQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocTongHopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public NghienCuuKhoaHocTongHopQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the NghienCuuKhoaHocTongHopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public NghienCuuKhoaHocTongHopQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion NghienCuuKhoaHocTongHopQuery
		
	#region CauHinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CauHinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CauHinhFilters : CauHinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CauHinhFilters class.
		/// </summary>
		public CauHinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CauHinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CauHinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CauHinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CauHinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CauHinhFilters
	
	#region CauHinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CauHinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CauHinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CauHinhQuery : CauHinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CauHinhQuery class.
		/// </summary>
		public CauHinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CauHinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CauHinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CauHinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CauHinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CauHinhQuery
		
	#region DonGiaChatLuongCaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DonGiaChatLuongCao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaChatLuongCaoFilters : DonGiaChatLuongCaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaChatLuongCaoFilters class.
		/// </summary>
		public DonGiaChatLuongCaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaChatLuongCaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaChatLuongCaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaChatLuongCaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaChatLuongCaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaChatLuongCaoFilters
	
	#region DonGiaChatLuongCaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DonGiaChatLuongCaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DonGiaChatLuongCao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaChatLuongCaoQuery : DonGiaChatLuongCaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaChatLuongCaoQuery class.
		/// </summary>
		public DonGiaChatLuongCaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaChatLuongCaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaChatLuongCaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaChatLuongCaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaChatLuongCaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaChatLuongCaoQuery
		
	#region CauHinhChotGioFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CauHinhChotGio"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CauHinhChotGioFilters : CauHinhChotGioFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CauHinhChotGioFilters class.
		/// </summary>
		public CauHinhChotGioFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CauHinhChotGioFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CauHinhChotGioFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CauHinhChotGioFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CauHinhChotGioFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CauHinhChotGioFilters
	
	#region CauHinhChotGioQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CauHinhChotGioParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CauHinhChotGio"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CauHinhChotGioQuery : CauHinhChotGioParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CauHinhChotGioQuery class.
		/// </summary>
		public CauHinhChotGioQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CauHinhChotGioQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CauHinhChotGioQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CauHinhChotGioQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CauHinhChotGioQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CauHinhChotGioQuery
		
	#region CauHinhGiangVienPhanHoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CauHinhGiangVienPhanHoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CauHinhGiangVienPhanHoiFilters : CauHinhGiangVienPhanHoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CauHinhGiangVienPhanHoiFilters class.
		/// </summary>
		public CauHinhGiangVienPhanHoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CauHinhGiangVienPhanHoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CauHinhGiangVienPhanHoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CauHinhGiangVienPhanHoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CauHinhGiangVienPhanHoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CauHinhGiangVienPhanHoiFilters
	
	#region CauHinhGiangVienPhanHoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CauHinhGiangVienPhanHoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CauHinhGiangVienPhanHoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CauHinhGiangVienPhanHoiQuery : CauHinhGiangVienPhanHoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CauHinhGiangVienPhanHoiQuery class.
		/// </summary>
		public CauHinhGiangVienPhanHoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CauHinhGiangVienPhanHoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CauHinhGiangVienPhanHoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CauHinhGiangVienPhanHoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CauHinhGiangVienPhanHoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CauHinhGiangVienPhanHoiQuery
		
	#region BacLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="BacLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class BacLuongFilters : BacLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the BacLuongFilters class.
		/// </summary>
		public BacLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the BacLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public BacLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the BacLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public BacLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion BacLuongFilters
	
	#region BacLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="BacLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="BacLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class BacLuongQuery : BacLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the BacLuongQuery class.
		/// </summary>
		public BacLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the BacLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public BacLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the BacLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public BacLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion BacLuongQuery
		
	#region DonGiaChamBaiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DonGiaChamBai"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaChamBaiFilters : DonGiaChamBaiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaChamBaiFilters class.
		/// </summary>
		public DonGiaChamBaiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaChamBaiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaChamBaiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaChamBaiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaChamBaiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaChamBaiFilters
	
	#region DonGiaChamBaiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DonGiaChamBaiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DonGiaChamBai"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaChamBaiQuery : DonGiaChamBaiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaChamBaiQuery class.
		/// </summary>
		public DonGiaChamBaiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaChamBaiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaChamBaiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaChamBaiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaChamBaiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaChamBaiQuery
		
	#region DanhMucNghienCuuKhoaHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DanhMucNghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucNghienCuuKhoaHocFilters : DanhMucNghienCuuKhoaHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucNghienCuuKhoaHocFilters class.
		/// </summary>
		public DanhMucNghienCuuKhoaHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucNghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucNghienCuuKhoaHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucNghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucNghienCuuKhoaHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucNghienCuuKhoaHocFilters
	
	#region DanhMucNghienCuuKhoaHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DanhMucNghienCuuKhoaHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DanhMucNghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucNghienCuuKhoaHocQuery : DanhMucNghienCuuKhoaHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucNghienCuuKhoaHocQuery class.
		/// </summary>
		public DanhMucNghienCuuKhoaHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucNghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucNghienCuuKhoaHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucNghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucNghienCuuKhoaHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucNghienCuuKhoaHocQuery
		
	#region DonGiaTcbFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DonGiaTcb"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaTcbFilters : DonGiaTcbFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaTcbFilters class.
		/// </summary>
		public DonGiaTcbFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaTcbFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaTcbFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaTcbFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaTcbFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaTcbFilters
	
	#region DonGiaTcbQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DonGiaTcbParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DonGiaTcb"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaTcbQuery : DonGiaTcbParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaTcbQuery class.
		/// </summary>
		public DonGiaTcbQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaTcbQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaTcbQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaTcbQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaTcbQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaTcbQuery
		
	#region DotChiTraFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DotChiTra"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DotChiTraFilters : DotChiTraFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DotChiTraFilters class.
		/// </summary>
		public DotChiTraFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DotChiTraFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DotChiTraFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DotChiTraFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DotChiTraFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DotChiTraFilters
	
	#region DotChiTraQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DotChiTraParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DotChiTra"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DotChiTraQuery : DotChiTraParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DotChiTraQuery class.
		/// </summary>
		public DotChiTraQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DotChiTraQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DotChiTraQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DotChiTraQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DotChiTraQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DotChiTraQuery
		
	#region DonGiaMotTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DonGiaMotTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaMotTietFilters : DonGiaMotTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaMotTietFilters class.
		/// </summary>
		public DonGiaMotTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaMotTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaMotTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaMotTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaMotTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaMotTietFilters
	
	#region DonGiaMotTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DonGiaMotTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DonGiaMotTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaMotTietQuery : DonGiaMotTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaMotTietQuery class.
		/// </summary>
		public DonGiaMotTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaMotTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaMotTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaMotTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaMotTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaMotTietQuery
		
	#region GiangVienThayDoiHocViFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienThayDoiHocVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThayDoiHocViFilters : GiangVienThayDoiHocViFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocViFilters class.
		/// </summary>
		public GiangVienThayDoiHocViFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThayDoiHocViFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThayDoiHocViFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThayDoiHocViFilters
	
	#region GiangVienThayDoiHocViQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienThayDoiHocViParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienThayDoiHocVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienThayDoiHocViQuery : GiangVienThayDoiHocViParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocViQuery class.
		/// </summary>
		public GiangVienThayDoiHocViQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienThayDoiHocViQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienThayDoiHocViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienThayDoiHocViQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienThayDoiHocViQuery
		
	#region DonGiaNgoaiQuyCheFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DonGiaNgoaiQuyChe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaNgoaiQuyCheFilters : DonGiaNgoaiQuyCheFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaNgoaiQuyCheFilters class.
		/// </summary>
		public DonGiaNgoaiQuyCheFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaNgoaiQuyCheFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaNgoaiQuyCheFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaNgoaiQuyCheFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaNgoaiQuyCheFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaNgoaiQuyCheFilters
	
	#region DonGiaNgoaiQuyCheQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DonGiaNgoaiQuyCheParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DonGiaNgoaiQuyChe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaNgoaiQuyCheQuery : DonGiaNgoaiQuyCheParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaNgoaiQuyCheQuery class.
		/// </summary>
		public DonGiaNgoaiQuyCheQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaNgoaiQuyCheQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaNgoaiQuyCheQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaNgoaiQuyCheQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaNgoaiQuyCheQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaNgoaiQuyCheQuery
		
	#region DanhSachHopDongThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DanhSachHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhSachHopDongThinhGiangFilters : DanhSachHopDongThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangFilters class.
		/// </summary>
		public DanhSachHopDongThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhSachHopDongThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhSachHopDongThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhSachHopDongThinhGiangFilters
	
	#region DanhSachHopDongThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DanhSachHopDongThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DanhSachHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhSachHopDongThinhGiangQuery : DanhSachHopDongThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangQuery class.
		/// </summary>
		public DanhSachHopDongThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhSachHopDongThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhSachHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhSachHopDongThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhSachHopDongThinhGiangQuery
		
	#region GiangVienChuyenDoiGioGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienChuyenDoiGioGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienChuyenDoiGioGiangFilters : GiangVienChuyenDoiGioGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenDoiGioGiangFilters class.
		/// </summary>
		public GiangVienChuyenDoiGioGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenDoiGioGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienChuyenDoiGioGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenDoiGioGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienChuyenDoiGioGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienChuyenDoiGioGiangFilters
	
	#region GiangVienChuyenDoiGioGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienChuyenDoiGioGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienChuyenDoiGioGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienChuyenDoiGioGiangQuery : GiangVienChuyenDoiGioGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenDoiGioGiangQuery class.
		/// </summary>
		public GiangVienChuyenDoiGioGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenDoiGioGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienChuyenDoiGioGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienChuyenDoiGioGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienChuyenDoiGioGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienChuyenDoiGioGiangQuery
		
	#region DanhMucViPhamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DanhMucViPham"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucViPhamFilters : DanhMucViPhamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucViPhamFilters class.
		/// </summary>
		public DanhMucViPhamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucViPhamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucViPhamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucViPhamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucViPhamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucViPhamFilters
	
	#region DanhMucViPhamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DanhMucViPhamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DanhMucViPham"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucViPhamQuery : DanhMucViPhamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucViPhamQuery class.
		/// </summary>
		public DanhMucViPhamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucViPhamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucViPhamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucViPhamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucViPhamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucViPhamQuery
		
	#region GiangVienTamUngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienTamUng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienTamUngFilters : GiangVienTamUngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngFilters class.
		/// </summary>
		public GiangVienTamUngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienTamUngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienTamUngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienTamUngFilters
	
	#region GiangVienTamUngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienTamUngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienTamUng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienTamUngQuery : GiangVienTamUngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngQuery class.
		/// </summary>
		public GiangVienTamUngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienTamUngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienTamUngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienTamUngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienTamUngQuery
		
	#region DonGiaCoiThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DonGiaCoiThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaCoiThiFilters : DonGiaCoiThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaCoiThiFilters class.
		/// </summary>
		public DonGiaCoiThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaCoiThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaCoiThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaCoiThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaCoiThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaCoiThiFilters
	
	#region DonGiaCoiThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DonGiaCoiThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DonGiaCoiThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DonGiaCoiThiQuery : DonGiaCoiThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DonGiaCoiThiQuery class.
		/// </summary>
		public DonGiaCoiThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DonGiaCoiThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DonGiaCoiThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DonGiaCoiThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DonGiaCoiThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DonGiaCoiThiQuery
		
	#region ChietTinhBoiDuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ChietTinhBoiDuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChietTinhBoiDuongGiangDayFilters : ChietTinhBoiDuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayFilters class.
		/// </summary>
		public ChietTinhBoiDuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChietTinhBoiDuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChietTinhBoiDuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChietTinhBoiDuongGiangDayFilters
	
	#region ChietTinhBoiDuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ChietTinhBoiDuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ChietTinhBoiDuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChietTinhBoiDuongGiangDayQuery : ChietTinhBoiDuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayQuery class.
		/// </summary>
		public ChietTinhBoiDuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChietTinhBoiDuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChietTinhBoiDuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChietTinhBoiDuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChietTinhBoiDuongGiangDayQuery
		
	#region ChiTienThuLaoGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ChiTienThuLaoGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChiTienThuLaoGiangDayFilters : ChiTienThuLaoGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChiTienThuLaoGiangDayFilters class.
		/// </summary>
		public ChiTienThuLaoGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChiTienThuLaoGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChiTienThuLaoGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChiTienThuLaoGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChiTienThuLaoGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChiTienThuLaoGiangDayFilters
	
	#region ChiTienThuLaoGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ChiTienThuLaoGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ChiTienThuLaoGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ChiTienThuLaoGiangDayQuery : ChiTienThuLaoGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ChiTienThuLaoGiangDayQuery class.
		/// </summary>
		public ChiTienThuLaoGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ChiTienThuLaoGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ChiTienThuLaoGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ChiTienThuLaoGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ChiTienThuLaoGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ChiTienThuLaoGiangDayQuery
		
	#region CongThucFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CongThuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CongThucFilters : CongThucFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CongThucFilters class.
		/// </summary>
		public CongThucFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CongThucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CongThucFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CongThucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CongThucFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CongThucFilters
	
	#region CongThucQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CongThucParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CongThuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CongThucQuery : CongThucParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CongThucQuery class.
		/// </summary>
		public CongThucQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CongThucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CongThucQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CongThucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CongThucQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CongThucQuery
		
	#region KcqUteThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqUteThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqUteThanhToanThuLaoFilters : KcqUteThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqUteThanhToanThuLaoFilters class.
		/// </summary>
		public KcqUteThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqUteThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqUteThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqUteThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqUteThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqUteThanhToanThuLaoFilters
	
	#region KcqUteThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqUteThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqUteThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqUteThanhToanThuLaoQuery : KcqUteThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqUteThanhToanThuLaoQuery class.
		/// </summary>
		public KcqUteThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqUteThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqUteThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqUteThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqUteThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqUteThanhToanThuLaoQuery
		
	#region DuTruGioGiangTruocThoiKhoaBieuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DuTruGioGiangTruocThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DuTruGioGiangTruocThoiKhoaBieuFilters : DuTruGioGiangTruocThoiKhoaBieuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocThoiKhoaBieuFilters class.
		/// </summary>
		public DuTruGioGiangTruocThoiKhoaBieuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DuTruGioGiangTruocThoiKhoaBieuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DuTruGioGiangTruocThoiKhoaBieuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DuTruGioGiangTruocThoiKhoaBieuFilters
	
	#region DuTruGioGiangTruocThoiKhoaBieuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DuTruGioGiangTruocThoiKhoaBieuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DuTruGioGiangTruocThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DuTruGioGiangTruocThoiKhoaBieuQuery : DuTruGioGiangTruocThoiKhoaBieuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocThoiKhoaBieuQuery class.
		/// </summary>
		public DuTruGioGiangTruocThoiKhoaBieuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DuTruGioGiangTruocThoiKhoaBieuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DuTruGioGiangTruocThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DuTruGioGiangTruocThoiKhoaBieuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DuTruGioGiangTruocThoiKhoaBieuQuery
		
	#region DanhMucQuyMoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DanhMucQuyMo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucQuyMoFilters : DanhMucQuyMoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucQuyMoFilters class.
		/// </summary>
		public DanhMucQuyMoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucQuyMoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucQuyMoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucQuyMoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucQuyMoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucQuyMoFilters
	
	#region DanhMucQuyMoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DanhMucQuyMoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DanhMucQuyMo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DanhMucQuyMoQuery : DanhMucQuyMoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DanhMucQuyMoQuery class.
		/// </summary>
		public DanhMucQuyMoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DanhMucQuyMoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DanhMucQuyMoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DanhMucQuyMoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DanhMucQuyMoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DanhMucQuyMoQuery
		
	#region KcqKhoiLuongGiangDayChiTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongGiangDayChiTietFilters : KcqKhoiLuongGiangDayChiTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		public KcqKhoiLuongGiangDayChiTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongGiangDayChiTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongGiangDayChiTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongGiangDayChiTietFilters
	
	#region KcqKhoiLuongGiangDayChiTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqKhoiLuongGiangDayChiTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongGiangDayChiTietQuery : KcqKhoiLuongGiangDayChiTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		public KcqKhoiLuongGiangDayChiTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongGiangDayChiTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongGiangDayChiTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongGiangDayChiTietQuery
		
	#region HeSoChucDanhChuyenMonFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoChucDanhChuyenMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoChucDanhChuyenMonFilters : HeSoChucDanhChuyenMonFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhChuyenMonFilters class.
		/// </summary>
		public HeSoChucDanhChuyenMonFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhChuyenMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoChucDanhChuyenMonFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhChuyenMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoChucDanhChuyenMonFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoChucDanhChuyenMonFilters
	
	#region HeSoChucDanhChuyenMonQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoChucDanhChuyenMonParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoChucDanhChuyenMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoChucDanhChuyenMonQuery : HeSoChucDanhChuyenMonParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhChuyenMonQuery class.
		/// </summary>
		public HeSoChucDanhChuyenMonQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhChuyenMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoChucDanhChuyenMonQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhChuyenMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoChucDanhChuyenMonQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoChucDanhChuyenMonQuery
		
	#region HeSoCongViecFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoCongViec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoCongViecFilters : HeSoCongViecFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoCongViecFilters class.
		/// </summary>
		public HeSoCongViecFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoCongViecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoCongViecFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoCongViecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoCongViecFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoCongViecFilters
	
	#region HeSoCongViecQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoCongViecParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoCongViec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoCongViecQuery : HeSoCongViecParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoCongViecQuery class.
		/// </summary>
		public HeSoCongViecQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoCongViecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoCongViecQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoCongViecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoCongViecQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoCongViecQuery
		
	#region KcqKhoiLuongThucTapCuoiKhoaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongThucTapCuoiKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongThucTapCuoiKhoaFilters : KcqKhoiLuongThucTapCuoiKhoaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongThucTapCuoiKhoaFilters class.
		/// </summary>
		public KcqKhoiLuongThucTapCuoiKhoaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongThucTapCuoiKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongThucTapCuoiKhoaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongThucTapCuoiKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongThucTapCuoiKhoaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongThucTapCuoiKhoaFilters
	
	#region KcqKhoiLuongThucTapCuoiKhoaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqKhoiLuongThucTapCuoiKhoaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongThucTapCuoiKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongThucTapCuoiKhoaQuery : KcqKhoiLuongThucTapCuoiKhoaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongThucTapCuoiKhoaQuery class.
		/// </summary>
		public KcqKhoiLuongThucTapCuoiKhoaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongThucTapCuoiKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongThucTapCuoiKhoaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongThucTapCuoiKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongThucTapCuoiKhoaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongThucTapCuoiKhoaQuery
		
	#region KcqKhoiLuongDoAnTotNghiepChiTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongDoAnTotNghiepChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongDoAnTotNghiepChiTietFilters : KcqKhoiLuongDoAnTotNghiepChiTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongDoAnTotNghiepChiTietFilters class.
		/// </summary>
		public KcqKhoiLuongDoAnTotNghiepChiTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongDoAnTotNghiepChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongDoAnTotNghiepChiTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongDoAnTotNghiepChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongDoAnTotNghiepChiTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongDoAnTotNghiepChiTietFilters
	
	#region KcqKhoiLuongDoAnTotNghiepChiTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqKhoiLuongDoAnTotNghiepChiTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongDoAnTotNghiepChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongDoAnTotNghiepChiTietQuery : KcqKhoiLuongDoAnTotNghiepChiTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongDoAnTotNghiepChiTietQuery class.
		/// </summary>
		public KcqKhoiLuongDoAnTotNghiepChiTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongDoAnTotNghiepChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongDoAnTotNghiepChiTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongDoAnTotNghiepChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongDoAnTotNghiepChiTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongDoAnTotNghiepChiTietQuery
		
	#region KcqKhoiLuongGiangDayDoAnTotNghiepFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongGiangDayDoAnTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongGiangDayDoAnTotNghiepFilters : KcqKhoiLuongGiangDayDoAnTotNghiepFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnTotNghiepFilters class.
		/// </summary>
		public KcqKhoiLuongGiangDayDoAnTotNghiepFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongGiangDayDoAnTotNghiepFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongGiangDayDoAnTotNghiepFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongGiangDayDoAnTotNghiepFilters
	
	#region KcqKhoiLuongGiangDayDoAnTotNghiepQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqKhoiLuongGiangDayDoAnTotNghiepParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongGiangDayDoAnTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongGiangDayDoAnTotNghiepQuery : KcqKhoiLuongGiangDayDoAnTotNghiepParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnTotNghiepQuery class.
		/// </summary>
		public KcqKhoiLuongGiangDayDoAnTotNghiepQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongGiangDayDoAnTotNghiepQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongGiangDayDoAnTotNghiepQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongGiangDayDoAnTotNghiepQuery
		
	#region DinhMucGioChuanToiThieuTheoChucVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="DinhMucGioChuanToiThieuTheoChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DinhMucGioChuanToiThieuTheoChucVuFilters : DinhMucGioChuanToiThieuTheoChucVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanToiThieuTheoChucVuFilters class.
		/// </summary>
		public DinhMucGioChuanToiThieuTheoChucVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanToiThieuTheoChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DinhMucGioChuanToiThieuTheoChucVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanToiThieuTheoChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DinhMucGioChuanToiThieuTheoChucVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DinhMucGioChuanToiThieuTheoChucVuFilters
	
	#region DinhMucGioChuanToiThieuTheoChucVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="DinhMucGioChuanToiThieuTheoChucVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="DinhMucGioChuanToiThieuTheoChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class DinhMucGioChuanToiThieuTheoChucVuQuery : DinhMucGioChuanToiThieuTheoChucVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanToiThieuTheoChucVuQuery class.
		/// </summary>
		public DinhMucGioChuanToiThieuTheoChucVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanToiThieuTheoChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public DinhMucGioChuanToiThieuTheoChucVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the DinhMucGioChuanToiThieuTheoChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public DinhMucGioChuanToiThieuTheoChucVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion DinhMucGioChuanToiThieuTheoChucVuQuery
		
	#region KcqKhoanQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqKhoanQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoanQuyDoiFilters : KcqKhoanQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoanQuyDoiFilters class.
		/// </summary>
		public KcqKhoanQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoanQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoanQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoanQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoanQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoanQuyDoiFilters
	
	#region KcqKhoanQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqKhoanQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqKhoanQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoanQuyDoiQuery : KcqKhoanQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoanQuyDoiQuery class.
		/// </summary>
		public KcqKhoanQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoanQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoanQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoanQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoanQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoanQuyDoiQuery
		
	#region KcqHeSoCoSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqHeSoCoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHeSoCoSoFilters : KcqHeSoCoSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHeSoCoSoFilters class.
		/// </summary>
		public KcqHeSoCoSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoCoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHeSoCoSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoCoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHeSoCoSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHeSoCoSoFilters
	
	#region KcqHeSoCoSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqHeSoCoSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqHeSoCoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHeSoCoSoQuery : KcqHeSoCoSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHeSoCoSoQuery class.
		/// </summary>
		public KcqHeSoCoSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoCoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHeSoCoSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoCoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHeSoCoSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHeSoCoSoQuery
		
	#region KcqMonXepLichChuNhatKhongTinhHeSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqMonXepLichChuNhatKhongTinhHeSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonXepLichChuNhatKhongTinhHeSoFilters : KcqMonXepLichChuNhatKhongTinhHeSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		public KcqMonXepLichChuNhatKhongTinhHeSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonXepLichChuNhatKhongTinhHeSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonXepLichChuNhatKhongTinhHeSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonXepLichChuNhatKhongTinhHeSoFilters
	
	#region KcqMonXepLichChuNhatKhongTinhHeSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqMonXepLichChuNhatKhongTinhHeSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqMonXepLichChuNhatKhongTinhHeSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonXepLichChuNhatKhongTinhHeSoQuery : KcqMonXepLichChuNhatKhongTinhHeSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		public KcqMonXepLichChuNhatKhongTinhHeSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonXepLichChuNhatKhongTinhHeSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonXepLichChuNhatKhongTinhHeSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonXepLichChuNhatKhongTinhHeSoQuery
		
	#region KcqKhoiLuongKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongKhacFilters : KcqKhoiLuongKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongKhacFilters class.
		/// </summary>
		public KcqKhoiLuongKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongKhacFilters
	
	#region KcqKhoiLuongKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqKhoiLuongKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongKhacQuery : KcqKhoiLuongKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongKhacQuery class.
		/// </summary>
		public KcqKhoiLuongKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongKhacQuery
		
	#region KcqHeSoDiaDiemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqHeSoDiaDiem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHeSoDiaDiemFilters : KcqHeSoDiaDiemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHeSoDiaDiemFilters class.
		/// </summary>
		public KcqHeSoDiaDiemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoDiaDiemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHeSoDiaDiemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoDiaDiemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHeSoDiaDiemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHeSoDiaDiemFilters
	
	#region KcqHeSoDiaDiemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqHeSoDiaDiemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqHeSoDiaDiem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHeSoDiaDiemQuery : KcqHeSoDiaDiemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHeSoDiaDiemQuery class.
		/// </summary>
		public KcqHeSoDiaDiemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoDiaDiemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHeSoDiaDiemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoDiaDiemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHeSoDiaDiemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHeSoDiaDiemQuery
		
	#region KcqPhanBienLuanAnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqPhanBienLuanAn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhanBienLuanAnFilters : KcqPhanBienLuanAnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhanBienLuanAnFilters class.
		/// </summary>
		public KcqPhanBienLuanAnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanBienLuanAnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhanBienLuanAnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanBienLuanAnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhanBienLuanAnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhanBienLuanAnFilters
	
	#region KcqPhanBienLuanAnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqPhanBienLuanAnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqPhanBienLuanAn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhanBienLuanAnQuery : KcqPhanBienLuanAnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhanBienLuanAnQuery class.
		/// </summary>
		public KcqPhanBienLuanAnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanBienLuanAnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhanBienLuanAnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanBienLuanAnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhanBienLuanAnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhanBienLuanAnQuery
		
	#region KcqDonGiaNgoaiQuyCheFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqDonGiaNgoaiQuyChe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqDonGiaNgoaiQuyCheFilters : KcqDonGiaNgoaiQuyCheFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		public KcqDonGiaNgoaiQuyCheFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqDonGiaNgoaiQuyCheFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqDonGiaNgoaiQuyCheFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqDonGiaNgoaiQuyCheFilters
	
	#region KcqDonGiaNgoaiQuyCheQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqDonGiaNgoaiQuyCheParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqDonGiaNgoaiQuyChe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqDonGiaNgoaiQuyCheQuery : KcqDonGiaNgoaiQuyCheParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		public KcqDonGiaNgoaiQuyCheQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqDonGiaNgoaiQuyCheQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqDonGiaNgoaiQuyCheQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqDonGiaNgoaiQuyCheQuery
		
	#region KcqChotKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqChotKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqChotKhoiLuongGiangDayFilters : KcqChotKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqChotKhoiLuongGiangDayFilters class.
		/// </summary>
		public KcqChotKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqChotKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqChotKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqChotKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqChotKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqChotKhoiLuongGiangDayFilters
	
	#region KcqChotKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqChotKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqChotKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqChotKhoiLuongGiangDayQuery : KcqChotKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqChotKhoiLuongGiangDayQuery class.
		/// </summary>
		public KcqChotKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqChotKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqChotKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqChotKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqChotKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqChotKhoiLuongGiangDayQuery
		
	#region KcqKhoiLuongGiangDayDoAnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongGiangDayDoAn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongGiangDayDoAnFilters : KcqKhoiLuongGiangDayDoAnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnFilters class.
		/// </summary>
		public KcqKhoiLuongGiangDayDoAnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongGiangDayDoAnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongGiangDayDoAnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongGiangDayDoAnFilters
	
	#region KcqKhoiLuongGiangDayDoAnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqKhoiLuongGiangDayDoAnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqKhoiLuongGiangDayDoAn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKhoiLuongGiangDayDoAnQuery : KcqKhoiLuongGiangDayDoAnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnQuery class.
		/// </summary>
		public KcqKhoiLuongGiangDayDoAnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKhoiLuongGiangDayDoAnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKhoiLuongGiangDayDoAnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKhoiLuongGiangDayDoAnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKhoiLuongGiangDayDoAnQuery
		
	#region KcqKetQuaThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqKetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKetQuaThanhToanThuLaoFilters : KcqKetQuaThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		public KcqKetQuaThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKetQuaThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKetQuaThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKetQuaThanhToanThuLaoFilters
	
	#region KcqKetQuaThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqKetQuaThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqKetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqKetQuaThanhToanThuLaoQuery : KcqKetQuaThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		public KcqKetQuaThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqKetQuaThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqKetQuaThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqKetQuaThanhToanThuLaoQuery
		
	#region HeSoBacDaoTaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoBacDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoBacDaoTaoFilters : HeSoBacDaoTaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoBacDaoTaoFilters class.
		/// </summary>
		public HeSoBacDaoTaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoBacDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoBacDaoTaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoBacDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoBacDaoTaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoBacDaoTaoFilters
	
	#region HeSoBacDaoTaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoBacDaoTaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoBacDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoBacDaoTaoQuery : HeSoBacDaoTaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoBacDaoTaoQuery class.
		/// </summary>
		public HeSoBacDaoTaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoBacDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoBacDaoTaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoBacDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoBacDaoTaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoBacDaoTaoQuery
		
	#region KcqUteKhoiLuongQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqUteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqUteKhoiLuongQuyDoiFilters : KcqUteKhoiLuongQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		public KcqUteKhoiLuongQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqUteKhoiLuongQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqUteKhoiLuongQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqUteKhoiLuongQuyDoiFilters
	
	#region KcqUteKhoiLuongQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqUteKhoiLuongQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqUteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqUteKhoiLuongQuyDoiQuery : KcqUteKhoiLuongQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		public KcqUteKhoiLuongQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqUteKhoiLuongQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqUteKhoiLuongQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqUteKhoiLuongQuyDoiQuery
		
	#region KcqMonPhanCongNhieuGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqMonPhanCongNhieuGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonPhanCongNhieuGiangVienFilters : KcqMonPhanCongNhieuGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		public KcqMonPhanCongNhieuGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonPhanCongNhieuGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonPhanCongNhieuGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonPhanCongNhieuGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonPhanCongNhieuGiangVienFilters
	
	#region KcqMonPhanCongNhieuGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqMonPhanCongNhieuGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqMonPhanCongNhieuGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonPhanCongNhieuGiangVienQuery : KcqMonPhanCongNhieuGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		public KcqMonPhanCongNhieuGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonPhanCongNhieuGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonPhanCongNhieuGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonPhanCongNhieuGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonPhanCongNhieuGiangVienQuery
		
	#region KcqMonTieuLuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqMonTieuLuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonTieuLuanFilters : KcqMonTieuLuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonTieuLuanFilters class.
		/// </summary>
		public KcqMonTieuLuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonTieuLuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonTieuLuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonTieuLuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonTieuLuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonTieuLuanFilters
	
	#region KcqMonTieuLuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqMonTieuLuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqMonTieuLuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonTieuLuanQuery : KcqMonTieuLuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonTieuLuanQuery class.
		/// </summary>
		public KcqMonTieuLuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonTieuLuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonTieuLuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonTieuLuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonTieuLuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonTieuLuanQuery
		
	#region GiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienFilters : GiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienFilters class.
		/// </summary>
		public GiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienFilters
	
	#region GiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienQuery : GiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienQuery class.
		/// </summary>
		public GiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienQuery
		
	#region KcqPhuCapHanhChinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqPhuCapHanhChinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhuCapHanhChinhFilters : KcqPhuCapHanhChinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhuCapHanhChinhFilters class.
		/// </summary>
		public KcqPhuCapHanhChinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhuCapHanhChinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhuCapHanhChinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhuCapHanhChinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhuCapHanhChinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhuCapHanhChinhFilters
	
	#region KcqPhuCapHanhChinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqPhuCapHanhChinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqPhuCapHanhChinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhuCapHanhChinhQuery : KcqPhuCapHanhChinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhuCapHanhChinhQuery class.
		/// </summary>
		public KcqPhuCapHanhChinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhuCapHanhChinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhuCapHanhChinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhuCapHanhChinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhuCapHanhChinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhuCapHanhChinhQuery
		
	#region GiangVienGiangDayGdtcQpFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GiangVienGiangDayGdtcQp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienGiangDayGdtcQpFilters : GiangVienGiangDayGdtcQpFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienGiangDayGdtcQpFilters class.
		/// </summary>
		public GiangVienGiangDayGdtcQpFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienGiangDayGdtcQpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienGiangDayGdtcQpFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienGiangDayGdtcQpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienGiangDayGdtcQpFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienGiangDayGdtcQpFilters
	
	#region GiangVienGiangDayGdtcQpQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GiangVienGiangDayGdtcQpParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GiangVienGiangDayGdtcQp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GiangVienGiangDayGdtcQpQuery : GiangVienGiangDayGdtcQpParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GiangVienGiangDayGdtcQpQuery class.
		/// </summary>
		public GiangVienGiangDayGdtcQpQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GiangVienGiangDayGdtcQpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GiangVienGiangDayGdtcQpQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GiangVienGiangDayGdtcQpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GiangVienGiangDayGdtcQpQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GiangVienGiangDayGdtcQpQuery
		
	#region KcqHeSoHocKyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqHeSoHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHeSoHocKyFilters : KcqHeSoHocKyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHeSoHocKyFilters class.
		/// </summary>
		public KcqHeSoHocKyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHeSoHocKyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHeSoHocKyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHeSoHocKyFilters
	
	#region KcqHeSoHocKyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqHeSoHocKyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqHeSoHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHeSoHocKyQuery : KcqHeSoHocKyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHeSoHocKyQuery class.
		/// </summary>
		public KcqHeSoHocKyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHeSoHocKyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHeSoHocKyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHeSoHocKyQuery
		
	#region KcqPhanNhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqPhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhanNhomMonHocFilters : KcqPhanNhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhanNhomMonHocFilters class.
		/// </summary>
		public KcqPhanNhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhanNhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhanNhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhanNhomMonHocFilters
	
	#region KcqPhanNhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqPhanNhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqPhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhanNhomMonHocQuery : KcqPhanNhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhanNhomMonHocQuery class.
		/// </summary>
		public KcqPhanNhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhanNhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhanNhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhanNhomMonHocQuery
		
	#region KetQuaThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaThanhToanThuLaoFilters : KetQuaThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaThanhToanThuLaoFilters class.
		/// </summary>
		public KetQuaThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaThanhToanThuLaoFilters
	
	#region KetQuaThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KetQuaThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KetQuaThanhToanThuLaoQuery : KetQuaThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KetQuaThanhToanThuLaoQuery class.
		/// </summary>
		public KetQuaThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KetQuaThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KetQuaThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KetQuaThanhToanThuLaoQuery
		
	#region KcqNhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqNhomMonHocFilters : KcqNhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqNhomMonHocFilters class.
		/// </summary>
		public KcqNhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqNhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqNhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqNhomMonHocFilters
	
	#region KcqNhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqNhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqNhomMonHocQuery : KcqNhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqNhomMonHocQuery class.
		/// </summary>
		public KcqNhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqNhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqNhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqNhomMonHocQuery
		
	#region KcqMonTinhTheoQuyCheMoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqMonTinhTheoQuyCheMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonTinhTheoQuyCheMoiFilters : KcqMonTinhTheoQuyCheMoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		public KcqMonTinhTheoQuyCheMoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonTinhTheoQuyCheMoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonTinhTheoQuyCheMoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonTinhTheoQuyCheMoiFilters
	
	#region KcqMonTinhTheoQuyCheMoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqMonTinhTheoQuyCheMoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqMonTinhTheoQuyCheMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonTinhTheoQuyCheMoiQuery : KcqMonTinhTheoQuyCheMoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		public KcqMonTinhTheoQuyCheMoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonTinhTheoQuyCheMoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonTinhTheoQuyCheMoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonTinhTheoQuyCheMoiQuery
		
	#region KcqCauHinhChotGioFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqCauHinhChotGio"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqCauHinhChotGioFilters : KcqCauHinhChotGioFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqCauHinhChotGioFilters class.
		/// </summary>
		public KcqCauHinhChotGioFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqCauHinhChotGioFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqCauHinhChotGioFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqCauHinhChotGioFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqCauHinhChotGioFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqCauHinhChotGioFilters
	
	#region KcqCauHinhChotGioQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqCauHinhChotGioParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqCauHinhChotGio"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqCauHinhChotGioQuery : KcqCauHinhChotGioParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqCauHinhChotGioQuery class.
		/// </summary>
		public KcqCauHinhChotGioQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqCauHinhChotGioQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqCauHinhChotGioQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqCauHinhChotGioQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqCauHinhChotGioQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqCauHinhChotGioQuery
		
	#region KcqPhanLoaiHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqPhanLoaiHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhanLoaiHocPhanFilters : KcqPhanLoaiHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhanLoaiHocPhanFilters class.
		/// </summary>
		public KcqPhanLoaiHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanLoaiHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhanLoaiHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanLoaiHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhanLoaiHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhanLoaiHocPhanFilters
	
	#region KcqPhanLoaiHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqPhanLoaiHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqPhanLoaiHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqPhanLoaiHocPhanQuery : KcqPhanLoaiHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqPhanLoaiHocPhanQuery class.
		/// </summary>
		public KcqPhanLoaiHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanLoaiHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqPhanLoaiHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqPhanLoaiHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqPhanLoaiHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqPhanLoaiHocPhanQuery
		
	#region KcqMonThucTapTotNghiepFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqMonThucTapTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonThucTapTotNghiepFilters : KcqMonThucTapTotNghiepFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonThucTapTotNghiepFilters class.
		/// </summary>
		public KcqMonThucTapTotNghiepFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonThucTapTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonThucTapTotNghiepFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonThucTapTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonThucTapTotNghiepFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonThucTapTotNghiepFilters
	
	#region KcqMonThucTapTotNghiepQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqMonThucTapTotNghiepParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqMonThucTapTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonThucTapTotNghiepQuery : KcqMonThucTapTotNghiepParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonThucTapTotNghiepQuery class.
		/// </summary>
		public KcqMonThucTapTotNghiepQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonThucTapTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonThucTapTotNghiepQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonThucTapTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonThucTapTotNghiepQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonThucTapTotNghiepQuery
		
	#region KcqMonHocKhongTinhKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqMonHocKhongTinhKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonHocKhongTinhKhoiLuongFilters : KcqMonHocKhongTinhKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		public KcqMonHocKhongTinhKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonHocKhongTinhKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonHocKhongTinhKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonHocKhongTinhKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonHocKhongTinhKhoiLuongFilters
	
	#region KcqMonHocKhongTinhKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqMonHocKhongTinhKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqMonHocKhongTinhKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqMonHocKhongTinhKhoiLuongQuery : KcqMonHocKhongTinhKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqMonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		public KcqMonHocKhongTinhKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqMonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqMonHocKhongTinhKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqMonHocKhongTinhKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqMonHocKhongTinhKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqMonHocKhongTinhKhoiLuongQuery
		
	#region KcqHeSoQuyDoiTinChiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqHeSoQuyDoiTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHeSoQuyDoiTinChiFilters : KcqHeSoQuyDoiTinChiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHeSoQuyDoiTinChiFilters class.
		/// </summary>
		public KcqHeSoQuyDoiTinChiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoQuyDoiTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHeSoQuyDoiTinChiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoQuyDoiTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHeSoQuyDoiTinChiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHeSoQuyDoiTinChiFilters
	
	#region KcqHeSoQuyDoiTinChiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqHeSoQuyDoiTinChiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqHeSoQuyDoiTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHeSoQuyDoiTinChiQuery : KcqHeSoQuyDoiTinChiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHeSoQuyDoiTinChiQuery class.
		/// </summary>
		public KcqHeSoQuyDoiTinChiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoQuyDoiTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHeSoQuyDoiTinChiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHeSoQuyDoiTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHeSoQuyDoiTinChiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHeSoQuyDoiTinChiQuery
		
	#region KcqDonGiaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqDonGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqDonGiaFilters : KcqDonGiaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaFilters class.
		/// </summary>
		public KcqDonGiaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqDonGiaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqDonGiaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqDonGiaFilters
	
	#region KcqDonGiaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqDonGiaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqDonGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqDonGiaQuery : KcqDonGiaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaQuery class.
		/// </summary>
		public KcqDonGiaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqDonGiaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqDonGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqDonGiaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqDonGiaQuery
		
	#region KcqLoaiKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqLoaiKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqLoaiKhoiLuongFilters : KcqLoaiKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqLoaiKhoiLuongFilters class.
		/// </summary>
		public KcqLoaiKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqLoaiKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqLoaiKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqLoaiKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqLoaiKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqLoaiKhoiLuongFilters
	
	#region KcqLoaiKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqLoaiKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqLoaiKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqLoaiKhoiLuongQuery : KcqLoaiKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqLoaiKhoiLuongQuery class.
		/// </summary>
		public KcqLoaiKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqLoaiKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqLoaiKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqLoaiKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqLoaiKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqLoaiKhoiLuongQuery
		
	#region HeSoNhomMonFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoNhomMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNhomMonFilters : HeSoNhomMonFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNhomMonFilters class.
		/// </summary>
		public HeSoNhomMonFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNhomMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNhomMonFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNhomMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNhomMonFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNhomMonFilters
	
	#region HeSoNhomMonQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoNhomMonParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoNhomMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNhomMonQuery : HeSoNhomMonParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNhomMonQuery class.
		/// </summary>
		public HeSoNhomMonQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNhomMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNhomMonQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNhomMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNhomMonQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNhomMonQuery
		
	#region HoatDongNgoaiGiangDayClcFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HoatDongNgoaiGiangDayClc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HoatDongNgoaiGiangDayClcFilters : HoatDongNgoaiGiangDayClcFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayClcFilters class.
		/// </summary>
		public HoatDongNgoaiGiangDayClcFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayClcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HoatDongNgoaiGiangDayClcFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayClcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HoatDongNgoaiGiangDayClcFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HoatDongNgoaiGiangDayClcFilters
	
	#region HoatDongNgoaiGiangDayClcQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HoatDongNgoaiGiangDayClcParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HoatDongNgoaiGiangDayClc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HoatDongNgoaiGiangDayClcQuery : HoatDongNgoaiGiangDayClcParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayClcQuery class.
		/// </summary>
		public HoatDongNgoaiGiangDayClcQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayClcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HoatDongNgoaiGiangDayClcQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayClcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HoatDongNgoaiGiangDayClcQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HoatDongNgoaiGiangDayClcQuery
		
	#region HeThongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeThong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeThongFilters : HeThongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeThongFilters class.
		/// </summary>
		public HeThongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeThongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeThongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeThongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeThongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeThongFilters
	
	#region HeThongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeThongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeThong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeThongQuery : HeThongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeThongQuery class.
		/// </summary>
		public HeThongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeThongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeThongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeThongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeThongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeThongQuery
		
	#region HeSoCoSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoCoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoCoSoFilters : HeSoCoSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoCoSoFilters class.
		/// </summary>
		public HeSoCoSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoCoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoCoSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoCoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoCoSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoCoSoFilters
	
	#region HeSoCoSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoCoSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoCoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoCoSoQuery : HeSoCoSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoCoSoQuery class.
		/// </summary>
		public HeSoCoSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoCoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoCoSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoCoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoCoSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoCoSoQuery
		
	#region HeSoNgayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoNgay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNgayFilters : HeSoNgayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNgayFilters class.
		/// </summary>
		public HeSoNgayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNgayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNgayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNgayFilters
	
	#region HeSoNgayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoNgayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoNgay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNgayQuery : HeSoNgayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNgayQuery class.
		/// </summary>
		public HeSoNgayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNgayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNgayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNgayQuery
		
	#region HeSoKhoiLuongCongThemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoKhoiLuongCongThem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoKhoiLuongCongThemFilters : HeSoKhoiLuongCongThemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiLuongCongThemFilters class.
		/// </summary>
		public HeSoKhoiLuongCongThemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiLuongCongThemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoKhoiLuongCongThemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiLuongCongThemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoKhoiLuongCongThemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoKhoiLuongCongThemFilters
	
	#region HeSoKhoiLuongCongThemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoKhoiLuongCongThemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoKhoiLuongCongThem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoKhoiLuongCongThemQuery : HeSoKhoiLuongCongThemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiLuongCongThemQuery class.
		/// </summary>
		public HeSoKhoiLuongCongThemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiLuongCongThemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoKhoiLuongCongThemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiLuongCongThemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoKhoiLuongCongThemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoKhoiLuongCongThemQuery
		
	#region HoatDongNgoaiGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HoatDongNgoaiGiangDayFilters : HoatDongNgoaiGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayFilters class.
		/// </summary>
		public HoatDongNgoaiGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HoatDongNgoaiGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HoatDongNgoaiGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HoatDongNgoaiGiangDayFilters
	
	#region HoatDongNgoaiGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HoatDongNgoaiGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HoatDongNgoaiGiangDayQuery : HoatDongNgoaiGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayQuery class.
		/// </summary>
		public HoatDongNgoaiGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HoatDongNgoaiGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HoatDongNgoaiGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HoatDongNgoaiGiangDayQuery
		
	#region HeSoLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoLuongFilters : HeSoLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoLuongFilters class.
		/// </summary>
		public HeSoLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoLuongFilters
	
	#region HeSoLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoLuongQuery : HeSoLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoLuongQuery class.
		/// </summary>
		public HeSoLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoLuongQuery
		
	#region HeSoCoVanHocTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoCoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoCoVanHocTapFilters : HeSoCoVanHocTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoCoVanHocTapFilters class.
		/// </summary>
		public HeSoCoVanHocTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoCoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoCoVanHocTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoCoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoCoVanHocTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoCoVanHocTapFilters
	
	#region HeSoCoVanHocTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoCoVanHocTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoCoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoCoVanHocTapQuery : HeSoCoVanHocTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoCoVanHocTapQuery class.
		/// </summary>
		public HeSoCoVanHocTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoCoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoCoVanHocTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoCoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoCoVanHocTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoCoVanHocTapQuery
		
	#region HeSoHocKyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoHocKyFilters : HeSoHocKyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoHocKyFilters class.
		/// </summary>
		public HeSoHocKyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoHocKyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoHocKyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoHocKyFilters
	
	#region HeSoHocKyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoHocKyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoHocKyQuery : HeSoHocKyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoHocKyQuery class.
		/// </summary>
		public HeSoHocKyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoHocKyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoHocKyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoHocKyQuery
		
	#region HeSoNgoaiGioFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoNgoaiGio"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNgoaiGioFilters : HeSoNgoaiGioFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNgoaiGioFilters class.
		/// </summary>
		public HeSoNgoaiGioFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgoaiGioFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNgoaiGioFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgoaiGioFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNgoaiGioFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNgoaiGioFilters
	
	#region HeSoNgoaiGioQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoNgoaiGioParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoNgoaiGio"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNgoaiGioQuery : HeSoNgoaiGioParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNgoaiGioQuery class.
		/// </summary>
		public HeSoNgoaiGioQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgoaiGioQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNgoaiGioQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgoaiGioQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNgoaiGioQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNgoaiGioQuery
		
	#region HeSoNhomThucHanhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoNhomThucHanh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNhomThucHanhFilters : HeSoNhomThucHanhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNhomThucHanhFilters class.
		/// </summary>
		public HeSoNhomThucHanhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNhomThucHanhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNhomThucHanhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNhomThucHanhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNhomThucHanhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNhomThucHanhFilters
	
	#region HeSoNhomThucHanhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoNhomThucHanhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoNhomThucHanh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNhomThucHanhQuery : HeSoNhomThucHanhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNhomThucHanhQuery class.
		/// </summary>
		public HeSoNhomThucHanhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNhomThucHanhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNhomThucHanhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNhomThucHanhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNhomThucHanhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNhomThucHanhQuery
		
	#region KcqNhomKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqNhomKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqNhomKhoiLuongFilters : KcqNhomKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqNhomKhoiLuongFilters class.
		/// </summary>
		public KcqNhomKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqNhomKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqNhomKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqNhomKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqNhomKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqNhomKhoiLuongFilters
	
	#region KcqNhomKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqNhomKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqNhomKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqNhomKhoiLuongQuery : KcqNhomKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqNhomKhoiLuongQuery class.
		/// </summary>
		public KcqNhomKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqNhomKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqNhomKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqNhomKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqNhomKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqNhomKhoiLuongQuery
		
	#region HeSoChucDanhKhoiLuongKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoChucDanhKhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoChucDanhKhoiLuongKhacFilters : HeSoChucDanhKhoiLuongKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhKhoiLuongKhacFilters class.
		/// </summary>
		public HeSoChucDanhKhoiLuongKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhKhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoChucDanhKhoiLuongKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhKhoiLuongKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoChucDanhKhoiLuongKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoChucDanhKhoiLuongKhacFilters
	
	#region HeSoChucDanhKhoiLuongKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoChucDanhKhoiLuongKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoChucDanhKhoiLuongKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoChucDanhKhoiLuongKhacQuery : HeSoChucDanhKhoiLuongKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhKhoiLuongKhacQuery class.
		/// </summary>
		public HeSoChucDanhKhoiLuongKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhKhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoChucDanhKhoiLuongKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhKhoiLuongKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoChucDanhKhoiLuongKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoChucDanhKhoiLuongKhacQuery
		
	#region HeSoChucDanhTietNghiaVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoChucDanhTietNghiaVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoChucDanhTietNghiaVuFilters : HeSoChucDanhTietNghiaVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhTietNghiaVuFilters class.
		/// </summary>
		public HeSoChucDanhTietNghiaVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhTietNghiaVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoChucDanhTietNghiaVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhTietNghiaVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoChucDanhTietNghiaVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoChucDanhTietNghiaVuFilters
	
	#region HeSoChucDanhTietNghiaVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoChucDanhTietNghiaVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoChucDanhTietNghiaVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoChucDanhTietNghiaVuQuery : HeSoChucDanhTietNghiaVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhTietNghiaVuQuery class.
		/// </summary>
		public HeSoChucDanhTietNghiaVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhTietNghiaVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoChucDanhTietNghiaVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoChucDanhTietNghiaVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoChucDanhTietNghiaVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoChucDanhTietNghiaVuQuery
		
	#region HeSoKhoiNganhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoKhoiNganh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoKhoiNganhFilters : HeSoKhoiNganhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiNganhFilters class.
		/// </summary>
		public HeSoKhoiNganhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiNganhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoKhoiNganhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiNganhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoKhoiNganhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoKhoiNganhFilters
	
	#region HeSoKhoiNganhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoKhoiNganhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoKhoiNganh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoKhoiNganhQuery : HeSoKhoiNganhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiNganhQuery class.
		/// </summary>
		public HeSoKhoiNganhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiNganhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoKhoiNganhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoKhoiNganhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoKhoiNganhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoKhoiNganhQuery
		
	#region HeSoNgonNguFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoNgonNgu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNgonNguFilters : HeSoNgonNguFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNgonNguFilters class.
		/// </summary>
		public HeSoNgonNguFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgonNguFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNgonNguFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgonNguFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNgonNguFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNgonNguFilters
	
	#region HeSoNgonNguQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoNgonNguParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoNgonNgu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoNgonNguQuery : HeSoNgonNguParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoNgonNguQuery class.
		/// </summary>
		public HeSoNgonNguQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgonNguQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoNgonNguQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoNgonNguQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoNgonNguQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoNgonNguQuery
		
	#region HoSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HoSoFilters : HoSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HoSoFilters class.
		/// </summary>
		public HoSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HoSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HoSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HoSoFilters
	
	#region HoSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HoSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HoSoQuery : HoSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HoSoQuery class.
		/// </summary>
		public HoSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HoSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HoSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HoSoQuery
		
	#region HopDongThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HopDongThinhGiangFilters : HopDongThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HopDongThinhGiangFilters class.
		/// </summary>
		public HopDongThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HopDongThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HopDongThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HopDongThinhGiangFilters
	
	#region HopDongThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HopDongThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HopDongThinhGiangQuery : HopDongThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HopDongThinhGiangQuery class.
		/// </summary>
		public HopDongThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HopDongThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HopDongThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HopDongThinhGiangQuery
		
	#region HeSoThamNienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoThamNien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThamNienFilters : HeSoThamNienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThamNienFilters class.
		/// </summary>
		public HeSoThamNienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThamNienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThamNienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThamNienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThamNienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThamNienFilters
	
	#region HeSoThamNienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoThamNienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoThamNien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThamNienQuery : HeSoThamNienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThamNienQuery class.
		/// </summary>
		public HeSoThamNienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThamNienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThamNienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThamNienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThamNienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThamNienQuery
		
	#region HeSoThoiGianGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoThoiGianGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThoiGianGiangDayFilters : HeSoThoiGianGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThoiGianGiangDayFilters class.
		/// </summary>
		public HeSoThoiGianGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThoiGianGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThoiGianGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThoiGianGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThoiGianGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThoiGianGiangDayFilters
	
	#region HeSoThoiGianGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoThoiGianGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoThoiGianGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThoiGianGiangDayQuery : HeSoThoiGianGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThoiGianGiangDayQuery class.
		/// </summary>
		public HeSoThoiGianGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThoiGianGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThoiGianGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThoiGianGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThoiGianGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThoiGianGiangDayQuery
		
	#region HuongDanKhoaLuanThucTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HuongDanKhoaLuanThucTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HuongDanKhoaLuanThucTapFilters : HuongDanKhoaLuanThucTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HuongDanKhoaLuanThucTapFilters class.
		/// </summary>
		public HuongDanKhoaLuanThucTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HuongDanKhoaLuanThucTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HuongDanKhoaLuanThucTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HuongDanKhoaLuanThucTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HuongDanKhoaLuanThucTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HuongDanKhoaLuanThucTapFilters
	
	#region HuongDanKhoaLuanThucTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HuongDanKhoaLuanThucTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HuongDanKhoaLuanThucTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HuongDanKhoaLuanThucTapQuery : HuongDanKhoaLuanThucTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HuongDanKhoaLuanThucTapQuery class.
		/// </summary>
		public HuongDanKhoaLuanThucTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HuongDanKhoaLuanThucTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HuongDanKhoaLuanThucTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HuongDanKhoaLuanThucTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HuongDanKhoaLuanThucTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HuongDanKhoaLuanThucTapQuery
		
	#region HoatDongChuyenMonKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HoatDongChuyenMonKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HoatDongChuyenMonKhacFilters : HoatDongChuyenMonKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HoatDongChuyenMonKhacFilters class.
		/// </summary>
		public HoatDongChuyenMonKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HoatDongChuyenMonKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HoatDongChuyenMonKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HoatDongChuyenMonKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HoatDongChuyenMonKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HoatDongChuyenMonKhacFilters
	
	#region HoatDongChuyenMonKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HoatDongChuyenMonKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HoatDongChuyenMonKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HoatDongChuyenMonKhacQuery : HoatDongChuyenMonKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HoatDongChuyenMonKhacQuery class.
		/// </summary>
		public HoatDongChuyenMonKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HoatDongChuyenMonKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HoatDongChuyenMonKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HoatDongChuyenMonKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HoatDongChuyenMonKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HoatDongChuyenMonKhacQuery
		
	#region HeSoLopDongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoLopDong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoLopDongFilters : HeSoLopDongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoLopDongFilters class.
		/// </summary>
		public HeSoLopDongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoLopDongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoLopDongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoLopDongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoLopDongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoLopDongFilters
	
	#region HeSoLopDongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoLopDongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoLopDong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoLopDongQuery : HeSoLopDongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoLopDongQuery class.
		/// </summary>
		public HeSoLopDongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoLopDongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoLopDongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoLopDongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoLopDongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoLopDongQuery
		
	#region HeSoQuyDoiGioChuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoQuyDoiGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoQuyDoiGioChuanFilters : HeSoQuyDoiGioChuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioChuanFilters class.
		/// </summary>
		public HeSoQuyDoiGioChuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoQuyDoiGioChuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoQuyDoiGioChuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoQuyDoiGioChuanFilters
	
	#region HeSoQuyDoiGioChuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoQuyDoiGioChuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoQuyDoiGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoQuyDoiGioChuanQuery : HeSoQuyDoiGioChuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioChuanQuery class.
		/// </summary>
		public HeSoQuyDoiGioChuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoQuyDoiGioChuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoQuyDoiGioChuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoQuyDoiGioChuanQuery
		
	#region HistoryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="History"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HistoryFilters : HistoryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HistoryFilters class.
		/// </summary>
		public HistoryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HistoryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HistoryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HistoryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HistoryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HistoryFilters
	
	#region HistoryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HistoryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="History"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HistoryQuery : HistoryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HistoryQuery class.
		/// </summary>
		public HistoryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HistoryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HistoryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HistoryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HistoryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HistoryQuery
		
	#region KcqHopDongThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="KcqHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHopDongThinhGiangFilters : KcqHopDongThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHopDongThinhGiangFilters class.
		/// </summary>
		public KcqHopDongThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHopDongThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHopDongThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHopDongThinhGiangFilters
	
	#region KcqHopDongThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="KcqHopDongThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="KcqHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class KcqHopDongThinhGiangQuery : KcqHopDongThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the KcqHopDongThinhGiangQuery class.
		/// </summary>
		public KcqHopDongThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the KcqHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public KcqHopDongThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the KcqHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public KcqHopDongThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion KcqHopDongThinhGiangQuery
		
	#region HeSoTinChiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoTinChiFilters : HeSoTinChiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoTinChiFilters class.
		/// </summary>
		public HeSoTinChiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoTinChiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoTinChiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoTinChiFilters
	
	#region HeSoTinChiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoTinChiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoTinChiQuery : HeSoTinChiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoTinChiQuery class.
		/// </summary>
		public HeSoTinChiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoTinChiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoTinChiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoTinChiQuery
		
	#region HeSoThucTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoThucTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThucTapFilters : HeSoThucTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThucTapFilters class.
		/// </summary>
		public HeSoThucTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThucTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThucTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThucTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThucTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThucTapFilters
	
	#region HeSoThucTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoThucTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoThucTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThucTapQuery : HeSoThucTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThucTapQuery class.
		/// </summary>
		public HeSoThucTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThucTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThucTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThucTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThucTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThucTapQuery
		
	#region XetDuyetDeCuongLuanVanCaoHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="XetDuyetDeCuongLuanVanCaoHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class XetDuyetDeCuongLuanVanCaoHocFilters : XetDuyetDeCuongLuanVanCaoHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the XetDuyetDeCuongLuanVanCaoHocFilters class.
		/// </summary>
		public XetDuyetDeCuongLuanVanCaoHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the XetDuyetDeCuongLuanVanCaoHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public XetDuyetDeCuongLuanVanCaoHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the XetDuyetDeCuongLuanVanCaoHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public XetDuyetDeCuongLuanVanCaoHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion XetDuyetDeCuongLuanVanCaoHocFilters
	
	#region XetDuyetDeCuongLuanVanCaoHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="XetDuyetDeCuongLuanVanCaoHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="XetDuyetDeCuongLuanVanCaoHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class XetDuyetDeCuongLuanVanCaoHocQuery : XetDuyetDeCuongLuanVanCaoHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the XetDuyetDeCuongLuanVanCaoHocQuery class.
		/// </summary>
		public XetDuyetDeCuongLuanVanCaoHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the XetDuyetDeCuongLuanVanCaoHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public XetDuyetDeCuongLuanVanCaoHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the XetDuyetDeCuongLuanVanCaoHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public XetDuyetDeCuongLuanVanCaoHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion XetDuyetDeCuongLuanVanCaoHocQuery
		
	#region HinhThucDaoTaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HinhThucDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HinhThucDaoTaoFilters : HinhThucDaoTaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HinhThucDaoTaoFilters class.
		/// </summary>
		public HinhThucDaoTaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HinhThucDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HinhThucDaoTaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HinhThucDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HinhThucDaoTaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HinhThucDaoTaoFilters
	
	#region HinhThucDaoTaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HinhThucDaoTaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HinhThucDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HinhThucDaoTaoQuery : HinhThucDaoTaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HinhThucDaoTaoQuery class.
		/// </summary>
		public HinhThucDaoTaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HinhThucDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HinhThucDaoTaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HinhThucDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HinhThucDaoTaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HinhThucDaoTaoQuery
		
	#region HeSoThanhToanGioChuanVuotMucFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoThanhToanGioChuanVuotMuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThanhToanGioChuanVuotMucFilters : HeSoThanhToanGioChuanVuotMucFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThanhToanGioChuanVuotMucFilters class.
		/// </summary>
		public HeSoThanhToanGioChuanVuotMucFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThanhToanGioChuanVuotMucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThanhToanGioChuanVuotMucFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThanhToanGioChuanVuotMucFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThanhToanGioChuanVuotMucFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThanhToanGioChuanVuotMucFilters
	
	#region HeSoThanhToanGioChuanVuotMucQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoThanhToanGioChuanVuotMucParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoThanhToanGioChuanVuotMuc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoThanhToanGioChuanVuotMucQuery : HeSoThanhToanGioChuanVuotMucParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoThanhToanGioChuanVuotMucQuery class.
		/// </summary>
		public HeSoThanhToanGioChuanVuotMucQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoThanhToanGioChuanVuotMucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoThanhToanGioChuanVuotMucQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoThanhToanGioChuanVuotMucQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoThanhToanGioChuanVuotMucQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoThanhToanGioChuanVuotMucQuery
		
	#region HeSoQuyDoiTinChiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoQuyDoiTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoQuyDoiTinChiFilters : HeSoQuyDoiTinChiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiTinChiFilters class.
		/// </summary>
		public HeSoQuyDoiTinChiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoQuyDoiTinChiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoQuyDoiTinChiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoQuyDoiTinChiFilters
	
	#region HeSoQuyDoiTinChiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoQuyDoiTinChiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoQuyDoiTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoQuyDoiTinChiQuery : HeSoQuyDoiTinChiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiTinChiQuery class.
		/// </summary>
		public HeSoQuyDoiTinChiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoQuyDoiTinChiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoQuyDoiTinChiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoQuyDoiTinChiQuery
		
	#region ThuLaoThoaThuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ThuLaoThoaThuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoThoaThuanFilters : ThuLaoThoaThuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoThoaThuanFilters class.
		/// </summary>
		public ThuLaoThoaThuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoThoaThuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoThoaThuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoThoaThuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoThoaThuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoThoaThuanFilters
	
	#region ThuLaoThoaThuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ThuLaoThoaThuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ThuLaoThoaThuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ThuLaoThoaThuanQuery : ThuLaoThoaThuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ThuLaoThoaThuanQuery class.
		/// </summary>
		public ThuLaoThoaThuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoThoaThuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ThuLaoThoaThuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ThuLaoThoaThuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ThuLaoThoaThuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ThuLaoThoaThuanQuery
		
	#region UteThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="UteThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UteThanhToanThuLaoFilters : UteThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UteThanhToanThuLaoFilters class.
		/// </summary>
		public UteThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the UteThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UteThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UteThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UteThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UteThanhToanThuLaoFilters
	
	#region UteThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="UteThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="UteThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UteThanhToanThuLaoQuery : UteThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UteThanhToanThuLaoQuery class.
		/// </summary>
		public UteThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the UteThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UteThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UteThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UteThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UteThanhToanThuLaoQuery
		
	#region HeSoQuyDoiGioTroiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HeSoQuyDoiGioTroi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoQuyDoiGioTroiFilters : HeSoQuyDoiGioTroiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioTroiFilters class.
		/// </summary>
		public HeSoQuyDoiGioTroiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioTroiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoQuyDoiGioTroiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioTroiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoQuyDoiGioTroiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoQuyDoiGioTroiFilters
	
	#region HeSoQuyDoiGioTroiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HeSoQuyDoiGioTroiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HeSoQuyDoiGioTroi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HeSoQuyDoiGioTroiQuery : HeSoQuyDoiGioTroiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioTroiQuery class.
		/// </summary>
		public HeSoQuyDoiGioTroiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioTroiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HeSoQuyDoiGioTroiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HeSoQuyDoiGioTroiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HeSoQuyDoiGioTroiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HeSoQuyDoiGioTroiQuery
		
	#region VChiTietKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VChiTietKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VChiTietKhoiLuongFilters : VChiTietKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongFilters class.
		/// </summary>
		public VChiTietKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VChiTietKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VChiTietKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VChiTietKhoiLuongFilters
	
	#region VChiTietKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VChiTietKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VChiTietKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VChiTietKhoiLuongQuery : VChiTietKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongQuery class.
		/// </summary>
		public VChiTietKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VChiTietKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VChiTietKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VChiTietKhoiLuongQuery
		
	#region VChiTietKhoiLuongThucDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VChiTietKhoiLuongThucDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VChiTietKhoiLuongThucDayFilters : VChiTietKhoiLuongThucDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongThucDayFilters class.
		/// </summary>
		public VChiTietKhoiLuongThucDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongThucDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VChiTietKhoiLuongThucDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongThucDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VChiTietKhoiLuongThucDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VChiTietKhoiLuongThucDayFilters
	
	#region VChiTietKhoiLuongThucDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VChiTietKhoiLuongThucDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VChiTietKhoiLuongThucDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VChiTietKhoiLuongThucDayQuery : VChiTietKhoiLuongThucDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongThucDayQuery class.
		/// </summary>
		public VChiTietKhoiLuongThucDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongThucDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VChiTietKhoiLuongThucDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VChiTietKhoiLuongThucDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VChiTietKhoiLuongThucDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VChiTietKhoiLuongThucDayQuery
		
	#region VChiTietQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VChiTietQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VChiTietQuyDoiFilters : VChiTietQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VChiTietQuyDoiFilters class.
		/// </summary>
		public VChiTietQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VChiTietQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VChiTietQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VChiTietQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VChiTietQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VChiTietQuyDoiFilters
	
	#region VChiTietQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VChiTietQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VChiTietQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VChiTietQuyDoiQuery : VChiTietQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VChiTietQuyDoiQuery class.
		/// </summary>
		public VChiTietQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VChiTietQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VChiTietQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VChiTietQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VChiTietQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VChiTietQuyDoiQuery
		
	#region VGiangVienChucVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VGiangVienChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VGiangVienChucVuFilters : VGiangVienChucVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VGiangVienChucVuFilters class.
		/// </summary>
		public VGiangVienChucVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VGiangVienChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VGiangVienChucVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VGiangVienChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VGiangVienChucVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VGiangVienChucVuFilters
	
	#region VGiangVienChucVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VGiangVienChucVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VGiangVienChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VGiangVienChucVuQuery : VGiangVienChucVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VGiangVienChucVuQuery class.
		/// </summary>
		public VGiangVienChucVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VGiangVienChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VGiangVienChucVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VGiangVienChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VGiangVienChucVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VGiangVienChucVuQuery
		
	#region VKhoiLuongThucDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VKhoiLuongThucDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VKhoiLuongThucDayFilters : VKhoiLuongThucDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VKhoiLuongThucDayFilters class.
		/// </summary>
		public VKhoiLuongThucDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VKhoiLuongThucDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VKhoiLuongThucDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VKhoiLuongThucDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VKhoiLuongThucDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VKhoiLuongThucDayFilters
	
	#region VKhoiLuongThucDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VKhoiLuongThucDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VKhoiLuongThucDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VKhoiLuongThucDayQuery : VKhoiLuongThucDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VKhoiLuongThucDayQuery class.
		/// </summary>
		public VKhoiLuongThucDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VKhoiLuongThucDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VKhoiLuongThucDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VKhoiLuongThucDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VKhoiLuongThucDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VKhoiLuongThucDayQuery
		
	#region VLopHocPhanKhongPhanCongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VLopHocPhanKhongPhanCong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VLopHocPhanKhongPhanCongFilters : VLopHocPhanKhongPhanCongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VLopHocPhanKhongPhanCongFilters class.
		/// </summary>
		public VLopHocPhanKhongPhanCongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VLopHocPhanKhongPhanCongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VLopHocPhanKhongPhanCongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VLopHocPhanKhongPhanCongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VLopHocPhanKhongPhanCongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VLopHocPhanKhongPhanCongFilters
	
	#region VLopHocPhanKhongPhanCongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VLopHocPhanKhongPhanCongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VLopHocPhanKhongPhanCong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VLopHocPhanKhongPhanCongQuery : VLopHocPhanKhongPhanCongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VLopHocPhanKhongPhanCongQuery class.
		/// </summary>
		public VLopHocPhanKhongPhanCongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VLopHocPhanKhongPhanCongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VLopHocPhanKhongPhanCongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VLopHocPhanKhongPhanCongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VLopHocPhanKhongPhanCongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VLopHocPhanKhongPhanCongQuery
		
	#region VMonHocTinChiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VMonHocTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VMonHocTinChiFilters : VMonHocTinChiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VMonHocTinChiFilters class.
		/// </summary>
		public VMonHocTinChiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VMonHocTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VMonHocTinChiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VMonHocTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VMonHocTinChiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VMonHocTinChiFilters
	
	#region VMonHocTinChiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VMonHocTinChiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VMonHocTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VMonHocTinChiQuery : VMonHocTinChiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VMonHocTinChiQuery class.
		/// </summary>
		public VMonHocTinChiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VMonHocTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VMonHocTinChiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VMonHocTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VMonHocTinChiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VMonHocTinChiQuery
		
	#region VThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VThanhToanThuLaoFilters : VThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VThanhToanThuLaoFilters class.
		/// </summary>
		public VThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VThanhToanThuLaoFilters
	
	#region VThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VThanhToanThuLaoQuery : VThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VThanhToanThuLaoQuery class.
		/// </summary>
		public VThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VThanhToanThuLaoQuery
		
	#region VTongHopKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VTongHopKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VTongHopKhoiLuongFilters : VTongHopKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VTongHopKhoiLuongFilters class.
		/// </summary>
		public VTongHopKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VTongHopKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VTongHopKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VTongHopKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VTongHopKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VTongHopKhoiLuongFilters
	
	#region VTongHopKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VTongHopKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VTongHopKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VTongHopKhoiLuongQuery : VTongHopKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VTongHopKhoiLuongQuery class.
		/// </summary>
		public VTongHopKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VTongHopKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VTongHopKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VTongHopKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VTongHopKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VTongHopKhoiLuongQuery
		
	#region VTongHopQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VTongHopQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VTongHopQuyDoiFilters : VTongHopQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VTongHopQuyDoiFilters class.
		/// </summary>
		public VTongHopQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VTongHopQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VTongHopQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VTongHopQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VTongHopQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VTongHopQuyDoiFilters
	
	#region VTongHopQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VTongHopQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VTongHopQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VTongHopQuyDoiQuery : VTongHopQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VTongHopQuyDoiQuery class.
		/// </summary>
		public VTongHopQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VTongHopQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VTongHopQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VTongHopQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VTongHopQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VTongHopQuyDoiQuery
		
	#region VTongHopThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VTongHopThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VTongHopThuLaoFilters : VTongHopThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VTongHopThuLaoFilters class.
		/// </summary>
		public VTongHopThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VTongHopThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VTongHopThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VTongHopThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VTongHopThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VTongHopThuLaoFilters
	
	#region VTongHopThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VTongHopThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VTongHopThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VTongHopThuLaoQuery : VTongHopThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VTongHopThuLaoQuery class.
		/// </summary>
		public VTongHopThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VTongHopThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VTongHopThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VTongHopThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VTongHopThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VTongHopThuLaoQuery
		
	#region ViewBacDaoTaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewBacDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewBacDaoTaoFilters : ViewBacDaoTaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoFilters class.
		/// </summary>
		public ViewBacDaoTaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewBacDaoTaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewBacDaoTaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewBacDaoTaoFilters
	
	#region ViewBacDaoTaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewBacDaoTaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewBacDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewBacDaoTaoQuery : ViewBacDaoTaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoQuery class.
		/// </summary>
		public ViewBacDaoTaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewBacDaoTaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewBacDaoTaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewBacDaoTaoQuery
		
	#region ViewBacDaoTaoLoaiHinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewBacDaoTaoLoaiHinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewBacDaoTaoLoaiHinhFilters : ViewBacDaoTaoLoaiHinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoLoaiHinhFilters class.
		/// </summary>
		public ViewBacDaoTaoLoaiHinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoLoaiHinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewBacDaoTaoLoaiHinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoLoaiHinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewBacDaoTaoLoaiHinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewBacDaoTaoLoaiHinhFilters
	
	#region ViewBacDaoTaoLoaiHinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewBacDaoTaoLoaiHinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewBacDaoTaoLoaiHinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewBacDaoTaoLoaiHinhQuery : ViewBacDaoTaoLoaiHinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoLoaiHinhQuery class.
		/// </summary>
		public ViewBacDaoTaoLoaiHinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoLoaiHinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewBacDaoTaoLoaiHinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewBacDaoTaoLoaiHinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewBacDaoTaoLoaiHinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewBacDaoTaoLoaiHinhQuery
		
	#region ViewBangPhuTroiGioDayGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewBangPhuTroiGioDayGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewBangPhuTroiGioDayGiangVienFilters : ViewBangPhuTroiGioDayGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewBangPhuTroiGioDayGiangVienFilters class.
		/// </summary>
		public ViewBangPhuTroiGioDayGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewBangPhuTroiGioDayGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewBangPhuTroiGioDayGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewBangPhuTroiGioDayGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewBangPhuTroiGioDayGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewBangPhuTroiGioDayGiangVienFilters
	
	#region ViewBangPhuTroiGioDayGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewBangPhuTroiGioDayGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewBangPhuTroiGioDayGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewBangPhuTroiGioDayGiangVienQuery : ViewBangPhuTroiGioDayGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewBangPhuTroiGioDayGiangVienQuery class.
		/// </summary>
		public ViewBangPhuTroiGioDayGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewBangPhuTroiGioDayGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewBangPhuTroiGioDayGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewBangPhuTroiGioDayGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewBangPhuTroiGioDayGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewBangPhuTroiGioDayGiangVienQuery
		
	#region ViewBuoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewBuoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewBuoiFilters : ViewBuoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewBuoiFilters class.
		/// </summary>
		public ViewBuoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewBuoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewBuoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewBuoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewBuoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewBuoiFilters
	
	#region ViewBuoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewBuoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewBuoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewBuoiQuery : ViewBuoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewBuoiQuery class.
		/// </summary>
		public ViewBuoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewBuoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewBuoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewBuoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewBuoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewBuoiQuery
		
	#region ViewCauHinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewCauHinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewCauHinhFilters : ViewCauHinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewCauHinhFilters class.
		/// </summary>
		public ViewCauHinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewCauHinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewCauHinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewCauHinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewCauHinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewCauHinhFilters
	
	#region ViewCauHinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewCauHinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewCauHinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewCauHinhQuery : ViewCauHinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewCauHinhQuery class.
		/// </summary>
		public ViewCauHinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewCauHinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewCauHinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewCauHinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewCauHinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewCauHinhQuery
		
	#region ViewChiTienCoVanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewChiTienCoVan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTienCoVanFilters : ViewChiTienCoVanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTienCoVanFilters class.
		/// </summary>
		public ViewChiTienCoVanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTienCoVanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTienCoVanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTienCoVanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTienCoVanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTienCoVanFilters
	
	#region ViewChiTienCoVanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewChiTienCoVanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewChiTienCoVan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTienCoVanQuery : ViewChiTienCoVanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTienCoVanQuery class.
		/// </summary>
		public ViewChiTienCoVanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTienCoVanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTienCoVanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTienCoVanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTienCoVanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTienCoVanQuery
		
	#region ViewChiTietGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewChiTietGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietGiangDayFilters : ViewChiTietGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietGiangDayFilters class.
		/// </summary>
		public ViewChiTietGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietGiangDayFilters
	
	#region ViewChiTietGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewChiTietGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewChiTietGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietGiangDayQuery : ViewChiTietGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietGiangDayQuery class.
		/// </summary>
		public ViewChiTietGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietGiangDayQuery
		
	#region ViewChiTietHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewChiTietHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietHocPhanFilters : ViewChiTietHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietHocPhanFilters class.
		/// </summary>
		public ViewChiTietHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietHocPhanFilters
	
	#region ViewChiTietHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewChiTietHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewChiTietHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietHocPhanQuery : ViewChiTietHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietHocPhanQuery class.
		/// </summary>
		public ViewChiTietHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietHocPhanQuery
		
	#region ViewChiTietKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewChiTietKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietKhoiLuongFilters : ViewChiTietKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongFilters class.
		/// </summary>
		public ViewChiTietKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietKhoiLuongFilters
	
	#region ViewChiTietKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewChiTietKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewChiTietKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietKhoiLuongQuery : ViewChiTietKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongQuery class.
		/// </summary>
		public ViewChiTietKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietKhoiLuongQuery
		
	#region ViewChiTietKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewChiTietKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietKhoiLuongGiangDayFilters : ViewChiTietKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongGiangDayFilters class.
		/// </summary>
		public ViewChiTietKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietKhoiLuongGiangDayFilters
	
	#region ViewChiTietKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewChiTietKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewChiTietKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietKhoiLuongGiangDayQuery : ViewChiTietKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongGiangDayQuery class.
		/// </summary>
		public ViewChiTietKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietKhoiLuongGiangDayQuery
		
	#region ViewChiTietKhoiLuongThucDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewChiTietKhoiLuongThucDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietKhoiLuongThucDayFilters : ViewChiTietKhoiLuongThucDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongThucDayFilters class.
		/// </summary>
		public ViewChiTietKhoiLuongThucDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongThucDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietKhoiLuongThucDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongThucDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietKhoiLuongThucDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietKhoiLuongThucDayFilters
	
	#region ViewChiTietKhoiLuongThucDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewChiTietKhoiLuongThucDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewChiTietKhoiLuongThucDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietKhoiLuongThucDayQuery : ViewChiTietKhoiLuongThucDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongThucDayQuery class.
		/// </summary>
		public ViewChiTietKhoiLuongThucDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongThucDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietKhoiLuongThucDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietKhoiLuongThucDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietKhoiLuongThucDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietKhoiLuongThucDayQuery
		
	#region ViewChiTietPhanCongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewChiTietPhanCongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietPhanCongGiangDayFilters : ViewChiTietPhanCongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietPhanCongGiangDayFilters class.
		/// </summary>
		public ViewChiTietPhanCongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietPhanCongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietPhanCongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietPhanCongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietPhanCongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietPhanCongGiangDayFilters
	
	#region ViewChiTietPhanCongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewChiTietPhanCongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewChiTietPhanCongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietPhanCongGiangDayQuery : ViewChiTietPhanCongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietPhanCongGiangDayQuery class.
		/// </summary>
		public ViewChiTietPhanCongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietPhanCongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietPhanCongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietPhanCongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietPhanCongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietPhanCongGiangDayQuery
		
	#region ViewChiTietQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewChiTietQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietQuyDoiFilters : ViewChiTietQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietQuyDoiFilters class.
		/// </summary>
		public ViewChiTietQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietQuyDoiFilters
	
	#region ViewChiTietQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewChiTietQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewChiTietQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewChiTietQuyDoiQuery : ViewChiTietQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewChiTietQuyDoiQuery class.
		/// </summary>
		public ViewChiTietQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewChiTietQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewChiTietQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewChiTietQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewChiTietQuyDoiQuery
		
	#region ViewCoSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewCoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewCoSoFilters : ViewCoSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewCoSoFilters class.
		/// </summary>
		public ViewCoSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewCoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewCoSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewCoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewCoSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewCoSoFilters
	
	#region ViewCoSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewCoSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewCoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewCoSoQuery : ViewCoSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewCoSoQuery class.
		/// </summary>
		public ViewCoSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewCoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewCoSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewCoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewCoSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewCoSoQuery
		
	#region ViewCoVanHocTapFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewCoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewCoVanHocTapFilters : ViewCoVanHocTapFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewCoVanHocTapFilters class.
		/// </summary>
		public ViewCoVanHocTapFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewCoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewCoVanHocTapFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewCoVanHocTapFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewCoVanHocTapFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewCoVanHocTapFilters
	
	#region ViewCoVanHocTapQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewCoVanHocTapParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewCoVanHocTap"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewCoVanHocTapQuery : ViewCoVanHocTapParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewCoVanHocTapQuery class.
		/// </summary>
		public ViewCoVanHocTapQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewCoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewCoVanHocTapQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewCoVanHocTapQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewCoVanHocTapQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewCoVanHocTapQuery
		
	#region ViewDanhSachHopDongThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewDanhSachHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDanhSachHopDongThinhGiangFilters : ViewDanhSachHopDongThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachHopDongThinhGiangFilters class.
		/// </summary>
		public ViewDanhSachHopDongThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDanhSachHopDongThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDanhSachHopDongThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDanhSachHopDongThinhGiangFilters
	
	#region ViewDanhSachHopDongThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewDanhSachHopDongThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewDanhSachHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDanhSachHopDongThinhGiangQuery : ViewDanhSachHopDongThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachHopDongThinhGiangQuery class.
		/// </summary>
		public ViewDanhSachHopDongThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDanhSachHopDongThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDanhSachHopDongThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDanhSachHopDongThinhGiangQuery
		
	#region ViewDanhSachLopPhanCongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewDanhSachLopPhanCongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDanhSachLopPhanCongGiangDayFilters : ViewDanhSachLopPhanCongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachLopPhanCongGiangDayFilters class.
		/// </summary>
		public ViewDanhSachLopPhanCongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachLopPhanCongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDanhSachLopPhanCongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachLopPhanCongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDanhSachLopPhanCongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDanhSachLopPhanCongGiangDayFilters
	
	#region ViewDanhSachLopPhanCongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewDanhSachLopPhanCongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewDanhSachLopPhanCongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDanhSachLopPhanCongGiangDayQuery : ViewDanhSachLopPhanCongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachLopPhanCongGiangDayQuery class.
		/// </summary>
		public ViewDanhSachLopPhanCongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachLopPhanCongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDanhSachLopPhanCongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDanhSachLopPhanCongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDanhSachLopPhanCongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDanhSachLopPhanCongGiangDayQuery
		
	#region ViewDanTocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewDanToc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDanTocFilters : ViewDanTocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDanTocFilters class.
		/// </summary>
		public ViewDanTocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDanTocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDanTocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDanTocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDanTocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDanTocFilters
	
	#region ViewDanTocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewDanTocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewDanToc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDanTocQuery : ViewDanTocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDanTocQuery class.
		/// </summary>
		public ViewDanTocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDanTocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDanTocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDanTocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDanTocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDanTocQuery
		
	#region ViewDoiTuongDonGiaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewDoiTuongDonGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDoiTuongDonGiaFilters : ViewDoiTuongDonGiaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDoiTuongDonGiaFilters class.
		/// </summary>
		public ViewDoiTuongDonGiaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDoiTuongDonGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDoiTuongDonGiaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDoiTuongDonGiaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDoiTuongDonGiaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDoiTuongDonGiaFilters
	
	#region ViewDoiTuongDonGiaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewDoiTuongDonGiaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewDoiTuongDonGia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDoiTuongDonGiaQuery : ViewDoiTuongDonGiaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDoiTuongDonGiaQuery class.
		/// </summary>
		public ViewDoiTuongDonGiaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDoiTuongDonGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDoiTuongDonGiaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDoiTuongDonGiaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDoiTuongDonGiaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDoiTuongDonGiaQuery
		
	#region ViewDonGiaNgoaiQuyCheFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewDonGiaNgoaiQuyChe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDonGiaNgoaiQuyCheFilters : ViewDonGiaNgoaiQuyCheFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		public ViewDonGiaNgoaiQuyCheFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDonGiaNgoaiQuyCheFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDonGiaNgoaiQuyCheFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDonGiaNgoaiQuyCheFilters
	
	#region ViewDonGiaNgoaiQuyCheQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewDonGiaNgoaiQuyCheParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewDonGiaNgoaiQuyChe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDonGiaNgoaiQuyCheQuery : ViewDonGiaNgoaiQuyCheParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		public ViewDonGiaNgoaiQuyCheQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDonGiaNgoaiQuyCheQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDonGiaNgoaiQuyCheQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDonGiaNgoaiQuyCheQuery
		
	#region ViewDonViFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewDonVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDonViFilters : ViewDonViFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDonViFilters class.
		/// </summary>
		public ViewDonViFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDonViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDonViFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDonViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDonViFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDonViFilters
	
	#region ViewDonViQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewDonViParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewDonVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewDonViQuery : ViewDonViParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewDonViQuery class.
		/// </summary>
		public ViewDonViQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewDonViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewDonViQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewDonViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewDonViQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewDonViQuery
		
	#region ViewGiamTruGioChuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewGiamTruGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiamTruGioChuanFilters : ViewGiamTruGioChuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiamTruGioChuanFilters class.
		/// </summary>
		public ViewGiamTruGioChuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiamTruGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiamTruGioChuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiamTruGioChuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiamTruGioChuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiamTruGioChuanFilters
	
	#region ViewGiamTruGioChuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewGiamTruGioChuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewGiamTruGioChuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiamTruGioChuanQuery : ViewGiamTruGioChuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiamTruGioChuanQuery class.
		/// </summary>
		public ViewGiamTruGioChuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiamTruGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiamTruGioChuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiamTruGioChuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiamTruGioChuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiamTruGioChuanQuery
		
	#region ViewGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienFilters : ViewGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienFilters class.
		/// </summary>
		public ViewGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienFilters
	
	#region ViewGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienQuery : ViewGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienQuery class.
		/// </summary>
		public ViewGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienQuery
		
	#region ViewGiangVienKhoaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewGiangVienKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienKhoaFilters : ViewGiangVienKhoaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienKhoaFilters class.
		/// </summary>
		public ViewGiangVienKhoaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienKhoaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienKhoaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienKhoaFilters
	
	#region ViewGiangVienKhoaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewGiangVienKhoaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewGiangVienKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienKhoaQuery : ViewGiangVienKhoaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienKhoaQuery class.
		/// </summary>
		public ViewGiangVienKhoaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienKhoaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienKhoaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienKhoaQuery
		
	#region ViewGiangVienLopHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewGiangVienLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienLopHocPhanFilters : ViewGiangVienLopHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienLopHocPhanFilters class.
		/// </summary>
		public ViewGiangVienLopHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienLopHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienLopHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienLopHocPhanFilters
	
	#region ViewGiangVienLopHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewGiangVienLopHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewGiangVienLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienLopHocPhanQuery : ViewGiangVienLopHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienLopHocPhanQuery class.
		/// </summary>
		public ViewGiangVienLopHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienLopHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienLopHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienLopHocPhanQuery
		
	#region ViewGiangVienNckhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewGiangVienNckh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienNckhFilters : ViewGiangVienNckhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNckhFilters class.
		/// </summary>
		public ViewGiangVienNckhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNckhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienNckhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNckhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienNckhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienNckhFilters
	
	#region ViewGiangVienNckhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewGiangVienNckhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewGiangVienNckh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienNckhQuery : ViewGiangVienNckhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNckhQuery class.
		/// </summary>
		public ViewGiangVienNckhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNckhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienNckhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNckhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienNckhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienNckhQuery
		
	#region ViewGiangVienNghienCuuKhoaHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewGiangVienNghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienNghienCuuKhoaHocFilters : ViewGiangVienNghienCuuKhoaHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNghienCuuKhoaHocFilters class.
		/// </summary>
		public ViewGiangVienNghienCuuKhoaHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienNghienCuuKhoaHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNghienCuuKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienNghienCuuKhoaHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienNghienCuuKhoaHocFilters
	
	#region ViewGiangVienNghienCuuKhoaHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewGiangVienNghienCuuKhoaHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewGiangVienNghienCuuKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewGiangVienNghienCuuKhoaHocQuery : ViewGiangVienNghienCuuKhoaHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNghienCuuKhoaHocQuery class.
		/// </summary>
		public ViewGiangVienNghienCuuKhoaHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewGiangVienNghienCuuKhoaHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewGiangVienNghienCuuKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewGiangVienNghienCuuKhoaHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewGiangVienNghienCuuKhoaHocQuery
		
	#region ViewHeDaoTaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHeDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHeDaoTaoFilters : ViewHeDaoTaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHeDaoTaoFilters class.
		/// </summary>
		public ViewHeDaoTaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHeDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHeDaoTaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHeDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHeDaoTaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHeDaoTaoFilters
	
	#region ViewHeDaoTaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHeDaoTaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHeDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHeDaoTaoQuery : ViewHeDaoTaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHeDaoTaoQuery class.
		/// </summary>
		public ViewHeDaoTaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHeDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHeDaoTaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHeDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHeDaoTaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHeDaoTaoQuery
		
	#region ViewHeSoLopDongHbuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHeSoLopDongHbu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHeSoLopDongHbuFilters : ViewHeSoLopDongHbuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLopDongHbuFilters class.
		/// </summary>
		public ViewHeSoLopDongHbuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLopDongHbuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHeSoLopDongHbuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLopDongHbuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHeSoLopDongHbuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHeSoLopDongHbuFilters
	
	#region ViewHeSoLopDongHbuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHeSoLopDongHbuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHeSoLopDongHbu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHeSoLopDongHbuQuery : ViewHeSoLopDongHbuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLopDongHbuQuery class.
		/// </summary>
		public ViewHeSoLopDongHbuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLopDongHbuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHeSoLopDongHbuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLopDongHbuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHeSoLopDongHbuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHeSoLopDongHbuQuery
		
	#region ViewHeSoLuongHocHamHocViFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHeSoLuongHocHamHocVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHeSoLuongHocHamHocViFilters : ViewHeSoLuongHocHamHocViFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLuongHocHamHocViFilters class.
		/// </summary>
		public ViewHeSoLuongHocHamHocViFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLuongHocHamHocViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHeSoLuongHocHamHocViFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLuongHocHamHocViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHeSoLuongHocHamHocViFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHeSoLuongHocHamHocViFilters
	
	#region ViewHeSoLuongHocHamHocViQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHeSoLuongHocHamHocViParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHeSoLuongHocHamHocVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHeSoLuongHocHamHocViQuery : ViewHeSoLuongHocHamHocViParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLuongHocHamHocViQuery class.
		/// </summary>
		public ViewHeSoLuongHocHamHocViQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLuongHocHamHocViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHeSoLuongHocHamHocViQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoLuongHocHamHocViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHeSoLuongHocHamHocViQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHeSoLuongHocHamHocViQuery
		
	#region ViewHesoThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHesoThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHesoThuLaoFilters : ViewHesoThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHesoThuLaoFilters class.
		/// </summary>
		public ViewHesoThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHesoThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHesoThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHesoThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHesoThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHesoThuLaoFilters
	
	#region ViewHesoThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHesoThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHesoThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHesoThuLaoQuery : ViewHesoThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHesoThuLaoQuery class.
		/// </summary>
		public ViewHesoThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHesoThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHesoThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHesoThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHesoThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHesoThuLaoQuery
		
	#region ViewHeSoTinChiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHeSoTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHeSoTinChiFilters : ViewHeSoTinChiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHeSoTinChiFilters class.
		/// </summary>
		public ViewHeSoTinChiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHeSoTinChiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoTinChiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHeSoTinChiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHeSoTinChiFilters
	
	#region ViewHeSoTinChiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHeSoTinChiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHeSoTinChi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHeSoTinChiQuery : ViewHeSoTinChiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHeSoTinChiQuery class.
		/// </summary>
		public ViewHeSoTinChiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHeSoTinChiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHeSoTinChiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHeSoTinChiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHeSoTinChiQuery
		
	#region ViewHinhThucThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHinhThucThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHinhThucThiFilters : ViewHinhThucThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucThiFilters class.
		/// </summary>
		public ViewHinhThucThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHinhThucThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHinhThucThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHinhThucThiFilters
	
	#region ViewHinhThucThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHinhThucThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHinhThucThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHinhThucThiQuery : ViewHinhThucThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucThiQuery class.
		/// </summary>
		public ViewHinhThucThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHinhThucThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHinhThucThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHinhThucThiQuery
		
	#region ViewHinhThucViPhamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHinhThucViPham"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHinhThucViPhamFilters : ViewHinhThucViPhamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucViPhamFilters class.
		/// </summary>
		public ViewHinhThucViPhamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucViPhamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHinhThucViPhamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucViPhamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHinhThucViPhamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHinhThucViPhamFilters
	
	#region ViewHinhThucViPhamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHinhThucViPhamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHinhThucViPham"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHinhThucViPhamQuery : ViewHinhThucViPhamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucViPhamQuery class.
		/// </summary>
		public ViewHinhThucViPhamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucViPhamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHinhThucViPhamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHinhThucViPhamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHinhThucViPhamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHinhThucViPhamQuery
		
	#region ViewHocKyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHocKyFilters : ViewHocKyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHocKyFilters class.
		/// </summary>
		public ViewHocKyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHocKyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHocKyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHocKyFilters
	
	#region ViewHocKyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHocKyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHocKyQuery : ViewHocKyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHocKyQuery class.
		/// </summary>
		public ViewHocKyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHocKyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHocKyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHocKyQuery
		
	#region ViewHocPhanMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHocPhanMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHocPhanMonHocFilters : ViewHocPhanMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHocPhanMonHocFilters class.
		/// </summary>
		public ViewHocPhanMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHocPhanMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHocPhanMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHocPhanMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHocPhanMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHocPhanMonHocFilters
	
	#region ViewHocPhanMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHocPhanMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHocPhanMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHocPhanMonHocQuery : ViewHocPhanMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHocPhanMonHocQuery class.
		/// </summary>
		public ViewHocPhanMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHocPhanMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHocPhanMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHocPhanMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHocPhanMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHocPhanMonHocQuery
		
	#region ViewHopDongThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHopDongThinhGiangFilters : ViewHopDongThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHopDongThinhGiangFilters class.
		/// </summary>
		public ViewHopDongThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHopDongThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHopDongThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHopDongThinhGiangFilters
	
	#region ViewHopDongThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewHopDongThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewHopDongThinhGiangQuery : ViewHopDongThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewHopDongThinhGiangQuery class.
		/// </summary>
		public ViewHopDongThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewHopDongThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewHopDongThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewHopDongThinhGiangQuery
		
	#region ViewKcqDonGiaNgoaiQuyCheFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqDonGiaNgoaiQuyChe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqDonGiaNgoaiQuyCheFilters : ViewKcqDonGiaNgoaiQuyCheFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		public ViewKcqDonGiaNgoaiQuyCheFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqDonGiaNgoaiQuyCheFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqDonGiaNgoaiQuyCheFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqDonGiaNgoaiQuyCheFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqDonGiaNgoaiQuyCheFilters
	
	#region ViewKcqDonGiaNgoaiQuyCheQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqDonGiaNgoaiQuyCheParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqDonGiaNgoaiQuyChe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqDonGiaNgoaiQuyCheQuery : ViewKcqDonGiaNgoaiQuyCheParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		public ViewKcqDonGiaNgoaiQuyCheQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqDonGiaNgoaiQuyCheQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqDonGiaNgoaiQuyCheQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqDonGiaNgoaiQuyCheQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqDonGiaNgoaiQuyCheQuery
		
	#region ViewKcqHopDongThinhGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqHopDongThinhGiangFilters : ViewKcqHopDongThinhGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqHopDongThinhGiangFilters class.
		/// </summary>
		public ViewKcqHopDongThinhGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqHopDongThinhGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqHopDongThinhGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqHopDongThinhGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqHopDongThinhGiangFilters
	
	#region ViewKcqHopDongThinhGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqHopDongThinhGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqHopDongThinhGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqHopDongThinhGiangQuery : ViewKcqHopDongThinhGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqHopDongThinhGiangQuery class.
		/// </summary>
		public ViewKcqHopDongThinhGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqHopDongThinhGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqHopDongThinhGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqHopDongThinhGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqHopDongThinhGiangQuery
		
	#region ViewKcqKetQuaThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqKetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqKetQuaThanhToanThuLaoFilters : ViewKcqKetQuaThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		public ViewKcqKetQuaThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqKetQuaThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqKetQuaThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqKetQuaThanhToanThuLaoFilters
	
	#region ViewKcqKetQuaThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqKetQuaThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqKetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqKetQuaThanhToanThuLaoQuery : ViewKcqKetQuaThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		public ViewKcqKetQuaThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqKetQuaThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqKetQuaThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqKetQuaThanhToanThuLaoQuery
		
	#region ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqLietKeKhoiLuongGiangDayChiTiet2"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters : ViewKcqLietKeKhoiLuongGiangDayChiTiet2FilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters class.
		/// </summary>
		public ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqLietKeKhoiLuongGiangDayChiTiet2Filters
	
	#region ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqLietKeKhoiLuongGiangDayChiTiet2ParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqLietKeKhoiLuongGiangDayChiTiet2"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query : ViewKcqLietKeKhoiLuongGiangDayChiTiet2ParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query class.
		/// </summary>
		public ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqLietKeKhoiLuongGiangDayChiTiet2Query
		
	#region ViewKcqMonThucTapTotNghiepFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqMonThucTapTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqMonThucTapTotNghiepFilters : ViewKcqMonThucTapTotNghiepFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonThucTapTotNghiepFilters class.
		/// </summary>
		public ViewKcqMonThucTapTotNghiepFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonThucTapTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqMonThucTapTotNghiepFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonThucTapTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqMonThucTapTotNghiepFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqMonThucTapTotNghiepFilters
	
	#region ViewKcqMonThucTapTotNghiepQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqMonThucTapTotNghiepParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqMonThucTapTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqMonThucTapTotNghiepQuery : ViewKcqMonThucTapTotNghiepParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonThucTapTotNghiepQuery class.
		/// </summary>
		public ViewKcqMonThucTapTotNghiepQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonThucTapTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqMonThucTapTotNghiepQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonThucTapTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqMonThucTapTotNghiepQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqMonThucTapTotNghiepQuery
		
	#region ViewKcqMonTinhTheoQuyCheMoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqMonTinhTheoQuyCheMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqMonTinhTheoQuyCheMoiFilters : ViewKcqMonTinhTheoQuyCheMoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		public ViewKcqMonTinhTheoQuyCheMoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqMonTinhTheoQuyCheMoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqMonTinhTheoQuyCheMoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqMonTinhTheoQuyCheMoiFilters
	
	#region ViewKcqMonTinhTheoQuyCheMoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqMonTinhTheoQuyCheMoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqMonTinhTheoQuyCheMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqMonTinhTheoQuyCheMoiQuery : ViewKcqMonTinhTheoQuyCheMoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		public ViewKcqMonTinhTheoQuyCheMoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqMonTinhTheoQuyCheMoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqMonTinhTheoQuyCheMoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqMonTinhTheoQuyCheMoiQuery
		
	#region ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqMonXepLichChuNhatKhongTinhHeSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters : ViewKcqMonXepLichChuNhatKhongTinhHeSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		public ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqMonXepLichChuNhatKhongTinhHeSoFilters
	
	#region ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqMonXepLichChuNhatKhongTinhHeSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqMonXepLichChuNhatKhongTinhHeSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery : ViewKcqMonXepLichChuNhatKhongTinhHeSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		public ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqMonXepLichChuNhatKhongTinhHeSoQuery
		
	#region ViewKcqPhanNhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqPhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqPhanNhomMonHocFilters : ViewKcqPhanNhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocFilters class.
		/// </summary>
		public ViewKcqPhanNhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqPhanNhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqPhanNhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqPhanNhomMonHocFilters
	
	#region ViewKcqPhanNhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqPhanNhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqPhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqPhanNhomMonHocQuery : ViewKcqPhanNhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocQuery class.
		/// </summary>
		public ViewKcqPhanNhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqPhanNhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqPhanNhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqPhanNhomMonHocQuery
		
	#region ViewKcqPhanNhomMonHocActFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqPhanNhomMonHocAct"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqPhanNhomMonHocActFilters : ViewKcqPhanNhomMonHocActFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocActFilters class.
		/// </summary>
		public ViewKcqPhanNhomMonHocActFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocActFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqPhanNhomMonHocActFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocActFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqPhanNhomMonHocActFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqPhanNhomMonHocActFilters
	
	#region ViewKcqPhanNhomMonHocActQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqPhanNhomMonHocActParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqPhanNhomMonHocAct"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqPhanNhomMonHocActQuery : ViewKcqPhanNhomMonHocActParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocActQuery class.
		/// </summary>
		public ViewKcqPhanNhomMonHocActQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocActQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqPhanNhomMonHocActQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhanNhomMonHocActQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqPhanNhomMonHocActQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqPhanNhomMonHocActQuery
		
	#region ViewKcqPhuCapHanhChinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqPhuCapHanhChinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqPhuCapHanhChinhFilters : ViewKcqPhuCapHanhChinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhuCapHanhChinhFilters class.
		/// </summary>
		public ViewKcqPhuCapHanhChinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhuCapHanhChinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqPhuCapHanhChinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhuCapHanhChinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqPhuCapHanhChinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqPhuCapHanhChinhFilters
	
	#region ViewKcqPhuCapHanhChinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqPhuCapHanhChinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqPhuCapHanhChinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqPhuCapHanhChinhQuery : ViewKcqPhuCapHanhChinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhuCapHanhChinhQuery class.
		/// </summary>
		public ViewKcqPhuCapHanhChinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhuCapHanhChinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqPhuCapHanhChinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqPhuCapHanhChinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqPhuCapHanhChinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqPhuCapHanhChinhQuery
		
	#region ViewKcqUteKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqUteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqUteKhoiLuongGiangDayFilters : ViewKcqUteKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongGiangDayFilters class.
		/// </summary>
		public ViewKcqUteKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqUteKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqUteKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqUteKhoiLuongGiangDayFilters
	
	#region ViewKcqUteKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqUteKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqUteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqUteKhoiLuongGiangDayQuery : ViewKcqUteKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongGiangDayQuery class.
		/// </summary>
		public ViewKcqUteKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqUteKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqUteKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqUteKhoiLuongGiangDayQuery
		
	#region ViewKcqUteKhoiLuongQuyDoi2Filters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKcqUteKhoiLuongQuyDoi2"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqUteKhoiLuongQuyDoi2Filters : ViewKcqUteKhoiLuongQuyDoi2FilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongQuyDoi2Filters class.
		/// </summary>
		public ViewKcqUteKhoiLuongQuyDoi2Filters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongQuyDoi2Filters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqUteKhoiLuongQuyDoi2Filters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongQuyDoi2Filters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqUteKhoiLuongQuyDoi2Filters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqUteKhoiLuongQuyDoi2Filters
	
	#region ViewKcqUteKhoiLuongQuyDoi2Query
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKcqUteKhoiLuongQuyDoi2ParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKcqUteKhoiLuongQuyDoi2"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKcqUteKhoiLuongQuyDoi2Query : ViewKcqUteKhoiLuongQuyDoi2ParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongQuyDoi2Query class.
		/// </summary>
		public ViewKcqUteKhoiLuongQuyDoi2Query() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongQuyDoi2Query class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKcqUteKhoiLuongQuyDoi2Query(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKcqUteKhoiLuongQuyDoi2Query class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKcqUteKhoiLuongQuyDoi2Query(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKcqUteKhoiLuongQuyDoi2Query
		
	#region ViewKetQuaCacKhoanChiKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKetQuaCacKhoanChiKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKetQuaCacKhoanChiKhacFilters : ViewKetQuaCacKhoanChiKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaCacKhoanChiKhacFilters class.
		/// </summary>
		public ViewKetQuaCacKhoanChiKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaCacKhoanChiKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKetQuaCacKhoanChiKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaCacKhoanChiKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKetQuaCacKhoanChiKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKetQuaCacKhoanChiKhacFilters
	
	#region ViewKetQuaCacKhoanChiKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKetQuaCacKhoanChiKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKetQuaCacKhoanChiKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKetQuaCacKhoanChiKhacQuery : ViewKetQuaCacKhoanChiKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaCacKhoanChiKhacQuery class.
		/// </summary>
		public ViewKetQuaCacKhoanChiKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaCacKhoanChiKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKetQuaCacKhoanChiKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaCacKhoanChiKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKetQuaCacKhoanChiKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKetQuaCacKhoanChiKhacQuery
		
	#region ViewKetQuaThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKetQuaThanhToanThuLaoFilters : ViewKetQuaThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		public ViewKetQuaThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKetQuaThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKetQuaThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKetQuaThanhToanThuLaoFilters
	
	#region ViewKetQuaThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKetQuaThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKetQuaThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKetQuaThanhToanThuLaoQuery : ViewKetQuaThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		public ViewKetQuaThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKetQuaThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKetQuaThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKetQuaThanhToanThuLaoQuery
		
	#region ViewKetQuaTinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKetQuaTinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKetQuaTinhFilters : ViewKetQuaTinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaTinhFilters class.
		/// </summary>
		public ViewKetQuaTinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaTinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKetQuaTinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaTinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKetQuaTinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKetQuaTinhFilters
	
	#region ViewKetQuaTinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKetQuaTinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKetQuaTinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKetQuaTinhQuery : ViewKetQuaTinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaTinhQuery class.
		/// </summary>
		public ViewKetQuaTinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaTinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKetQuaTinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKetQuaTinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKetQuaTinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKetQuaTinhQuery
		
	#region ViewKhoaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoaFilters : ViewKhoaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoaFilters class.
		/// </summary>
		public ViewKhoaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoaFilters
	
	#region ViewKhoaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKhoaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoaQuery : ViewKhoaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoaQuery class.
		/// </summary>
		public ViewKhoaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoaQuery
		
	#region ViewKhoaBoMonFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKhoaBoMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoaBoMonFilters : ViewKhoaBoMonFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoaBoMonFilters class.
		/// </summary>
		public ViewKhoaBoMonFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaBoMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoaBoMonFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaBoMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoaBoMonFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoaBoMonFilters
	
	#region ViewKhoaBoMonQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKhoaBoMonParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKhoaBoMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoaBoMonQuery : ViewKhoaBoMonParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoaBoMonQuery class.
		/// </summary>
		public ViewKhoaBoMonQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaBoMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoaBoMonQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaBoMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoaBoMonQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoaBoMonQuery
		
	#region ViewKhoaHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoaHocFilters : ViewKhoaHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocFilters class.
		/// </summary>
		public ViewKhoaHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoaHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoaHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoaHocFilters
	
	#region ViewKhoaHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKhoaHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoaHocQuery : ViewKhoaHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocQuery class.
		/// </summary>
		public ViewKhoaHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoaHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoaHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoaHocQuery
		
	#region ViewKhoaHocBacHeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKhoaHocBacHe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoaHocBacHeFilters : ViewKhoaHocBacHeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocBacHeFilters class.
		/// </summary>
		public ViewKhoaHocBacHeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocBacHeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoaHocBacHeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocBacHeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoaHocBacHeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoaHocBacHeFilters
	
	#region ViewKhoaHocBacHeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKhoaHocBacHeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKhoaHocBacHe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoaHocBacHeQuery : ViewKhoaHocBacHeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocBacHeQuery class.
		/// </summary>
		public ViewKhoaHocBacHeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocBacHeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoaHocBacHeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoaHocBacHeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoaHocBacHeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoaHocBacHeQuery
		
	#region ViewKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoiLuongGiangDayFilters : ViewKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayFilters class.
		/// </summary>
		public ViewKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoiLuongGiangDayFilters
	
	#region ViewKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoiLuongGiangDayQuery : ViewKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayQuery class.
		/// </summary>
		public ViewKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoiLuongGiangDayQuery
		
	#region ViewKhoiLuongGiangDayCanBoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKhoiLuongGiangDayCanBo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoiLuongGiangDayCanBoFilters : ViewKhoiLuongGiangDayCanBoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayCanBoFilters class.
		/// </summary>
		public ViewKhoiLuongGiangDayCanBoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayCanBoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoiLuongGiangDayCanBoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayCanBoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoiLuongGiangDayCanBoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoiLuongGiangDayCanBoFilters
	
	#region ViewKhoiLuongGiangDayCanBoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKhoiLuongGiangDayCanBoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKhoiLuongGiangDayCanBo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoiLuongGiangDayCanBoQuery : ViewKhoiLuongGiangDayCanBoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayCanBoQuery class.
		/// </summary>
		public ViewKhoiLuongGiangDayCanBoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayCanBoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoiLuongGiangDayCanBoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongGiangDayCanBoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoiLuongGiangDayCanBoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoiLuongGiangDayCanBoQuery
		
	#region ViewKhoiLuongThucDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKhoiLuongThucDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoiLuongThucDayFilters : ViewKhoiLuongThucDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongThucDayFilters class.
		/// </summary>
		public ViewKhoiLuongThucDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongThucDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoiLuongThucDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongThucDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoiLuongThucDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoiLuongThucDayFilters
	
	#region ViewKhoiLuongThucDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKhoiLuongThucDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKhoiLuongThucDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoiLuongThucDayQuery : ViewKhoiLuongThucDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongThucDayQuery class.
		/// </summary>
		public ViewKhoiLuongThucDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongThucDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoiLuongThucDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongThucDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoiLuongThucDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoiLuongThucDayQuery
		
	#region ViewKhoiLuongCacCongViecKhacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKhoiLuongCacCongViecKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoiLuongCacCongViecKhacFilters : ViewKhoiLuongCacCongViecKhacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongCacCongViecKhacFilters class.
		/// </summary>
		public ViewKhoiLuongCacCongViecKhacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongCacCongViecKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoiLuongCacCongViecKhacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongCacCongViecKhacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoiLuongCacCongViecKhacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoiLuongCacCongViecKhacFilters
	
	#region ViewKhoiLuongCacCongViecKhacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKhoiLuongCacCongViecKhacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKhoiLuongCacCongViecKhac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKhoiLuongCacCongViecKhacQuery : ViewKhoiLuongCacCongViecKhacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongCacCongViecKhacQuery class.
		/// </summary>
		public ViewKhoiLuongCacCongViecKhacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongCacCongViecKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKhoiLuongCacCongViecKhacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKhoiLuongCacCongViecKhacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKhoiLuongCacCongViecKhacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKhoiLuongCacCongViecKhacQuery
		
	#region ViewKyThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewKyThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKyThiFilters : ViewKyThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKyThiFilters class.
		/// </summary>
		public ViewKyThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKyThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKyThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKyThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKyThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKyThiFilters
	
	#region ViewKyThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewKyThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewKyThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewKyThiQuery : ViewKyThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewKyThiQuery class.
		/// </summary>
		public ViewKyThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewKyThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewKyThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewKyThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewKyThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewKyThiQuery
		
	#region ViewLietKeKhoiLuongGiangDayChiTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLietKeKhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLietKeKhoiLuongGiangDayChiTietFilters : ViewLietKeKhoiLuongGiangDayChiTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		public ViewLietKeKhoiLuongGiangDayChiTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLietKeKhoiLuongGiangDayChiTietFilters
	
	#region ViewLietKeKhoiLuongGiangDayChiTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLietKeKhoiLuongGiangDayChiTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLietKeKhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLietKeKhoiLuongGiangDayChiTietQuery : ViewLietKeKhoiLuongGiangDayChiTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		public ViewLietKeKhoiLuongGiangDayChiTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLietKeKhoiLuongGiangDayChiTietQuery
		
	#region ViewLietKeKhoiLuongGiangDayChiTietUsshFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLietKeKhoiLuongGiangDayChiTietUssh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLietKeKhoiLuongGiangDayChiTietUsshFilters : ViewLietKeKhoiLuongGiangDayChiTietUsshFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshFilters class.
		/// </summary>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLietKeKhoiLuongGiangDayChiTietUsshFilters
	
	#region ViewLietKeKhoiLuongGiangDayChiTietUsshQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLietKeKhoiLuongGiangDayChiTietUsshParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLietKeKhoiLuongGiangDayChiTietUssh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLietKeKhoiLuongGiangDayChiTietUsshQuery : ViewLietKeKhoiLuongGiangDayChiTietUsshParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshQuery class.
		/// </summary>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLietKeKhoiLuongGiangDayChiTietUsshQuery
		
	#region ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters : ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters class.
		/// </summary>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtFilters
	
	#region ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery : ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery class.
		/// </summary>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLietKeKhoiLuongGiangDayChiTietUsshCdgtvtQuery
		
	#region ViewLietKeKhoiLuongGiangDayChiTiet2Filters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLietKeKhoiLuongGiangDayChiTiet2"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLietKeKhoiLuongGiangDayChiTiet2Filters : ViewLietKeKhoiLuongGiangDayChiTiet2FilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTiet2Filters class.
		/// </summary>
		public ViewLietKeKhoiLuongGiangDayChiTiet2Filters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTiet2Filters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLietKeKhoiLuongGiangDayChiTiet2Filters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTiet2Filters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLietKeKhoiLuongGiangDayChiTiet2Filters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLietKeKhoiLuongGiangDayChiTiet2Filters
	
	#region ViewLietKeKhoiLuongGiangDayChiTiet2Query
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLietKeKhoiLuongGiangDayChiTiet2ParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLietKeKhoiLuongGiangDayChiTiet2"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLietKeKhoiLuongGiangDayChiTiet2Query : ViewLietKeKhoiLuongGiangDayChiTiet2ParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTiet2Query class.
		/// </summary>
		public ViewLietKeKhoiLuongGiangDayChiTiet2Query() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTiet2Query class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLietKeKhoiLuongGiangDayChiTiet2Query(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLietKeKhoiLuongGiangDayChiTiet2Query class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLietKeKhoiLuongGiangDayChiTiet2Query(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLietKeKhoiLuongGiangDayChiTiet2Query
		
	#region ViewLoaiHinhDaoTaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLoaiHinhDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLoaiHinhDaoTaoFilters : ViewLoaiHinhDaoTaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHinhDaoTaoFilters class.
		/// </summary>
		public ViewLoaiHinhDaoTaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHinhDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLoaiHinhDaoTaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHinhDaoTaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLoaiHinhDaoTaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLoaiHinhDaoTaoFilters
	
	#region ViewLoaiHinhDaoTaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLoaiHinhDaoTaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLoaiHinhDaoTao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLoaiHinhDaoTaoQuery : ViewLoaiHinhDaoTaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHinhDaoTaoQuery class.
		/// </summary>
		public ViewLoaiHinhDaoTaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHinhDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLoaiHinhDaoTaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHinhDaoTaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLoaiHinhDaoTaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLoaiHinhDaoTaoQuery
		
	#region ViewLoaiHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLoaiHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLoaiHocPhanFilters : ViewLoaiHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHocPhanFilters class.
		/// </summary>
		public ViewLoaiHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLoaiHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLoaiHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLoaiHocPhanFilters
	
	#region ViewLoaiHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLoaiHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLoaiHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLoaiHocPhanQuery : ViewLoaiHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHocPhanQuery class.
		/// </summary>
		public ViewLoaiHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLoaiHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLoaiHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLoaiHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLoaiHocPhanQuery
		
	#region ViewLopFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopFilters : ViewLopFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopFilters class.
		/// </summary>
		public ViewLopFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopFilters
	
	#region ViewLopQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLopParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopQuery : ViewLopParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopQuery class.
		/// </summary>
		public ViewLopQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopQuery
		
	#region ViewLopChatLuongCaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLopChatLuongCao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopChatLuongCaoFilters : ViewLopChatLuongCaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopChatLuongCaoFilters class.
		/// </summary>
		public ViewLopChatLuongCaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopChatLuongCaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopChatLuongCaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopChatLuongCaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopChatLuongCaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopChatLuongCaoFilters
	
	#region ViewLopChatLuongCaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLopChatLuongCaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLopChatLuongCao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopChatLuongCaoQuery : ViewLopChatLuongCaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopChatLuongCaoQuery class.
		/// </summary>
		public ViewLopChatLuongCaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopChatLuongCaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopChatLuongCaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopChatLuongCaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopChatLuongCaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopChatLuongCaoQuery
		
	#region ViewLopHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanFilters : ViewLopHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanFilters class.
		/// </summary>
		public ViewLopHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanFilters
	
	#region ViewLopHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLopHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanQuery : ViewLopHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanQuery class.
		/// </summary>
		public ViewLopHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanQuery
		
	#region ViewLopHocPhanClcAufCjlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhanClcAufCjl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanClcAufCjlFilters : ViewLopHocPhanClcAufCjlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanClcAufCjlFilters class.
		/// </summary>
		public ViewLopHocPhanClcAufCjlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanClcAufCjlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanClcAufCjlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanClcAufCjlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanClcAufCjlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanClcAufCjlFilters
	
	#region ViewLopHocPhanClcAufCjlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLopHocPhanClcAufCjlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhanClcAufCjl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanClcAufCjlQuery : ViewLopHocPhanClcAufCjlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanClcAufCjlQuery class.
		/// </summary>
		public ViewLopHocPhanClcAufCjlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanClcAufCjlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanClcAufCjlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanClcAufCjlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanClcAufCjlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanClcAufCjlQuery
		
	#region ViewLopHocPhanChuyenNganhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhanChuyenNganh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanChuyenNganhFilters : ViewLopHocPhanChuyenNganhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanChuyenNganhFilters class.
		/// </summary>
		public ViewLopHocPhanChuyenNganhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanChuyenNganhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanChuyenNganhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanChuyenNganhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanChuyenNganhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanChuyenNganhFilters
	
	#region ViewLopHocPhanChuyenNganhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLopHocPhanChuyenNganhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhanChuyenNganh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanChuyenNganhQuery : ViewLopHocPhanChuyenNganhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanChuyenNganhQuery class.
		/// </summary>
		public ViewLopHocPhanChuyenNganhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanChuyenNganhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanChuyenNganhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanChuyenNganhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanChuyenNganhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanChuyenNganhQuery
		
	#region ViewLopHocPhanGiangBangTiengNuocNgoaiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhanGiangBangTiengNuocNgoai"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanGiangBangTiengNuocNgoaiFilters : ViewLopHocPhanGiangBangTiengNuocNgoaiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiFilters class.
		/// </summary>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanGiangBangTiengNuocNgoaiFilters
	
	#region ViewLopHocPhanGiangBangTiengNuocNgoaiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLopHocPhanGiangBangTiengNuocNgoaiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhanGiangBangTiengNuocNgoai"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanGiangBangTiengNuocNgoaiQuery : ViewLopHocPhanGiangBangTiengNuocNgoaiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiQuery class.
		/// </summary>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanGiangBangTiengNuocNgoaiQuery
		
	#region ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhanGiangBangTiengNuocNgoaiBuh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters : ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters class.
		/// </summary>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanGiangBangTiengNuocNgoaiBuhFilters
	
	#region ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewLopHocPhanGiangBangTiengNuocNgoaiBuhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewLopHocPhanGiangBangTiengNuocNgoaiBuh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery : ViewLopHocPhanGiangBangTiengNuocNgoaiBuhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery class.
		/// </summary>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewLopHocPhanGiangBangTiengNuocNgoaiBuhQuery
		
	#region ViewMonGiangMoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewMonGiangMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonGiangMoiFilters : ViewMonGiangMoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonGiangMoiFilters class.
		/// </summary>
		public ViewMonGiangMoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonGiangMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonGiangMoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonGiangMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonGiangMoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonGiangMoiFilters
	
	#region ViewMonGiangMoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewMonGiangMoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewMonGiangMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonGiangMoiQuery : ViewMonGiangMoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonGiangMoiQuery class.
		/// </summary>
		public ViewMonGiangMoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonGiangMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonGiangMoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonGiangMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonGiangMoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonGiangMoiQuery
		
	#region ViewMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonHocFilters : ViewMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonHocFilters class.
		/// </summary>
		public ViewMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonHocFilters
	
	#region ViewMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonHocQuery : ViewMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonHocQuery class.
		/// </summary>
		public ViewMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonHocQuery
		
	#region ViewMonHocKhoaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewMonHocKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonHocKhoaFilters : ViewMonHocKhoaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonHocKhoaFilters class.
		/// </summary>
		public ViewMonHocKhoaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonHocKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonHocKhoaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonHocKhoaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonHocKhoaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonHocKhoaFilters
	
	#region ViewMonHocKhoaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewMonHocKhoaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewMonHocKhoa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonHocKhoaQuery : ViewMonHocKhoaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonHocKhoaQuery class.
		/// </summary>
		public ViewMonHocKhoaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonHocKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonHocKhoaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonHocKhoaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonHocKhoaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonHocKhoaQuery
		
	#region ViewMonThucTapTotNghiepFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewMonThucTapTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonThucTapTotNghiepFilters : ViewMonThucTapTotNghiepFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonThucTapTotNghiepFilters class.
		/// </summary>
		public ViewMonThucTapTotNghiepFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonThucTapTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonThucTapTotNghiepFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonThucTapTotNghiepFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonThucTapTotNghiepFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonThucTapTotNghiepFilters
	
	#region ViewMonThucTapTotNghiepQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewMonThucTapTotNghiepParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewMonThucTapTotNghiep"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonThucTapTotNghiepQuery : ViewMonThucTapTotNghiepParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonThucTapTotNghiepQuery class.
		/// </summary>
		public ViewMonThucTapTotNghiepQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonThucTapTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonThucTapTotNghiepQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonThucTapTotNghiepQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonThucTapTotNghiepQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonThucTapTotNghiepQuery
		
	#region ViewMonTinhTheoQuyCheMoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewMonTinhTheoQuyCheMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonTinhTheoQuyCheMoiFilters : ViewMonTinhTheoQuyCheMoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		public ViewMonTinhTheoQuyCheMoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonTinhTheoQuyCheMoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonTinhTheoQuyCheMoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonTinhTheoQuyCheMoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonTinhTheoQuyCheMoiFilters
	
	#region ViewMonTinhTheoQuyCheMoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewMonTinhTheoQuyCheMoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewMonTinhTheoQuyCheMoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonTinhTheoQuyCheMoiQuery : ViewMonTinhTheoQuyCheMoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		public ViewMonTinhTheoQuyCheMoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonTinhTheoQuyCheMoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonTinhTheoQuyCheMoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonTinhTheoQuyCheMoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonTinhTheoQuyCheMoiQuery
		
	#region ViewMonXepLichChuNhatKhongTinhHeSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewMonXepLichChuNhatKhongTinhHeSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonXepLichChuNhatKhongTinhHeSoFilters : ViewMonXepLichChuNhatKhongTinhHeSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		public ViewMonXepLichChuNhatKhongTinhHeSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonXepLichChuNhatKhongTinhHeSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonXepLichChuNhatKhongTinhHeSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonXepLichChuNhatKhongTinhHeSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonXepLichChuNhatKhongTinhHeSoFilters
	
	#region ViewMonXepLichChuNhatKhongTinhHeSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewMonXepLichChuNhatKhongTinhHeSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewMonXepLichChuNhatKhongTinhHeSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewMonXepLichChuNhatKhongTinhHeSoQuery : ViewMonXepLichChuNhatKhongTinhHeSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		public ViewMonXepLichChuNhatKhongTinhHeSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewMonXepLichChuNhatKhongTinhHeSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewMonXepLichChuNhatKhongTinhHeSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewMonXepLichChuNhatKhongTinhHeSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewMonXepLichChuNhatKhongTinhHeSoQuery
		
	#region ViewNamHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewNamHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewNamHocFilters : ViewNamHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewNamHocFilters class.
		/// </summary>
		public ViewNamHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewNamHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewNamHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewNamHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewNamHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewNamHocFilters
	
	#region ViewNamHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewNamHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewNamHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewNamHocQuery : ViewNamHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewNamHocQuery class.
		/// </summary>
		public ViewNamHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewNamHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewNamHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewNamHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewNamHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewNamHocQuery
		
	#region ViewNgachLuongHrmFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewNgachLuongHrm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewNgachLuongHrmFilters : ViewNgachLuongHrmFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewNgachLuongHrmFilters class.
		/// </summary>
		public ViewNgachLuongHrmFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewNgachLuongHrmFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewNgachLuongHrmFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewNgachLuongHrmFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewNgachLuongHrmFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewNgachLuongHrmFilters
	
	#region ViewNgachLuongHrmQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewNgachLuongHrmParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewNgachLuongHrm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewNgachLuongHrmQuery : ViewNgachLuongHrmParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewNgachLuongHrmQuery class.
		/// </summary>
		public ViewNgachLuongHrmQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewNgachLuongHrmQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewNgachLuongHrmQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewNgachLuongHrmQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewNgachLuongHrmQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewNgachLuongHrmQuery
		
	#region ViewNgayTrongTuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewNgayTrongTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewNgayTrongTuanFilters : ViewNgayTrongTuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewNgayTrongTuanFilters class.
		/// </summary>
		public ViewNgayTrongTuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewNgayTrongTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewNgayTrongTuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewNgayTrongTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewNgayTrongTuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewNgayTrongTuanFilters
	
	#region ViewNgayTrongTuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewNgayTrongTuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewNgayTrongTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewNgayTrongTuanQuery : ViewNgayTrongTuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewNgayTrongTuanQuery class.
		/// </summary>
		public ViewNgayTrongTuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewNgayTrongTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewNgayTrongTuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewNgayTrongTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewNgayTrongTuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewNgayTrongTuanQuery
		
	#region ViewNhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewNhomMonHocFilters : ViewNhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewNhomMonHocFilters class.
		/// </summary>
		public ViewNhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewNhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewNhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewNhomMonHocFilters
	
	#region ViewNhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewNhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewNhomMonHocQuery : ViewNhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewNhomMonHocQuery class.
		/// </summary>
		public ViewNhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewNhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewNhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewNhomMonHocQuery
		
	#region ViewPhanCongChuyenMonFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewPhanCongChuyenMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanCongChuyenMonFilters : ViewPhanCongChuyenMonFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongChuyenMonFilters class.
		/// </summary>
		public ViewPhanCongChuyenMonFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongChuyenMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanCongChuyenMonFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongChuyenMonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanCongChuyenMonFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanCongChuyenMonFilters
	
	#region ViewPhanCongChuyenMonQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewPhanCongChuyenMonParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewPhanCongChuyenMon"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanCongChuyenMonQuery : ViewPhanCongChuyenMonParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongChuyenMonQuery class.
		/// </summary>
		public ViewPhanCongChuyenMonQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongChuyenMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanCongChuyenMonQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongChuyenMonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanCongChuyenMonQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanCongChuyenMonQuery
		
	#region ViewPhanCongCoVanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewPhanCongCoVan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanCongCoVanFilters : ViewPhanCongCoVanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongCoVanFilters class.
		/// </summary>
		public ViewPhanCongCoVanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongCoVanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanCongCoVanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongCoVanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanCongCoVanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanCongCoVanFilters
	
	#region ViewPhanCongCoVanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewPhanCongCoVanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewPhanCongCoVan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanCongCoVanQuery : ViewPhanCongCoVanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongCoVanQuery class.
		/// </summary>
		public ViewPhanCongCoVanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongCoVanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanCongCoVanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongCoVanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanCongCoVanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanCongCoVanQuery
		
	#region ViewPhanCongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewPhanCongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanCongGiangDayFilters : ViewPhanCongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongGiangDayFilters class.
		/// </summary>
		public ViewPhanCongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanCongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanCongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanCongGiangDayFilters
	
	#region ViewPhanCongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewPhanCongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewPhanCongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanCongGiangDayQuery : ViewPhanCongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongGiangDayQuery class.
		/// </summary>
		public ViewPhanCongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanCongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanCongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanCongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanCongGiangDayQuery
		
	#region ViewPhanLoaiGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewPhanLoaiGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanLoaiGiangVienFilters : ViewPhanLoaiGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanLoaiGiangVienFilters class.
		/// </summary>
		public ViewPhanLoaiGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanLoaiGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanLoaiGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanLoaiGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanLoaiGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanLoaiGiangVienFilters
	
	#region ViewPhanLoaiGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewPhanLoaiGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewPhanLoaiGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanLoaiGiangVienQuery : ViewPhanLoaiGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanLoaiGiangVienQuery class.
		/// </summary>
		public ViewPhanLoaiGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanLoaiGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanLoaiGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanLoaiGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanLoaiGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanLoaiGiangVienQuery
		
	#region ViewPhanNhomMonHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewPhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanNhomMonHocFilters : ViewPhanNhomMonHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocFilters class.
		/// </summary>
		public ViewPhanNhomMonHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanNhomMonHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanNhomMonHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanNhomMonHocFilters
	
	#region ViewPhanNhomMonHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewPhanNhomMonHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewPhanNhomMonHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanNhomMonHocQuery : ViewPhanNhomMonHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocQuery class.
		/// </summary>
		public ViewPhanNhomMonHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanNhomMonHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanNhomMonHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanNhomMonHocQuery
		
	#region ViewPhanNhomMonHocActFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewPhanNhomMonHocAct"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanNhomMonHocActFilters : ViewPhanNhomMonHocActFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocActFilters class.
		/// </summary>
		public ViewPhanNhomMonHocActFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocActFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanNhomMonHocActFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocActFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanNhomMonHocActFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanNhomMonHocActFilters
	
	#region ViewPhanNhomMonHocActQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewPhanNhomMonHocActParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewPhanNhomMonHocAct"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhanNhomMonHocActQuery : ViewPhanNhomMonHocActParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocActQuery class.
		/// </summary>
		public ViewPhanNhomMonHocActQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocActQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhanNhomMonHocActQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhanNhomMonHocActQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhanNhomMonHocActQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhanNhomMonHocActQuery
		
	#region ViewPhuCapHanhChinhFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewPhuCapHanhChinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhuCapHanhChinhFilters : ViewPhuCapHanhChinhFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhuCapHanhChinhFilters class.
		/// </summary>
		public ViewPhuCapHanhChinhFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhuCapHanhChinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhuCapHanhChinhFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhuCapHanhChinhFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhuCapHanhChinhFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhuCapHanhChinhFilters
	
	#region ViewPhuCapHanhChinhQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewPhuCapHanhChinhParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewPhuCapHanhChinh"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewPhuCapHanhChinhQuery : ViewPhuCapHanhChinhParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewPhuCapHanhChinhQuery class.
		/// </summary>
		public ViewPhuCapHanhChinhQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewPhuCapHanhChinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewPhuCapHanhChinhQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewPhuCapHanhChinhQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewPhuCapHanhChinhQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewPhuCapHanhChinhQuery
		
	#region ViewQuyDoiHoatDongNgoaiGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewQuyDoiHoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewQuyDoiHoatDongNgoaiGiangDayFilters : ViewQuyDoiHoatDongNgoaiGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewQuyDoiHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		public ViewQuyDoiHoatDongNgoaiGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewQuyDoiHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewQuyDoiHoatDongNgoaiGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewQuyDoiHoatDongNgoaiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewQuyDoiHoatDongNgoaiGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewQuyDoiHoatDongNgoaiGiangDayFilters
	
	#region ViewQuyDoiHoatDongNgoaiGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewQuyDoiHoatDongNgoaiGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewQuyDoiHoatDongNgoaiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewQuyDoiHoatDongNgoaiGiangDayQuery : ViewQuyDoiHoatDongNgoaiGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewQuyDoiHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		public ViewQuyDoiHoatDongNgoaiGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewQuyDoiHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewQuyDoiHoatDongNgoaiGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewQuyDoiHoatDongNgoaiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewQuyDoiHoatDongNgoaiGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewQuyDoiHoatDongNgoaiGiangDayQuery
		
	#region ViewQuyetDinhDoiHocHamHocViFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewQuyetDinhDoiHocHamHocVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewQuyetDinhDoiHocHamHocViFilters : ViewQuyetDinhDoiHocHamHocViFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewQuyetDinhDoiHocHamHocViFilters class.
		/// </summary>
		public ViewQuyetDinhDoiHocHamHocViFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewQuyetDinhDoiHocHamHocViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewQuyetDinhDoiHocHamHocViFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewQuyetDinhDoiHocHamHocViFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewQuyetDinhDoiHocHamHocViFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewQuyetDinhDoiHocHamHocViFilters
	
	#region ViewQuyetDinhDoiHocHamHocViQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewQuyetDinhDoiHocHamHocViParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewQuyetDinhDoiHocHamHocVi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewQuyetDinhDoiHocHamHocViQuery : ViewQuyetDinhDoiHocHamHocViParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewQuyetDinhDoiHocHamHocViQuery class.
		/// </summary>
		public ViewQuyetDinhDoiHocHamHocViQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewQuyetDinhDoiHocHamHocViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewQuyetDinhDoiHocHamHocViQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewQuyetDinhDoiHocHamHocViQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewQuyetDinhDoiHocHamHocViQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewQuyetDinhDoiHocHamHocViQuery
		
	#region ViewSdhLietKeKhoiLuongGiangDayChiTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewSdhLietKeKhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSdhLietKeKhoiLuongGiangDayChiTietFilters : ViewSdhLietKeKhoiLuongGiangDayChiTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSdhLietKeKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		public ViewSdhLietKeKhoiLuongGiangDayChiTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSdhLietKeKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSdhLietKeKhoiLuongGiangDayChiTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSdhLietKeKhoiLuongGiangDayChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSdhLietKeKhoiLuongGiangDayChiTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSdhLietKeKhoiLuongGiangDayChiTietFilters
	
	#region ViewSdhLietKeKhoiLuongGiangDayChiTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewSdhLietKeKhoiLuongGiangDayChiTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewSdhLietKeKhoiLuongGiangDayChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSdhLietKeKhoiLuongGiangDayChiTietQuery : ViewSdhLietKeKhoiLuongGiangDayChiTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSdhLietKeKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		public ViewSdhLietKeKhoiLuongGiangDayChiTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSdhLietKeKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSdhLietKeKhoiLuongGiangDayChiTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSdhLietKeKhoiLuongGiangDayChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSdhLietKeKhoiLuongGiangDayChiTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSdhLietKeKhoiLuongGiangDayChiTietQuery
		
	#region ViewSdhUteKhoiLuongQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewSdhUteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSdhUteKhoiLuongQuyDoiFilters : ViewSdhUteKhoiLuongQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSdhUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		public ViewSdhUteKhoiLuongQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSdhUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSdhUteKhoiLuongQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSdhUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSdhUteKhoiLuongQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSdhUteKhoiLuongQuyDoiFilters
	
	#region ViewSdhUteKhoiLuongQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewSdhUteKhoiLuongQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewSdhUteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSdhUteKhoiLuongQuyDoiQuery : ViewSdhUteKhoiLuongQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSdhUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		public ViewSdhUteKhoiLuongQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSdhUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSdhUteKhoiLuongQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSdhUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSdhUteKhoiLuongQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSdhUteKhoiLuongQuyDoiQuery
		
	#region ViewSinhVienHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewSinhVienHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSinhVienHocPhanFilters : ViewSinhVienHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienHocPhanFilters class.
		/// </summary>
		public ViewSinhVienHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSinhVienHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSinhVienHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSinhVienHocPhanFilters
	
	#region ViewSinhVienHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewSinhVienHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewSinhVienHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSinhVienHocPhanQuery : ViewSinhVienHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienHocPhanQuery class.
		/// </summary>
		public ViewSinhVienHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSinhVienHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSinhVienHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSinhVienHocPhanQuery
		
	#region ViewSinhVienLopFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewSinhVienLop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSinhVienLopFilters : ViewSinhVienLopFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopFilters class.
		/// </summary>
		public ViewSinhVienLopFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSinhVienLopFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSinhVienLopFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSinhVienLopFilters
	
	#region ViewSinhVienLopQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewSinhVienLopParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewSinhVienLop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSinhVienLopQuery : ViewSinhVienLopParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopQuery class.
		/// </summary>
		public ViewSinhVienLopQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSinhVienLopQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSinhVienLopQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSinhVienLopQuery
		
	#region ViewSinhVienLopHocPhanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewSinhVienLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSinhVienLopHocPhanFilters : ViewSinhVienLopHocPhanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanFilters class.
		/// </summary>
		public ViewSinhVienLopHocPhanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSinhVienLopHocPhanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSinhVienLopHocPhanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSinhVienLopHocPhanFilters
	
	#region ViewSinhVienLopHocPhanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewSinhVienLopHocPhanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewSinhVienLopHocPhan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSinhVienLopHocPhanQuery : ViewSinhVienLopHocPhanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanQuery class.
		/// </summary>
		public ViewSinhVienLopHocPhanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSinhVienLopHocPhanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSinhVienLopHocPhanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSinhVienLopHocPhanQuery
		
	#region ViewSinhVienLopHocPhanSgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewSinhVienLopHocPhanSg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSinhVienLopHocPhanSgFilters : ViewSinhVienLopHocPhanSgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanSgFilters class.
		/// </summary>
		public ViewSinhVienLopHocPhanSgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanSgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSinhVienLopHocPhanSgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanSgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSinhVienLopHocPhanSgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSinhVienLopHocPhanSgFilters
	
	#region ViewSinhVienLopHocPhanSgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewSinhVienLopHocPhanSgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewSinhVienLopHocPhanSg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSinhVienLopHocPhanSgQuery : ViewSinhVienLopHocPhanSgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanSgQuery class.
		/// </summary>
		public ViewSinhVienLopHocPhanSgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanSgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSinhVienLopHocPhanSgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSinhVienLopHocPhanSgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSinhVienLopHocPhanSgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSinhVienLopHocPhanSgQuery
		
	#region ViewSoTietCoiThiTieuChuanCuaGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewSoTietCoiThiTieuChuanCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSoTietCoiThiTieuChuanCuaGiangVienFilters : ViewSoTietCoiThiTieuChuanCuaGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSoTietCoiThiTieuChuanCuaGiangVienFilters class.
		/// </summary>
		public ViewSoTietCoiThiTieuChuanCuaGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSoTietCoiThiTieuChuanCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSoTietCoiThiTieuChuanCuaGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSoTietCoiThiTieuChuanCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSoTietCoiThiTieuChuanCuaGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSoTietCoiThiTieuChuanCuaGiangVienFilters
	
	#region ViewSoTietCoiThiTieuChuanCuaGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewSoTietCoiThiTieuChuanCuaGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewSoTietCoiThiTieuChuanCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewSoTietCoiThiTieuChuanCuaGiangVienQuery : ViewSoTietCoiThiTieuChuanCuaGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewSoTietCoiThiTieuChuanCuaGiangVienQuery class.
		/// </summary>
		public ViewSoTietCoiThiTieuChuanCuaGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewSoTietCoiThiTieuChuanCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewSoTietCoiThiTieuChuanCuaGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewSoTietCoiThiTieuChuanCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewSoTietCoiThiTieuChuanCuaGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewSoTietCoiThiTieuChuanCuaGiangVienQuery
		
	#region ViewThamDinhLuanVanThacSyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThamDinhLuanVanThacSy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThamDinhLuanVanThacSyFilters : ViewThamDinhLuanVanThacSyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThamDinhLuanVanThacSyFilters class.
		/// </summary>
		public ViewThamDinhLuanVanThacSyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThamDinhLuanVanThacSyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThamDinhLuanVanThacSyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThamDinhLuanVanThacSyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThamDinhLuanVanThacSyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThamDinhLuanVanThacSyFilters
	
	#region ViewThamDinhLuanVanThacSyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThamDinhLuanVanThacSyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThamDinhLuanVanThacSy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThamDinhLuanVanThacSyQuery : ViewThamDinhLuanVanThacSyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThamDinhLuanVanThacSyQuery class.
		/// </summary>
		public ViewThamDinhLuanVanThacSyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThamDinhLuanVanThacSyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThamDinhLuanVanThacSyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThamDinhLuanVanThacSyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThamDinhLuanVanThacSyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThamDinhLuanVanThacSyQuery
		
	#region ViewThanhToanGioDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThanhToanGioDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhToanGioDayFilters : ViewThanhToanGioDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanGioDayFilters class.
		/// </summary>
		public ViewThanhToanGioDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanGioDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhToanGioDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanGioDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhToanGioDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhToanGioDayFilters
	
	#region ViewThanhToanGioDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThanhToanGioDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThanhToanGioDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhToanGioDayQuery : ViewThanhToanGioDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanGioDayQuery class.
		/// </summary>
		public ViewThanhToanGioDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanGioDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhToanGioDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanGioDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhToanGioDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhToanGioDayQuery
		
	#region ViewThanhToanThuLaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhToanThuLaoFilters : ViewThanhToanThuLaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanThuLaoFilters class.
		/// </summary>
		public ViewThanhToanThuLaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhToanThuLaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanThuLaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhToanThuLaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhToanThuLaoFilters
	
	#region ViewThanhToanThuLaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThanhToanThuLaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThanhToanThuLao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhToanThuLaoQuery : ViewThanhToanThuLaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanThuLaoQuery class.
		/// </summary>
		public ViewThanhToanThuLaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhToanThuLaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanThuLaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhToanThuLaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhToanThuLaoQuery
		
	#region ViewThanhToanTienGiangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThanhToanTienGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhToanTienGiangFilters : ViewThanhToanTienGiangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanTienGiangFilters class.
		/// </summary>
		public ViewThanhToanTienGiangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanTienGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhToanTienGiangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanTienGiangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhToanTienGiangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhToanTienGiangFilters
	
	#region ViewThanhToanTienGiangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThanhToanTienGiangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThanhToanTienGiang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhToanTienGiangQuery : ViewThanhToanTienGiangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanTienGiangQuery class.
		/// </summary>
		public ViewThanhToanTienGiangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanTienGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhToanTienGiangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhToanTienGiangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhToanTienGiangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhToanTienGiangQuery
		
	#region ViewThanhTraChamGiangTheoKhoaHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThanhTraChamGiangTheoKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhTraChamGiangTheoKhoaHocFilters : ViewThanhTraChamGiangTheoKhoaHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraChamGiangTheoKhoaHocFilters class.
		/// </summary>
		public ViewThanhTraChamGiangTheoKhoaHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraChamGiangTheoKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhTraChamGiangTheoKhoaHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraChamGiangTheoKhoaHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhTraChamGiangTheoKhoaHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhTraChamGiangTheoKhoaHocFilters
	
	#region ViewThanhTraChamGiangTheoKhoaHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThanhTraChamGiangTheoKhoaHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThanhTraChamGiangTheoKhoaHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhTraChamGiangTheoKhoaHocQuery : ViewThanhTraChamGiangTheoKhoaHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraChamGiangTheoKhoaHocQuery class.
		/// </summary>
		public ViewThanhTraChamGiangTheoKhoaHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraChamGiangTheoKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhTraChamGiangTheoKhoaHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraChamGiangTheoKhoaHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhTraChamGiangTheoKhoaHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhTraChamGiangTheoKhoaHocQuery
		
	#region ViewThanhTraCoiThiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThanhTraCoiThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhTraCoiThiFilters : ViewThanhTraCoiThiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraCoiThiFilters class.
		/// </summary>
		public ViewThanhTraCoiThiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraCoiThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhTraCoiThiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraCoiThiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhTraCoiThiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhTraCoiThiFilters
	
	#region ViewThanhTraCoiThiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThanhTraCoiThiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThanhTraCoiThi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhTraCoiThiQuery : ViewThanhTraCoiThiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraCoiThiQuery class.
		/// </summary>
		public ViewThanhTraCoiThiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraCoiThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhTraCoiThiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraCoiThiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhTraCoiThiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhTraCoiThiQuery
		
	#region ViewThanhTraGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThanhTraGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhTraGiangDayFilters : ViewThanhTraGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraGiangDayFilters class.
		/// </summary>
		public ViewThanhTraGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhTraGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhTraGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhTraGiangDayFilters
	
	#region ViewThanhTraGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThanhTraGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThanhTraGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhTraGiangDayQuery : ViewThanhTraGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraGiangDayQuery class.
		/// </summary>
		public ViewThanhTraGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhTraGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhTraGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhTraGiangDayQuery
		
	#region ViewThanhTraTheoThoiKhoaBieuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThanhTraTheoThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhTraTheoThoiKhoaBieuFilters : ViewThanhTraTheoThoiKhoaBieuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraTheoThoiKhoaBieuFilters class.
		/// </summary>
		public ViewThanhTraTheoThoiKhoaBieuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraTheoThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhTraTheoThoiKhoaBieuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraTheoThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhTraTheoThoiKhoaBieuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhTraTheoThoiKhoaBieuFilters
	
	#region ViewThanhTraTheoThoiKhoaBieuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThanhTraTheoThoiKhoaBieuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThanhTraTheoThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThanhTraTheoThoiKhoaBieuQuery : ViewThanhTraTheoThoiKhoaBieuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraTheoThoiKhoaBieuQuery class.
		/// </summary>
		public ViewThanhTraTheoThoiKhoaBieuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraTheoThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThanhTraTheoThoiKhoaBieuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThanhTraTheoThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThanhTraTheoThoiKhoaBieuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThanhTraTheoThoiKhoaBieuQuery
		
	#region ViewTheoDoiGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTheoDoiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTheoDoiGiangDayFilters : ViewTheoDoiGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTheoDoiGiangDayFilters class.
		/// </summary>
		public ViewTheoDoiGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTheoDoiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTheoDoiGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTheoDoiGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTheoDoiGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTheoDoiGiangDayFilters
	
	#region ViewTheoDoiGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTheoDoiGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTheoDoiGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTheoDoiGiangDayQuery : ViewTheoDoiGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTheoDoiGiangDayQuery class.
		/// </summary>
		public ViewTheoDoiGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTheoDoiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTheoDoiGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTheoDoiGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTheoDoiGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTheoDoiGiangDayQuery
		
	#region ViewThoiGianLamViecCuaNhanVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThoiGianLamViecCuaNhanVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThoiGianLamViecCuaNhanVienFilters : ViewThoiGianLamViecCuaNhanVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianLamViecCuaNhanVienFilters class.
		/// </summary>
		public ViewThoiGianLamViecCuaNhanVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianLamViecCuaNhanVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThoiGianLamViecCuaNhanVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianLamViecCuaNhanVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThoiGianLamViecCuaNhanVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThoiGianLamViecCuaNhanVienFilters
	
	#region ViewThoiGianLamViecCuaNhanVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThoiGianLamViecCuaNhanVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThoiGianLamViecCuaNhanVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThoiGianLamViecCuaNhanVienQuery : ViewThoiGianLamViecCuaNhanVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianLamViecCuaNhanVienQuery class.
		/// </summary>
		public ViewThoiGianLamViecCuaNhanVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianLamViecCuaNhanVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThoiGianLamViecCuaNhanVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianLamViecCuaNhanVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThoiGianLamViecCuaNhanVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThoiGianLamViecCuaNhanVienQuery
		
	#region ViewThoiGianNghiTamThoiCuaGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThoiGianNghiTamThoiCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThoiGianNghiTamThoiCuaGiangVienFilters : ViewThoiGianNghiTamThoiCuaGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianNghiTamThoiCuaGiangVienFilters class.
		/// </summary>
		public ViewThoiGianNghiTamThoiCuaGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianNghiTamThoiCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThoiGianNghiTamThoiCuaGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianNghiTamThoiCuaGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThoiGianNghiTamThoiCuaGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThoiGianNghiTamThoiCuaGiangVienFilters
	
	#region ViewThoiGianNghiTamThoiCuaGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThoiGianNghiTamThoiCuaGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThoiGianNghiTamThoiCuaGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThoiGianNghiTamThoiCuaGiangVienQuery : ViewThoiGianNghiTamThoiCuaGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianNghiTamThoiCuaGiangVienQuery class.
		/// </summary>
		public ViewThoiGianNghiTamThoiCuaGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianNghiTamThoiCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThoiGianNghiTamThoiCuaGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiGianNghiTamThoiCuaGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThoiGianNghiTamThoiCuaGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThoiGianNghiTamThoiCuaGiangVienQuery
		
	#region ViewThoiKhoaBieuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThoiKhoaBieuFilters : ViewThoiKhoaBieuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThoiKhoaBieuFilters class.
		/// </summary>
		public ViewThoiKhoaBieuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThoiKhoaBieuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiKhoaBieuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThoiKhoaBieuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThoiKhoaBieuFilters
	
	#region ViewThoiKhoaBieuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThoiKhoaBieuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThoiKhoaBieu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThoiKhoaBieuQuery : ViewThoiKhoaBieuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThoiKhoaBieuQuery class.
		/// </summary>
		public ViewThoiKhoaBieuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThoiKhoaBieuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThoiKhoaBieuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThoiKhoaBieuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThoiKhoaBieuQuery
		
	#region ViewThongKeChucVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThongKeChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongKeChucVuFilters : ViewThongKeChucVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongKeChucVuFilters class.
		/// </summary>
		public ViewThongKeChucVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongKeChucVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeChucVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongKeChucVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongKeChucVuFilters
	
	#region ViewThongKeChucVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThongKeChucVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThongKeChucVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongKeChucVuQuery : ViewThongKeChucVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongKeChucVuQuery class.
		/// </summary>
		public ViewThongKeChucVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongKeChucVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeChucVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongKeChucVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongKeChucVuQuery
		
	#region ViewThongKeHoSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThongKeHoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongKeHoSoFilters : ViewThongKeHoSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoFilters class.
		/// </summary>
		public ViewThongKeHoSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongKeHoSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongKeHoSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongKeHoSoFilters
	
	#region ViewThongKeHoSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThongKeHoSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThongKeHoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongKeHoSoQuery : ViewThongKeHoSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoQuery class.
		/// </summary>
		public ViewThongKeHoSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongKeHoSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongKeHoSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongKeHoSoQuery
		
	#region ViewThongKeHoSoChiTietFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThongKeHoSoChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongKeHoSoChiTietFilters : ViewThongKeHoSoChiTietFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoChiTietFilters class.
		/// </summary>
		public ViewThongKeHoSoChiTietFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongKeHoSoChiTietFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoChiTietFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongKeHoSoChiTietFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongKeHoSoChiTietFilters
	
	#region ViewThongKeHoSoChiTietQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThongKeHoSoChiTietParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThongKeHoSoChiTiet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongKeHoSoChiTietQuery : ViewThongKeHoSoChiTietParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoChiTietQuery class.
		/// </summary>
		public ViewThongKeHoSoChiTietQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongKeHoSoChiTietQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongKeHoSoChiTietQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongKeHoSoChiTietQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongKeHoSoChiTietQuery
		
	#region ViewThongTinChiTietGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThongTinChiTietGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongTinChiTietGiangVienFilters : ViewThongTinChiTietGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienFilters class.
		/// </summary>
		public ViewThongTinChiTietGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongTinChiTietGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongTinChiTietGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongTinChiTietGiangVienFilters
	
	#region ViewThongTinChiTietGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThongTinChiTietGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThongTinChiTietGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongTinChiTietGiangVienQuery : ViewThongTinChiTietGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienQuery class.
		/// </summary>
		public ViewThongTinChiTietGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongTinChiTietGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongTinChiTietGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongTinChiTietGiangVienQuery
		
	#region ViewThongTinChiTietGiangVienChoDuyetHoSoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThongTinChiTietGiangVienChoDuyetHoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongTinChiTietGiangVienChoDuyetHoSoFilters : ViewThongTinChiTietGiangVienChoDuyetHoSoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienChoDuyetHoSoFilters class.
		/// </summary>
		public ViewThongTinChiTietGiangVienChoDuyetHoSoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienChoDuyetHoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongTinChiTietGiangVienChoDuyetHoSoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienChoDuyetHoSoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongTinChiTietGiangVienChoDuyetHoSoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongTinChiTietGiangVienChoDuyetHoSoFilters
	
	#region ViewThongTinChiTietGiangVienChoDuyetHoSoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThongTinChiTietGiangVienChoDuyetHoSoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThongTinChiTietGiangVienChoDuyetHoSo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongTinChiTietGiangVienChoDuyetHoSoQuery : ViewThongTinChiTietGiangVienChoDuyetHoSoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienChoDuyetHoSoQuery class.
		/// </summary>
		public ViewThongTinChiTietGiangVienChoDuyetHoSoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienChoDuyetHoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongTinChiTietGiangVienChoDuyetHoSoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinChiTietGiangVienChoDuyetHoSoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongTinChiTietGiangVienChoDuyetHoSoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongTinChiTietGiangVienChoDuyetHoSoQuery
		
	#region ViewThongTinGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThongTinGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongTinGiangVienFilters : ViewThongTinGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongTinGiangVienFilters class.
		/// </summary>
		public ViewThongTinGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongTinGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongTinGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongTinGiangVienFilters
	
	#region ViewThongTinGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThongTinGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThongTinGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongTinGiangVienQuery : ViewThongTinGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongTinGiangVienQuery class.
		/// </summary>
		public ViewThongTinGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongTinGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongTinGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongTinGiangVienQuery
		
	#region ViewThongTinLopHocPhanHeSoCongViecFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewThongTinLopHocPhanHeSoCongViec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongTinLopHocPhanHeSoCongViecFilters : ViewThongTinLopHocPhanHeSoCongViecFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongTinLopHocPhanHeSoCongViecFilters class.
		/// </summary>
		public ViewThongTinLopHocPhanHeSoCongViecFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinLopHocPhanHeSoCongViecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongTinLopHocPhanHeSoCongViecFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinLopHocPhanHeSoCongViecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongTinLopHocPhanHeSoCongViecFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongTinLopHocPhanHeSoCongViecFilters
	
	#region ViewThongTinLopHocPhanHeSoCongViecQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewThongTinLopHocPhanHeSoCongViecParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewThongTinLopHocPhanHeSoCongViec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewThongTinLopHocPhanHeSoCongViecQuery : ViewThongTinLopHocPhanHeSoCongViecParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewThongTinLopHocPhanHeSoCongViecQuery class.
		/// </summary>
		public ViewThongTinLopHocPhanHeSoCongViecQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinLopHocPhanHeSoCongViecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewThongTinLopHocPhanHeSoCongViecQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewThongTinLopHocPhanHeSoCongViecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewThongTinLopHocPhanHeSoCongViecQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewThongTinLopHocPhanHeSoCongViecQuery
		
	#region ViewTietGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTietGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTietGiangDayFilters : ViewTietGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTietGiangDayFilters class.
		/// </summary>
		public ViewTietGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTietGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTietGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTietGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTietGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTietGiangDayFilters
	
	#region ViewTietGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTietGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTietGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTietGiangDayQuery : ViewTietGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTietGiangDayQuery class.
		/// </summary>
		public ViewTietGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTietGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTietGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTietGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTietGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTietGiangDayQuery
		
	#region ViewTietNghiaVuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTietNghiaVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTietNghiaVuFilters : ViewTietNghiaVuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuFilters class.
		/// </summary>
		public ViewTietNghiaVuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTietNghiaVuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTietNghiaVuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTietNghiaVuFilters
	
	#region ViewTietNghiaVuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTietNghiaVuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTietNghiaVu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTietNghiaVuQuery : ViewTietNghiaVuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuQuery class.
		/// </summary>
		public ViewTietNghiaVuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTietNghiaVuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTietNghiaVuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTietNghiaVuQuery
		
	#region ViewTietNghiaVuTheoNamHocHocKyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTietNghiaVuTheoNamHocHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTietNghiaVuTheoNamHocHocKyFilters : ViewTietNghiaVuTheoNamHocHocKyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuTheoNamHocHocKyFilters class.
		/// </summary>
		public ViewTietNghiaVuTheoNamHocHocKyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuTheoNamHocHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTietNghiaVuTheoNamHocHocKyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuTheoNamHocHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTietNghiaVuTheoNamHocHocKyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTietNghiaVuTheoNamHocHocKyFilters
	
	#region ViewTietNghiaVuTheoNamHocHocKyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTietNghiaVuTheoNamHocHocKyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTietNghiaVuTheoNamHocHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTietNghiaVuTheoNamHocHocKyQuery : ViewTietNghiaVuTheoNamHocHocKyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuTheoNamHocHocKyQuery class.
		/// </summary>
		public ViewTietNghiaVuTheoNamHocHocKyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuTheoNamHocHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTietNghiaVuTheoNamHocHocKyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNghiaVuTheoNamHocHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTietNghiaVuTheoNamHocHocKyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTietNghiaVuTheoNamHocHocKyQuery
		
	#region ViewTietNoKyTruocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTietNoKyTruoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTietNoKyTruocFilters : ViewTietNoKyTruocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTietNoKyTruocFilters class.
		/// </summary>
		public ViewTietNoKyTruocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNoKyTruocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTietNoKyTruocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNoKyTruocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTietNoKyTruocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTietNoKyTruocFilters
	
	#region ViewTietNoKyTruocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTietNoKyTruocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTietNoKyTruoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTietNoKyTruocQuery : ViewTietNoKyTruocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTietNoKyTruocQuery class.
		/// </summary>
		public ViewTietNoKyTruocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNoKyTruocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTietNoKyTruocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTietNoKyTruocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTietNoKyTruocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTietNoKyTruocQuery
		
	#region ViewTinhKhoiLuongFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTinhKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTinhKhoiLuongFilters : ViewTinhKhoiLuongFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongFilters class.
		/// </summary>
		public ViewTinhKhoiLuongFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTinhKhoiLuongFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTinhKhoiLuongFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTinhKhoiLuongFilters
	
	#region ViewTinhKhoiLuongQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTinhKhoiLuongParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTinhKhoiLuong"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTinhKhoiLuongQuery : ViewTinhKhoiLuongParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongQuery class.
		/// </summary>
		public ViewTinhKhoiLuongQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTinhKhoiLuongQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTinhKhoiLuongQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTinhKhoiLuongQuery
		
	#region ViewTinhKhoiLuongTungTuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTinhKhoiLuongTungTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTinhKhoiLuongTungTuanFilters : ViewTinhKhoiLuongTungTuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongTungTuanFilters class.
		/// </summary>
		public ViewTinhKhoiLuongTungTuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongTungTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTinhKhoiLuongTungTuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongTungTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTinhKhoiLuongTungTuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTinhKhoiLuongTungTuanFilters
	
	#region ViewTinhKhoiLuongTungTuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTinhKhoiLuongTungTuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTinhKhoiLuongTungTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTinhKhoiLuongTungTuanQuery : ViewTinhKhoiLuongTungTuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongTungTuanQuery class.
		/// </summary>
		public ViewTinhKhoiLuongTungTuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongTungTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTinhKhoiLuongTungTuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTinhKhoiLuongTungTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTinhKhoiLuongTungTuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTinhKhoiLuongTungTuanQuery
		
	#region ViewTongHopChiTienCoVanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTongHopChiTienCoVan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTongHopChiTienCoVanFilters : ViewTongHopChiTienCoVanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTongHopChiTienCoVanFilters class.
		/// </summary>
		public ViewTongHopChiTienCoVanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopChiTienCoVanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTongHopChiTienCoVanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopChiTienCoVanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTongHopChiTienCoVanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTongHopChiTienCoVanFilters
	
	#region ViewTongHopChiTienCoVanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTongHopChiTienCoVanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTongHopChiTienCoVan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTongHopChiTienCoVanQuery : ViewTongHopChiTienCoVanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTongHopChiTienCoVanQuery class.
		/// </summary>
		public ViewTongHopChiTienCoVanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopChiTienCoVanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTongHopChiTienCoVanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopChiTienCoVanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTongHopChiTienCoVanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTongHopChiTienCoVanQuery
		
	#region ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters : ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters class.
		/// </summary>
		public ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyFilters
	
	#region ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery : ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery class.
		/// </summary>
		public ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTonghopGiodayHeDaoTaoLoaiGiangVienNamHocHocKyQuery
		
	#region ViewTongHopQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTongHopQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTongHopQuyDoiFilters : ViewTongHopQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTongHopQuyDoiFilters class.
		/// </summary>
		public ViewTongHopQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTongHopQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTongHopQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTongHopQuyDoiFilters
	
	#region ViewTongHopQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTongHopQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTongHopQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTongHopQuyDoiQuery : ViewTongHopQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTongHopQuyDoiQuery class.
		/// </summary>
		public ViewTongHopQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTongHopQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTongHopQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTongHopQuyDoiQuery
		
	#region ViewTongHopGioDayGiangVienFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTongHopGioDayGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTongHopGioDayGiangVienFilters : ViewTongHopGioDayGiangVienFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTongHopGioDayGiangVienFilters class.
		/// </summary>
		public ViewTongHopGioDayGiangVienFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopGioDayGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTongHopGioDayGiangVienFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopGioDayGiangVienFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTongHopGioDayGiangVienFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTongHopGioDayGiangVienFilters
	
	#region ViewTongHopGioDayGiangVienQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTongHopGioDayGiangVienParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTongHopGioDayGiangVien"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTongHopGioDayGiangVienQuery : ViewTongHopGioDayGiangVienParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTongHopGioDayGiangVienQuery class.
		/// </summary>
		public ViewTongHopGioDayGiangVienQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopGioDayGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTongHopGioDayGiangVienQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTongHopGioDayGiangVienQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTongHopGioDayGiangVienQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTongHopGioDayGiangVienQuery
		
	#region ViewTonGiaoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewTonGiao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTonGiaoFilters : ViewTonGiaoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTonGiaoFilters class.
		/// </summary>
		public ViewTonGiaoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTonGiaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTonGiaoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTonGiaoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTonGiaoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTonGiaoFilters
	
	#region ViewTonGiaoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewTonGiaoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewTonGiao"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewTonGiaoQuery : ViewTonGiaoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewTonGiaoQuery class.
		/// </summary>
		public ViewTonGiaoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewTonGiaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewTonGiaoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewTonGiaoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewTonGiaoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewTonGiaoQuery
		
	#region ViewUteKhoiLuongGiangDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewUteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewUteKhoiLuongGiangDayFilters : ViewUteKhoiLuongGiangDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongGiangDayFilters class.
		/// </summary>
		public ViewUteKhoiLuongGiangDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewUteKhoiLuongGiangDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongGiangDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewUteKhoiLuongGiangDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewUteKhoiLuongGiangDayFilters
	
	#region ViewUteKhoiLuongGiangDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewUteKhoiLuongGiangDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewUteKhoiLuongGiangDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewUteKhoiLuongGiangDayQuery : ViewUteKhoiLuongGiangDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongGiangDayQuery class.
		/// </summary>
		public ViewUteKhoiLuongGiangDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewUteKhoiLuongGiangDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongGiangDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewUteKhoiLuongGiangDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewUteKhoiLuongGiangDayQuery
		
	#region ViewUteKhoiLuongQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewUteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewUteKhoiLuongQuyDoiFilters : ViewUteKhoiLuongQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		public ViewUteKhoiLuongQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewUteKhoiLuongQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewUteKhoiLuongQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewUteKhoiLuongQuyDoiFilters
	
	#region ViewUteKhoiLuongQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewUteKhoiLuongQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewUteKhoiLuongQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewUteKhoiLuongQuyDoiQuery : ViewUteKhoiLuongQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		public ViewUteKhoiLuongQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewUteKhoiLuongQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewUteKhoiLuongQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewUteKhoiLuongQuyDoiQuery
		
	#region ViewUteKhoiLuongQuyDoi2Filters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewUteKhoiLuongQuyDoi2"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewUteKhoiLuongQuyDoi2Filters : ViewUteKhoiLuongQuyDoi2FilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoi2Filters class.
		/// </summary>
		public ViewUteKhoiLuongQuyDoi2Filters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoi2Filters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewUteKhoiLuongQuyDoi2Filters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoi2Filters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewUteKhoiLuongQuyDoi2Filters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewUteKhoiLuongQuyDoi2Filters
	
	#region ViewUteKhoiLuongQuyDoi2Query
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewUteKhoiLuongQuyDoi2ParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewUteKhoiLuongQuyDoi2"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewUteKhoiLuongQuyDoi2Query : ViewUteKhoiLuongQuyDoi2ParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoi2Query class.
		/// </summary>
		public ViewUteKhoiLuongQuyDoi2Query() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoi2Query class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewUteKhoiLuongQuyDoi2Query(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewUteKhoiLuongQuyDoi2Query class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewUteKhoiLuongQuyDoi2Query(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewUteKhoiLuongQuyDoi2Query
		
	#region ViewXetDuyetDeCuongLuanVanCaoHocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewXetDuyetDeCuongLuanVanCaoHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewXetDuyetDeCuongLuanVanCaoHocFilters : ViewXetDuyetDeCuongLuanVanCaoHocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewXetDuyetDeCuongLuanVanCaoHocFilters class.
		/// </summary>
		public ViewXetDuyetDeCuongLuanVanCaoHocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewXetDuyetDeCuongLuanVanCaoHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewXetDuyetDeCuongLuanVanCaoHocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewXetDuyetDeCuongLuanVanCaoHocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewXetDuyetDeCuongLuanVanCaoHocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewXetDuyetDeCuongLuanVanCaoHocFilters
	
	#region ViewXetDuyetDeCuongLuanVanCaoHocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewXetDuyetDeCuongLuanVanCaoHocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewXetDuyetDeCuongLuanVanCaoHoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewXetDuyetDeCuongLuanVanCaoHocQuery : ViewXetDuyetDeCuongLuanVanCaoHocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewXetDuyetDeCuongLuanVanCaoHocQuery class.
		/// </summary>
		public ViewXetDuyetDeCuongLuanVanCaoHocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewXetDuyetDeCuongLuanVanCaoHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewXetDuyetDeCuongLuanVanCaoHocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewXetDuyetDeCuongLuanVanCaoHocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewXetDuyetDeCuongLuanVanCaoHocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewXetDuyetDeCuongLuanVanCaoHocQuery
		
	#region ViewXuLyQuyDoiFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewXuLyQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewXuLyQuyDoiFilters : ViewXuLyQuyDoiFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiFilters class.
		/// </summary>
		public ViewXuLyQuyDoiFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewXuLyQuyDoiFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewXuLyQuyDoiFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewXuLyQuyDoiFilters
	
	#region ViewXuLyQuyDoiQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewXuLyQuyDoiParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewXuLyQuyDoi"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewXuLyQuyDoiQuery : ViewXuLyQuyDoiParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiQuery class.
		/// </summary>
		public ViewXuLyQuyDoiQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewXuLyQuyDoiQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewXuLyQuyDoiQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewXuLyQuyDoiQuery
		
	#region ViewXuLyQuyDoiTungTuanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ViewXuLyQuyDoiTungTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewXuLyQuyDoiTungTuanFilters : ViewXuLyQuyDoiTungTuanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiTungTuanFilters class.
		/// </summary>
		public ViewXuLyQuyDoiTungTuanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiTungTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewXuLyQuyDoiTungTuanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiTungTuanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewXuLyQuyDoiTungTuanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewXuLyQuyDoiTungTuanFilters
	
	#region ViewXuLyQuyDoiTungTuanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ViewXuLyQuyDoiTungTuanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ViewXuLyQuyDoiTungTuan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ViewXuLyQuyDoiTungTuanQuery : ViewXuLyQuyDoiTungTuanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiTungTuanQuery class.
		/// </summary>
		public ViewXuLyQuyDoiTungTuanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiTungTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ViewXuLyQuyDoiTungTuanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ViewXuLyQuyDoiTungTuanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ViewXuLyQuyDoiTungTuanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ViewXuLyQuyDoiTungTuanQuery
	#endregion

	
}
